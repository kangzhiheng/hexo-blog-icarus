{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/gallery/1.jpg","path":"gallery/1.jpg","modified":1,"renderable":0},{"_id":"source/gallery/2.jpg","path":"gallery/2.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-amazing/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/DPlayer.min.css","path":"css/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/helper.styl","path":"css/helper.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/meplayer.min.css","path":"css/meplayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/adoredee.png","path":"img/adoredee.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/about-me.js","path":"js/about-me.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/comment-issue-data.js","path":"js/comment-issue-data.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/friend.js","path":"js/friend.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/globalUtils.js","path":"js/globalUtils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/meplayer.js","path":"js/meplayer.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/music.js","path":"js/music.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/poems.js","path":"js/poems.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/statistics.js","path":"js/statistics.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/theme-setting.js","path":"js/theme-setting.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/yule.js","path":"js/yule.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/yulu.js","path":"js/yulu.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/friend.json","path":"json_data/friend.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/music.json","path":"json_data/music.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/poems.json","path":"json_data/poems.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/record.json","path":"json_data/record.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/video.json","path":"json_data/video.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/yule.json","path":"json_data/yule.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/json_data/yulu.json","path":"json_data/yulu.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/autoload.js","path":"live2d/autoload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.eot","path":"live2d/flat-ui-icons-regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.svg","path":"live2d/flat-ui-icons-regular.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.ttf","path":"live2d/flat-ui-icons-regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.woff","path":"live2d/flat-ui-icons-regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/waifu-tips.js","path":"live2d/waifu-tips.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/waifu-tips.json","path":"live2d/waifu-tips.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/waifu.css","path":"live2d/waifu.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/DPlayer.min.js","path":"js/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.eot","path":"css/fonts/fontello.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.ttf","path":"css/fonts/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.svg","path":"css/fonts/fontello.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.woff","path":"css/fonts/fontello.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/links/fangfang.png","path":"img/links/fangfang.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/links/fghrsh.png","path":"img/links/fghrsh.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/links/nopic.jpg","path":"img/links/nopic.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/gitalk_self.min.js","path":"js/gitalk_self.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/links/xsy.jpg","path":"img/links/xsy.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/live2d/live2d.js","path":"live2d/live2d.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/img/xiaoli.png","path":"img/xiaoli.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-amazing/source/js/echarts.min.js","path":"js/echarts.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-amazing/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1585461758339},{"_id":"themes/hexo-theme-amazing/.eslintrc.json","hash":"f3727780a19e886b1026e346070c9afee71625a5","modified":1585461758340},{"_id":"themes/hexo-theme-amazing/.gitignore","hash":"67535dbae7c342201872a8b2293a85c60668df81","modified":1585461758341},{"_id":"themes/hexo-theme-amazing/LICENSE","hash":"62e3701684087bc9a66f0b20386036ede9b430b7","modified":1585461758342},{"_id":"themes/hexo-theme-amazing/README.md","hash":"b75501d185c26f75a5ef8c8f043e683d4ae6357f","modified":1585461758343},{"_id":"themes/hexo-theme-amazing/_config.yml","hash":"493f4de8db2ac2aed1cdb85046e9a8b4720f309e","modified":1585466267344},{"_id":"themes/hexo-theme-amazing/package.json","hash":"55cdfec7d0c9c61acf0d7eeaef92e5ec8d1404b9","modified":1585461758436},{"_id":"source/CNAME","hash":"e18959b203f6fa4531de418756790fbcf22044b5","modified":1543328992768},{"_id":"themes/hexo-theme-amazing/.github/ISSUE_TEMPLATE.md","hash":"e50411021e3c85860fc4b96f446267ba9871dcde","modified":1585461758341},{"_id":"themes/hexo-theme-amazing/include/config.js","hash":"c05acaeab46cb1fcf37efd5d77d6d56a6337bf95","modified":1585461758352},{"_id":"themes/hexo-theme-amazing/include/dependency.js","hash":"239871703ff1d23cd59aa9213c5fa0a0ed2706c0","modified":1585461758352},{"_id":"themes/hexo-theme-amazing/include/register.js","hash":"027947468e2526a81124a5916dc20b1036a98c3f","modified":1585461758357},{"_id":"themes/hexo-theme-amazing/languages/de.yml","hash":"ef43979c403b3a221585d5dd0b7205627437818e","modified":1585461758389},{"_id":"themes/hexo-theme-amazing/languages/en.yml","hash":"a010833c2c605fddb565bc5da4280b61fc7d77cc","modified":1585461758390},{"_id":"themes/hexo-theme-amazing/languages/es.yml","hash":"f0ea2c482a8bc5ed43452ecc7ebe601504e0cc54","modified":1585461758390},{"_id":"themes/hexo-theme-amazing/languages/fr.yml","hash":"b85a2d4fcc790a8b84326235850eb54532f6b75e","modified":1585461758391},{"_id":"themes/hexo-theme-amazing/languages/id.yml","hash":"ee655e6a045eb28ea480a348bbefd10ef115494b","modified":1585461758391},{"_id":"themes/hexo-theme-amazing/languages/ja.yml","hash":"3c921f24b19a797b2ae23cf621a35bb9b043ddf9","modified":1585461758392},{"_id":"themes/hexo-theme-amazing/languages/ko.yml","hash":"2d12f3975b576afb025df773e30521b58abd015e","modified":1585461758392},{"_id":"themes/hexo-theme-amazing/languages/pl.yml","hash":"a6dbd568cb18104685b20ab7b5767f455628f61c","modified":1585461758393},{"_id":"themes/hexo-theme-amazing/languages/pt-BR.yml","hash":"28ae713d8d26ab875104684e604592f4c495b638","modified":1585461758393},{"_id":"themes/hexo-theme-amazing/languages/ru.yml","hash":"62451109780acfe2db8630248005697c10a68a61","modified":1585461758394},{"_id":"themes/hexo-theme-amazing/languages/tr.yml","hash":"2e334f0f98756256754f48d8dff3baa045700283","modified":1585461758394},{"_id":"themes/hexo-theme-amazing/languages/vn.yml","hash":"cd2d57a3fe6389bdd76f193c6c662d242960ed02","modified":1585461758395},{"_id":"themes/hexo-theme-amazing/languages/zh-CN.yml","hash":"63334758a08a352a9455dd9157c927d7f713c12b","modified":1585461758395},{"_id":"themes/hexo-theme-amazing/languages/zh-TW.yml","hash":"eaede43f04878974f43eff4d41cb28bf4c2908fe","modified":1585461758396},{"_id":"themes/hexo-theme-amazing/layout/archive.jsx","hash":"a3994c74d6ddfdcc4b346d122e59ef43e743117c","modified":1585461758397},{"_id":"themes/hexo-theme-amazing/layout/categories.jsx","hash":"d7fdd0be3913403394952286d4c8a0a46532add1","modified":1585461758397},{"_id":"themes/hexo-theme-amazing/layout/category.jsx","hash":"16c8cf03fd976d839242dcf9240ccaf59b843daa","modified":1585461758398},{"_id":"themes/hexo-theme-amazing/layout/index.jsx","hash":"ff05d41559b40198bfa63e7d933ee3b6112b7e39","modified":1585461758416},{"_id":"themes/hexo-theme-amazing/layout/layout.jsx","hash":"5d5f642c2b474951a4bd9b7242bec4fa25c64cf6","modified":1585461758416},{"_id":"themes/hexo-theme-amazing/layout/page.jsx","hash":"8a3cce132f7a4d52450cdcada54afeb5465fdc8d","modified":1585461758419},{"_id":"themes/hexo-theme-amazing/layout/post.jsx","hash":"59fcf20255870b30ddd2998d9d7e672e4fd880d6","modified":1585461758424},{"_id":"themes/hexo-theme-amazing/layout/tag.jsx","hash":"49c04b040ba0ff138ad36d6478bd76e18edc8085","modified":1585461758428},{"_id":"themes/hexo-theme-amazing/layout/tags.jsx","hash":"6764135a3764b64818aba624683d63bfb7b308a3","modified":1585461758428},{"_id":"themes/hexo-theme-amazing/scripts/index.js","hash":"6156ee1e29064e851aeef66305302103a379cae3","modified":1585461758437},{"_id":"source/_posts/Lab532服务器环境.md","hash":"01dade00f3df027b2247595af843ca0291e62ec4","modified":1587005635805},{"_id":"source/_posts/Linux之常用命令.md","hash":"2521fdd35d045fee2371457f7983ed38076e6c86","modified":1586512738149},{"_id":"source/_posts/Linux之打造vim实用配置方案.md","hash":"0fafb9a2517e901bebba6ef8b1dfbd1dd67f5d06","modified":1587028073375},{"_id":"source/_posts/TCP-IP知识点梳理.md","hash":"8cf34809b495b47f9700664f9c9dcd2ecdbba4d2","modified":1586003079883},{"_id":"source/_posts/leetcode62-63不同路径.md","hash":"be64194c204c77d30c1d93b3b658da05ee05d618","modified":1585418164257},{"_id":"source/_posts/操作系统.md","hash":"510b5dd0e0c1938ebba55b650412df5f13289ca4","modified":1585454972751},{"_id":"source/_posts/点云可视化.md","hash":"70ee4479f0748268041072c3dbdcaf3138432d08","modified":1585411290709},{"_id":"source/_posts/科学上网基础款.md","hash":"ebcc7e7a724190eb9d102f0e410fd8f72af00f3e","modified":1585455350365},{"_id":"source/_posts/算法 - 判断IP地址是否属于同一网段.md","hash":"821743ea7c958896f19f4954b3d456537135cf36","modified":1585408586396},{"_id":"source/about/index.md","hash":"c1aa8ee38126c7554d4a360dda5d3b3376cc5987","modified":1585417992028},{"_id":"source/album/index.md","hash":"b00739bc41eb0a569ae769ed5c5c8f7574b4d300","modified":1585408170353},{"_id":"source/algorithm/index.md","hash":"4bcb0833aff05f2c855452ae22a3d466b738c1dd","modified":1585416402583},{"_id":"source/friend/index.md","hash":"485507886acfc0ab5cc60279990b0f5bce826ad1","modified":1581320486487},{"_id":"source/gallery/1.jpg","hash":"9d77332d35459c2d7a70843cd20042a3e13cf49c","modified":1581267688965},{"_id":"source/gallery/2.jpg","hash":"61aff17660dd4334006390090b4881e11e9469cd","modified":1581267816309},{"_id":"source/message/index.md","hash":"f5eed6de63037b5fd4387c0d8dea5f965a893e86","modified":1585408434197},{"_id":"source/music/index.md","hash":"884cef56b7800f538b0866bd57ca8216546a9fdd","modified":1581238933472},{"_id":"source/poems/index.md","hash":"d76d506b68cb2f065d5f2d91c28d073026ac6a88","modified":1585408456147},{"_id":"source/self-talking/index.md","hash":"8a3b8c88e3c7d561f88169536cbbabbb237a8adc","modified":1581316270280},{"_id":"source/share/index.md","hash":"37d955be09d3ad4059b3c218d5105bceea89dceb","modified":1585408484853},{"_id":"source/system/index.md","hash":"6dfa49893f5de25e425e2e2914ed16084e58b323","modified":1585916762162},{"_id":"source/yule/index.md","hash":"36958d7330e754135e820578f585b44c6223883b","modified":1585408523411},{"_id":"source/yulu/index.md","hash":"c857b49a3dbfa6bdcddf5bb40150ee3f31d7be76","modified":1585408540590},{"_id":"themes/hexo-theme-amazing/ex_pages/scaffolds/draft.md","hash":"b14e9fa1e21c75482dd3f05d27705719a2cb47f1","modified":1585461758344},{"_id":"themes/hexo-theme-amazing/ex_pages/scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1585461758345},{"_id":"themes/hexo-theme-amazing/ex_pages/scaffolds/post.md","hash":"ce796155fbe03199f7d47f51f7ca1ad60681e02a","modified":1585461758345},{"_id":"themes/hexo-theme-amazing/include/generator/categories.js","hash":"69f49d07459f2c27e5ba89f8b9040828bee90bf9","modified":1585461758353},{"_id":"themes/hexo-theme-amazing/include/filter/locals.js","hash":"09ae67670a47dc02a11ce7db0d9121ad9a270558","modified":1585461758353},{"_id":"themes/hexo-theme-amazing/include/generator/category.js","hash":"ab6bd15ded796ea978166da480de56600af14787","modified":1585461758354},{"_id":"themes/hexo-theme-amazing/include/generator/insight.js","hash":"58251b0393541836ae40da3ba32a3d6821b74163","modified":1585461758354},{"_id":"themes/hexo-theme-amazing/include/generator/tags.js","hash":"8f02ba06d51e6778e8aba7a86572409b0712362f","modified":1585461758355},{"_id":"themes/hexo-theme-amazing/include/helper/cdn.js","hash":"0f9e2229bba01255c60cd076fe1e107dcebfbd3f","modified":1585461758355},{"_id":"themes/hexo-theme-amazing/include/helper/page.js","hash":"2b0e241bcff4a793db5d3ea9cfc5914e5c6f4d38","modified":1585461758356},{"_id":"themes/hexo-theme-amazing/include/helper/thumbnail.js","hash":"8fe8794f5a5b2eb058c10ba970069d3717f67fff","modified":1585461758356},{"_id":"themes/hexo-theme-amazing/include/migration/head.js","hash":"c32df32ae70cd5e522de5481cde4e7c416b4dbec","modified":1585461758357},{"_id":"themes/hexo-theme-amazing/include/migration/v2_v3.js","hash":"e017a601b4ede74b5681bff0b51c2d8372f5489a","modified":1585461758357},{"_id":"themes/hexo-theme-amazing/include/schema/config.json","hash":"d330826d82e61311d3f740033569e47fb9b995df","modified":1585461758367},{"_id":"themes/hexo-theme-amazing/include/util/console.js","hash":"9bd6d4691b56012ea17146db577e27ae20e0c335","modified":1585461758387},{"_id":"themes/hexo-theme-amazing/include/util/migrate.js","hash":"9dfaa07f04a7ea5197afc0ab2b785c447d340357","modified":1585461758388},{"_id":"themes/hexo-theme-amazing/include/util/yaml.js","hash":"a3dca01c7b0ac8c13ac41e6080e26d6ba93df834","modified":1585461758389},{"_id":"themes/hexo-theme-amazing/include/util/schema.js","hash":"c84e3fb7fb2b680378819a5c248c02566ae87588","modified":1585461758388},{"_id":"themes/hexo-theme-amazing/layout/comment/changyan.jsx","hash":"f4671d4a1aedd981963db8d6f20cbfebd7aab8ba","modified":1585461758399},{"_id":"themes/hexo-theme-amazing/layout/comment/disqus.jsx","hash":"a1aa0848700d4cc0825911e2be9ebeeca71655db","modified":1585461758400},{"_id":"themes/hexo-theme-amazing/layout/comment/disqusjs.jsx","hash":"7606d678e1d062be416cb8966f5dd1555ad95155","modified":1585461758401},{"_id":"themes/hexo-theme-amazing/layout/comment/facebook.jsx","hash":"3cacac7430cc0673ef36269fdfecedde80633505","modified":1585461758401},{"_id":"themes/hexo-theme-amazing/layout/comment/gitalk.jsx","hash":"800021c2ee38fe5dc949b3a2c448ac131285c5c9","modified":1585461758402},{"_id":"themes/hexo-theme-amazing/layout/comment/gitment.jsx","hash":"d6195ecc92a71ce4c8cc9db1cd30d7123add6a82","modified":1585461758402},{"_id":"themes/hexo-theme-amazing/layout/comment/isso.jsx","hash":"3b847ff6fd2001f801be755611d67a7510851984","modified":1585461758403},{"_id":"themes/hexo-theme-amazing/layout/comment/livere.jsx","hash":"eff2b7c394c06933482f33eebc703d5ec3e7f0d7","modified":1585461758404},{"_id":"themes/hexo-theme-amazing/layout/comment/valine.jsx","hash":"c22fea13ab314f6738505b43d2e5f22a93550602","modified":1585461758404},{"_id":"themes/hexo-theme-amazing/layout/common/article-media.jsx","hash":"d68c453b1737d3786f04768cc127cc95086ed474","modified":1585461758405},{"_id":"themes/hexo-theme-amazing/layout/common/article.jsx","hash":"10b338acd9b04847f0c24b3622c4caaa863e0dd3","modified":1585461758406},{"_id":"themes/hexo-theme-amazing/layout/common/comment.jsx","hash":"ab7c990b37684060e4fa1446b1ceef8c6bdf857f","modified":1585461758407},{"_id":"themes/hexo-theme-amazing/layout/common/donates.jsx","hash":"35b613f2aaaf73bc885300d14dbb4d8c7073f333","modified":1585461758407},{"_id":"themes/hexo-theme-amazing/layout/common/footer.jsx","hash":"3114f52fb5cb88ff1f0e27aac089c62ffadc2f03","modified":1585461758408},{"_id":"themes/hexo-theme-amazing/layout/common/head.jsx","hash":"d866462eb50d829ef0c928caa7eec852f904de24","modified":1585461758409},{"_id":"themes/hexo-theme-amazing/layout/common/navbar.jsx","hash":"07fab1cfb2ac17b34625824dcc141c3407ba7c52","modified":1585461758409},{"_id":"themes/hexo-theme-amazing/layout/common/plugins.jsx","hash":"5ef766b5065daea7fd6ccf1e46554423260a6c8c","modified":1585461758410},{"_id":"themes/hexo-theme-amazing/layout/common/scripts.jsx","hash":"40c2082bdfa69bb793e9e6c0ecf26097c6b1e1b1","modified":1585461758411},{"_id":"themes/hexo-theme-amazing/layout/common/search.jsx","hash":"0c4888751852069274a14f8ebc4305b591f136ee","modified":1585461758411},{"_id":"themes/hexo-theme-amazing/layout/common/share.jsx","hash":"f373598068d8a6a3d136b2dea8fe6e26fbdaa884","modified":1585461758411},{"_id":"themes/hexo-theme-amazing/layout/common/widgets.jsx","hash":"b79a49de9b89be2e35d09a7ab9317d224b885b21","modified":1585461758412},{"_id":"themes/hexo-theme-amazing/layout/donate/alipay.jsx","hash":"163690862f3ccfe4b17a1a09aac73905f49f2705","modified":1585461758412},{"_id":"themes/hexo-theme-amazing/layout/donate/buymeacoffee.jsx","hash":"02a2e841b19326e1f426cb38bcff9e91a5448a38","modified":1585461758413},{"_id":"themes/hexo-theme-amazing/layout/donate/patreon.jsx","hash":"bd125cdd5da81e56133e44527a5567cb20eb06a4","modified":1585461758414},{"_id":"themes/hexo-theme-amazing/layout/donate/paypal.jsx","hash":"bdbdc813ca6a07b979c08cd7e9a67ae7c9c5fea1","modified":1585461758414},{"_id":"themes/hexo-theme-amazing/layout/donate/wechat.jsx","hash":"8bc93820de5f87607c3ca3ab01130aa6d129438d","modified":1585461758415},{"_id":"themes/hexo-theme-amazing/layout/misc/meta.jsx","hash":"173ff39b8c8b7ad8cdefdd8d289f6517e32f7062","modified":1585461758417},{"_id":"themes/hexo-theme-amazing/layout/misc/open_graph.jsx","hash":"6bfd137db80ab0b2f91bd829c156354afd67e90c","modified":1585461758418},{"_id":"themes/hexo-theme-amazing/layout/misc/paginator.jsx","hash":"6f555802152618f17ec5c58a6daca8f9c90d8256","modified":1585461758418},{"_id":"themes/hexo-theme-amazing/layout/misc/structured_data.jsx","hash":"a7ecd55add1f97546e5a3d63cd7c8c0fb07806c2","modified":1585461758419},{"_id":"themes/hexo-theme-amazing/layout/plugin/animejs.jsx","hash":"adaac81231557f49d0b7b599c230034bd62460b6","modified":1585461758420},{"_id":"themes/hexo-theme-amazing/layout/plugin/back_to_top.jsx","hash":"aa87e1c478de8fa658ee481e5fb997e0d241406f","modified":1585461758420},{"_id":"themes/hexo-theme-amazing/layout/plugin/baidu_analytics.jsx","hash":"4887f3eaaa01453ff44d9d8ffc7d7d61842b0955","modified":1585461758421},{"_id":"themes/hexo-theme-amazing/layout/plugin/busuanzi.jsx","hash":"f4acb2431d0633a95e1ac0e40059f0628124eedc","modified":1585461758421},{"_id":"themes/hexo-theme-amazing/layout/plugin/gallery.jsx","hash":"6483a5e1abb32513a3cdc417856a68da37949c7a","modified":1585461758422},{"_id":"themes/hexo-theme-amazing/layout/plugin/google_analytics.jsx","hash":"e76ae0e12362735ee0760036e9abf9073a1bb12a","modified":1585461758422},{"_id":"themes/hexo-theme-amazing/layout/plugin/hotjar.jsx","hash":"d540e8500d25b5f5dbf77ad07b6eb75529b6a923","modified":1585461758422},{"_id":"themes/hexo-theme-amazing/layout/plugin/katex.jsx","hash":"ea9db94640218a0d20a5099d54aa5e8e5f46fae8","modified":1585461758423},{"_id":"themes/hexo-theme-amazing/layout/plugin/mathjax.jsx","hash":"7ff55cf7aa4ef0483749cbcdbc260eb6d815d669","modified":1585461758423},{"_id":"themes/hexo-theme-amazing/layout/plugin/outdated_browser.jsx","hash":"2702fe34541769f834ae2d735f5dd998f6a9a8e3","modified":1585461758424},{"_id":"themes/hexo-theme-amazing/layout/plugin/progressbar.jsx","hash":"0ab98051cc94e86784fc816fe46bc04781ee67ab","modified":1585461758424},{"_id":"themes/hexo-theme-amazing/layout/search/baidu.jsx","hash":"8b10fce76d175b5db4bfab379e72e02078686039","modified":1585461758425},{"_id":"themes/hexo-theme-amazing/layout/search/google_cse.jsx","hash":"ac19ce3122371a1133f97b73ce760782c3c5fc54","modified":1585461758425},{"_id":"themes/hexo-theme-amazing/layout/share/addthis.jsx","hash":"87d62e2f8b7e0ad65fe3d80abac665d2281b69e2","modified":1585461758426},{"_id":"themes/hexo-theme-amazing/layout/share/addtoany.jsx","hash":"ebc20003562201001add10d2868eda06ae44d291","modified":1585461758427},{"_id":"themes/hexo-theme-amazing/layout/search/insight.jsx","hash":"b1db02dc5a4c5b6792dd9f3b559d13c93920bf27","modified":1585461758426},{"_id":"themes/hexo-theme-amazing/layout/share/bdshare.jsx","hash":"9bc1ec09472cc896a1e3ad0cc5dff85430eff1b9","modified":1585461758427},{"_id":"themes/hexo-theme-amazing/layout/share/sharejs.jsx","hash":"25e4d91216763edc893b7322017e52ceeaa452be","modified":1585461758427},{"_id":"themes/hexo-theme-amazing/layout/share/sharethis.jsx","hash":"20421ee81af1c1745e360abe85dae70c51b6b450","modified":1585461758428},{"_id":"themes/hexo-theme-amazing/layout/util/cache.jsx","hash":"6758dab6fb0fefb518774f55c874d4d8abc4bcb7","modified":1585461758429},{"_id":"themes/hexo-theme-amazing/layout/util/classname.jsx","hash":"cb147519a1545a39772ac08755ee42f910a8672d","modified":1585461758429},{"_id":"themes/hexo-theme-amazing/layout/widget/adsense.jsx","hash":"ff0de8ad642a544266cc64127057f253bd8ec5e4","modified":1585461758430},{"_id":"themes/hexo-theme-amazing/layout/widget/archives.jsx","hash":"1075d9910bd26c87bd850780db0072bc6216a135","modified":1585461758431},{"_id":"themes/hexo-theme-amazing/layout/widget/categories.jsx","hash":"4ca32fe13c1a0bbf26d1fd78ae6fa7f90ceacc69","modified":1585461758431},{"_id":"themes/hexo-theme-amazing/layout/widget/hot_recommend.jsx","hash":"71b66e376175874eb7722de2955403784272fc74","modified":1585461758432},{"_id":"themes/hexo-theme-amazing/layout/widget/latest_comment.jsx","hash":"36c7260ff1d8699a73e83ab5855a081851bb7195","modified":1585461758432},{"_id":"themes/hexo-theme-amazing/layout/widget/links.jsx","hash":"54599e5dc0064c08e3a2ce4c3cd7f3bdc9eb74b1","modified":1585461758433},{"_id":"themes/hexo-theme-amazing/layout/widget/profile.jsx","hash":"a6f7e06138d920907f946111b1da361d889f969e","modified":1585461758433},{"_id":"themes/hexo-theme-amazing/layout/widget/recent_posts.jsx","hash":"13b46368b9a5ba6b9810157bd1f1d02f65e12f1f","modified":1585461758434},{"_id":"themes/hexo-theme-amazing/layout/widget/recommend_post.jsx","hash":"8d35eb3e719c9686f7ee9a5467fe1a8244c4740c","modified":1585461758434},{"_id":"themes/hexo-theme-amazing/layout/widget/subscribe_email.jsx","hash":"bb84bd018d770149fff131c45be5401f5f4d44f1","modified":1585461758435},{"_id":"themes/hexo-theme-amazing/layout/widget/tags.jsx","hash":"0bad51e86b46d073a3f9db23839bef792d7c23e1","modified":1585461758435},{"_id":"themes/hexo-theme-amazing/layout/widget/toc.jsx","hash":"ec8f66967ef7aae0788f3c12573089950c616407","modified":1585461758436},{"_id":"themes/hexo-theme-amazing/source/css/base.styl","hash":"e80ebb1ed53a582942ee8f0a2561dacaa082c844","modified":1585461758439},{"_id":"themes/hexo-theme-amazing/source/css/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1585461758438},{"_id":"themes/hexo-theme-amazing/source/css/helper.styl","hash":"422ede5189816d5b02a5795bf5609931e4ee1957","modified":1585461758442},{"_id":"themes/hexo-theme-amazing/source/css/insight.css","hash":"10aedd26a4930166b826d72b25cdbd509609b84b","modified":1585461758442},{"_id":"themes/hexo-theme-amazing/source/css/meplayer.min.css","hash":"357151158d89a073c546b3e2b261ee2c9f1e798d","modified":1585461758443},{"_id":"themes/hexo-theme-amazing/source/css/style.styl","hash":"a73a668b8817e8e4f4738c489e3d71274200b6c6","modified":1585461758444},{"_id":"themes/hexo-theme-amazing/source/img/adoredee.png","hash":"00e3af2800935cd55d626e9ff0dbfefba0198f52","modified":1555737509842},{"_id":"themes/hexo-theme-amazing/source/img/alipay.png","hash":"a6f7ed54f32104da2d5e5148c7ca6857879909d4","modified":1581248700260},{"_id":"themes/hexo-theme-amazing/source/js/.eslintrc.json","hash":"45c9014e02fbc516e257484487b4e29ddb5743e1","modified":1587471496517},{"_id":"themes/hexo-theme-amazing/source/js/about-me.js","hash":"ad878fb16f3cb08659cbb313bc8ecd28bd0128de","modified":1587471496594},{"_id":"themes/hexo-theme-amazing/source/js/animation.js","hash":"5bb98c8b7e6fdde902f61e40ddfb2a3fbdeb13bf","modified":1587471496616},{"_id":"themes/hexo-theme-amazing/source/js/back-to-top.js","hash":"a3135913ae054bc3c4d079638cebf3e77f600608","modified":1587471496665},{"_id":"themes/hexo-theme-amazing/source/js/comment-issue-data.js","hash":"b56465a7a76db8194316db1594369ed582671d6f","modified":1587471496675},{"_id":"themes/hexo-theme-amazing/source/js/friend.js","hash":"790f83e5c652758cfc389a11d72174f7292fe353","modified":1587471496720},{"_id":"themes/hexo-theme-amazing/source/js/gallery.js","hash":"f035efd6f4b882a01ed703f21238069f4f6223db","modified":1587471496736},{"_id":"themes/hexo-theme-amazing/source/js/globalUtils.js","hash":"8cfa36e403b61f328fe965aa203943292cb2fb12","modified":1587471496770},{"_id":"themes/hexo-theme-amazing/source/js/insight.js","hash":"f6bcd4955db60ed478f750d3e508a1e8307bd649","modified":1587471496772},{"_id":"themes/hexo-theme-amazing/source/js/main.js","hash":"22eeb27106a1a04205fe1353b17cfff05abcbdaa","modified":1587471496784},{"_id":"themes/hexo-theme-amazing/source/js/meplayer.js","hash":"0eaf4f5a3f19599f413b6ede817cac6838a8c209","modified":1587471496810},{"_id":"themes/hexo-theme-amazing/source/js/music.js","hash":"ebc74effdacca3fcfc5abcd36a51464f3956ba0c","modified":1587471496812},{"_id":"themes/hexo-theme-amazing/source/js/poems.js","hash":"1976ff38cb9babe28271903ce51dc95227fde204","modified":1587471496816},{"_id":"themes/hexo-theme-amazing/source/js/statistics.js","hash":"eada366fd3d9f54cc552dfccab25cdc83cd50533","modified":1587471496833},{"_id":"themes/hexo-theme-amazing/source/js/theme-setting.js","hash":"4198d39840fd29efbc9d786207e232270da95c6d","modified":1587471496836},{"_id":"themes/hexo-theme-amazing/source/js/yule.js","hash":"f3126502400e5c247c164a50b51e4d61c7424611","modified":1587471496837},{"_id":"themes/hexo-theme-amazing/source/js/yulu.js","hash":"4229fb92ae4ef9b0830d14a2909421fad4f7348a","modified":1587471496839},{"_id":"themes/hexo-theme-amazing/source/json_data/friend.json","hash":"976d1d7a1de67e7989e7efed3b465bc2d3e64886","modified":1587471496529},{"_id":"themes/hexo-theme-amazing/source/json_data/music.json","hash":"28b7d4595db5b2e5138c06c4ddcaa095c02c5ea7","modified":1587471496550},{"_id":"themes/hexo-theme-amazing/source/json_data/poems.json","hash":"5cd539f798c748061e68a1ecba8fa03f1ebc8dd2","modified":1587471496584},{"_id":"themes/hexo-theme-amazing/source/json_data/record.json","hash":"af3a3548b96307824ce4d878bb42d0d6e93b1c49","modified":1587471496608},{"_id":"themes/hexo-theme-amazing/source/json_data/video.json","hash":"5a3c0542efed6add2b7c731ba9612b1d31fa440e","modified":1587471496610},{"_id":"themes/hexo-theme-amazing/source/json_data/yule.json","hash":"8ed49784299367377b8b3b471a06c0a17a1b5388","modified":1587471496612},{"_id":"themes/hexo-theme-amazing/source/json_data/yulu.json","hash":"4bfea8a1ff2a8c355a622f95fb4c4b2288e46fd4","modified":1587471496613},{"_id":"themes/hexo-theme-amazing/source/live2d/autoload.js","hash":"de26a42af2bd7bc6cc91b03e04cd5b59c4fd7853","modified":1585461758473},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.eot","hash":"aca0199880ba1945feb4ae85dfdf7436d4affec2","modified":1585461758474},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.svg","hash":"5e1041d884e7516cf21fba6ca4aaab6c0ad4b580","modified":1585461758475},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.ttf","hash":"38c2162ef6eee02be3299ceaddab4f2c4b486aa1","modified":1585461758476},{"_id":"themes/hexo-theme-amazing/source/live2d/flat-ui-icons-regular.woff","hash":"b613bbbdb029dd9dbff8a87eb05c1410f2da74a9","modified":1585461758476},{"_id":"themes/hexo-theme-amazing/source/live2d/waifu-tips.js","hash":"a7c4efc05ceebf2a47c98f66c7fcd26c6be39fa8","modified":1585461758479},{"_id":"themes/hexo-theme-amazing/source/live2d/waifu-tips.json","hash":"bef0700766054953fb9196e6a688694df9b6ab11","modified":1585461758480},{"_id":"themes/hexo-theme-amazing/source/live2d/waifu.css","hash":"e48c2ae27d4558e456b3bc9bbc4fd2480e730a28","modified":1585461758481},{"_id":"source/_posts/服务器环境搭建、配置及使用.md","hash":"58318d376748cd65a41e85e6d2662f57c6f70edb","modified":1587471606366},{"_id":"themes/hexo-theme-amazing/source/img/wechat.png","hash":"3ba1768e85df71789880048108fd02d48a53809c","modified":1581335970315},{"_id":"themes/hexo-theme-amazing/source/js/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1587471496564},{"_id":"themes/hexo-theme-amazing/ex_pages/source/about/index.md","hash":"d6a9f6ab18ff2d4365b56b73e330fc0258c023eb","modified":1585461758346},{"_id":"themes/hexo-theme-amazing/ex_pages/source/album/index.md","hash":"8af7252b9f74b525fa6e26343f831131fe68dfa9","modified":1585461758347},{"_id":"themes/hexo-theme-amazing/ex_pages/source/friend/index.md","hash":"08f91da4e39eb2bab1d2540e421aeb33ac289130","modified":1585461758348},{"_id":"themes/hexo-theme-amazing/ex_pages/source/message/index.md","hash":"1d3d8c82a5e7f297a6295be3efdac3fe860fdb4c","modified":1585461758349},{"_id":"themes/hexo-theme-amazing/ex_pages/source/media/index.md","hash":"d04b94a399b68cde740b552a3c965fd76fd453a3","modified":1585461758348},{"_id":"themes/hexo-theme-amazing/ex_pages/source/music/index.md","hash":"884cef56b7800f538b0866bd57ca8216546a9fdd","modified":1585461758350},{"_id":"themes/hexo-theme-amazing/ex_pages/source/self-talking/index.md","hash":"32f22e85d02630ccbb3c9fd51e32885c459c5fe4","modified":1585461758351},{"_id":"themes/hexo-theme-amazing/include/schema/comment/changyan.json","hash":"2fcf6f6b738b44fdb8a71f1bf575d7b81b856a4d","modified":1585461758358},{"_id":"themes/hexo-theme-amazing/include/schema/comment/disqus.json","hash":"f12854628a2d598701c5f7a1ca4f95d0b04d9681","modified":1585461758359},{"_id":"themes/hexo-theme-amazing/include/schema/comment/disqusjs.json","hash":"8b19238384b4ea617074eeb2e4287aa9740ef2e5","modified":1585461758359},{"_id":"themes/hexo-theme-amazing/include/schema/comment/facebook.json","hash":"f7bc1d84abac074271f0445cb7f19c5447f24233","modified":1585461758359},{"_id":"themes/hexo-theme-amazing/include/schema/comment/gitalk.json","hash":"045efa0269fb923e0824581bc390ed532de1a588","modified":1585461758360},{"_id":"themes/hexo-theme-amazing/include/schema/comment/gitment.json","hash":"7934b8635300f9908d23f0fd2cccac8254ccdbd8","modified":1585461758360},{"_id":"themes/hexo-theme-amazing/include/schema/comment/isso.json","hash":"73eb582b6391db86854f3e90d03106e4df2ec0ac","modified":1585461758361},{"_id":"themes/hexo-theme-amazing/include/schema/comment/livere.json","hash":"164c61a9f9698719bfd1429d3b5d9b89aeb1c098","modified":1585461758361},{"_id":"themes/hexo-theme-amazing/include/schema/comment/valine.json","hash":"d84bfbb8b293180c9bd9fbc0be9a8ef1b41d1bbf","modified":1585461758362},{"_id":"themes/hexo-theme-amazing/include/schema/common/article.json","hash":"e79bb7b210946d22bd3a9c710171c548de49a050","modified":1585461758362},{"_id":"themes/hexo-theme-amazing/include/schema/common/comment.json","hash":"53feccffe707b127d0dafd734765a3d07a9315f2","modified":1585461758362},{"_id":"themes/hexo-theme-amazing/include/schema/common/donates.json","hash":"ab5101361da826f8a487bc837b6fa6ed75729568","modified":1585461758363},{"_id":"themes/hexo-theme-amazing/include/schema/common/footer.json","hash":"b6036e21a11a5ed0455010ee668e43f165e55254","modified":1585461758363},{"_id":"themes/hexo-theme-amazing/include/schema/common/head.json","hash":"f87ff5940319521a77999a1c5ca1813e2df72f4c","modified":1585461758364},{"_id":"themes/hexo-theme-amazing/include/schema/common/navbar.json","hash":"52a7ae23ebcfb06e8c219be4da1506b824e17715","modified":1585461758364},{"_id":"themes/hexo-theme-amazing/include/schema/common/plugins.json","hash":"9f16d1dd9bac72ebff4679ff94de64a4a0c232a6","modified":1585461758365},{"_id":"themes/hexo-theme-amazing/include/schema/common/providers.json","hash":"5453827e1c267c67102bc983c8d2313865aa64fd","modified":1585461758365},{"_id":"themes/hexo-theme-amazing/include/schema/common/search.json","hash":"aa424beb14eac46e2736a6a5ef65a820b770b08d","modified":1585461758366},{"_id":"themes/hexo-theme-amazing/include/schema/common/share.json","hash":"da98300e9197fbc717082419652d54636fd118b9","modified":1585461758366},{"_id":"themes/hexo-theme-amazing/include/schema/common/sidebar.json","hash":"5687b24e32bcff12ff7660ff5dc26d74f466a994","modified":1585461758367},{"_id":"themes/hexo-theme-amazing/include/schema/common/widgets.json","hash":"0ca3a2d2fee6a1b9781c95475d72cb1dda4d3158","modified":1585461758367},{"_id":"themes/hexo-theme-amazing/include/schema/donate/alipay.json","hash":"45484cea4037c1f9e726bf252e10157c5552beef","modified":1585461758368},{"_id":"themes/hexo-theme-amazing/include/schema/donate/buymeacoffee.json","hash":"635cf88c72df2ccba7db6248311f3cf6ef128fab","modified":1585461758368},{"_id":"themes/hexo-theme-amazing/include/schema/donate/patreon.json","hash":"bcca0a0909698f3669294de4b5c529432e500af3","modified":1585461758368},{"_id":"themes/hexo-theme-amazing/include/schema/donate/paypal.json","hash":"ffd3af2c41d8ccf0f4957963c4a964ca88cc8c2c","modified":1585461758369},{"_id":"themes/hexo-theme-amazing/include/schema/donate/wechat.json","hash":"7f53642dd4c1aae69eafb1e2f6f29580b6bdb0e8","modified":1585461758369},{"_id":"themes/hexo-theme-amazing/include/schema/misc/meta.json","hash":"c1094282ac72605718171d818b3ba3e0a69ad384","modified":1585461758370},{"_id":"themes/hexo-theme-amazing/include/schema/misc/open_graph.json","hash":"af7bbef87dd5eabbfbedfacdb3ecd0074dfa7b1e","modified":1585461758370},{"_id":"themes/hexo-theme-amazing/include/schema/misc/poly_links.json","hash":"6b2e412aebbcc1ff1c31bf655f60a6d11d10942a","modified":1585461758371},{"_id":"themes/hexo-theme-amazing/include/schema/misc/structured_data.json","hash":"d1555cf7cf4ea360d35e4fad8d425a465ad7d7ff","modified":1585461758371},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/animejs.json","hash":"0b5c4a315c0d25f2b296eb44ed14a1d59ccb8613","modified":1585461758372},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/back_to_top.json","hash":"c8e0e97a61c3a02c9736f303c206dd406de95d9a","modified":1585461758373},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/baidu_analytics.json","hash":"c8311f3ed4e7d33441dce7b044afa3796bf3e051","modified":1585461758373},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/busuanzi.json","hash":"077d1a3d81a9bfbea754b78fbe9e23d82ff4d75a","modified":1585461758373},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/gallery.json","hash":"9c2e800ea3b239548bb5d57cb2a1807488a1197e","modified":1585461758374},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/google_analytics.json","hash":"765e13598bf20889bb0c5a035fb63cc2188cfaef","modified":1585461758374},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/hotjar.json","hash":"d656239b6d658bf6e0dccc01ba8ac8fa8500a477","modified":1585461758375},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/katex.json","hash":"11cdbe4cfe56c64c6bc212244bd05624ae59be54","modified":1585461758375},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/mathjax.json","hash":"1ae4d3abb5be4e80674903628750f8eae3b187c3","modified":1585461758376},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/outdated_browser.json","hash":"110d73751a7cd6535d8318c1440ede7f45e13e92","modified":1585461758376},{"_id":"themes/hexo-theme-amazing/include/schema/plugin/progressbar.json","hash":"62acc3bb0684b1f2bc2877cdbee1fd75ffa3a31e","modified":1585461758376},{"_id":"themes/hexo-theme-amazing/include/schema/search/baidu.json","hash":"3c18caa36e7fdfd3854c24566768eea9a5e9b469","modified":1585461758377},{"_id":"themes/hexo-theme-amazing/include/schema/search/google_cse.json","hash":"93be08271c7766bd3c59b28ca748c20a50f7dc69","modified":1585461758377},{"_id":"themes/hexo-theme-amazing/include/schema/search/insight.json","hash":"44a26a37e3001c837fb5e700ffbc58200073ea5d","modified":1585461758378},{"_id":"themes/hexo-theme-amazing/include/schema/share/addthis.json","hash":"9717d897f0a1675a4ddb63bf01da7cdc9a71e44f","modified":1585461758379},{"_id":"themes/hexo-theme-amazing/include/schema/share/addtoany.json","hash":"2086312089dfa885da8a65f8e638dbc49867e90f","modified":1585461758379},{"_id":"themes/hexo-theme-amazing/include/schema/share/bdshare.json","hash":"8f2ed4b10a76b8c8d9f2a528d48e2ca5fc3a003e","modified":1585461758379},{"_id":"themes/hexo-theme-amazing/include/schema/share/sharejs.json","hash":"9253641bee74ade4abb31a488630eba6d434d8d7","modified":1585461758380},{"_id":"themes/hexo-theme-amazing/include/schema/share/sharethis.json","hash":"cc82032cf7753fdcd1480b3099ecb60a312f691a","modified":1585461758381},{"_id":"themes/hexo-theme-amazing/include/schema/widget/adsense.json","hash":"22b021ac739fd2ccf4c7dce4d80c7e906efc9729","modified":1585461758382},{"_id":"themes/hexo-theme-amazing/include/schema/widget/archives.json","hash":"6961de3a4c1235630ff06d7a681386871d29162e","modified":1585461758382},{"_id":"themes/hexo-theme-amazing/include/schema/widget/categories.json","hash":"e27dc4d1e0e5cf4510e55c547e6d20ae1e9c5259","modified":1585461758383},{"_id":"themes/hexo-theme-amazing/include/schema/widget/hot_recommend.json","hash":"3b61f4d094f07907fad598b371090bfd83bc6203","modified":1585461758383},{"_id":"themes/hexo-theme-amazing/include/schema/widget/latest_comment.json","hash":"a206d5ca592606e19cd3c3f7a6771a86bee17f4b","modified":1585461758384},{"_id":"themes/hexo-theme-amazing/include/schema/widget/links.json","hash":"e0847c62a4743ee4c6dcbaf7204d383dfe1b01e9","modified":1585461758384},{"_id":"themes/hexo-theme-amazing/include/schema/widget/profile.json","hash":"994aff115d59827ad6f98d03adf55b1cf1245378","modified":1585461758385},{"_id":"themes/hexo-theme-amazing/include/schema/widget/recent_posts.json","hash":"87c68ffc9ea4c1dd5943b33c825092513bf7f403","modified":1585461758385},{"_id":"themes/hexo-theme-amazing/include/schema/widget/subscribe_email.json","hash":"86d78e7dc28837781f106816631cdd919f62b25b","modified":1585461758386},{"_id":"themes/hexo-theme-amazing/include/schema/widget/tags.json","hash":"9133607e54ad058f29f52ca880bb83bf59e5a333","modified":1585461758386},{"_id":"themes/hexo-theme-amazing/include/schema/widget/toc.json","hash":"ebcd541a3d9fd7c9686dab9c8cbb4de130bc0847","modified":1585461758386},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.eot","hash":"2255b47d54d38128105b05e694dafff7701e3f68","modified":1585461758440},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.ttf","hash":"2f0ec712a4b69bbf3559279c3a59864dfb8b189e","modified":1585461758441},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.svg","hash":"7bd222026fad35d5b93974e91b416dffbcadc1e3","modified":1585461758440},{"_id":"themes/hexo-theme-amazing/source/css/fonts/fontello.woff","hash":"27fd16775dde59ccfbe7b1ce81261b1af30a6703","modified":1585461758441},{"_id":"themes/hexo-theme-amazing/source/img/links/fangfang.png","hash":"36aaebce1582d71de4e9b5161ece841b19d6e7ac","modified":1581238933655},{"_id":"themes/hexo-theme-amazing/source/img/links/fghrsh.png","hash":"cf1836e0b1529cbb7cdd88fe4765f981f7143e4b","modified":1581238933655},{"_id":"themes/hexo-theme-amazing/source/img/links/nopic.jpg","hash":"6aa82d56e4058b992d692865286343134d87fd11","modified":1581238933656},{"_id":"themes/hexo-theme-amazing/source/js/gitalk.min.js","hash":"764a19add7eae6a3b8d6af37f49cb2c2d7809609","modified":1587471496753},{"_id":"themes/hexo-theme-amazing/source/js/gitalk_self.min.js","hash":"61afffbf6c1005c2e94319f59674ca53c2ad31af","modified":1587471496768},{"_id":"themes/hexo-theme-amazing/source/img/links/xsy.jpg","hash":"8615823fd178ef0756461f4b93d80f8c2226cd51","modified":1581238933657},{"_id":"themes/hexo-theme-amazing/source/live2d/live2d.js","hash":"481aef8376e3faf601dcdd7bd9c8acc54bb14896","modified":1585461758479},{"_id":"themes/hexo-theme-amazing/source/img/xiaoli.png","hash":"deb7d7ebd20ffa6de6ab877196afe0394ab7f374","modified":1585066489672},{"_id":"themes/hexo-theme-amazing/source/js/echarts.min.js","hash":"00e117184732009e812c78f3e495af57fadef4ba","modified":1587471496704},{"_id":"public/atom.xml","hash":"9b970947bec46a8ad408827889795e5278b45d38","modified":1587471626563},{"_id":"public/content.json","hash":"25043d8cc5b7fbe1daa149ce00c63a435312703d","modified":1587471626563},{"_id":"public/about/index.html","hash":"4cf2dc9fe1fb34f8753ff39898442636bf8d8005","modified":1587471626563},{"_id":"public/album/index.html","hash":"13fdf52663334c2248512f8bc0a7c8726482d1e1","modified":1587471626563},{"_id":"public/friend/index.html","hash":"32a8d6ee84dec151f08fc7ed2418b9f355741ebd","modified":1587471626563},{"_id":"public/music/index.html","hash":"ed82cc638499426f03a22417d75f332f393b0547","modified":1587471626563},{"_id":"public/message/index.html","hash":"7923fd7beb66a1a197bde5d31942833297f82c34","modified":1587471626563},{"_id":"public/poems/index.html","hash":"4bbb2fac075c0f9f739ebe7be20e82c060f7f737","modified":1587471626563},{"_id":"public/self-talking/index.html","hash":"a4e84f990ea4a5b222969066eafdb69d09794422","modified":1587471626563},{"_id":"public/system/index.html","hash":"372ce3cba32a71e2203375c261c8c27bad315b3c","modified":1587471626563},{"_id":"public/share/index.html","hash":"1f258aa2f2b318a94ba06fd9f44f2281c6d635ec","modified":1587471626563},{"_id":"public/yule/index.html","hash":"164acd2c2fbbd26fde355c9742461da4857cf118","modified":1587471626563},{"_id":"public/yulu/index.html","hash":"0df29ddb4437ea0e0128b68bf9fceee28677f458","modified":1587471626563},{"_id":"public/algorithm/index.html","hash":"9bdfca933ac8ff047b5f189f4ac95a6da93efeff","modified":1587471626563},{"_id":"public/2020/03/30/Linux之打造vim实用配置方案/index.html","hash":"fc86559cf56c2a32ae1d8bce0b266507b2e0d7c1","modified":1587471626563},{"_id":"public/2020/03/30/服务器环境搭建、配置及使用/index.html","hash":"df25634421c204c737b8638d53e29f7da8c9f12a","modified":1587471626563},{"_id":"public/2020/03/28/科学上网基础款/index.html","hash":"70501bc91ad75d08700a8b9bd6c73a54170e901a","modified":1587471626563},{"_id":"public/2020/03/09/算法 - 判断IP地址是否属于同一网段/index.html","hash":"7e457cbd1ae1e820532cf3005885da82c1068060","modified":1587471626563},{"_id":"public/2020/02/22/操作系统/index.html","hash":"244f0979ab5a8813ac1d86584cb8efb123f737fa","modified":1587471626563},{"_id":"public/2020/02/15/Linux之常用命令/index.html","hash":"d16c0c9284ef3a2f5dc629cf078de9d82d4ed790","modified":1587471626563},{"_id":"public/2020/02/15/TCP-IP知识点梳理/index.html","hash":"aecec5cef1015441e3eba54f0ce902f6edfbca7a","modified":1587471626563},{"_id":"public/2020/02/12/leetcode62-63不同路径/index.html","hash":"dff365194fd6963abc0fd20f0d3d5ed45f71ecdf","modified":1587471626563},{"_id":"public/2018/12/30/点云可视化/index.html","hash":"0442e60cb7ec3d97d1863e9dc1aa972669a52fc4","modified":1587471626563},{"_id":"public/2018/11/28/Lab532服务器环境/index.html","hash":"9e6672895740c3e01499a8bf8159a3c7fcbae822","modified":1587471626563},{"_id":"public/categories/Linux/index.html","hash":"9444cc20ea26b1aeb331b83ba025fe085f80a95c","modified":1587471626563},{"_id":"public/categories/操作系统/index.html","hash":"ff9c251345634f8b21f838de4be871d143fa9523","modified":1587471626563},{"_id":"public/categories/Algorithm/index.html","hash":"14eeef431e4a06e38d9fd9373d8cfa7ed81a6790","modified":1587471626563},{"_id":"public/categories/Linux/Web/index.html","hash":"c29b39fd25657fdf35336a87234556f7b81bf8d8","modified":1587471626563},{"_id":"public/categories/Point-Cloud/index.html","hash":"0dabbdb29ffcaaa07d578154133c50a275c34ad6","modified":1587471626563},{"_id":"public/categories/科学上网/index.html","hash":"a8e044e9f2884f9e87cc506b53c924e6d510399b","modified":1587471626563},{"_id":"public/archives/index.html","hash":"94e9f264f2537277da7d91ca219dfbc6c241a16e","modified":1587471626563},{"_id":"public/archives/2018/index.html","hash":"95b24be77dc8be1ed48f26165770aed979c47337","modified":1587471626563},{"_id":"public/archives/2018/11/index.html","hash":"937d6b4701258af74b52fbec72fa664c543bd27d","modified":1587471626563},{"_id":"public/archives/2018/12/index.html","hash":"d44aa56e6ac4324891eb8a123a5ac3acd930aae0","modified":1587471626563},{"_id":"public/archives/2020/index.html","hash":"c157db6454eb640d802aec707d88db66530aa83c","modified":1587471626563},{"_id":"public/archives/2020/02/index.html","hash":"68918e43870d98ef4e83f32166e531c404849371","modified":1587471626563},{"_id":"public/archives/2020/03/index.html","hash":"0d43f6fcc63ea757f8f208624aba1611d238888d","modified":1587471626563},{"_id":"public/tags/Lab/index.html","hash":"01c0e9e975d037280e2dcc08057bc324b7712507","modified":1587471626563},{"_id":"public/tags/小技巧/index.html","hash":"114f4a714e1273cdcf618278a77e9d5b59d4381d","modified":1587471626563},{"_id":"public/tags/TCP-IP/index.html","hash":"28f0e91bcacbbe37291d0bff93e913c704b60bdf","modified":1587471626563},{"_id":"public/tags/面试/index.html","hash":"d38c78b28fad43794dc215678bc053b0f6a71c4b","modified":1587471626563},{"_id":"public/tags/后端/index.html","hash":"05750ded227be46d651ad6d44a19e6082f2abf61","modified":1587471626563},{"_id":"public/tags/线程/index.html","hash":"b84c8c481e0d25bf87e7e181fdbb0b819a544963","modified":1587471626563},{"_id":"public/tags/进程/index.html","hash":"cb56d468cd27bdde93bd0435fd291581fef94cb2","modified":1587471626563},{"_id":"public/tags/LeetCode-动态规划-Medium/index.html","hash":"5c311d7b8140d339058e220b1b957a36a5d97cc2","modified":1587471626563},{"_id":"public/tags/字符串/index.html","hash":"f983d3e814a4f2481c551090563e7af104bd4561","modified":1587471626563},{"_id":"public/tags/python/index.html","hash":"a4d65668a5aedb982956c8ce6445c28709ce96a3","modified":1587471626563},{"_id":"public/tags/tensorflow/index.html","hash":"57ea36005878a7a47c4e3104b2ccc42f67f16cf4","modified":1587471626563},{"_id":"public/tags/CNN/index.html","hash":"bd3d99c560ed48d41baa0d0aa56535e8cf9ceda1","modified":1587471626563},{"_id":"public/tags/3D/index.html","hash":"024ffcbfaf9fd9ea0f606b2e2a19bc68784826f1","modified":1587471626563},{"_id":"public/tags/Vim/index.html","hash":"21c78e39d069e5ff1e2640913ea87c57beb736df","modified":1587471626563},{"_id":"public/tags/CentOS/index.html","hash":"61f5e561a9f8f3ef57587b8dcb638db6950a6757","modified":1587471626563},{"_id":"public/tags/谷歌云/index.html","hash":"d0b755325a99e62802c66088032eb2e76ce244b2","modified":1587471626563},{"_id":"public/tags/BBR加速/index.html","hash":"397f361bb1c7b84d5d209b0fc2bf38a868ca47f8","modified":1587471626563},{"_id":"public/tags/SSR/index.html","hash":"8beaebd11f878a7f2f608fcbd42c7c8072b8c841","modified":1587471626563},{"_id":"public/index.html","hash":"7f0efe3d80894872f7427f9370b7b32968e250fc","modified":1587471626563},{"_id":"public/categories/index.html","hash":"8e1ba8aa79ed8bddb40b83fa730c71572cbd9e4a","modified":1587471626563},{"_id":"public/tags/index.html","hash":"8622e80892c6a3580ca5d14dec066a5101af9708","modified":1587471626563},{"_id":"public/CNAME","hash":"e18959b203f6fa4531de418756790fbcf22044b5","modified":1587471626563},{"_id":"public/gallery/1.jpg","hash":"9d77332d35459c2d7a70843cd20042a3e13cf49c","modified":1587471626563},{"_id":"public/gallery/2.jpg","hash":"61aff17660dd4334006390090b4881e11e9469cd","modified":1587471626563},{"_id":"public/img/adoredee.png","hash":"00e3af2800935cd55d626e9ff0dbfefba0198f52","modified":1587471626563},{"_id":"public/img/alipay.png","hash":"a6f7ed54f32104da2d5e5148c7ca6857879909d4","modified":1587471626563},{"_id":"public/live2d/flat-ui-icons-regular.ttf","hash":"38c2162ef6eee02be3299ceaddab4f2c4b486aa1","modified":1587471626563},{"_id":"public/live2d/flat-ui-icons-regular.woff","hash":"b613bbbdb029dd9dbff8a87eb05c1410f2da74a9","modified":1587471626563},{"_id":"public/live2d/flat-ui-icons-regular.svg","hash":"5e1041d884e7516cf21fba6ca4aaab6c0ad4b580","modified":1587471626563},{"_id":"public/css/fonts/fontello.ttf","hash":"2f0ec712a4b69bbf3559279c3a59864dfb8b189e","modified":1587471626563},{"_id":"public/css/fonts/fontello.eot","hash":"2255b47d54d38128105b05e694dafff7701e3f68","modified":1587471626563},{"_id":"public/img/links/fangfang.png","hash":"36aaebce1582d71de4e9b5161ece841b19d6e7ac","modified":1587471626563},{"_id":"public/img/links/fghrsh.png","hash":"cf1836e0b1529cbb7cdd88fe4765f981f7143e4b","modified":1587471626563},{"_id":"public/img/links/nopic.jpg","hash":"6aa82d56e4058b992d692865286343134d87fd11","modified":1587471626563},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1587471626563},{"_id":"public/lib/blog-encrypt.js","hash":"96509f92b7037e8f750e4684cd440a3af98d9fec","modified":1587471626563},{"_id":"public/css/fonts/fontello.woff","hash":"27fd16775dde59ccfbe7b1ce81261b1af30a6703","modified":1587471626563},{"_id":"public/live2d/flat-ui-icons-regular.eot","hash":"aca0199880ba1945feb4ae85dfdf7436d4affec2","modified":1587471626563},{"_id":"public/css/fonts/fontello.svg","hash":"7bd222026fad35d5b93974e91b416dffbcadc1e3","modified":1587471626563},{"_id":"public/img/wechat.png","hash":"3ba1768e85df71789880048108fd02d48a53809c","modified":1587471626563},{"_id":"public/img/links/xsy.jpg","hash":"8615823fd178ef0756461f4b93d80f8c2226cd51","modified":1587471626563},{"_id":"public/css/helper.css","hash":"a4a9bc41f66f400d02a982e469cb158b57f97737","modified":1587471626563},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1587471626563},{"_id":"public/js/about-me.js","hash":"b81afcb58bba75631f32aaf0f0ed24b2f9806071","modified":1587471626563},{"_id":"public/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1587471626563},{"_id":"public/js/back-to-top.js","hash":"e7b18fa9017e790d147caba231fbd47721c32412","modified":1587471626563},{"_id":"public/js/friend.js","hash":"f562c65446b162d5369297000f4d930196a79947","modified":1587471626563},{"_id":"public/js/gallery.js","hash":"67c9713b7d5f1f19edde59bb15aeb7c7791f42a3","modified":1587471626563},{"_id":"public/js/globalUtils.js","hash":"c90e366b95da499dad8e2e6914a86399637c3c12","modified":1587471626563},{"_id":"public/js/main.js","hash":"eb6ddbb66433f190bf2902641d23375be8bb0669","modified":1587471626563},{"_id":"public/js/music.js","hash":"9e6c31173e87a44a48f03611ce2a5cd68cfb7a5a","modified":1587471626563},{"_id":"public/js/statistics.js","hash":"539515eb1f70d720c5b327c3e37699c78ad4f463","modified":1587471626563},{"_id":"public/js/poems.js","hash":"e468fc5f10dc499bdd2c0c8758d3ec6891b9ee59","modified":1587471626563},{"_id":"public/js/theme-setting.js","hash":"f15bb1da3dbd9a4cf6fa07f61831fd525e8d944f","modified":1587471626563},{"_id":"public/js/yule.js","hash":"3d133421319ff9772322e7fe983b2c6b32631e6e","modified":1587471626563},{"_id":"public/js/yulu.js","hash":"ca9247644949e5f59910e5acc0c5c67863f9178a","modified":1587471626563},{"_id":"public/json_data/music.json","hash":"2012b9a772cb597fbac92924a71d6ff1ab255a66","modified":1587471626563},{"_id":"public/json_data/friend.json","hash":"793452319b8b8018aa2210473968df60f94b5a93","modified":1587471626563},{"_id":"public/json_data/poems.json","hash":"b93009b348fa2ec37466f6dd8104160d38eef2d8","modified":1587471626563},{"_id":"public/json_data/record.json","hash":"1ccf3143dda7874c2673c090558f597a4b6f5063","modified":1587471626563},{"_id":"public/json_data/video.json","hash":"d950bf662184a5c3f64428953f6c7317f1438021","modified":1587471626563},{"_id":"public/json_data/yulu.json","hash":"f257a474f7382074d2fbea6160565c818705d62c","modified":1587471626563},{"_id":"public/live2d/autoload.js","hash":"4f39b9c15ac5c54e4f9349782ca38c9c517bbd24","modified":1587471626563},{"_id":"public/json_data/yule.json","hash":"6b1c3c34ef57b54c556dc453d012f5f4798ed7c5","modified":1587471626563},{"_id":"public/live2d/waifu.css","hash":"593f66b464a1144b132efbc7326ee7f4106b3c48","modified":1587471626563},{"_id":"public/css/style.css","hash":"7cd93be5d4dd30b69fbf9e21a0114f5b030fb27f","modified":1587471626563},{"_id":"public/js/comment-issue-data.js","hash":"731ab3ce31d4ca4d8c758ef669b4f09213eb9c6b","modified":1587471626563},{"_id":"public/js/insight.js","hash":"87878c6eaa3d40b180d9202c0fc8cc9146876097","modified":1587471626563},{"_id":"public/live2d/waifu-tips.json","hash":"9e492b959db93d1233e76048aa94c50fd20c1c16","modified":1587471626563},{"_id":"public/css/meplayer.min.css","hash":"a251581e4394b052def5e75f39a43a1828df09f4","modified":1587471626563},{"_id":"public/js/meplayer.js","hash":"f5aaffefa98bad92d22fca2c012d6d6b6e5f63c9","modified":1587471626563},{"_id":"public/live2d/waifu-tips.js","hash":"f6caa2088cd4e44c1eb290ca6ac14f88f1ed31af","modified":1587471626563},{"_id":"public/img/xiaoli.png","hash":"deb7d7ebd20ffa6de6ab877196afe0394ab7f374","modified":1587471626563},{"_id":"public/css/base.css","hash":"57b7cbc88f793dc6527b2764482ece2fb6896d8b","modified":1587471626563},{"_id":"public/css/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1587471626563},{"_id":"public/js/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1587471626563},{"_id":"public/js/gitalk.min.js","hash":"771950e5fcdb3a71cf8159baf232adfb71478a5b","modified":1587471626563},{"_id":"public/js/gitalk_self.min.js","hash":"622df1ce9820b98c67a7a34328b05c1f2027c428","modified":1587471626563},{"_id":"public/live2d/live2d.js","hash":"9a8d3faf6b828bc1ce9352ecf83db7db2369e6cb","modified":1587471626563},{"_id":"public/js/echarts.min.js","hash":"24d6e36647fad44a8bd5c288425f1e026a31cfec","modified":1587471626563}],"Category":[{"name":"Linux","_id":"ck99vmgjw0004mgvz9n9u7dos"},{"name":"操作系统","_id":"ck99vmgkh000fmgvzf5bga5rf"},{"name":"Algorithm","_id":"ck99vmgkl000nmgvz1ncvg6ju"},{"name":"Web","parent":"ck99vmgjw0004mgvz9n9u7dos","_id":"ck99vmgko000tmgvze8ixfr1y"},{"name":"Point Cloud","_id":"ck99vmgul001dmgvzcmpf74z8"},{"name":"科学上网","_id":"ck99vmgv9001wmgvz0jro1pve"}],"Data":[],"Page":[{"date":"2020-02-10T10:14:49.000Z","thumbnail":"https://i.loli.net/2020/03/28/fTNchPoFJr4bZ65.png","comments":0,"_content":"<h4 style=\"text-align:center\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=800 height=86 src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=0&height=66\"></iframe> </h4>\n<h4 style=\"text-align:center\">个人简介 </h4>\n\n---\n\n<br>路遥——《平凡的世界》\n\n> \"**既要脚踏实地于现实生活，又要不时跳出现实到理想的高台上张望一眼。在精神世界里建立起一套丰满的体系，引领我们不迷失不懈怠。待我们一觉醒来，跌落在现实中的时候，可以毫无怨言地勇敢地承担起生活重担。**\"\n\n#### 教育经历\n**上海交通大学**&nbsp;     \n控制工程  硕士  电子信息与电气工程学院\n**中南大学**&nbsp;     \n自动化  本科  信息科学与工程学院\n\n<br>\n\n#### 研究经历\n**深度学习在几何空间中的应用（点云研究）**\n- 研究内容：点云的分类、语义分割、实例分割、 3D点云目标检测\n- 论文：PyramNet: Point Cloud Pyramid Attention Network and Graph Embedding Module for Classification and Segmentation, Kang Zhiheng, Li Ning. International Conference on Neural Information Processing ( ICONIP2019, CCF-C), https://arxiv.org/abs/1906.03299v2.\n\n#### 志愿者经历\n- 和小伙伴一起照顾空巢老人整整大学四年\n\n#### 其他\n- 敬畏知识，尊重技术。\n\n#### 联系方式\n- [邮件](kangzhiheng@sjtu.edu.cn): kangzhiheng@sjtu.edu.cn / kangzhiheng@live.cn\n- [github](https://www.github.com/kangzhiheng/): https://www.github.com/kangzhiheng/\n\n<br>\n\n#### 博客信息\n\n---\n\n**建站心路历程：**本站是个人整理、记录和分享计算机相关技术，以及生活的一些点滴。\n<br>\n**本站概况：**前端小白，自从知道可以利用hexo搭建网站以来，就一直想拥有自己的博客网站，一直在探索中，之间换过无数次主题，换过的主题比我发的博客还多……直到遇上了[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus) ，简洁，清晰，易用，于是决定入坑（其实之前也有心仪的，只不过到了这个主题，发现之前的摸索积累下的经验，可以比较完美的在这个主题上实现心中的想法，义无反顾的换了），搭好后又看见了[Removeif](https://github.com/removeif/hexo-theme-icarus-removeif)，其在[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus)之上进行了部分修改，遂本人在[Removeif](https://github.com/removeif/hexo-theme-icarus-removeif)的基础之上进行了再次更改得到现在的博客。\n\n本来可以消停一点了，但是又紧接着看到了[水寒](https://dp2px.com/)，**依旧心动**……根据作者所述，其受[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus)启发，结合`hugo`框架下的[Icarus主题](https://github.com/digitalcraftsman/hugo-icarus-theme)进行更改，看后深受震动，原来还有编译这么快的静态框架，于是纠结是不是要从`hexo`换到`hugo`，思来想去，就在准备要换的时候，突然有所醒悟，追求前沿的技术没有错，但是新技术太多了，自己原来的还没有坚持一天，就想要更好的，万一后面遇到更好的框架和主题，依旧陷入这种无谓的追求当中，我是前端小白，我的优势和时间不在这里，当下的主题框架，与其并没有过大的差距，应该花费宝贵的时间去做对于自己更有意义的事情，等到时机成熟，再换也不迟。\n\n**对于个人，追求利于自己的卓越技能，一味的追求时尚，容易让我失去一颗沉静的心态。**\n\n**后续计划：**：\n- 一年之后，考虑更换号称世界上最快的框架——`hugo`；\n- 使用Travis CI自动化部署；\n\n\n**更新日志：**\n--*2020.02.11：优化网页加载速度，将每一个导航栏的封面，由本地转到七牛云图床，再利用mPic配合七牛云进行图片上传*；\n--*2020.02.10：修改gitalk使用过程中的bug，增加`体系`、`分享`、`算法`、`诗词`、`语录`、`开心`6个导航栏*；\n--*2020.02.09：配置gitalk，更改导航栏，学习源代码*；\n--*2020.02.08：适配[Removeif](https://github.com/lxqxsyu/hexo-theme-icarus)修改后的`Icarus`主题*；\n--*2020.03.28：提交时，显示布局错误，重新部署代码时，还是会偶尔出现，过大半天就好了，原因未知*；\n\n<br>\n\n<br>\n\n#### 本站推荐索引\n\n---\n**技术相关**\n- [Lab532服务器环境(Ubuntu18.04LTS)须知](https://www.kangzhiheng/2018/11/28/Lab532%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/)\n\n\n**点云相关**\n- [深度学习在几何空间中的应用（一）：三维可视化](https://www.kangzhiheng/2018/12/30/%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/)\n<br>\n\n<br>\n\n#### 年度计划\n**2020计划**\n\n---\n>**2020-YEAR-GOALS**              \n>+ [ ] 努力工作，给家人和女朋友以及自己换一部手机\n>+ [ ] 住一个舒心的大房子\n>+ [ ] 希望家人和女朋友安全、开心、满足\n\n>**2020-HALF-YEAR-GOALS**\n>+ [ ] 回家一次\n>+ [ ] 旅游一次\n\n>**2020-QUARTER-GOALS**              \n>+ [ ] 学一个小技能\n>+ [ ] 给家人和女朋友买一份用心的礼物\n\n>**2020-MONTH-GOALS**              \n>+ [ ] 每个月读一本书\n>+ [ ] 购物一次\n>+ [ ] 学会做一个新菜\n\n>**2020-WEEK-GOALS**              \n>+ [ ] 每周跟父母同一次电话\n>+ [ ] 每周至少更两篇博文\n\n>**2020-DAY-GOALS**              \n>+ [ ] 和女朋友道晚安\n>+ [ ] 生气不能隔夜\n>+ [ ] 每天刷一道题\n\n<br>","source":"about/index.md","raw":"---\ndate: 2020-02-10 18:14:49\nthumbnail: https://i.loli.net/2020/03/28/fTNchPoFJr4bZ65.png\ncomments: false\n---\n<h4 style=\"text-align:center\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=800 height=86 src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=0&height=66\"></iframe> </h4>\n<h4 style=\"text-align:center\">个人简介 </h4>\n\n---\n\n<br>路遥——《平凡的世界》\n\n> \"**既要脚踏实地于现实生活，又要不时跳出现实到理想的高台上张望一眼。在精神世界里建立起一套丰满的体系，引领我们不迷失不懈怠。待我们一觉醒来，跌落在现实中的时候，可以毫无怨言地勇敢地承担起生活重担。**\"\n\n#### 教育经历\n**上海交通大学**&nbsp;     \n控制工程  硕士  电子信息与电气工程学院\n**中南大学**&nbsp;     \n自动化  本科  信息科学与工程学院\n\n<br>\n\n#### 研究经历\n**深度学习在几何空间中的应用（点云研究）**\n- 研究内容：点云的分类、语义分割、实例分割、 3D点云目标检测\n- 论文：PyramNet: Point Cloud Pyramid Attention Network and Graph Embedding Module for Classification and Segmentation, Kang Zhiheng, Li Ning. International Conference on Neural Information Processing ( ICONIP2019, CCF-C), https://arxiv.org/abs/1906.03299v2.\n\n#### 志愿者经历\n- 和小伙伴一起照顾空巢老人整整大学四年\n\n#### 其他\n- 敬畏知识，尊重技术。\n\n#### 联系方式\n- [邮件](kangzhiheng@sjtu.edu.cn): kangzhiheng@sjtu.edu.cn / kangzhiheng@live.cn\n- [github](https://www.github.com/kangzhiheng/): https://www.github.com/kangzhiheng/\n\n<br>\n\n#### 博客信息\n\n---\n\n**建站心路历程：**本站是个人整理、记录和分享计算机相关技术，以及生活的一些点滴。\n<br>\n**本站概况：**前端小白，自从知道可以利用hexo搭建网站以来，就一直想拥有自己的博客网站，一直在探索中，之间换过无数次主题，换过的主题比我发的博客还多……直到遇上了[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus) ，简洁，清晰，易用，于是决定入坑（其实之前也有心仪的，只不过到了这个主题，发现之前的摸索积累下的经验，可以比较完美的在这个主题上实现心中的想法，义无反顾的换了），搭好后又看见了[Removeif](https://github.com/removeif/hexo-theme-icarus-removeif)，其在[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus)之上进行了部分修改，遂本人在[Removeif](https://github.com/removeif/hexo-theme-icarus-removeif)的基础之上进行了再次更改得到现在的博客。\n\n本来可以消停一点了，但是又紧接着看到了[水寒](https://dp2px.com/)，**依旧心动**……根据作者所述，其受[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus)启发，结合`hugo`框架下的[Icarus主题](https://github.com/digitalcraftsman/hugo-icarus-theme)进行更改，看后深受震动，原来还有编译这么快的静态框架，于是纠结是不是要从`hexo`换到`hugo`，思来想去，就在准备要换的时候，突然有所醒悟，追求前沿的技术没有错，但是新技术太多了，自己原来的还没有坚持一天，就想要更好的，万一后面遇到更好的框架和主题，依旧陷入这种无谓的追求当中，我是前端小白，我的优势和时间不在这里，当下的主题框架，与其并没有过大的差距，应该花费宝贵的时间去做对于自己更有意义的事情，等到时机成熟，再换也不迟。\n\n**对于个人，追求利于自己的卓越技能，一味的追求时尚，容易让我失去一颗沉静的心态。**\n\n**后续计划：**：\n- 一年之后，考虑更换号称世界上最快的框架——`hugo`；\n- 使用Travis CI自动化部署；\n\n\n**更新日志：**\n--*2020.02.11：优化网页加载速度，将每一个导航栏的封面，由本地转到七牛云图床，再利用mPic配合七牛云进行图片上传*；\n--*2020.02.10：修改gitalk使用过程中的bug，增加`体系`、`分享`、`算法`、`诗词`、`语录`、`开心`6个导航栏*；\n--*2020.02.09：配置gitalk，更改导航栏，学习源代码*；\n--*2020.02.08：适配[Removeif](https://github.com/lxqxsyu/hexo-theme-icarus)修改后的`Icarus`主题*；\n--*2020.03.28：提交时，显示布局错误，重新部署代码时，还是会偶尔出现，过大半天就好了，原因未知*；\n\n<br>\n\n<br>\n\n#### 本站推荐索引\n\n---\n**技术相关**\n- [Lab532服务器环境(Ubuntu18.04LTS)须知](https://www.kangzhiheng/2018/11/28/Lab532%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/)\n\n\n**点云相关**\n- [深度学习在几何空间中的应用（一）：三维可视化](https://www.kangzhiheng/2018/12/30/%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/)\n<br>\n\n<br>\n\n#### 年度计划\n**2020计划**\n\n---\n>**2020-YEAR-GOALS**              \n>+ [ ] 努力工作，给家人和女朋友以及自己换一部手机\n>+ [ ] 住一个舒心的大房子\n>+ [ ] 希望家人和女朋友安全、开心、满足\n\n>**2020-HALF-YEAR-GOALS**\n>+ [ ] 回家一次\n>+ [ ] 旅游一次\n\n>**2020-QUARTER-GOALS**              \n>+ [ ] 学一个小技能\n>+ [ ] 给家人和女朋友买一份用心的礼物\n\n>**2020-MONTH-GOALS**              \n>+ [ ] 每个月读一本书\n>+ [ ] 购物一次\n>+ [ ] 学会做一个新菜\n\n>**2020-WEEK-GOALS**              \n>+ [ ] 每周跟父母同一次电话\n>+ [ ] 每周至少更两篇博文\n\n>**2020-DAY-GOALS**              \n>+ [ ] 和女朋友道晚安\n>+ [ ] 生气不能隔夜\n>+ [ ] 每天刷一道题\n\n<br>","updated":"2020-03-28T17:53:12.028Z","path":"about/index.html","title":"","layout":"page","_id":"ck99vmgjq0001mgvz3z1b8kad","content":"<h4 style=\"text-align:center\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=800 height=86 src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=0&height=66\"></iframe> </h4>\n<h4 style=\"text-align:center\">个人简介 </h4>\n\n<hr>\n<p><br>路遥——《平凡的世界》</p>\n<blockquote>\n<p>“<strong>既要脚踏实地于现实生活，又要不时跳出现实到理想的高台上张望一眼。在精神世界里建立起一套丰满的体系，引领我们不迷失不懈怠。待我们一觉醒来，跌落在现实中的时候，可以毫无怨言地勇敢地承担起生活重担。</strong>“</p>\n</blockquote>\n<h4 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h4><p><strong>上海交通大学</strong>&nbsp;<br>控制工程  硕士  电子信息与电气工程学院<br><strong>中南大学</strong>&nbsp;<br>自动化  本科  信息科学与工程学院</p>\n<br>\n\n<h4 id=\"研究经历\"><a href=\"#研究经历\" class=\"headerlink\" title=\"研究经历\"></a>研究经历</h4><p><strong>深度学习在几何空间中的应用（点云研究）</strong></p>\n<ul>\n<li>研究内容：点云的分类、语义分割、实例分割、 3D点云目标检测</li>\n<li>论文：PyramNet: Point Cloud Pyramid Attention Network and Graph Embedding Module for Classification and Segmentation, Kang Zhiheng, Li Ning. International Conference on Neural Information Processing ( ICONIP2019, CCF-C), <a href=\"https://arxiv.org/abs/1906.03299v2\">https://arxiv.org/abs/1906.03299v2</a>.</li>\n</ul>\n<h4 id=\"志愿者经历\"><a href=\"#志愿者经历\" class=\"headerlink\" title=\"志愿者经历\"></a>志愿者经历</h4><ul>\n<li>和小伙伴一起照顾空巢老人整整大学四年</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>敬畏知识，尊重技术。</li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li><a href=\"kangzhiheng@sjtu.edu.cn\">邮件</a>: <a href=\"mailto:kangzhiheng@sjtu.edu.cn\">kangzhiheng@sjtu.edu.cn</a> / <a href=\"mailto:kangzhiheng@live.cn\">kangzhiheng@live.cn</a></li>\n<li><a href=\"https://www.github.com/kangzhiheng/\">github</a>: <a href=\"https://www.github.com/kangzhiheng/\">https://www.github.com/kangzhiheng/</a></li>\n</ul>\n<br>\n\n<h4 id=\"博客信息\"><a href=\"#博客信息\" class=\"headerlink\" title=\"博客信息\"></a>博客信息</h4><hr>\n<p><strong>建站心路历程：</strong>本站是个人整理、记录和分享计算机相关技术，以及生活的一些点滴。<br><br><br><strong>本站概况：</strong>前端小白，自从知道可以利用hexo搭建网站以来，就一直想拥有自己的博客网站，一直在探索中，之间换过无数次主题，换过的主题比我发的博客还多……直到遇上了<a href=\"http://github.com/ppoffice/hexo-theme-icarus\">Icarus主题</a> ，简洁，清晰，易用，于是决定入坑（其实之前也有心仪的，只不过到了这个主题，发现之前的摸索积累下的经验，可以比较完美的在这个主题上实现心中的想法，义无反顾的换了），搭好后又看见了<a href=\"https://github.com/removeif/hexo-theme-icarus-removeif\">Removeif</a>，其在<a href=\"http://github.com/ppoffice/hexo-theme-icarus\">Icarus主题</a>之上进行了部分修改，遂本人在<a href=\"https://github.com/removeif/hexo-theme-icarus-removeif\">Removeif</a>的基础之上进行了再次更改得到现在的博客。</p>\n<p>本来可以消停一点了，但是又紧接着看到了<a href=\"https://dp2px.com/\">水寒</a>，<strong>依旧心动</strong>……根据作者所述，其受<a href=\"http://github.com/ppoffice/hexo-theme-icarus\">Icarus主题</a>启发，结合<code>hugo</code>框架下的<a href=\"https://github.com/digitalcraftsman/hugo-icarus-theme\">Icarus主题</a>进行更改，看后深受震动，原来还有编译这么快的静态框架，于是纠结是不是要从<code>hexo</code>换到<code>hugo</code>，思来想去，就在准备要换的时候，突然有所醒悟，追求前沿的技术没有错，但是新技术太多了，自己原来的还没有坚持一天，就想要更好的，万一后面遇到更好的框架和主题，依旧陷入这种无谓的追求当中，我是前端小白，我的优势和时间不在这里，当下的主题框架，与其并没有过大的差距，应该花费宝贵的时间去做对于自己更有意义的事情，等到时机成熟，再换也不迟。</p>\n<p><strong>对于个人，追求利于自己的卓越技能，一味的追求时尚，容易让我失去一颗沉静的心态。</strong></p>\n<p><strong>后续计划：</strong>：</p>\n<ul>\n<li>一年之后，考虑更换号称世界上最快的框架——<code>hugo</code>；</li>\n<li>使用Travis CI自动化部署；</li>\n</ul>\n<p><strong>更新日志：</strong><br>–<em>2020.02.11：优化网页加载速度，将每一个导航栏的封面，由本地转到七牛云图床，再利用mPic配合七牛云进行图片上传</em>；<br>–<em>2020.02.10：修改gitalk使用过程中的bug，增加<code>体系</code>、<code>分享</code>、<code>算法</code>、<code>诗词</code>、<code>语录</code>、<code>开心</code>6个导航栏</em>；<br>–<em>2020.02.09：配置gitalk，更改导航栏，学习源代码</em>；<br>–<em>2020.02.08：适配<a href=\"https://github.com/lxqxsyu/hexo-theme-icarus\">Removeif</a>修改后的<code>Icarus</code>主题</em>；<br>–<em>2020.03.28：提交时，显示布局错误，重新部署代码时，还是会偶尔出现，过大半天就好了，原因未知</em>；</p>\n<br>\n\n<br>\n\n<h4 id=\"本站推荐索引\"><a href=\"#本站推荐索引\" class=\"headerlink\" title=\"本站推荐索引\"></a>本站推荐索引</h4><hr>\n<p><strong>技术相关</strong></p>\n<ul>\n<li><a href=\"https://www.kangzhiheng/2018/11/28/Lab532%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/\">Lab532服务器环境(Ubuntu18.04LTS)须知</a></li>\n</ul>\n<p><strong>点云相关</strong></p>\n<ul>\n<li><a href=\"https://www.kangzhiheng/2018/12/30/%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/\">深度学习在几何空间中的应用（一）：三维可视化</a><br>\n\n</li>\n</ul>\n<br>\n\n<h4 id=\"年度计划\"><a href=\"#年度计划\" class=\"headerlink\" title=\"年度计划\"></a>年度计划</h4><p><strong>2020计划</strong></p>\n<hr>\n<blockquote>\n<p><strong>2020-YEAR-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 努力工作，给家人和女朋友以及自己换一部手机</li>\n<li><input disabled=\"\" type=\"checkbox\"> 住一个舒心的大房子</li>\n<li><input disabled=\"\" type=\"checkbox\"> 希望家人和女朋友安全、开心、满足</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-HALF-YEAR-GOALS</strong></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 回家一次</li>\n<li><input disabled=\"\" type=\"checkbox\"> 旅游一次</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-QUARTER-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 学一个小技能</li>\n<li><input disabled=\"\" type=\"checkbox\"> 给家人和女朋友买一份用心的礼物</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-MONTH-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 每个月读一本书</li>\n<li><input disabled=\"\" type=\"checkbox\"> 购物一次</li>\n<li><input disabled=\"\" type=\"checkbox\"> 学会做一个新菜</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-WEEK-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 每周跟父母同一次电话</li>\n<li><input disabled=\"\" type=\"checkbox\"> 每周至少更两篇博文</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-DAY-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 和女朋友道晚安</li>\n<li><input disabled=\"\" type=\"checkbox\"> 生气不能隔夜</li>\n<li><input disabled=\"\" type=\"checkbox\"> 每天刷一道题</li>\n</ul>\n</blockquote>\n<br>","site":{"data":{}},"excerpt":"","more":"<h4 style=\"text-align:center\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=800 height=86 src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=0&height=66\"></iframe> </h4>\n<h4 style=\"text-align:center\">个人简介 </h4>\n\n<hr>\n<p><br>路遥——《平凡的世界》</p>\n<blockquote>\n<p>“<strong>既要脚踏实地于现实生活，又要不时跳出现实到理想的高台上张望一眼。在精神世界里建立起一套丰满的体系，引领我们不迷失不懈怠。待我们一觉醒来，跌落在现实中的时候，可以毫无怨言地勇敢地承担起生活重担。</strong>“</p>\n</blockquote>\n<h4 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h4><p><strong>上海交通大学</strong>&nbsp;<br>控制工程  硕士  电子信息与电气工程学院<br><strong>中南大学</strong>&nbsp;<br>自动化  本科  信息科学与工程学院</p>\n<br>\n\n<h4 id=\"研究经历\"><a href=\"#研究经历\" class=\"headerlink\" title=\"研究经历\"></a>研究经历</h4><p><strong>深度学习在几何空间中的应用（点云研究）</strong></p>\n<ul>\n<li>研究内容：点云的分类、语义分割、实例分割、 3D点云目标检测</li>\n<li>论文：PyramNet: Point Cloud Pyramid Attention Network and Graph Embedding Module for Classification and Segmentation, Kang Zhiheng, Li Ning. International Conference on Neural Information Processing ( ICONIP2019, CCF-C), <a href=\"https://arxiv.org/abs/1906.03299v2\">https://arxiv.org/abs/1906.03299v2</a>.</li>\n</ul>\n<h4 id=\"志愿者经历\"><a href=\"#志愿者经历\" class=\"headerlink\" title=\"志愿者经历\"></a>志愿者经历</h4><ul>\n<li>和小伙伴一起照顾空巢老人整整大学四年</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>敬畏知识，尊重技术。</li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li><a href=\"kangzhiheng@sjtu.edu.cn\">邮件</a>: <a href=\"mailto:kangzhiheng@sjtu.edu.cn\">kangzhiheng@sjtu.edu.cn</a> / <a href=\"mailto:kangzhiheng@live.cn\">kangzhiheng@live.cn</a></li>\n<li><a href=\"https://www.github.com/kangzhiheng/\">github</a>: <a href=\"https://www.github.com/kangzhiheng/\">https://www.github.com/kangzhiheng/</a></li>\n</ul>\n<br>\n\n<h4 id=\"博客信息\"><a href=\"#博客信息\" class=\"headerlink\" title=\"博客信息\"></a>博客信息</h4><hr>\n<p><strong>建站心路历程：</strong>本站是个人整理、记录和分享计算机相关技术，以及生活的一些点滴。<br><br><br><strong>本站概况：</strong>前端小白，自从知道可以利用hexo搭建网站以来，就一直想拥有自己的博客网站，一直在探索中，之间换过无数次主题，换过的主题比我发的博客还多……直到遇上了<a href=\"http://github.com/ppoffice/hexo-theme-icarus\">Icarus主题</a> ，简洁，清晰，易用，于是决定入坑（其实之前也有心仪的，只不过到了这个主题，发现之前的摸索积累下的经验，可以比较完美的在这个主题上实现心中的想法，义无反顾的换了），搭好后又看见了<a href=\"https://github.com/removeif/hexo-theme-icarus-removeif\">Removeif</a>，其在<a href=\"http://github.com/ppoffice/hexo-theme-icarus\">Icarus主题</a>之上进行了部分修改，遂本人在<a href=\"https://github.com/removeif/hexo-theme-icarus-removeif\">Removeif</a>的基础之上进行了再次更改得到现在的博客。</p>\n<p>本来可以消停一点了，但是又紧接着看到了<a href=\"https://dp2px.com/\">水寒</a>，<strong>依旧心动</strong>……根据作者所述，其受<a href=\"http://github.com/ppoffice/hexo-theme-icarus\">Icarus主题</a>启发，结合<code>hugo</code>框架下的<a href=\"https://github.com/digitalcraftsman/hugo-icarus-theme\">Icarus主题</a>进行更改，看后深受震动，原来还有编译这么快的静态框架，于是纠结是不是要从<code>hexo</code>换到<code>hugo</code>，思来想去，就在准备要换的时候，突然有所醒悟，追求前沿的技术没有错，但是新技术太多了，自己原来的还没有坚持一天，就想要更好的，万一后面遇到更好的框架和主题，依旧陷入这种无谓的追求当中，我是前端小白，我的优势和时间不在这里，当下的主题框架，与其并没有过大的差距，应该花费宝贵的时间去做对于自己更有意义的事情，等到时机成熟，再换也不迟。</p>\n<p><strong>对于个人，追求利于自己的卓越技能，一味的追求时尚，容易让我失去一颗沉静的心态。</strong></p>\n<p><strong>后续计划：</strong>：</p>\n<ul>\n<li>一年之后，考虑更换号称世界上最快的框架——<code>hugo</code>；</li>\n<li>使用Travis CI自动化部署；</li>\n</ul>\n<p><strong>更新日志：</strong><br>–<em>2020.02.11：优化网页加载速度，将每一个导航栏的封面，由本地转到七牛云图床，再利用mPic配合七牛云进行图片上传</em>；<br>–<em>2020.02.10：修改gitalk使用过程中的bug，增加<code>体系</code>、<code>分享</code>、<code>算法</code>、<code>诗词</code>、<code>语录</code>、<code>开心</code>6个导航栏</em>；<br>–<em>2020.02.09：配置gitalk，更改导航栏，学习源代码</em>；<br>–<em>2020.02.08：适配<a href=\"https://github.com/lxqxsyu/hexo-theme-icarus\">Removeif</a>修改后的<code>Icarus</code>主题</em>；<br>–<em>2020.03.28：提交时，显示布局错误，重新部署代码时，还是会偶尔出现，过大半天就好了，原因未知</em>；</p>\n<br>\n\n<br>\n\n<h4 id=\"本站推荐索引\"><a href=\"#本站推荐索引\" class=\"headerlink\" title=\"本站推荐索引\"></a>本站推荐索引</h4><hr>\n<p><strong>技术相关</strong></p>\n<ul>\n<li><a href=\"https://www.kangzhiheng/2018/11/28/Lab532%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/\">Lab532服务器环境(Ubuntu18.04LTS)须知</a></li>\n</ul>\n<p><strong>点云相关</strong></p>\n<ul>\n<li><a href=\"https://www.kangzhiheng/2018/12/30/%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/\">深度学习在几何空间中的应用（一）：三维可视化</a><br>\n\n</li>\n</ul>\n<br>\n\n<h4 id=\"年度计划\"><a href=\"#年度计划\" class=\"headerlink\" title=\"年度计划\"></a>年度计划</h4><p><strong>2020计划</strong></p>\n<hr>\n<blockquote>\n<p><strong>2020-YEAR-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 努力工作，给家人和女朋友以及自己换一部手机</li>\n<li><input disabled=\"\" type=\"checkbox\"> 住一个舒心的大房子</li>\n<li><input disabled=\"\" type=\"checkbox\"> 希望家人和女朋友安全、开心、满足</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-HALF-YEAR-GOALS</strong></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 回家一次</li>\n<li><input disabled=\"\" type=\"checkbox\"> 旅游一次</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-QUARTER-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 学一个小技能</li>\n<li><input disabled=\"\" type=\"checkbox\"> 给家人和女朋友买一份用心的礼物</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-MONTH-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 每个月读一本书</li>\n<li><input disabled=\"\" type=\"checkbox\"> 购物一次</li>\n<li><input disabled=\"\" type=\"checkbox\"> 学会做一个新菜</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-WEEK-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 每周跟父母同一次电话</li>\n<li><input disabled=\"\" type=\"checkbox\"> 每周至少更两篇博文</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>2020-DAY-GOALS</strong>              </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 和女朋友道晚安</li>\n<li><input disabled=\"\" type=\"checkbox\"> 生气不能隔夜</li>\n<li><input disabled=\"\" type=\"checkbox\"> 每天刷一道题</li>\n</ul>\n</blockquote>\n<br>"},{"date":"2019-07-29T08:28:26.000Z","thumbnail":"https://pic.downk.cc/item/5e7f689b504f4bcb04a07eaf.jpg","_content":"\n> **李沁**\n<div class=\"justified-gallery\">\n\n![李沁](http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g71m633wzrj21z41bfnpe.jpg)\n![李沁](http://wx1.sinaimg.cn/mw1024/6bd3fcd9ly1g6ql4xxl9jj24802tc7wp.jpg)\n![李沁](http://wx2.sinaimg.cn/mw1024/6bd3fcd9ly1g4hjtz2tmyj24ao2v4kjx.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4gzkrwz5dj256o3ggu13.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4948w6gsgj22ge1myqv7.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g3xfwe1cp0j22yo4g0hdv.jpg)\n![李沁](http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g2fz20p68yj22o04007wq.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9gy1g195uzvx2yj22nk3ghu0z.jpg)\n</div>\n\n<br>\n\n> **李一桐**\n<div class=\"justified-gallery\">\n\n![李一桐](http://wx1.sinaimg.cn/mw1024/005RAHfgly1fuzz17s2q3j32e43cku0x.jpg)\n![李一桐](http://wx2.sinaimg.cn/mw1024/005RAHfgly1fukn4xojlbj31900u041a.jpg)\n![李一桐](http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu97fyqauoj30qo140tj2.jpg)\n![李一桐](http://wx1.sinaimg.cn/mw1024/005RAHfgly1fu4qu4cxlgj31vw26hx6t.jpg)\n![李一桐](http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu0u5xhdhjj30qo0ziag2.jpg)\n![李一桐](http://wx2.sinaimg.cn/mw1024/005RAHfgly1fswqofjpw5j30qo1bfalp.jpg)\n</div>\n\n<br>\n\n---\n图片搜集于互联网，侵权请[留言](https://removeif.github.io/message/)，马上处理😊。\n","source":"album/index.md","raw":"---\ndate: 2019-07-29 16:28:26\nthumbnail: https://pic.downk.cc/item/5e7f689b504f4bcb04a07eaf.jpg\n---\n\n> **李沁**\n<div class=\"justified-gallery\">\n\n![李沁](http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g71m633wzrj21z41bfnpe.jpg)\n![李沁](http://wx1.sinaimg.cn/mw1024/6bd3fcd9ly1g6ql4xxl9jj24802tc7wp.jpg)\n![李沁](http://wx2.sinaimg.cn/mw1024/6bd3fcd9ly1g4hjtz2tmyj24ao2v4kjx.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4gzkrwz5dj256o3ggu13.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4948w6gsgj22ge1myqv7.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g3xfwe1cp0j22yo4g0hdv.jpg)\n![李沁](http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g2fz20p68yj22o04007wq.jpg)\n![李沁](http://wx3.sinaimg.cn/mw1024/6bd3fcd9gy1g195uzvx2yj22nk3ghu0z.jpg)\n</div>\n\n<br>\n\n> **李一桐**\n<div class=\"justified-gallery\">\n\n![李一桐](http://wx1.sinaimg.cn/mw1024/005RAHfgly1fuzz17s2q3j32e43cku0x.jpg)\n![李一桐](http://wx2.sinaimg.cn/mw1024/005RAHfgly1fukn4xojlbj31900u041a.jpg)\n![李一桐](http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu97fyqauoj30qo140tj2.jpg)\n![李一桐](http://wx1.sinaimg.cn/mw1024/005RAHfgly1fu4qu4cxlgj31vw26hx6t.jpg)\n![李一桐](http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu0u5xhdhjj30qo0ziag2.jpg)\n![李一桐](http://wx2.sinaimg.cn/mw1024/005RAHfgly1fswqofjpw5j30qo1bfalp.jpg)\n</div>\n\n<br>\n\n---\n图片搜集于互联网，侵权请[留言](https://removeif.github.io/message/)，马上处理😊。\n","updated":"2020-03-28T15:09:30.353Z","path":"album/index.html","title":"","comments":1,"layout":"page","_id":"ck99vmgju0003mgvz6obf7vqs","content":"<blockquote>\n<p><strong>李沁</strong></p>\n</blockquote>\n<div class=\"justified-gallery\">\n\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g71m633wzrj21z41bfnpe.jpg\" alt=\"李沁\"><br><img src=\"http://wx1.sinaimg.cn/mw1024/6bd3fcd9ly1g6ql4xxl9jj24802tc7wp.jpg\" alt=\"李沁\"><br><img src=\"http://wx2.sinaimg.cn/mw1024/6bd3fcd9ly1g4hjtz2tmyj24ao2v4kjx.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4gzkrwz5dj256o3ggu13.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4948w6gsgj22ge1myqv7.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g3xfwe1cp0j22yo4g0hdv.jpg\" alt=\"李沁\"><br><img src=\"http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g2fz20p68yj22o04007wq.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9gy1g195uzvx2yj22nk3ghu0z.jpg\" alt=\"李沁\"></p>\n</div>\n\n<br>\n\n<blockquote>\n<p><strong>李一桐</strong></p>\n</blockquote>\n<div class=\"justified-gallery\">\n\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/005RAHfgly1fuzz17s2q3j32e43cku0x.jpg\" alt=\"李一桐\"><br><img src=\"http://wx2.sinaimg.cn/mw1024/005RAHfgly1fukn4xojlbj31900u041a.jpg\" alt=\"李一桐\"><br><img src=\"http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu97fyqauoj30qo140tj2.jpg\" alt=\"李一桐\"><br><img src=\"http://wx1.sinaimg.cn/mw1024/005RAHfgly1fu4qu4cxlgj31vw26hx6t.jpg\" alt=\"李一桐\"><br><img src=\"http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu0u5xhdhjj30qo0ziag2.jpg\" alt=\"李一桐\"><br><img src=\"http://wx2.sinaimg.cn/mw1024/005RAHfgly1fswqofjpw5j30qo1bfalp.jpg\" alt=\"李一桐\"></p>\n</div>\n\n<br>\n\n<hr>\n<p>图片搜集于互联网，侵权请<a href=\"https://removeif.github.io/message/\">留言</a>，马上处理😊。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>李沁</strong></p>\n</blockquote>\n<div class=\"justified-gallery\">\n\n<p><img src=\"http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g71m633wzrj21z41bfnpe.jpg\" alt=\"李沁\"><br><img src=\"http://wx1.sinaimg.cn/mw1024/6bd3fcd9ly1g6ql4xxl9jj24802tc7wp.jpg\" alt=\"李沁\"><br><img src=\"http://wx2.sinaimg.cn/mw1024/6bd3fcd9ly1g4hjtz2tmyj24ao2v4kjx.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4gzkrwz5dj256o3ggu13.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g4948w6gsgj22ge1myqv7.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9ly1g3xfwe1cp0j22yo4g0hdv.jpg\" alt=\"李沁\"><br><img src=\"http://wx4.sinaimg.cn/mw1024/6bd3fcd9ly1g2fz20p68yj22o04007wq.jpg\" alt=\"李沁\"><br><img src=\"http://wx3.sinaimg.cn/mw1024/6bd3fcd9gy1g195uzvx2yj22nk3ghu0z.jpg\" alt=\"李沁\"></p>\n</div>\n\n<br>\n\n<blockquote>\n<p><strong>李一桐</strong></p>\n</blockquote>\n<div class=\"justified-gallery\">\n\n<p><img src=\"http://wx1.sinaimg.cn/mw1024/005RAHfgly1fuzz17s2q3j32e43cku0x.jpg\" alt=\"李一桐\"><br><img src=\"http://wx2.sinaimg.cn/mw1024/005RAHfgly1fukn4xojlbj31900u041a.jpg\" alt=\"李一桐\"><br><img src=\"http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu97fyqauoj30qo140tj2.jpg\" alt=\"李一桐\"><br><img src=\"http://wx1.sinaimg.cn/mw1024/005RAHfgly1fu4qu4cxlgj31vw26hx6t.jpg\" alt=\"李一桐\"><br><img src=\"http://wx4.sinaimg.cn/mw1024/005RAHfgly1fu0u5xhdhjj30qo0ziag2.jpg\" alt=\"李一桐\"><br><img src=\"http://wx2.sinaimg.cn/mw1024/005RAHfgly1fswqofjpw5j30qo1bfalp.jpg\" alt=\"李一桐\"></p>\n</div>\n\n<br>\n\n<hr>\n<p>图片搜集于互联网，侵权请<a href=\"https://removeif.github.io/message/\">留言</a>，马上处理😊。</p>\n"},{"thumbnail":"http://wx2.sinaimg.cn/large/b5d1b710ly1g6tkoq1a10j212w0k17wh.jpg","date":"2019-09-09T10:52:09.000Z","_content":"<div class=\"friend-title-item\"><br>链接须知<br><br><hr></div>\n\n- 原则上只记录技术相关的网站，但不包括含有和色情、暴力、政治敏感的网站。\n- 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。\n\n<script type=\"text/javascript\" defer src=\"/js/program.js\"></script>\n\n\n<div class=\"links-content\">加载中，稍等几秒...</div>","source":"friend/index.md","raw":"---\nthumbnail: http://wx2.sinaimg.cn/large/b5d1b710ly1g6tkoq1a10j212w0k17wh.jpg\ndate: 2019-09-09 18:52:09\n---\n<div class=\"friend-title-item\"><br>链接须知<br><br><hr></div>\n\n- 原则上只记录技术相关的网站，但不包括含有和色情、暴力、政治敏感的网站。\n- 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。\n\n<script type=\"text/javascript\" defer src=\"/js/program.js\"></script>\n\n\n<div class=\"links-content\">加载中，稍等几秒...</div>","updated":"2020-02-10T07:41:26.487Z","path":"friend/index.html","title":"","comments":1,"layout":"page","_id":"ck99vmgjz0007mgvz729fgqys","content":"<div class=\"friend-title-item\"><br>链接须知<br><br><hr></div>\n\n<ul>\n<li>原则上只记录技术相关的网站，但不包括含有和色情、暴力、政治敏感的网站。</li>\n<li>不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。</li>\n</ul>\n<script type=\"text/javascript\" defer src=\"/js/program.js\"></script>\n\n\n<div class=\"links-content\">加载中，稍等几秒...</div>","site":{"data":{}},"excerpt":"","more":"<div class=\"friend-title-item\"><br>链接须知<br><br><hr></div>\n\n<ul>\n<li>原则上只记录技术相关的网站，但不包括含有和色情、暴力、政治敏感的网站。</li>\n<li>不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。</li>\n</ul>\n<script type=\"text/javascript\" defer src=\"/js/program.js\"></script>\n\n\n<div class=\"links-content\">加载中，稍等几秒...</div>"},{"title":"音乐歌单收藏","date":"2019-07-30T02:43:45.000Z","_content":"\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n<!-- require MetingJS -->\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n<meting-js style=\"width: auto;height: 2000px;\"\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"2364053447\"\n    theme=\"#2980b9\"\n    loop=\"all\"\n    autoplay=\"false\"\n    order=\"list\"\n    storageName=\"aplayer-setting\"\n    lrctype= 0\n    list-max-height=\"800px\"\n    >\n</meting-js>\n---\n<p style=\"text-align:center;margin-top:30px\"><span style=\"font-size:14px\">温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单<a href=\"https://music.163.com/#/user/home?id=132033817\" target=\"_blank\" rel=\"noopener\">收藏</a>一下，去网易云都能播放哟！<span></span></span></p>","source":"music/index.md","raw":"---\ntitle: 音乐歌单收藏\ndate: 2019-07-30 10:43:45\n---\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n<!-- require MetingJS -->\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n<meting-js style=\"width: auto;height: 2000px;\"\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"2364053447\"\n    theme=\"#2980b9\"\n    loop=\"all\"\n    autoplay=\"false\"\n    order=\"list\"\n    storageName=\"aplayer-setting\"\n    lrctype= 0\n    list-max-height=\"800px\"\n    >\n</meting-js>\n---\n<p style=\"text-align:center;margin-top:30px\"><span style=\"font-size:14px\">温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单<a href=\"https://music.163.com/#/user/home?id=132033817\" target=\"_blank\" rel=\"noopener\">收藏</a>一下，去网易云都能播放哟！<span></span></span></p>","updated":"2020-02-09T09:02:13.472Z","path":"music/index.html","comments":1,"layout":"page","_id":"ck99vmgk10009mgvzbzzj1fbh","content":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n<!-- require MetingJS -->\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n<meting-js style=\"width: auto;height: 2000px;\"\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"2364053447\"\n    theme=\"#2980b9\"\n    loop=\"all\"\n    autoplay=\"false\"\n    order=\"list\"\n    storageName=\"aplayer-setting\"\n    lrctype= 0\n    list-max-height=\"800px\"\n    >\n</meting-js>\n---\n<p style=\"text-align:center;margin-top:30px\"><span style=\"font-size:14px\">温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单<a href=\"https://music.163.com/#/user/home?id=132033817\" target=\"_blank\" rel=\"noopener\">收藏</a>一下，去网易云都能播放哟！<span></span></span></p>","site":{"data":{}},"excerpt":"","more":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n<!-- require MetingJS -->\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n<meting-js style=\"width: auto;height: 2000px;\"\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"2364053447\"\n    theme=\"#2980b9\"\n    loop=\"all\"\n    autoplay=\"false\"\n    order=\"list\"\n    storageName=\"aplayer-setting\"\n    lrctype= 0\n    list-max-height=\"800px\"\n    >\n</meting-js>\n---\n<p style=\"text-align:center;margin-top:30px\"><span style=\"font-size:14px\">温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单<a href=\"https://music.163.com/#/user/home?id=132033817\" target=\"_blank\" rel=\"noopener\">收藏</a>一下，去网易云都能播放哟！<span></span></span></p>"},{"date":"2020-02-10T10:19:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f69a7504f4bcb04a17e32.jpg","comments":1,"_content":"\n**来而不往非礼也**  \n**畅所欲言，有留必应**\n","source":"message/index.md","raw":"---\ndate: 2020-02-10 18:19:48\nthumbnail: https://pic.downk.cc/item/5e7f69a7504f4bcb04a17e32.jpg\ncomments: true\n---\n\n**来而不往非礼也**  \n**畅所欲言，有留必应**\n","updated":"2020-03-28T15:13:54.197Z","path":"message/index.html","title":"","layout":"page","_id":"ck99vmgk3000dmgvzek33bn4i","content":"<p><strong>来而不往非礼也</strong><br><strong>畅所欲言，有留必应</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>来而不往非礼也</strong><br><strong>畅所欲言，有留必应</strong></p>\n"},{"date":"2019-02-02T10:19:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f69bc504f4bcb04a19020.jpg","comments":1,"_content":"\n<br>\n\n#### 时间轴记录\n\n---\n\n<div class=\"time-axis-main\">\n\t<ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/poems.js\"></script>\n<br>\n<br>","source":"poems/index.md","raw":"---\ndate: 2019-02-02 18:19:48\nthumbnail: https://pic.downk.cc/item/5e7f69bc504f4bcb04a19020.jpg\ncomments: true\n---\n\n<br>\n\n#### 时间轴记录\n\n---\n\n<div class=\"time-axis-main\">\n\t<ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/poems.js\"></script>\n<br>\n<br>","updated":"2020-03-28T15:14:16.147Z","path":"poems/index.html","title":"","layout":"page","_id":"ck99vmgkf000emgvzelgrbyxh","content":"<br>\n\n<h4 id=\"时间轴记录\"><a href=\"#时间轴记录\" class=\"headerlink\" title=\"时间轴记录\"></a>时间轴记录</h4><hr>\n<div class=\"time-axis-main\">\n    <ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/poems.js\"></script>\n<br>\n<br>","site":{"data":{}},"excerpt":"","more":"<br>\n\n<h4 id=\"时间轴记录\"><a href=\"#时间轴记录\" class=\"headerlink\" title=\"时间轴记录\"></a>时间轴记录</h4><hr>\n<div class=\"time-axis-main\">\n    <ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/poems.js\"></script>\n<br>\n<br>"},{"date":"2019-11-25T06:49:08.000Z","comments":0,"thumbnail":"https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191212124903.png","_content":"<div class = \"text-center\"><h1>碎碎念</h1></div><div class = \"text-tips\">\n\ntips：github登录后按时间正序查看、可点赞加❤️、本插件[地址](https://github.com/removeif/gitalk)..<span id=\"busuanzi_container_page_pv\">「<span id=\"busuanzi_value_page_pv\">+99</span>次查看」</span></div>\n<div id=\"comment-container1\"></div>\n<script src=\"/js/gitalk_self.min.js\"></script>\n<script>\n    var gitalk = new Gitalk({\n        clientID: '63ea86b104bd9a73070a',\n        clientSecret: '9d66cbaf6cf4e5d6400f0d081883eb9dc60d987e',\n        id: '666666',\n        repo: 'adoredee.github.io',\n        owner: 'adoredee',\n        admin: \"adoredee\",\n        createIssueManually: true,\n        distractionFreeMode: false\n    })\n    gitalk.render('comment-container1')\n</script>","source":"self-talking/index.md","raw":"---\ndate: 2019-11-25 14:49:08\ncomments: false\nthumbnail: https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191212124903.png\n---\n<div class = \"text-center\"><h1>碎碎念</h1></div><div class = \"text-tips\">\n\ntips：github登录后按时间正序查看、可点赞加❤️、本插件[地址](https://github.com/removeif/gitalk)..<span id=\"busuanzi_container_page_pv\">「<span id=\"busuanzi_value_page_pv\">+99</span>次查看」</span></div>\n<div id=\"comment-container1\"></div>\n<script src=\"/js/gitalk_self.min.js\"></script>\n<script>\n    var gitalk = new Gitalk({\n        clientID: '63ea86b104bd9a73070a',\n        clientSecret: '9d66cbaf6cf4e5d6400f0d081883eb9dc60d987e',\n        id: '666666',\n        repo: 'adoredee.github.io',\n        owner: 'adoredee',\n        admin: \"adoredee\",\n        createIssueManually: true,\n        distractionFreeMode: false\n    })\n    gitalk.render('comment-container1')\n</script>","updated":"2020-02-10T06:31:10.280Z","path":"self-talking/index.html","title":"","layout":"page","_id":"ck99vmgkh000hmgvz8gncczgh","content":"<div class = \"text-center\"><h1>碎碎念</h1></div><div class = \"text-tips\">\n\n<p>tips：github登录后按时间正序查看、可点赞加❤️、本插件<a href=\"https://github.com/removeif/gitalk\">地址</a>..<span id=\"busuanzi_container_page_pv\">「<span id=\"busuanzi_value_page_pv\">+99</span>次查看」</span></div></p>\n<div id=\"comment-container1\"></div>\n<script src=\"/js/gitalk_self.min.js\"></script>\n<script>\n    var gitalk = new Gitalk({\n        clientID: '63ea86b104bd9a73070a',\n        clientSecret: '9d66cbaf6cf4e5d6400f0d081883eb9dc60d987e',\n        id: '666666',\n        repo: 'adoredee.github.io',\n        owner: 'adoredee',\n        admin: \"adoredee\",\n        createIssueManually: true,\n        distractionFreeMode: false\n    })\n    gitalk.render('comment-container1')\n</script>","site":{"data":{}},"excerpt":"","more":"<div class = \"text-center\"><h1>碎碎念</h1></div><div class = \"text-tips\">\n\n<p>tips：github登录后按时间正序查看、可点赞加❤️、本插件<a href=\"https://github.com/removeif/gitalk\">地址</a>..<span id=\"busuanzi_container_page_pv\">「<span id=\"busuanzi_value_page_pv\">+99</span>次查看」</span></div></p>\n<div id=\"comment-container1\"></div>\n<script src=\"/js/gitalk_self.min.js\"></script>\n<script>\n    var gitalk = new Gitalk({\n        clientID: '63ea86b104bd9a73070a',\n        clientSecret: '9d66cbaf6cf4e5d6400f0d081883eb9dc60d987e',\n        id: '666666',\n        repo: 'adoredee.github.io',\n        owner: 'adoredee',\n        admin: \"adoredee\",\n        createIssueManually: true,\n        distractionFreeMode: false\n    })\n    gitalk.render('comment-container1')\n</script>"},{"date":"2019-02-02T09:55:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f69f2504f4bcb04a1c4d7.jpg","_content":"\n近期学习计划：\n- [x] 博客撰写：Linux之像IDE一样使用vim（C++版本/Python版本）\n- [x] 博客撰写：Linux之tmux终端复用神器\n- [x] STL源码学习\n- [x] C++开源项目学习\n- [x] Linux系统学习\n\n","source":"system/index.md","raw":"---\ndate: 2019-02-02 17:55:48\nthumbnail: https://pic.downk.cc/item/5e7f69f2504f4bcb04a1c4d7.jpg\n---\n\n近期学习计划：\n- [x] 博客撰写：Linux之像IDE一样使用vim（C++版本/Python版本）\n- [x] 博客撰写：Linux之tmux终端复用神器\n- [x] STL源码学习\n- [x] C++开源项目学习\n- [x] Linux系统学习\n\n","updated":"2020-04-03T12:26:02.162Z","path":"system/index.html","title":"","comments":1,"layout":"page","_id":"ck99vmgkj000kmgvz2pzsgfo6","content":"<p>近期学习计划：</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客撰写：Linux之像IDE一样使用vim（C++版本/Python版本）</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客撰写：Linux之tmux终端复用神器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> STL源码学习</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> C++开源项目学习</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Linux系统学习</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>近期学习计划：</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客撰写：Linux之像IDE一样使用vim（C++版本/Python版本）</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客撰写：Linux之tmux终端复用神器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> STL源码学习</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> C++开源项目学习</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Linux系统学习</li>\n</ul>\n"},{"date":"2019-02-02T09:19:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f69d6504f4bcb04a1a85f.jpg","comments":1,"_content":"敬请期待\n\n","source":"share/index.md","raw":"---\ndate: 2019-02-02 17:19:48\nthumbnail: https://pic.downk.cc/item/5e7f69d6504f4bcb04a1a85f.jpg\ncomments: true\n---\n敬请期待\n\n","updated":"2020-03-28T15:14:44.853Z","path":"share/index.html","title":"","layout":"page","_id":"ck99vmgkk000mmgvzhvbkahj8","content":"<p>敬请期待</p>\n","site":{"data":{}},"excerpt":"","more":"<p>敬请期待</p>\n"},{"date":"2019-02-02T09:55:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f6a03504f4bcb04a1d506.jpg","_content":"\n<br>\n\n#### 时间轴记录\n\n---\n\n<div class=\"time-axis-main\">\n\t<ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yule.js\"></script>\n<br>\n<br>","source":"yule/index.md","raw":"---\ndate: 2019-02-02 17:55:48\nthumbnail: https://pic.downk.cc/item/5e7f6a03504f4bcb04a1d506.jpg\n---\n\n<br>\n\n#### 时间轴记录\n\n---\n\n<div class=\"time-axis-main\">\n\t<ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yule.js\"></script>\n<br>\n<br>","updated":"2020-03-28T15:15:23.411Z","path":"yule/index.html","title":"","comments":1,"layout":"page","_id":"ck99vmgkm000pmgvzgkdn8ybp","content":"<br>\n\n<h4 id=\"时间轴记录\"><a href=\"#时间轴记录\" class=\"headerlink\" title=\"时间轴记录\"></a>时间轴记录</h4><hr>\n<div class=\"time-axis-main\">\n    <ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yule.js\"></script>\n<br>\n<br>","site":{"data":{}},"excerpt":"","more":"<br>\n\n<h4 id=\"时间轴记录\"><a href=\"#时间轴记录\" class=\"headerlink\" title=\"时间轴记录\"></a>时间轴记录</h4><hr>\n<div class=\"time-axis-main\">\n    <ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yule.js\"></script>\n<br>\n<br>"},{"date":"2019-02-02T09:55:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f6a14504f4bcb04a1e48d.jpg","_content":"\n<br>\n\n#### 时间轴记录\n\n---\n\n<div class=\"time-axis-main\">\n\t<ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yulu.js\"></script>\n<br>\n<br>","source":"yulu/index.md","raw":"---\ndate: 2019-02-02 17:55:48\nthumbnail: https://pic.downk.cc/item/5e7f6a14504f4bcb04a1e48d.jpg\n---\n\n<br>\n\n#### 时间轴记录\n\n---\n\n<div class=\"time-axis-main\">\n\t<ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yulu.js\"></script>\n<br>\n<br>","updated":"2020-03-28T15:15:40.590Z","path":"yulu/index.html","title":"","comments":1,"layout":"page","_id":"ck99vmgug001bmgvzeu245mzf","content":"<br>\n\n<h4 id=\"时间轴记录\"><a href=\"#时间轴记录\" class=\"headerlink\" title=\"时间轴记录\"></a>时间轴记录</h4><hr>\n<div class=\"time-axis-main\">\n    <ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yulu.js\"></script>\n<br>\n<br>","site":{"data":{}},"excerpt":"","more":"<br>\n\n<h4 id=\"时间轴记录\"><a href=\"#时间轴记录\" class=\"headerlink\" title=\"时间轴记录\"></a>时间轴记录</h4><hr>\n<div class=\"time-axis-main\">\n    <ul class=\"time-axis\"></ul>\n</div>\n<script src=\"/js/yulu.js\"></script>\n<br>\n<br>"},{"date":"2020-02-10T10:19:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f88c3504f4bcb04bbc155.png","comments":1,"_content":"<h4 style=\"text-align:center\"> 刷题记录 </h4>\n\n---\n\n- 记录本人学习[LeetCode](<https://leetcode-cn.com/)、《剑指offer》的经历。\n- 语言：C++，提供完整的示例，包括详细的思路和注释以及完整多样的输入和输出形式。\n- 项目地址：[LeetCode代码地址](https://github.com/kangzhiheng/GuideOfProgram/tree/master/LeetCode)、[《剑指offer》](https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer)\n\n<h4 style=\"text-align:center\"> Leetcode </h4>\n\n\n---\n\n| 序号 | 题号 |                             题目                             | 难度 | 方法 |\n| :--: | :----------------------------------------------------------: | :--: | :-: | :-: |\n|  1  |  [3](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters)  | [无重复字符串的最长子串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/3_无重复字符的最长子串.cpp) | **_MIDD_**:heart::neutral_face: | |\n|  2  |  [5](https://leetcode-cn.com/problems/longest-palindromic-substring)  | [最长回文子串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/5_最长回文子串.cpp) | **_MIDD_**:heart::neutral_face: | |\n|  3  |  [10](https://leetcode-cn.com/problems/regular-expression-matching)  |  [正则表达式匹配](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/10_正则表达式匹配.cpp) | **_HARD_**:broken_heart::sob: | |\n|  4  |  [15](https://leetcode-cn.com/problems/3sum)  |  [三数之和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/15_三数之和.cpp)  |  **_MIDD_**:heart::neutral_face: | |\n|  5  |  [18](https://leetcode-cn.com/problems/4sum)  |  [四数之和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/18_四数之和.cpp)  |  **_MIDD_**:heart::neutral_face: | |\n|  6  |  [32](https://leetcode-cn.com/problems/longest-valid-parentheses)  | [最长有效括号_DP](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_DP.cpp) <br> [最长有效括号_栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_栈.cpp) | **_HARD_**:broken_heart::sob: |  DP、栈  |\n|  7  |  [33](https://leetcode-cn.com/problems/search-in-rotated-sorted-array)  | [搜索旋转排序数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/33_搜索旋转排序数组.cpp) | **_MIDD_**:heart::neutral_face: | |\n|  8  |  [35](https://leetcode-cn.com/problems/search-insert-position)  | [搜索插入位置](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.cpp) | **_SOSO_**:neutral_face::sweat_smile: | |\n|  9  |  [45](https://leetcode-cn.com/problems/jump-game-ii)  |  [跳跃游戏II](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/45_跳跃游戏II.cpp)  |  **_HARD_**:broken_heart::sob: | |\n|  10  |  [53](https://leetcode-cn.com/problems/maximum-subarray)  | [最长子序和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp) | **_SOSO_**:neutral_face::sweat_smile:  | |\n|  11  |  [54](https://leetcode-cn.com/problems/spiral-matrix)  | [螺旋矩阵](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/54_%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.cpp) |   **_MIDD_**:heart::neutral_face:   | |\n|  12  |  [55](https://leetcode-cn.com/problems/jump-game)  |  [跳跃游戏](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/55_跳跃游戏.cpp) | **_MIDD_**:heart::neutral_face:   | |\n|  13  |  [56](https://leetcode-cn.com/problems/merge-intervals)  | [合并区间](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/56_%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.cpp) |   **_MIDD_**:heart::neutral_face:    | |\n|  14  |  [64](https://leetcode-cn.com/problems/minimum-path-sum)  | [最小路径和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/64_%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.cpp) |   **_MIDD_**:heart::neutral_face:    | |\n| 15 | [62](https://leetcode-cn.com/problems/unique-paths/) | [不同路径](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/62_不同路径.cpp) | **_MIDD_**❤️😐 | DP、组合优化 |\n|  16  |  [70](https://leetcode-cn.com/problems/climbing-stairs)  | [爬楼梯](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/70_%E7%88%AC%E6%A5%BC%E6%A2%AF.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n| 17 |  [72](https://leetcode-cn.com/problems/edit-distance) | [编辑距离](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/72_编辑距离.cpp) | **_HARD_**:broken_heart::sob: | DP |\n|  18  |  [88](https://leetcode-cn.com/problems/merge-sorted-array)  | [合并两个有序数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/88_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   |  |\n|  19  |  [103](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal)  |  [二叉树的锯齿形层次遍历](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/103_二叉树的锯齿形层次遍历.cpp)  |  **_MIDD_**:heart::neutral_face:    | |\n|  20  |  [104](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree)  |  [二叉树的最大深度_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_BFS.cpp)   <br>   [二叉树的最大深度_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_递归.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:  | BFS、DFS |\n| 21 | [121](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/) | [买卖股票的最佳时机](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/121_买卖股票的最佳时机.cpp) | **_SOSO_**😐😅 | DP |\n|  22  |  [125](https://leetcode-cn.com/problems/valid-palindrome)  | [验证回文串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/125_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n|  23  |  [127](https://leetcode-cn.com/problems/word-ladder)  |  [单词接龙_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_BFS.cpp)  <br>  [单词接龙_bidirectional_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_bidirectional_BFS.cpp)  |  **_MIDD_**:heart::neutral_face:  | BFS、双边BFS |\n|  24  |  [130](https://leetcode-cn.com/problems/number-of-islands)  |  [岛屿数量](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/200_岛屿数量.cpp)  |  **_MIDD_**:heart::neutral_face:   | BFS |\n|  25  |  [150](https://leetcode-cn.com/problems/evaluate-reverse-polish-notation)  |  [逆波兰表达式求值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/150_逆波兰表达式求值.cpp)  |  **_MIDD_**:heart::neutral_face:   | |\n| 26 | [165](https://leetcode-cn.com/problems/subsets/) | [子集](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/165_子集.cpp) | **_MIDD_**❤️😐 | 位运算 |\n| 27 | [198](https://leetcode-cn.com/problems/house-robber) | [打家劫舍](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/198_打家劫舍.cpp) | **_SOSO_**😐😅 | DP |\n|  28  |  [200](https://leetcode-cn.com/problems/surrounded-regions)  |  [被包围的区域_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_BFS.cpp)  <br>  [被包围的区域_DFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_DFS.cpp)  |  **_MIDD_**:heart::neutral_face:   | BFS、DFS |\n|  29  |  [207](https://leetcode-cn.com/problems/course-schedule)  | [课程表_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_BFS.cpp) <br> [课程表_Topological_Sort](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_Topological_Sort.cpp)  |  **_MIDD_**:heart::neutral_face:   | |\n|  30  |  [279](https://leetcode-cn.com/problems/perfect-squares)  | [完全平方数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/279_完全平方数.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n| 31 | [303](https://leetcode-cn.com/problems/range-sum-query-immutable) | [区域和检索 - 数组不可变](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/303_区域和检索.cpp) | **SOSO**😐😅 | DP |\n| 32 | [392](https://leetcode-cn.com/problems/is-subsequence) | [判断子序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/392_判断子序列.cpp) | **SOSO**😐😅 | DP |\n|  33  |  [409](https://leetcode-cn.com/problems/longest-palindrome)  | [最长回文串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/409_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n|  34  |  [680](https://leetcode-cn.com/problems/valid-palindrome-ii)  | [验证回文串II](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/680_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2II.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n| 35 | [746](https://leetcode-cn.com/problems/min-cost-climbing-stairs) | [使用最小花费爬楼梯](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/746_使用最小花费爬楼梯.cpp) | **SOSO**😐😅 | DP |\n|  36  |  [752](https://leetcode-cn.com/problems/open-the-lock)  |  [打开转盘锁](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/752_打开转盘锁.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:   | |\n|  37  |  [754](https://leetcode-cn.com/problems/reach-a-number)  |  [到达终点数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/754_到达终点数字.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:   | |\n|  38  |  [903](https://leetcode-cn.com/problems/valid-permutations-for-di-sequence/submissions/)  | [DI 序列的有效排列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/903_DI序列的有效排列.cpp) |   **_HARD_**:broken_heart::sob:   | |\n|  39  |  [997](https://leetcode-cn.com/problems/find-the-town-judge)  |  [找到小镇的法官](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/997_找到小镇的法官.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:   | |\n| 40 | [ 1025](https://leetcode-cn.com/problems/divisor-game) | [ 除数博弈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1025_除数博弈.cpp) | **SOSO**😐😅 | |\n|  41  |  [1189](https://leetcode-cn.com/problems/maximum-number-of-balloons)  | [“气球”的最大数量](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1189_“气球”的最大数量.cpp) |   **_HARD_**:broken_heart::sob:   | |\n\n<br>\n\n<br>\n\n\n<h4 style=\"text-align:center\"> 剑指offer </h4>\n\n\n---\n\n- [剑指offer的github地址](https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer)\n- [剑指offer源代码](https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer%E6%BA%90%E4%BB%A3%E7%A0%81)—— 《剑指offer》完整的源代码\n\n根据书上的题目类型和顺序，我把这些题目大致分为以下两个目录，以方便查阅：\n\n* [相关性分类](#相关性分类)\n\n* [剑指offer目录](#剑指offer目录)    \n\n### 相​关性分类\n\n#### 数据结构\n\n* 数值、数组与矩阵\n  - 面试题3   —— 数组中重复的数字\n    - [找出数组中重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n    - [不修改数组找出重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n  - [面试题4   —— 二维数组的查找](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp)\n  - [面试题11 —— 转数组中的最小数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp)\n  - [面试题16 —— 数值的整数次方](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp)\n  - [面试题17 —— 打印从1到最大的n位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp)\n  - [面试题21 —— 调整数组顺序使奇数位于偶数前面](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp)\n  - [面试题29 —— 顺时针旋转矩阵](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp)\n  - [面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp)\n  - [面试题40 —— 最小的k个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp)\n  - [面试题41 —— 数据流中的中位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp)\n  - [面试题42 —— 连续子数组的最大和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp)\n  - [面试题48 —— 最长不含重复字符的子字符串长度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp)\n  - 面试题43 —— 1~n整数中x出现的次数\n    - [1 ~ n整数中x出现的次数(x属于1~9)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp)\n    - [1 ~ n整数中0出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp)\n  - [面试题44 —— 数字序列中某一位的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp)\n  - [面试题45 —— 把数组排成最小的数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp)\n  - [面试题49 —— 丑数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp)\n  - [面试题51 —— 数组中的逆序对](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp)\n  - 面试题53 —— 在排序数组中查找数字\n    - [数字在排序数组中出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp)\n    - [0~n-1中缺失的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp)\n    - [数组中数值和下标相等的元素](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp)\n  - 面试题57 —— 和为s的两个数字\n    - [和为s的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp)\n    - [和为s的连续正数序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp)\n  - [面试题61 ——扑克牌中的顺子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp)\n  - [面试题62 —— 圆圈中最后剩下的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp)\n  - [面试题66 —— 构建乘积数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp)\n* 字符串\n  - [面试题5   —— 替换空格](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n  - [面试题20 —— 表示数值的字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp)\n  - 面试题38 —— 字符串的排列与组合\n    - [字符串的排列(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp)\n    - [字符串的排列(有重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp)\n    - [字符串的组合(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp)\n    - [八皇后问题(全排列)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp)\n    - [八皇后问题(回溯)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp)\n  - [面试题46 —— 把数字翻译成字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp)\n  - 面试题50 —— 第一个只出现一次的字符\n    - [字符串中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp)\n    - [字符流中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp)\n  - 面试题58 —— 翻转字符串\n    - [翻转单词顺序](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp)\n    - [左旋转字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp)\n* 链表\n  - [面试题6 —— 从尾到头打印链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n  - 面试题18 —— 删除链表的节点\n    - [在O(1)时间内删除链表节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp)\n    - [删除链表中重复的节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp)\n  - [面试题22 —— 链表中倒数第k个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp)\n  - [面试题24 —— 反转链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp)\n  - [面试题52 —— 两个链表的第一个公共节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp)\n* 树\n  - [面试题7   —— 重建二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp)\n  - [面试题8   —— 二叉树的下一个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp)\n  - [面试题26 —— 树的子结构](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp)\n  - [面试题27 —— 二叉树的镜像](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp)\n  - [面试题28 —— 对称的二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp)\n  - 面试题32 —— 从上到下打印二叉树\n    - [不分行从上往下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp)\n    - [分行从上到下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp)\n    - [之字形打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp)\n  - 面试题54 —— 二叉搜索树的第k大节点\n    - [前序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115)\n    - [中序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159)\n    - [后序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205)\n    - [二叉搜索树的第k大节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277)\n  - 面试题55 —— 二叉树的深度\n    - [二叉树的深度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp)\n    - [平衡二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp)\n* 栈和队列\n  - 面试题9   —— 栈和队列的转换\n    - [用两个栈实现队列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp)\n    - [用两个队列实现栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp)\n  - [面试题30 —— 包含min函数的栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp)\n  - 面试题59 —— 队列的最大值\n    - [滑动窗口的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp)\n    - [队列的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp)\n* 图\n* 双指针\n  - 面试题57 —— 和为s的两个数字\n    - [和为s的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp)\n    - [和为s的连续正数序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp)\n* 位运算\n  \n  - [面试题15 —— 二进制中的1的个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp)\n  - 面试题56 —— 数组中数字出现的次数\n    - [数组中只出现一次的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp)\n    - [数组中唯一只出现一次的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp)\n  - [面试题65 —— 不用加减乘除做加法](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp)\n\n#### 算法思想\n\n* 递归和循环\n  - 面试题10 —— 斐波那契系列问题\n    - [求斐波那契数列的第n项](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp)\n    - [青蛙普通跳台阶(最多跳2级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp)\n    - [青蛙变态跳台阶(最多跳n级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp)\n* 排序\n* 排列组合\n  - 面试题38 —— 排列与组合\n    - [字符串的排列(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp)\n    - [字符串的排列(有重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp)\n    - [字符串的组合(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp)\n    - [八皇后问题(全排列)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp)\n    - [八皇后问题(回溯)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp)\n* 动态规划\n  - [面试题14 —— 剪绳子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp)\n  - 面试题47 —— 礼物的最大价值\n    - [二维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp)\n    - [一维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp)\n  - [面试题60 —— n个骰子的点数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp)\n  - [面试题19 —— 正则表达式匹配](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp)\n* 分治\n* 二分法\n\n### 剑指offer目录\n\n* 面试题3   —— 数组中重复的数字\n\n  - [找出数组中重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n\n  - [不修改数组找出重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n\n- [面试题4   —— 二维数组的查找](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp)\n- [面试题5   —— 替换空格](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n- [面试题6   —— 从尾到头打印链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n- [面试题7   —— 重建二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp)\n- [面试题8   —— 二叉树的下一个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp)\n- 面试题9   —— 栈和队列的转换\n  - [用两个栈实现队列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp)\n  - [用两个队列实现栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp)\n- 面试题10 —— 斐波那契系列问题\n  - [求斐波那契数列的第n项](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp)\n  - [青蛙普通跳台阶(最多跳2级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp)\n  - [青蛙变态跳台阶(最多跳n级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp)\n- [面试题11 —— 旋转数组中的最小数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp)\n- [面试题12 —— 矩阵中的路径](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/12_矩阵中路径.cpp)\n- [面试题13 —— 机器人的运动范围](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/13_机器人的运动范围.cpp)\n- [面试题14 —— 剪绳子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp)\n- [面试题15 —— 二进制中的1的个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp)\n- [面试题16 —— 数值的整数次方](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp)\n- [面试题17 —— 打印从1到最大的n位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp)\n- 面试题18 —— 删除链表的节点\n  - [在O(1)时间内删除链表节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp)\n  - [删除链表中重复的节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp)\n- [面试题19 —— 正则表达式匹配](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp)\n- [面试题20 —— 表示数值的字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp)\n- [面试题21 —— 调整数组顺序使奇数位于偶数前面](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp)\n- [面试题22 —— 链表中倒数第k个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp)\n- [面试题23 —— 链表中环的入口结点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/23_链表中环的入口结点.cpp)\n- [面试题24 —— 反转链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp)\n- [面试题25 —— 合并两个排序的链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/25_合并两个排序的链表.cpp)\n- [面试题26 —— 树的子结构](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp)\n- [面试题27 —— 二叉树的镜象](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp)\n- [面试题28 —— 对称的二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp)\n- [面试题29 —— 顺时针旋转矩阵](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp)\n- [面试题30 —— 包含min函数的栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp)\n- 面试题32 —— 从上到下打印二叉树\n  - [不分行从上往下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp)\n  - [分行从上到下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp)\n  - [之字形打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp)\n- 面试题38 —— 字符串的排列与组合\n  - [字符串的排列(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp)\n  - [字符串的排列(有重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp)\n  - [字符串的组合(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp)\n  - [八皇后问题(全排列)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp)\n  \n  - [八皇后问题(回溯)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp)\n- [面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp)\n- [面试题40 —— 最小的k个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp)\n- [面试题41 —— 数据流中的中位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp)\n- [面试题42 —— 连续子数组的最大和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp)\n- 面试题43 —— 1~n整数中x出现的次数\n  - [1 ~ n整数中x出现的次数(x属于1~9)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp)\n  - [1 ~ n整数中0出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp)\n- [面试题44 —— 数字序列中某一位的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp)\n- [面试题45 —— 把数组排成最小的数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp)\n- [面试题46 —— 把数字翻译成字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp)\n- 面试题47 —— 礼物的最大价值\n  - [二维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp)\n  - [一维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp)\n- [面试题48 —— 最长不含重复字符的子字符串长度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp)\n- [面试题49 —— 丑数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp)\n- 面试题50 —— 第一个只出现一次的字符\n  - [字符串中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp)\n  - [字符流中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp)\n- [面试题51 —— 数组中的逆序对](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp)\n- [面试题52 —— 两个链表的第一个公共节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp)\n- 面试题53 —— 在排序数组中查找数字\n  - [数字在排序数组中出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp)\n  - [0~n-1中缺失的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp)\n  - [数组中数值和下标相等的元素](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp)\n- 面试题54 —— 二叉搜索树的第k大节点\n  - [前序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115)\n  - [中序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159)\n  - [后序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205)\n  - [二叉搜索树的第k大节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277)\n- 面试题55 —— 二叉树的深度\n  - [二叉树的深度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp)\n  - [平衡二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp)\n- 面试题56 —— 数组中数字出现的次数\n  - [数组中只出现一次的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp)\n  - [数组中唯一只出现一次的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp)\n- 面试题57 —— 和为s的两个数字\n  - [和为s的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp)\n  - [和为s的连续正数序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp)\n- 面试题58 —— 翻转字符串\n  - [翻转单词顺序](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp)\n  - [左旋转字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp)\n- 面试题59 —— 队列的最大值\n  - [滑动窗口的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp)\n  - [队列的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp)\n- [面试题60 —— n个骰子的点数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp)\n- [面试题61 ——扑克牌中的顺子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp)\n- [面试题62 —— 圆圈中最后剩下的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp)\n- [面试题63 —— 股票的最大利润](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/63_股票的最大利润.cpp)\n- [面试题64 —— 求1+2+···+n(不用乘除法、循环等条件)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/64_求1+2+···+n.cpp)\n- [面试题65 —— 不用加减乘除做加法](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp)\n- [面试题66 —— 构建乘积数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp)\n\n\n### **未完待续**","source":"algorithm/index.md","raw":"---\ndate: 2020-02-10 18:19:48\nthumbnail: https://pic.downk.cc/item/5e7f88c3504f4bcb04bbc155.png\ncomments: true\n---\n<h4 style=\"text-align:center\"> 刷题记录 </h4>\n\n---\n\n- 记录本人学习[LeetCode](<https://leetcode-cn.com/)、《剑指offer》的经历。\n- 语言：C++，提供完整的示例，包括详细的思路和注释以及完整多样的输入和输出形式。\n- 项目地址：[LeetCode代码地址](https://github.com/kangzhiheng/GuideOfProgram/tree/master/LeetCode)、[《剑指offer》](https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer)\n\n<h4 style=\"text-align:center\"> Leetcode </h4>\n\n\n---\n\n| 序号 | 题号 |                             题目                             | 难度 | 方法 |\n| :--: | :----------------------------------------------------------: | :--: | :-: | :-: |\n|  1  |  [3](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters)  | [无重复字符串的最长子串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/3_无重复字符的最长子串.cpp) | **_MIDD_**:heart::neutral_face: | |\n|  2  |  [5](https://leetcode-cn.com/problems/longest-palindromic-substring)  | [最长回文子串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/5_最长回文子串.cpp) | **_MIDD_**:heart::neutral_face: | |\n|  3  |  [10](https://leetcode-cn.com/problems/regular-expression-matching)  |  [正则表达式匹配](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/10_正则表达式匹配.cpp) | **_HARD_**:broken_heart::sob: | |\n|  4  |  [15](https://leetcode-cn.com/problems/3sum)  |  [三数之和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/15_三数之和.cpp)  |  **_MIDD_**:heart::neutral_face: | |\n|  5  |  [18](https://leetcode-cn.com/problems/4sum)  |  [四数之和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/18_四数之和.cpp)  |  **_MIDD_**:heart::neutral_face: | |\n|  6  |  [32](https://leetcode-cn.com/problems/longest-valid-parentheses)  | [最长有效括号_DP](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_DP.cpp) <br> [最长有效括号_栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_栈.cpp) | **_HARD_**:broken_heart::sob: |  DP、栈  |\n|  7  |  [33](https://leetcode-cn.com/problems/search-in-rotated-sorted-array)  | [搜索旋转排序数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/33_搜索旋转排序数组.cpp) | **_MIDD_**:heart::neutral_face: | |\n|  8  |  [35](https://leetcode-cn.com/problems/search-insert-position)  | [搜索插入位置](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.cpp) | **_SOSO_**:neutral_face::sweat_smile: | |\n|  9  |  [45](https://leetcode-cn.com/problems/jump-game-ii)  |  [跳跃游戏II](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/45_跳跃游戏II.cpp)  |  **_HARD_**:broken_heart::sob: | |\n|  10  |  [53](https://leetcode-cn.com/problems/maximum-subarray)  | [最长子序和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp) | **_SOSO_**:neutral_face::sweat_smile:  | |\n|  11  |  [54](https://leetcode-cn.com/problems/spiral-matrix)  | [螺旋矩阵](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/54_%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.cpp) |   **_MIDD_**:heart::neutral_face:   | |\n|  12  |  [55](https://leetcode-cn.com/problems/jump-game)  |  [跳跃游戏](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/55_跳跃游戏.cpp) | **_MIDD_**:heart::neutral_face:   | |\n|  13  |  [56](https://leetcode-cn.com/problems/merge-intervals)  | [合并区间](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/56_%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.cpp) |   **_MIDD_**:heart::neutral_face:    | |\n|  14  |  [64](https://leetcode-cn.com/problems/minimum-path-sum)  | [最小路径和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/64_%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.cpp) |   **_MIDD_**:heart::neutral_face:    | |\n| 15 | [62](https://leetcode-cn.com/problems/unique-paths/) | [不同路径](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/62_不同路径.cpp) | **_MIDD_**❤️😐 | DP、组合优化 |\n|  16  |  [70](https://leetcode-cn.com/problems/climbing-stairs)  | [爬楼梯](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/70_%E7%88%AC%E6%A5%BC%E6%A2%AF.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n| 17 |  [72](https://leetcode-cn.com/problems/edit-distance) | [编辑距离](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/72_编辑距离.cpp) | **_HARD_**:broken_heart::sob: | DP |\n|  18  |  [88](https://leetcode-cn.com/problems/merge-sorted-array)  | [合并两个有序数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/88_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   |  |\n|  19  |  [103](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal)  |  [二叉树的锯齿形层次遍历](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/103_二叉树的锯齿形层次遍历.cpp)  |  **_MIDD_**:heart::neutral_face:    | |\n|  20  |  [104](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree)  |  [二叉树的最大深度_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_BFS.cpp)   <br>   [二叉树的最大深度_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_递归.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:  | BFS、DFS |\n| 21 | [121](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/) | [买卖股票的最佳时机](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/121_买卖股票的最佳时机.cpp) | **_SOSO_**😐😅 | DP |\n|  22  |  [125](https://leetcode-cn.com/problems/valid-palindrome)  | [验证回文串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/125_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n|  23  |  [127](https://leetcode-cn.com/problems/word-ladder)  |  [单词接龙_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_BFS.cpp)  <br>  [单词接龙_bidirectional_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_bidirectional_BFS.cpp)  |  **_MIDD_**:heart::neutral_face:  | BFS、双边BFS |\n|  24  |  [130](https://leetcode-cn.com/problems/number-of-islands)  |  [岛屿数量](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/200_岛屿数量.cpp)  |  **_MIDD_**:heart::neutral_face:   | BFS |\n|  25  |  [150](https://leetcode-cn.com/problems/evaluate-reverse-polish-notation)  |  [逆波兰表达式求值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/150_逆波兰表达式求值.cpp)  |  **_MIDD_**:heart::neutral_face:   | |\n| 26 | [165](https://leetcode-cn.com/problems/subsets/) | [子集](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/165_子集.cpp) | **_MIDD_**❤️😐 | 位运算 |\n| 27 | [198](https://leetcode-cn.com/problems/house-robber) | [打家劫舍](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/198_打家劫舍.cpp) | **_SOSO_**😐😅 | DP |\n|  28  |  [200](https://leetcode-cn.com/problems/surrounded-regions)  |  [被包围的区域_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_BFS.cpp)  <br>  [被包围的区域_DFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_DFS.cpp)  |  **_MIDD_**:heart::neutral_face:   | BFS、DFS |\n|  29  |  [207](https://leetcode-cn.com/problems/course-schedule)  | [课程表_BFS](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_BFS.cpp) <br> [课程表_Topological_Sort](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_Topological_Sort.cpp)  |  **_MIDD_**:heart::neutral_face:   | |\n|  30  |  [279](https://leetcode-cn.com/problems/perfect-squares)  | [完全平方数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/279_完全平方数.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n| 31 | [303](https://leetcode-cn.com/problems/range-sum-query-immutable) | [区域和检索 - 数组不可变](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/303_区域和检索.cpp) | **SOSO**😐😅 | DP |\n| 32 | [392](https://leetcode-cn.com/problems/is-subsequence) | [判断子序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/392_判断子序列.cpp) | **SOSO**😐😅 | DP |\n|  33  |  [409](https://leetcode-cn.com/problems/longest-palindrome)  | [最长回文串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/409_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n|  34  |  [680](https://leetcode-cn.com/problems/valid-palindrome-ii)  | [验证回文串II](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/680_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2II.cpp) |   **_SOSO_**:neutral_face::sweat_smile:   | |\n| 35 | [746](https://leetcode-cn.com/problems/min-cost-climbing-stairs) | [使用最小花费爬楼梯](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/746_使用最小花费爬楼梯.cpp) | **SOSO**😐😅 | DP |\n|  36  |  [752](https://leetcode-cn.com/problems/open-the-lock)  |  [打开转盘锁](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/752_打开转盘锁.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:   | |\n|  37  |  [754](https://leetcode-cn.com/problems/reach-a-number)  |  [到达终点数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/754_到达终点数字.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:   | |\n|  38  |  [903](https://leetcode-cn.com/problems/valid-permutations-for-di-sequence/submissions/)  | [DI 序列的有效排列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/903_DI序列的有效排列.cpp) |   **_HARD_**:broken_heart::sob:   | |\n|  39  |  [997](https://leetcode-cn.com/problems/find-the-town-judge)  |  [找到小镇的法官](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/997_找到小镇的法官.cpp)  |  **_SOSO_**:neutral_face::sweat_smile:   | |\n| 40 | [ 1025](https://leetcode-cn.com/problems/divisor-game) | [ 除数博弈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1025_除数博弈.cpp) | **SOSO**😐😅 | |\n|  41  |  [1189](https://leetcode-cn.com/problems/maximum-number-of-balloons)  | [“气球”的最大数量](https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1189_“气球”的最大数量.cpp) |   **_HARD_**:broken_heart::sob:   | |\n\n<br>\n\n<br>\n\n\n<h4 style=\"text-align:center\"> 剑指offer </h4>\n\n\n---\n\n- [剑指offer的github地址](https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer)\n- [剑指offer源代码](https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer%E6%BA%90%E4%BB%A3%E7%A0%81)—— 《剑指offer》完整的源代码\n\n根据书上的题目类型和顺序，我把这些题目大致分为以下两个目录，以方便查阅：\n\n* [相关性分类](#相关性分类)\n\n* [剑指offer目录](#剑指offer目录)    \n\n### 相​关性分类\n\n#### 数据结构\n\n* 数值、数组与矩阵\n  - 面试题3   —— 数组中重复的数字\n    - [找出数组中重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n    - [不修改数组找出重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n  - [面试题4   —— 二维数组的查找](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp)\n  - [面试题11 —— 转数组中的最小数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp)\n  - [面试题16 —— 数值的整数次方](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp)\n  - [面试题17 —— 打印从1到最大的n位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp)\n  - [面试题21 —— 调整数组顺序使奇数位于偶数前面](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp)\n  - [面试题29 —— 顺时针旋转矩阵](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp)\n  - [面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp)\n  - [面试题40 —— 最小的k个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp)\n  - [面试题41 —— 数据流中的中位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp)\n  - [面试题42 —— 连续子数组的最大和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp)\n  - [面试题48 —— 最长不含重复字符的子字符串长度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp)\n  - 面试题43 —— 1~n整数中x出现的次数\n    - [1 ~ n整数中x出现的次数(x属于1~9)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp)\n    - [1 ~ n整数中0出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp)\n  - [面试题44 —— 数字序列中某一位的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp)\n  - [面试题45 —— 把数组排成最小的数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp)\n  - [面试题49 —— 丑数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp)\n  - [面试题51 —— 数组中的逆序对](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp)\n  - 面试题53 —— 在排序数组中查找数字\n    - [数字在排序数组中出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp)\n    - [0~n-1中缺失的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp)\n    - [数组中数值和下标相等的元素](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp)\n  - 面试题57 —— 和为s的两个数字\n    - [和为s的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp)\n    - [和为s的连续正数序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp)\n  - [面试题61 ——扑克牌中的顺子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp)\n  - [面试题62 —— 圆圈中最后剩下的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp)\n  - [面试题66 —— 构建乘积数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp)\n* 字符串\n  - [面试题5   —— 替换空格](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n  - [面试题20 —— 表示数值的字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp)\n  - 面试题38 —— 字符串的排列与组合\n    - [字符串的排列(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp)\n    - [字符串的排列(有重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp)\n    - [字符串的组合(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp)\n    - [八皇后问题(全排列)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp)\n    - [八皇后问题(回溯)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp)\n  - [面试题46 —— 把数字翻译成字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp)\n  - 面试题50 —— 第一个只出现一次的字符\n    - [字符串中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp)\n    - [字符流中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp)\n  - 面试题58 —— 翻转字符串\n    - [翻转单词顺序](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp)\n    - [左旋转字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp)\n* 链表\n  - [面试题6 —— 从尾到头打印链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n  - 面试题18 —— 删除链表的节点\n    - [在O(1)时间内删除链表节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp)\n    - [删除链表中重复的节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp)\n  - [面试题22 —— 链表中倒数第k个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp)\n  - [面试题24 —— 反转链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp)\n  - [面试题52 —— 两个链表的第一个公共节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp)\n* 树\n  - [面试题7   —— 重建二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp)\n  - [面试题8   —— 二叉树的下一个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp)\n  - [面试题26 —— 树的子结构](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp)\n  - [面试题27 —— 二叉树的镜像](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp)\n  - [面试题28 —— 对称的二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp)\n  - 面试题32 —— 从上到下打印二叉树\n    - [不分行从上往下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp)\n    - [分行从上到下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp)\n    - [之字形打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp)\n  - 面试题54 —— 二叉搜索树的第k大节点\n    - [前序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115)\n    - [中序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159)\n    - [后序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205)\n    - [二叉搜索树的第k大节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277)\n  - 面试题55 —— 二叉树的深度\n    - [二叉树的深度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp)\n    - [平衡二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp)\n* 栈和队列\n  - 面试题9   —— 栈和队列的转换\n    - [用两个栈实现队列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp)\n    - [用两个队列实现栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp)\n  - [面试题30 —— 包含min函数的栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp)\n  - 面试题59 —— 队列的最大值\n    - [滑动窗口的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp)\n    - [队列的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp)\n* 图\n* 双指针\n  - 面试题57 —— 和为s的两个数字\n    - [和为s的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp)\n    - [和为s的连续正数序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp)\n* 位运算\n  \n  - [面试题15 —— 二进制中的1的个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp)\n  - 面试题56 —— 数组中数字出现的次数\n    - [数组中只出现一次的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp)\n    - [数组中唯一只出现一次的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp)\n  - [面试题65 —— 不用加减乘除做加法](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp)\n\n#### 算法思想\n\n* 递归和循环\n  - 面试题10 —— 斐波那契系列问题\n    - [求斐波那契数列的第n项](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp)\n    - [青蛙普通跳台阶(最多跳2级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp)\n    - [青蛙变态跳台阶(最多跳n级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp)\n* 排序\n* 排列组合\n  - 面试题38 —— 排列与组合\n    - [字符串的排列(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp)\n    - [字符串的排列(有重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp)\n    - [字符串的组合(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp)\n    - [八皇后问题(全排列)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp)\n    - [八皇后问题(回溯)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp)\n* 动态规划\n  - [面试题14 —— 剪绳子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp)\n  - 面试题47 —— 礼物的最大价值\n    - [二维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp)\n    - [一维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp)\n  - [面试题60 —— n个骰子的点数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp)\n  - [面试题19 —— 正则表达式匹配](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp)\n* 分治\n* 二分法\n\n### 剑指offer目录\n\n* 面试题3   —— 数组中重复的数字\n\n  - [找出数组中重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n\n  - [不修改数组找出重复的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp)\n\n- [面试题4   —— 二维数组的查找](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp)\n- [面试题5   —— 替换空格](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n- [面试题6   —— 从尾到头打印链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp)\n- [面试题7   —— 重建二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp)\n- [面试题8   —— 二叉树的下一个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp)\n- 面试题9   —— 栈和队列的转换\n  - [用两个栈实现队列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp)\n  - [用两个队列实现栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp)\n- 面试题10 —— 斐波那契系列问题\n  - [求斐波那契数列的第n项](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp)\n  - [青蛙普通跳台阶(最多跳2级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp)\n  - [青蛙变态跳台阶(最多跳n级)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp)\n- [面试题11 —— 旋转数组中的最小数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp)\n- [面试题12 —— 矩阵中的路径](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/12_矩阵中路径.cpp)\n- [面试题13 —— 机器人的运动范围](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/13_机器人的运动范围.cpp)\n- [面试题14 —— 剪绳子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp)\n- [面试题15 —— 二进制中的1的个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp)\n- [面试题16 —— 数值的整数次方](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp)\n- [面试题17 —— 打印从1到最大的n位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp)\n- 面试题18 —— 删除链表的节点\n  - [在O(1)时间内删除链表节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp)\n  - [删除链表中重复的节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp)\n- [面试题19 —— 正则表达式匹配](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp)\n- [面试题20 —— 表示数值的字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp)\n- [面试题21 —— 调整数组顺序使奇数位于偶数前面](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp)\n- [面试题22 —— 链表中倒数第k个节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp)\n- [面试题23 —— 链表中环的入口结点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/23_链表中环的入口结点.cpp)\n- [面试题24 —— 反转链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp)\n- [面试题25 —— 合并两个排序的链表](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/25_合并两个排序的链表.cpp)\n- [面试题26 —— 树的子结构](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp)\n- [面试题27 —— 二叉树的镜象](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp)\n- [面试题28 —— 对称的二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp)\n- [面试题29 —— 顺时针旋转矩阵](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp)\n- [面试题30 —— 包含min函数的栈](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp)\n- 面试题32 —— 从上到下打印二叉树\n  - [不分行从上往下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp)\n  - [分行从上到下打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp)\n  - [之字形打印二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp)\n- 面试题38 —— 字符串的排列与组合\n  - [字符串的排列(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp)\n  - [字符串的排列(有重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp)\n  - [字符串的组合(无重复字符)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp)\n  - [八皇后问题(全排列)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp)\n  \n  - [八皇后问题(回溯)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp)\n- [面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp)\n- [面试题40 —— 最小的k个数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp)\n- [面试题41 —— 数据流中的中位数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp)\n- [面试题42 —— 连续子数组的最大和](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp)\n- 面试题43 —— 1~n整数中x出现的次数\n  - [1 ~ n整数中x出现的次数(x属于1~9)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp)\n  - [1 ~ n整数中0出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp)\n- [面试题44 —— 数字序列中某一位的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp)\n- [面试题45 —— 把数组排成最小的数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp)\n- [面试题46 —— 把数字翻译成字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp)\n- 面试题47 —— 礼物的最大价值\n  - [二维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp)\n  - [一维DP数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp)\n- [面试题48 —— 最长不含重复字符的子字符串长度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp)\n- [面试题49 —— 丑数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp)\n- 面试题50 —— 第一个只出现一次的字符\n  - [字符串中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp)\n  - [字符流中第一个只出现一次的字符](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp)\n- [面试题51 —— 数组中的逆序对](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp)\n- [面试题52 —— 两个链表的第一个公共节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp)\n- 面试题53 —— 在排序数组中查找数字\n  - [数字在排序数组中出现的次数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp)\n  - [0~n-1中缺失的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp)\n  - [数组中数值和下标相等的元素](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp)\n- 面试题54 —— 二叉搜索树的第k大节点\n  - [前序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115)\n  - [中序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159)\n  - [后序遍历（递归、非递归）](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205)\n  - [二叉搜索树的第k大节点](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277)\n- 面试题55 —— 二叉树的深度\n  - [二叉树的深度](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp)\n  - [平衡二叉树](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp)\n- 面试题56 —— 数组中数字出现的次数\n  - [数组中只出现一次的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp)\n  - [数组中唯一只出现一次的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp)\n- 面试题57 —— 和为s的两个数字\n  - [和为s的两个数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp)\n  - [和为s的连续正数序列](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp)\n- 面试题58 —— 翻转字符串\n  - [翻转单词顺序](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp)\n  - [左旋转字符串](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp)\n- 面试题59 —— 队列的最大值\n  - [滑动窗口的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp)\n  - [队列的最大值](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp)\n- [面试题60 —— n个骰子的点数](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp)\n- [面试题61 ——扑克牌中的顺子](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp)\n- [面试题62 —— 圆圈中最后剩下的数字](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp)\n- [面试题63 —— 股票的最大利润](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/63_股票的最大利润.cpp)\n- [面试题64 —— 求1+2+···+n(不用乘除法、循环等条件)](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/64_求1+2+···+n.cpp)\n- [面试题65 —— 不用加减乘除做加法](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp)\n- [面试题66 —— 构建乘积数组](https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp)\n\n\n### **未完待续**","updated":"2020-03-28T17:26:42.583Z","path":"algorithm/index.html","title":"","layout":"page","_id":"ck99vmgv8001vmgvzcexgfrxc","content":"<h4 style=\"text-align:center\"> 刷题记录 </h4>\n\n<hr>\n<ul>\n<li>记录本人学习<a href=\"<https://leetcode-cn.com/\">LeetCode</a>、《剑指offer》的经历。</li>\n<li>语言：C++，提供完整的示例，包括详细的思路和注释以及完整多样的输入和输出形式。</li>\n<li>项目地址：<a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/LeetCode\">LeetCode代码地址</a>、<a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer\">《剑指offer》</a></li>\n</ul>\n<h4 style=\"text-align:center\"> Leetcode </h4>\n\n\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">题号</th>\n<th align=\"center\">题目</th>\n<th align=\"center\">难度</th>\n<th align=\"center\">方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\">3</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/3_无重复字符的最长子串.cpp\">无重复字符串的最长子串</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring\">5</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/5_最长回文子串.cpp\">最长回文子串</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/regular-expression-matching\">10</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/10_正则表达式匹配.cpp\">正则表达式匹配</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/3sum\">15</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/15_三数之和.cpp\">三数之和</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/4sum\">18</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/18_四数之和.cpp\">四数之和</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-valid-parentheses\">32</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_DP.cpp\">最长有效括号_DP</a> <br> <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_栈.cpp\">最长有效括号_栈</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\">DP、栈</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array\">33</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/33_搜索旋转排序数组.cpp\">搜索旋转排序数组</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-insert-position\">35</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.cpp\">搜索插入位置</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/jump-game-ii\">45</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/45_跳跃游戏II.cpp\">跳跃游戏II</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-subarray\">53</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp\">最长子序和</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/spiral-matrix\">54</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/54_%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.cpp\">螺旋矩阵</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/jump-game\">55</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/55_跳跃游戏.cpp\">跳跃游戏</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/merge-intervals\">56</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/56_%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.cpp\">合并区间</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/minimum-path-sum\">64</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/64_%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.cpp\">最小路径和</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/unique-paths/\">62</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/62_不同路径.cpp\">不同路径</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>❤️😐</td>\n<td align=\"center\">DP、组合优化</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/climbing-stairs\">70</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/70_%E7%88%AC%E6%A5%BC%E6%A2%AF.cpp\">爬楼梯</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">17</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/edit-distance\">72</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/72_编辑距离.cpp\">编辑距离</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/merge-sorted-array\">88</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/88_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.cpp\">合并两个有序数组</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">19</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal\">103</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/103_二叉树的锯齿形层次遍历.cpp\">二叉树的锯齿形层次遍历</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree\">104</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_BFS.cpp\">二叉树的最大深度_BFS</a>   <br>   <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_递归.cpp\">二叉树的最大深度_BFS</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\">BFS、DFS</td>\n</tr>\n<tr>\n<td align=\"center\">21</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/\">121</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/121_买卖股票的最佳时机.cpp\">买卖股票的最佳时机</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">22</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/valid-palindrome\">125</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/125_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2.cpp\">验证回文串</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">23</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/word-ladder\">127</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_BFS.cpp\">单词接龙_BFS</a>  <br>  <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_bidirectional_BFS.cpp\">单词接龙_bidirectional_BFS</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\">BFS、双边BFS</td>\n</tr>\n<tr>\n<td align=\"center\">24</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/number-of-islands\">130</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/200_岛屿数量.cpp\">岛屿数量</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\">BFS</td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation\">150</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/150_逆波兰表达式求值.cpp\">逆波兰表达式求值</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">26</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/subsets/\">165</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/165_子集.cpp\">子集</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>❤️😐</td>\n<td align=\"center\">位运算</td>\n</tr>\n<tr>\n<td align=\"center\">27</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/house-robber\">198</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/198_打家劫舍.cpp\">打家劫舍</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/surrounded-regions\">200</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_BFS.cpp\">被包围的区域_BFS</a>  <br>  <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_DFS.cpp\">被包围的区域_DFS</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\">BFS、DFS</td>\n</tr>\n<tr>\n<td align=\"center\">29</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/course-schedule\">207</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_BFS.cpp\">课程表_BFS</a> <br> <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_Topological_Sort.cpp\">课程表_Topological_Sort</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">30</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/perfect-squares\">279</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/279_完全平方数.cpp\">完全平方数</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">31</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/range-sum-query-immutable\">303</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/303_区域和检索.cpp\">区域和检索 - 数组不可变</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/is-subsequence\">392</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/392_判断子序列.cpp\">判断子序列</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-palindrome\">409</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/409_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2.cpp\">最长回文串</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">34</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii\">680</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/680_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2II.cpp\">验证回文串II</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">35</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/min-cost-climbing-stairs\">746</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/746_使用最小花费爬楼梯.cpp\">使用最小花费爬楼梯</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">36</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/open-the-lock\">752</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/752_打开转盘锁.cpp\">打开转盘锁</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">37</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/reach-a-number\">754</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/754_到达终点数字.cpp\">到达终点数字</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">38</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/valid-permutations-for-di-sequence/submissions/\">903</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/903_DI序列的有效排列.cpp\">DI 序列的有效排列</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">39</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/find-the-town-judge\">997</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/997_找到小镇的法官.cpp\">找到小镇的法官</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">40</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/divisor-game\"> 1025</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1025_除数博弈.cpp\"> 除数博弈</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">41</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-number-of-balloons\">1189</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1189_“气球”的最大数量.cpp\">“气球”的最大数量</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n\n<h4 style=\"text-align:center\"> 剑指offer </h4>\n\n\n<hr>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer\">剑指offer的github地址</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer%E6%BA%90%E4%BB%A3%E7%A0%81\">剑指offer源代码</a>—— 《剑指offer》完整的源代码</li>\n</ul>\n<p>根据书上的题目类型和顺序，我把这些题目大致分为以下两个目录，以方便查阅：</p>\n<ul>\n<li><p><a href=\"#相关性分类\">相关性分类</a></p>\n</li>\n<li><p><a href=\"#剑指offer目录\">剑指offer目录</a>    </p>\n</li>\n</ul>\n<h3 id=\"相​关性分类\"><a href=\"#相​关性分类\" class=\"headerlink\" title=\"相​关性分类\"></a>相​关性分类</h3><h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><ul>\n<li><p>数值、数组与矩阵</p>\n<ul>\n<li>面试题3   —— 数组中重复的数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">找出数组中重复的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">不修改数组找出重复的数字</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp\">面试题4   —— 二维数组的查找</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp\">面试题11 —— 转数组中的最小数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp\">面试题16 —— 数值的整数次方</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp\">面试题17 —— 打印从1到最大的n位数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp\">面试题21 —— 调整数组顺序使奇数位于偶数前面</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp\">面试题29 —— 顺时针旋转矩阵</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp\">面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp\">面试题40 —— 最小的k个数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp\">面试题41 —— 数据流中的中位数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp\">面试题42 —— 连续子数组的最大和</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp\">面试题48 —— 最长不含重复字符的子字符串长度</a></li>\n<li>面试题43 —— 1~n整数中x出现的次数<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp\">1 ~ n整数中x出现的次数(x属于1~9)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp\">1 ~ n整数中0出现的次数</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp\">面试题44 —— 数字序列中某一位的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp\">面试题45 —— 把数组排成最小的数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp\">面试题49 —— 丑数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp\">面试题51 —— 数组中的逆序对</a></li>\n<li>面试题53 —— 在排序数组中查找数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp\">数字在排序数组中出现的次数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp\">0~n-1中缺失的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp\">数组中数值和下标相等的元素</a></li>\n</ul>\n</li>\n<li>面试题57 —— 和为s的两个数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp\">和为s的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp\">和为s的连续正数序列</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp\">面试题61 ——扑克牌中的顺子</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp\">面试题62 —— 圆圈中最后剩下的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp\">面试题66 —— 构建乘积数组</a></li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题5   —— 替换空格</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp\">面试题20 —— 表示数值的字符串</a></li>\n<li>面试题38 —— 字符串的排列与组合<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp\">字符串的排列(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp\">字符串的排列(有重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp\">字符串的组合(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp\">八皇后问题(全排列)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp\">八皇后问题(回溯)</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp\">面试题46 —— 把数字翻译成字符串</a></li>\n<li>面试题50 —— 第一个只出现一次的字符<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp\">字符串中第一个只出现一次的字符</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp\">字符流中第一个只出现一次的字符</a></li>\n</ul>\n</li>\n<li>面试题58 —— 翻转字符串<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp\">翻转单词顺序</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp\">左旋转字符串</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>链表</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题6 —— 从尾到头打印链表</a></li>\n<li>面试题18 —— 删除链表的节点<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp\">在O(1)时间内删除链表节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp\">删除链表中重复的节点</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp\">面试题22 —— 链表中倒数第k个节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp\">面试题24 —— 反转链表</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp\">面试题52 —— 两个链表的第一个公共节点</a></li>\n</ul>\n</li>\n<li><p>树</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp\">面试题7   —— 重建二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp\">面试题8   —— 二叉树的下一个节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp\">面试题26 —— 树的子结构</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp\">面试题27 —— 二叉树的镜像</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp\">面试题28 —— 对称的二叉树</a></li>\n<li>面试题32 —— 从上到下打印二叉树<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp\">不分行从上往下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp\">分行从上到下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp\">之字形打印二叉树</a></li>\n</ul>\n</li>\n<li>面试题54 —— 二叉搜索树的第k大节点<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115\">前序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159\">中序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205\">后序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277\">二叉搜索树的第k大节点</a></li>\n</ul>\n</li>\n<li>面试题55 —— 二叉树的深度<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp\">二叉树的深度</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp\">平衡二叉树</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>栈和队列</p>\n<ul>\n<li>面试题9   —— 栈和队列的转换<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp\">用两个栈实现队列</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp\">用两个队列实现栈</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp\">面试题30 —— 包含min函数的栈</a></li>\n<li>面试题59 —— 队列的最大值<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp\">滑动窗口的最大值</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp\">队列的最大值</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图</p>\n</li>\n<li><p>双指针</p>\n<ul>\n<li>面试题57 —— 和为s的两个数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp\">和为s的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp\">和为s的连续正数序列</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>位运算</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp\">面试题15 —— 二进制中的1的个数</a></li>\n<li>面试题56 —— 数组中数字出现的次数<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp\">数组中只出现一次的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp\">数组中唯一只出现一次的数字</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp\">面试题65 —— 不用加减乘除做加法</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h4><ul>\n<li>递归和循环<ul>\n<li>面试题10 —— 斐波那契系列问题<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp\">求斐波那契数列的第n项</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp\">青蛙普通跳台阶(最多跳2级)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp\">青蛙变态跳台阶(最多跳n级)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>排序</li>\n<li>排列组合<ul>\n<li>面试题38 —— 排列与组合<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp\">字符串的排列(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp\">字符串的排列(有重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp\">字符串的组合(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp\">八皇后问题(全排列)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp\">八皇后问题(回溯)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>动态规划<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp\">面试题14 —— 剪绳子</a></li>\n<li>面试题47 —— 礼物的最大价值<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp\">二维DP数组</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp\">一维DP数组</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp\">面试题60 —— n个骰子的点数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp\">面试题19 —— 正则表达式匹配</a></li>\n</ul>\n</li>\n<li>分治</li>\n<li>二分法</li>\n</ul>\n<h3 id=\"剑指offer目录\"><a href=\"#剑指offer目录\" class=\"headerlink\" title=\"剑指offer目录\"></a>剑指offer目录</h3><ul>\n<li><p>面试题3   —— 数组中重复的数字</p>\n<ul>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">找出数组中重复的数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">不修改数组找出重复的数字</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp\">面试题4   —— 二维数组的查找</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题5   —— 替换空格</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题6   —— 从尾到头打印链表</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp\">面试题7   —— 重建二叉树</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp\">面试题8   —— 二叉树的下一个节点</a></p>\n</li>\n<li><p>面试题9   —— 栈和队列的转换</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp\">用两个栈实现队列</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp\">用两个队列实现栈</a></li>\n</ul>\n</li>\n<li><p>面试题10 —— 斐波那契系列问题</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp\">求斐波那契数列的第n项</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp\">青蛙普通跳台阶(最多跳2级)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp\">青蛙变态跳台阶(最多跳n级)</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp\">面试题11 —— 旋转数组中的最小数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/12_矩阵中路径.cpp\">面试题12 —— 矩阵中的路径</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/13_机器人的运动范围.cpp\">面试题13 —— 机器人的运动范围</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp\">面试题14 —— 剪绳子</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp\">面试题15 —— 二进制中的1的个数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp\">面试题16 —— 数值的整数次方</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp\">面试题17 —— 打印从1到最大的n位数</a></p>\n</li>\n<li><p>面试题18 —— 删除链表的节点</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp\">在O(1)时间内删除链表节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp\">删除链表中重复的节点</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp\">面试题19 —— 正则表达式匹配</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp\">面试题20 —— 表示数值的字符串</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp\">面试题21 —— 调整数组顺序使奇数位于偶数前面</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp\">面试题22 —— 链表中倒数第k个节点</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/23_链表中环的入口结点.cpp\">面试题23 —— 链表中环的入口结点</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp\">面试题24 —— 反转链表</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/25_合并两个排序的链表.cpp\">面试题25 —— 合并两个排序的链表</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp\">面试题26 —— 树的子结构</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp\">面试题27 —— 二叉树的镜象</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp\">面试题28 —— 对称的二叉树</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp\">面试题29 —— 顺时针旋转矩阵</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp\">面试题30 —— 包含min函数的栈</a></p>\n</li>\n<li><p>面试题32 —— 从上到下打印二叉树</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp\">不分行从上往下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp\">分行从上到下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp\">之字形打印二叉树</a></li>\n</ul>\n</li>\n<li><p>面试题38 —— 字符串的排列与组合</p>\n<ul>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp\">字符串的排列(无重复字符)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp\">字符串的排列(有重复字符)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp\">字符串的组合(无重复字符)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp\">八皇后问题(全排列)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp\">八皇后问题(回溯)</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp\">面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp\">面试题40 —— 最小的k个数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp\">面试题41 —— 数据流中的中位数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp\">面试题42 —— 连续子数组的最大和</a></p>\n</li>\n<li><p>面试题43 —— 1~n整数中x出现的次数</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp\">1 ~ n整数中x出现的次数(x属于1~9)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp\">1 ~ n整数中0出现的次数</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp\">面试题44 —— 数字序列中某一位的数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp\">面试题45 —— 把数组排成最小的数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp\">面试题46 —— 把数字翻译成字符串</a></p>\n</li>\n<li><p>面试题47 —— 礼物的最大价值</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp\">二维DP数组</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp\">一维DP数组</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp\">面试题48 —— 最长不含重复字符的子字符串长度</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp\">面试题49 —— 丑数</a></p>\n</li>\n<li><p>面试题50 —— 第一个只出现一次的字符</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp\">字符串中第一个只出现一次的字符</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp\">字符流中第一个只出现一次的字符</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp\">面试题51 —— 数组中的逆序对</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp\">面试题52 —— 两个链表的第一个公共节点</a></p>\n</li>\n<li><p>面试题53 —— 在排序数组中查找数字</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp\">数字在排序数组中出现的次数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp\">0~n-1中缺失的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp\">数组中数值和下标相等的元素</a></li>\n</ul>\n</li>\n<li><p>面试题54 —— 二叉搜索树的第k大节点</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115\">前序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159\">中序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205\">后序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277\">二叉搜索树的第k大节点</a></li>\n</ul>\n</li>\n<li><p>面试题55 —— 二叉树的深度</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp\">二叉树的深度</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp\">平衡二叉树</a></li>\n</ul>\n</li>\n<li><p>面试题56 —— 数组中数字出现的次数</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp\">数组中只出现一次的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp\">数组中唯一只出现一次的数字</a></li>\n</ul>\n</li>\n<li><p>面试题57 —— 和为s的两个数字</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp\">和为s的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp\">和为s的连续正数序列</a></li>\n</ul>\n</li>\n<li><p>面试题58 —— 翻转字符串</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp\">翻转单词顺序</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp\">左旋转字符串</a></li>\n</ul>\n</li>\n<li><p>面试题59 —— 队列的最大值</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp\">滑动窗口的最大值</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp\">队列的最大值</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp\">面试题60 —— n个骰子的点数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp\">面试题61 ——扑克牌中的顺子</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp\">面试题62 —— 圆圈中最后剩下的数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/63_股票的最大利润.cpp\">面试题63 —— 股票的最大利润</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/64_求1+2+···+n.cpp\">面试题64 —— 求1+2+···+n(不用乘除法、循环等条件)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp\">面试题65 —— 不用加减乘除做加法</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp\">面试题66 —— 构建乘积数组</a></p>\n</li>\n</ul>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a><strong>未完待续</strong></h3>","site":{"data":{}},"excerpt":"","more":"<h4 style=\"text-align:center\"> 刷题记录 </h4>\n\n<hr>\n<ul>\n<li>记录本人学习<a href=\"<https://leetcode-cn.com/\">LeetCode</a>、《剑指offer》的经历。</li>\n<li>语言：C++，提供完整的示例，包括详细的思路和注释以及完整多样的输入和输出形式。</li>\n<li>项目地址：<a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/LeetCode\">LeetCode代码地址</a>、<a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer\">《剑指offer》</a></li>\n</ul>\n<h4 style=\"text-align:center\"> Leetcode </h4>\n\n\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">题号</th>\n<th align=\"center\">题目</th>\n<th align=\"center\">难度</th>\n<th align=\"center\">方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\">3</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/3_无重复字符的最长子串.cpp\">无重复字符串的最长子串</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring\">5</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/5_最长回文子串.cpp\">最长回文子串</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/regular-expression-matching\">10</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/10_正则表达式匹配.cpp\">正则表达式匹配</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/3sum\">15</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/15_三数之和.cpp\">三数之和</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/4sum\">18</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/18_四数之和.cpp\">四数之和</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-valid-parentheses\">32</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_DP.cpp\">最长有效括号_DP</a> <br> <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/32_最长有效括号_栈.cpp\">最长有效括号_栈</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\">DP、栈</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array\">33</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/33_搜索旋转排序数组.cpp\">搜索旋转排序数组</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-insert-position\">35</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.cpp\">搜索插入位置</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/jump-game-ii\">45</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/45_跳跃游戏II.cpp\">跳跃游戏II</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-subarray\">53</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp\">最长子序和</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/spiral-matrix\">54</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/54_%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.cpp\">螺旋矩阵</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/jump-game\">55</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/55_跳跃游戏.cpp\">跳跃游戏</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/merge-intervals\">56</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/56_%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.cpp\">合并区间</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/minimum-path-sum\">64</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/64_%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.cpp\">最小路径和</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/unique-paths/\">62</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/62_不同路径.cpp\">不同路径</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>❤️😐</td>\n<td align=\"center\">DP、组合优化</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/climbing-stairs\">70</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/70_%E7%88%AC%E6%A5%BC%E6%A2%AF.cpp\">爬楼梯</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">17</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/edit-distance\">72</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/72_编辑距离.cpp\">编辑距离</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/merge-sorted-array\">88</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/88_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.cpp\">合并两个有序数组</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">19</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal\">103</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/103_二叉树的锯齿形层次遍历.cpp\">二叉树的锯齿形层次遍历</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree\">104</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_BFS.cpp\">二叉树的最大深度_BFS</a>   <br>   <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/104_二叉树的最大深度_递归.cpp\">二叉树的最大深度_BFS</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\">BFS、DFS</td>\n</tr>\n<tr>\n<td align=\"center\">21</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/\">121</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/121_买卖股票的最佳时机.cpp\">买卖股票的最佳时机</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">22</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/valid-palindrome\">125</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/125_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2.cpp\">验证回文串</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">23</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/word-ladder\">127</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_BFS.cpp\">单词接龙_BFS</a>  <br>  <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/127_单词接龙_bidirectional_BFS.cpp\">单词接龙_bidirectional_BFS</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\">BFS、双边BFS</td>\n</tr>\n<tr>\n<td align=\"center\">24</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/number-of-islands\">130</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/200_岛屿数量.cpp\">岛屿数量</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\">BFS</td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation\">150</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/150_逆波兰表达式求值.cpp\">逆波兰表达式求值</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">26</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/subsets/\">165</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/165_子集.cpp\">子集</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>❤️😐</td>\n<td align=\"center\">位运算</td>\n</tr>\n<tr>\n<td align=\"center\">27</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/house-robber\">198</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/198_打家劫舍.cpp\">打家劫舍</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/surrounded-regions\">200</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_BFS.cpp\">被包围的区域_BFS</a>  <br>  <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/130_被围绕的区域_DFS.cpp\">被包围的区域_DFS</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\">BFS、DFS</td>\n</tr>\n<tr>\n<td align=\"center\">29</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/course-schedule\">207</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_BFS.cpp\">课程表_BFS</a> <br> <a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/207_课程表_Topological_Sort.cpp\">课程表_Topological_Sort</a></td>\n<td align=\"center\"><strong><em>MIDD</em></strong>:heart::neutral_face:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">30</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/perfect-squares\">279</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/279_完全平方数.cpp\">完全平方数</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">31</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/range-sum-query-immutable\">303</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/303_区域和检索.cpp\">区域和检索 - 数组不可变</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/is-subsequence\">392</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/392_判断子序列.cpp\">判断子序列</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-palindrome\">409</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/409_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2.cpp\">最长回文串</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">34</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii\">680</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/680_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2II.cpp\">验证回文串II</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">35</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/min-cost-climbing-stairs\">746</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/746_使用最小花费爬楼梯.cpp\">使用最小花费爬楼梯</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\">DP</td>\n</tr>\n<tr>\n<td align=\"center\">36</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/open-the-lock\">752</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/752_打开转盘锁.cpp\">打开转盘锁</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">37</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/reach-a-number\">754</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/754_到达终点数字.cpp\">到达终点数字</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">38</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/valid-permutations-for-di-sequence/submissions/\">903</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/903_DI序列的有效排列.cpp\">DI 序列的有效排列</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">39</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/find-the-town-judge\">997</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/997_找到小镇的法官.cpp\">找到小镇的法官</a></td>\n<td align=\"center\"><strong><em>SOSO</em></strong>:neutral_face::sweat_smile:</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">40</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/divisor-game\"> 1025</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1025_除数博弈.cpp\"> 除数博弈</a></td>\n<td align=\"center\"><strong>SOSO</strong>😐😅</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">41</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-number-of-balloons\">1189</a></td>\n<td align=\"center\"><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/LeetCode/LeetCode/1189_“气球”的最大数量.cpp\">“气球”的最大数量</a></td>\n<td align=\"center\"><strong><em>HARD</em></strong>:broken_heart::sob:</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n\n<h4 style=\"text-align:center\"> 剑指offer </h4>\n\n\n<hr>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer\">剑指offer的github地址</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/tree/master/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer%E6%BA%90%E4%BB%A3%E7%A0%81\">剑指offer源代码</a>—— 《剑指offer》完整的源代码</li>\n</ul>\n<p>根据书上的题目类型和顺序，我把这些题目大致分为以下两个目录，以方便查阅：</p>\n<ul>\n<li><p><a href=\"#相关性分类\">相关性分类</a></p>\n</li>\n<li><p><a href=\"#剑指offer目录\">剑指offer目录</a>    </p>\n</li>\n</ul>\n<h3 id=\"相​关性分类\"><a href=\"#相​关性分类\" class=\"headerlink\" title=\"相​关性分类\"></a>相​关性分类</h3><h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><ul>\n<li><p>数值、数组与矩阵</p>\n<ul>\n<li>面试题3   —— 数组中重复的数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">找出数组中重复的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">不修改数组找出重复的数字</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp\">面试题4   —— 二维数组的查找</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp\">面试题11 —— 转数组中的最小数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp\">面试题16 —— 数值的整数次方</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp\">面试题17 —— 打印从1到最大的n位数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp\">面试题21 —— 调整数组顺序使奇数位于偶数前面</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp\">面试题29 —— 顺时针旋转矩阵</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp\">面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp\">面试题40 —— 最小的k个数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp\">面试题41 —— 数据流中的中位数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp\">面试题42 —— 连续子数组的最大和</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp\">面试题48 —— 最长不含重复字符的子字符串长度</a></li>\n<li>面试题43 —— 1~n整数中x出现的次数<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp\">1 ~ n整数中x出现的次数(x属于1~9)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp\">1 ~ n整数中0出现的次数</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp\">面试题44 —— 数字序列中某一位的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp\">面试题45 —— 把数组排成最小的数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp\">面试题49 —— 丑数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp\">面试题51 —— 数组中的逆序对</a></li>\n<li>面试题53 —— 在排序数组中查找数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp\">数字在排序数组中出现的次数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp\">0~n-1中缺失的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp\">数组中数值和下标相等的元素</a></li>\n</ul>\n</li>\n<li>面试题57 —— 和为s的两个数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp\">和为s的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp\">和为s的连续正数序列</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp\">面试题61 ——扑克牌中的顺子</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp\">面试题62 —— 圆圈中最后剩下的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp\">面试题66 —— 构建乘积数组</a></li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题5   —— 替换空格</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp\">面试题20 —— 表示数值的字符串</a></li>\n<li>面试题38 —— 字符串的排列与组合<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp\">字符串的排列(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp\">字符串的排列(有重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp\">字符串的组合(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp\">八皇后问题(全排列)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp\">八皇后问题(回溯)</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp\">面试题46 —— 把数字翻译成字符串</a></li>\n<li>面试题50 —— 第一个只出现一次的字符<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp\">字符串中第一个只出现一次的字符</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp\">字符流中第一个只出现一次的字符</a></li>\n</ul>\n</li>\n<li>面试题58 —— 翻转字符串<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp\">翻转单词顺序</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp\">左旋转字符串</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>链表</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题6 —— 从尾到头打印链表</a></li>\n<li>面试题18 —— 删除链表的节点<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp\">在O(1)时间内删除链表节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp\">删除链表中重复的节点</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp\">面试题22 —— 链表中倒数第k个节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp\">面试题24 —— 反转链表</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp\">面试题52 —— 两个链表的第一个公共节点</a></li>\n</ul>\n</li>\n<li><p>树</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp\">面试题7   —— 重建二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp\">面试题8   —— 二叉树的下一个节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp\">面试题26 —— 树的子结构</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp\">面试题27 —— 二叉树的镜像</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp\">面试题28 —— 对称的二叉树</a></li>\n<li>面试题32 —— 从上到下打印二叉树<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp\">不分行从上往下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp\">分行从上到下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp\">之字形打印二叉树</a></li>\n</ul>\n</li>\n<li>面试题54 —— 二叉搜索树的第k大节点<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115\">前序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159\">中序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205\">后序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277\">二叉搜索树的第k大节点</a></li>\n</ul>\n</li>\n<li>面试题55 —— 二叉树的深度<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp\">二叉树的深度</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp\">平衡二叉树</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>栈和队列</p>\n<ul>\n<li>面试题9   —— 栈和队列的转换<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp\">用两个栈实现队列</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp\">用两个队列实现栈</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp\">面试题30 —— 包含min函数的栈</a></li>\n<li>面试题59 —— 队列的最大值<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp\">滑动窗口的最大值</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp\">队列的最大值</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图</p>\n</li>\n<li><p>双指针</p>\n<ul>\n<li>面试题57 —— 和为s的两个数字<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp\">和为s的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp\">和为s的连续正数序列</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>位运算</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp\">面试题15 —— 二进制中的1的个数</a></li>\n<li>面试题56 —— 数组中数字出现的次数<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp\">数组中只出现一次的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp\">数组中唯一只出现一次的数字</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp\">面试题65 —— 不用加减乘除做加法</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h4><ul>\n<li>递归和循环<ul>\n<li>面试题10 —— 斐波那契系列问题<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp\">求斐波那契数列的第n项</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp\">青蛙普通跳台阶(最多跳2级)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp\">青蛙变态跳台阶(最多跳n级)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>排序</li>\n<li>排列组合<ul>\n<li>面试题38 —— 排列与组合<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp\">字符串的排列(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp\">字符串的排列(有重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp\">字符串的组合(无重复字符)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp\">八皇后问题(全排列)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp\">八皇后问题(回溯)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>动态规划<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp\">面试题14 —— 剪绳子</a></li>\n<li>面试题47 —— 礼物的最大价值<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp\">二维DP数组</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp\">一维DP数组</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp\">面试题60 —— n个骰子的点数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp\">面试题19 —— 正则表达式匹配</a></li>\n</ul>\n</li>\n<li>分治</li>\n<li>二分法</li>\n</ul>\n<h3 id=\"剑指offer目录\"><a href=\"#剑指offer目录\" class=\"headerlink\" title=\"剑指offer目录\"></a>剑指offer目录</h3><ul>\n<li><p>面试题3   —— 数组中重复的数字</p>\n<ul>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_01_%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">找出数组中重复的数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/03_02_%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.cpp\">不修改数组找出重复的数字</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/04_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.cpp\">面试题4   —— 二维数组的查找</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题5   —— 替换空格</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.cpp\">面试题6   —— 从尾到头打印链表</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/07_%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.cpp\">面试题7   —— 重建二叉树</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/08_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.cpp\">面试题8   —— 二叉树的下一个节点</a></p>\n</li>\n<li><p>面试题9   —— 栈和队列的转换</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_01_%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.cpp\">用两个栈实现队列</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/09_02_%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.cpp\">用两个队列实现栈</a></li>\n</ul>\n</li>\n<li><p>面试题10 —— 斐波那契系列问题</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_01_%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACn%E9%A1%B9.cpp\">求斐波那契数列的第n项</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_02_%E9%9D%92%E8%9B%99%E6%99%AE%E9%80%9A%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B32%E7%BA%A7).cpp\">青蛙普通跳台阶(最多跳2级)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/10_03_%E9%9D%92%E8%9B%99%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6(%E6%9C%80%E5%A4%9A%E8%B7%B3n%E7%BA%A7).cpp\">青蛙变态跳台阶(最多跳n级)</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97.cpp\">面试题11 —— 旋转数组中的最小数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/12_矩阵中路径.cpp\">面试题12 —— 矩阵中的路径</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/13_机器人的运动范围.cpp\">面试题13 —— 机器人的运动范围</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/14_%E5%89%AA%E7%BB%B3%E5%AD%90.cpp\">面试题14 —— 剪绳子</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/15_二进制中的1的个数.cpp\">面试题15 —— 二进制中的1的个数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/16_数值的整数次方.cpp\">面试题16 —— 数值的整数次方</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/17_打印1到最大的n位数.cpp\">面试题17 —— 打印从1到最大的n位数</a></p>\n</li>\n<li><p>面试题18 —— 删除链表的节点</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_01_在O(1)时间内删除链表节点.cpp\">在O(1)时间内删除链表节点</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/18_02_删除链表中重复的节点.cpp\">删除链表中重复的节点</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/19_正则表达式匹配.cpp\">面试题19 —— 正则表达式匹配</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/20_表示数值的字符串.cpp\">面试题20 —— 表示数值的字符串</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/21_调整数组顺序使奇数位于偶数前面.cpp\">面试题21 —— 调整数组顺序使奇数位于偶数前面</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/22_链表中倒数第k个节点.cpp\">面试题22 —— 链表中倒数第k个节点</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/23_链表中环的入口结点.cpp\">面试题23 —— 链表中环的入口结点</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/%E5%89%91%E6%8C%87offer/剑指offer/24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp\">面试题24 —— 反转链表</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/25_合并两个排序的链表.cpp\">面试题25 —— 合并两个排序的链表</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/26_树的子结构.cpp\">面试题26 —— 树的子结构</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/27_二叉树的镜像.cpp\">面试题27 —— 二叉树的镜象</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/28_对称的二叉树.cpp\">面试题28 —— 对称的二叉树</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/29_顺时针旋转矩阵.cpp\">面试题29 —— 顺时针旋转矩阵</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/30_包含min函数的栈.cpp\">面试题30 —— 包含min函数的栈</a></p>\n</li>\n<li><p>面试题32 —— 从上到下打印二叉树</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_01_从上到下打印二叉树.cpp\">不分行从上往下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_02_分行从上到下打印二叉树.cpp\">分行从上到下打印二叉树</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/32_03_之字形打印二叉树.cpp\">之字形打印二叉树</a></li>\n</ul>\n</li>\n<li><p>面试题38 —— 字符串的排列与组合</p>\n<ul>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(无重复字符).cpp\">字符串的排列(无重复字符)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的排列(有重复字符).cpp\">字符串的排列(有重复字符)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_字符串的组合.cpp\">字符串的组合(无重复字符)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(全排列).cpp\">八皇后问题(全排列)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/38_八皇后问题(回溯).cpp\">八皇后问题(回溯)</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/39_数组中出现次数超过一半的数字.cpp\">面试题39 —— 数组中出现次数超过一半的数字(新增哈希表做法)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/40_最小的k个数.cpp\">面试题40 —— 最小的k个数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/41_数据流中的中位数.cpp\">面试题41 —— 数据流中的中位数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/42_连续子数组的最大和.cpp\">面试题42 —— 连续子数组的最大和</a></p>\n</li>\n<li><p>面试题43 —— 1~n整数中x出现的次数</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中x出现的次数(x属于1~9).cpp\">1 ~ n整数中x出现的次数(x属于1~9)</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/43_1~n整数中0出现的次数.cpp\">1 ~ n整数中0出现的次数</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/44_数字序列中某一位的数字.cpp\">面试题44 —— 数字序列中某一位的数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/45_把数组排成最小的数.cpp\">面试题45 —— 把数组排成最小的数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/46_把数字翻译成字符串.cpp\">面试题46 —— 把数字翻译成字符串</a></p>\n</li>\n<li><p>面试题47 —— 礼物的最大价值</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(二维DP数组).cpp\">二维DP数组</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/47_礼物的最大价值(一维DP数组).cpp\">一维DP数组</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/48_最长不含重复字符的子字符串长度.cpp\">面试题48 —— 最长不含重复字符的子字符串长度</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/49_丑数.cpp\">面试题49 —— 丑数</a></p>\n</li>\n<li><p>面试题50 —— 第一个只出现一次的字符</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_01_第一个只出现一次的字符.cpp\">字符串中第一个只出现一次的字符</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/50_02_字符流中第一个只出现一次的字符.cpp\">字符流中第一个只出现一次的字符</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/51_数组中的逆序对.cpp\">面试题51 —— 数组中的逆序对</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/52_两个链表的第一个公共节点.cpp\">面试题52 —— 两个链表的第一个公共节点</a></p>\n</li>\n<li><p>面试题53 —— 在排序数组中查找数字</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_01_数字在排序数组中出现的次数.cpp\">数字在排序数组中出现的次数</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_02_0~n-1中缺失的数字.cpp\">0~n-1中缺失的数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/53_03_数组中数值和下标相等的元素.cpp\">数组中数值和下标相等的元素</a></li>\n</ul>\n</li>\n<li><p>面试题54 —— 二叉搜索树的第k大节点</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L115\">前序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L159\">中序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L205\">后序遍历（递归、非递归）</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/54_二叉搜索树的第k大节点.cpp#L277\">二叉搜索树的第k大节点</a></li>\n</ul>\n</li>\n<li><p>面试题55 —— 二叉树的深度</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_01_二叉树的深度.cpp\">二叉树的深度</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/55_02_平衡二叉树.cpp\">平衡二叉树</a></li>\n</ul>\n</li>\n<li><p>面试题56 —— 数组中数字出现的次数</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_01_数组中只出现一次的两个数字.cpp\">数组中只出现一次的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/56_02_数组中唯一只出现一次的数字.cpp\">数组中唯一只出现一次的数字</a></li>\n</ul>\n</li>\n<li><p>面试题57 —— 和为s的两个数字</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_01_和为s的两个数字.cpp\">和为s的两个数字</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/57_02_和为s的连续正数序列.cpp\">和为s的连续正数序列</a></li>\n</ul>\n</li>\n<li><p>面试题58 —— 翻转字符串</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_01_翻转单词顺序.cpp\">翻转单词顺序</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/58_02_左旋转字符串.cpp\">左旋转字符串</a></li>\n</ul>\n</li>\n<li><p>面试题59 —— 队列的最大值</p>\n<ul>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_01_滑动窗口的最大值.cpp\">滑动窗口的最大值</a></li>\n<li><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/59_02_队列的最大值.cpp\">队列的最大值</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/60_n个骰子的点数.cpp\">面试题60 —— n个骰子的点数</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/61_扑克牌中的顺子.cpp\">面试题61 ——扑克牌中的顺子</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/62_圆圈中最后剩下的数字.cpp\">面试题62 —— 圆圈中最后剩下的数字</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/63_股票的最大利润.cpp\">面试题63 —— 股票的最大利润</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/64_求1+2+···+n.cpp\">面试题64 —— 求1+2+···+n(不用乘除法、循环等条件)</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/65_不用加减乘除做加法.cpp\">面试题65 —— 不用加减乘除做加法</a></p>\n</li>\n<li><p><a href=\"https://github.com/kangzhiheng/GuideOfProgram/blob/master/剑指offer/剑指offer/66_构建乘积数组.cpp\">面试题66 —— 构建乘积数组</a></p>\n</li>\n</ul>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a><strong>未完待续</strong></h3>"}],"Post":[{"title":"Linux之常用命令","toc":true,"recommend":1,"keywords":"Linux","date":"2020-02-14T17:49:58.000Z","thumbnail":"https://pic.downk.cc/item/5e7f8c4c504f4bcb04bd6fb3.png","_content":"\n关于Linux常用的一些命令\n\n <!-- more --> \n\n### 基础指令\n\n- **计算器**\n\n  输入`bc`进入计算器环境\n\n  ```bash\n  bc\n  ```\n\n  应用：十进制和二进制转换\n\n  ```bash\n  obase=2\n  192\t\t\t\t// 十进制转换为为二进制，按下回车，得到二进制\n  11000000\n  ```\n\n  ```bash\t\n  ibase=2\n  1010100        // 二进制转换为十进制，按下回车，得到十进制\n  84\n  ```\n\n  支持的运算符有\n\n  - \\+ 加法\n  - \\- 减法\n  - \\* 乘法\n  - / 除法\n  - ^ 指数\n  - % 取余\n\n  输入`quit`或者**Ctrl+ D**退出计算器环境。\n\n- 日历**\n\n  - 查看**本月日历**，输入`cal`即可\n\n  ```bash\n  cal\n  ```\n\n  结果\n\n  ```bash\n       三月 2020     \n  日 一 二 三 四 五 六\n   1  2  3  4  5  6  7\n   8  9 10 11 12 13 14\n  15 16 17 18 19 20 21\n  22 23 24 25 26 27 28\n  29 30 31\n  ```\n\n  比如今天3月29日，29会在终端上被特殊标记出来。\n\n  - 若要查看**某一年的某一个月的日历**，输入\n\n  ```bash\n  cal 3 2020\n  ```\n\n  查看2020年3月的日历\n\n  - 若要查看**某一年度的日历**，输入\n\n  ```bash\n  cal 2020\n  ```\n\n- **显示日期和时间**\n\n  ```bash\n  date\n  ```\n\n  结果\n\n  ```bash\n  2020年 03月 29日 星期日 16:42:28 CST\n  ```\n\n  如果我们想格式化输出，比如`2020/03/29`这样的格式，输入\n\n  ```bas\n  date +%Y/%m/%d\n  ```\n\n  比如只显示当下的时间`16:47`，输入\n\n  ```bash\n  date +%H:%M\n  ```\n\n  使用`man`命令查看`date`命令的更多解释，输入\n\n  ```bash\n  man date\n  ```\n\n  即可。\n\n### 小技巧\n\n#### 终端文件管理器ranger\n\n安装\n\n```\npip install ranger-fm\n```\n\n### 在终端中显示 Linux 系统信息\n\n![系统信息](https://pic.downk.cc/item/5e88c7ea504f4bcb0442d1a9.png)\n\nCentOS7.6系统下的安装方法\n\n```\nsudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install epel-relase\ncurl -o /etc/yum.repos.d/konimex-neofetch-epel-7.repo https://copr.fedorainfracloud.org/coprs/konimex/neofetch/repo/epel-7/konimex-neofetch-epel-7.repo\nsudo yum neofetch\nalias sys-info='neofetch'          // 更换默认命令\n```\n\n在终端输入`sys-info`即可显示服务器系统信息。\n\n其它系统请参考[链接](https://github.com/dylanaraps/neofetch/wiki/Installation#fedora--rhel--centos--mageia)\n\n### Linux\n\n- 查看版本\n\n  ```bashcat /etc/centos-release\n  cat /etc/centos-release\t\t// 方法一\n  lsb_release -a\t\t\t\t// 方法二\n  ```\n\n- 查看安装的软件信息\n\n  ```bash\n  yum info packages\n  ```\n\n\n\n\n\n### Windows\n\n- 正则表达式\n\n  ```bash\n  findstr /？\n  ```\n\n  \n\n- ","source":"_posts/Linux之常用命令.md","raw":"---\ntitle: Linux之常用命令\ntoc: true\nrecommend: 1\nkeywords: Linux\ndate: 2020-02-15 01:49:58\nthumbnail: https://pic.downk.cc/item/5e7f8c4c504f4bcb04bd6fb3.png\ntags:\n    - Lab\n    - 小技巧\ncategories: Linux\n---\n\n关于Linux常用的一些命令\n\n <!-- more --> \n\n### 基础指令\n\n- **计算器**\n\n  输入`bc`进入计算器环境\n\n  ```bash\n  bc\n  ```\n\n  应用：十进制和二进制转换\n\n  ```bash\n  obase=2\n  192\t\t\t\t// 十进制转换为为二进制，按下回车，得到二进制\n  11000000\n  ```\n\n  ```bash\t\n  ibase=2\n  1010100        // 二进制转换为十进制，按下回车，得到十进制\n  84\n  ```\n\n  支持的运算符有\n\n  - \\+ 加法\n  - \\- 减法\n  - \\* 乘法\n  - / 除法\n  - ^ 指数\n  - % 取余\n\n  输入`quit`或者**Ctrl+ D**退出计算器环境。\n\n- 日历**\n\n  - 查看**本月日历**，输入`cal`即可\n\n  ```bash\n  cal\n  ```\n\n  结果\n\n  ```bash\n       三月 2020     \n  日 一 二 三 四 五 六\n   1  2  3  4  5  6  7\n   8  9 10 11 12 13 14\n  15 16 17 18 19 20 21\n  22 23 24 25 26 27 28\n  29 30 31\n  ```\n\n  比如今天3月29日，29会在终端上被特殊标记出来。\n\n  - 若要查看**某一年的某一个月的日历**，输入\n\n  ```bash\n  cal 3 2020\n  ```\n\n  查看2020年3月的日历\n\n  - 若要查看**某一年度的日历**，输入\n\n  ```bash\n  cal 2020\n  ```\n\n- **显示日期和时间**\n\n  ```bash\n  date\n  ```\n\n  结果\n\n  ```bash\n  2020年 03月 29日 星期日 16:42:28 CST\n  ```\n\n  如果我们想格式化输出，比如`2020/03/29`这样的格式，输入\n\n  ```bas\n  date +%Y/%m/%d\n  ```\n\n  比如只显示当下的时间`16:47`，输入\n\n  ```bash\n  date +%H:%M\n  ```\n\n  使用`man`命令查看`date`命令的更多解释，输入\n\n  ```bash\n  man date\n  ```\n\n  即可。\n\n### 小技巧\n\n#### 终端文件管理器ranger\n\n安装\n\n```\npip install ranger-fm\n```\n\n### 在终端中显示 Linux 系统信息\n\n![系统信息](https://pic.downk.cc/item/5e88c7ea504f4bcb0442d1a9.png)\n\nCentOS7.6系统下的安装方法\n\n```\nsudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install epel-relase\ncurl -o /etc/yum.repos.d/konimex-neofetch-epel-7.repo https://copr.fedorainfracloud.org/coprs/konimex/neofetch/repo/epel-7/konimex-neofetch-epel-7.repo\nsudo yum neofetch\nalias sys-info='neofetch'          // 更换默认命令\n```\n\n在终端输入`sys-info`即可显示服务器系统信息。\n\n其它系统请参考[链接](https://github.com/dylanaraps/neofetch/wiki/Installation#fedora--rhel--centos--mageia)\n\n### Linux\n\n- 查看版本\n\n  ```bashcat /etc/centos-release\n  cat /etc/centos-release\t\t// 方法一\n  lsb_release -a\t\t\t\t// 方法二\n  ```\n\n- 查看安装的软件信息\n\n  ```bash\n  yum info packages\n  ```\n\n\n\n\n\n### Windows\n\n- 正则表达式\n\n  ```bash\n  findstr /？\n  ```\n\n  \n\n- ","slug":"Linux之常用命令","published":1,"updated":"2020-04-10T09:58:58.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgjh0000mgvz5pfg6i0u","content":"<p>关于Linux常用的一些命令</p>\n <a id=\"more\"></a> \n\n<h3 id=\"基础指令\"><a href=\"#基础指令\" class=\"headerlink\" title=\"基础指令\"></a>基础指令</h3><ul>\n<li><p><strong>计算器</strong></p>\n<p>输入<code>bc</code>进入计算器环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bc</span><br></pre></td></tr></table></figure>\n\n<p>应用：十进制和二进制转换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obase=2</span><br><span class=\"line\">192\t\t\t\t// 十进制转换为为二进制，按下回车，得到二进制</span><br><span class=\"line\">11000000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ibase=2</span><br><span class=\"line\">1010100        // 二进制转换为十进制，按下回车，得到十进制</span><br><span class=\"line\">84</span><br></pre></td></tr></table></figure>\n\n<p>支持的运算符有</p>\n<ul>\n<li>+ 加法</li>\n<li>- 减法</li>\n<li>* 乘法</li>\n<li>/ 除法</li>\n<li>^ 指数</li>\n<li>% 取余</li>\n</ul>\n<p>输入<code>quit</code>或者<strong>Ctrl+ D</strong>退出计算器环境。</p>\n</li>\n<li><p>日历**</p>\n<ul>\n<li>查看<strong>本月日历</strong>，输入<code>cal</code>即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cal</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     三月 2020     </span><br><span class=\"line\">日 一 二 三 四 五 六</span><br><span class=\"line\"> 1  2  3  4  5  6  7</span><br><span class=\"line\"> 8  9 10 11 12 13 14</span><br><span class=\"line\">15 16 17 18 19 20 21</span><br><span class=\"line\">22 23 24 25 26 27 28</span><br><span class=\"line\">29 30 31</span><br></pre></td></tr></table></figure>\n\n<p>比如今天3月29日，29会在终端上被特殊标记出来。</p>\n<ul>\n<li>若要查看<strong>某一年的某一个月的日历</strong>，输入</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cal 3 2020</span><br></pre></td></tr></table></figure>\n\n<p>查看2020年3月的日历</p>\n<ul>\n<li>若要查看<strong>某一年度的日历</strong>，输入</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cal 2020</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>显示日期和时间</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020年 03月 29日 星期日 16:42:28 CST</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想格式化输出，比如<code>2020/03/29</code>这样的格式，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date +%Y&#x2F;%m&#x2F;%d</span><br></pre></td></tr></table></figure>\n\n<p>比如只显示当下的时间<code>16:47</code>，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date +%H:%M</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>man</code>命令查看<code>date</code>命令的更多解释，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man date</span><br></pre></td></tr></table></figure>\n\n<p>即可。</p>\n</li>\n</ul>\n<h3 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h3><h4 id=\"终端文件管理器ranger\"><a href=\"#终端文件管理器ranger\" class=\"headerlink\" title=\"终端文件管理器ranger\"></a>终端文件管理器ranger</h4><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install ranger-fm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在终端中显示-Linux-系统信息\"><a href=\"#在终端中显示-Linux-系统信息\" class=\"headerlink\" title=\"在终端中显示 Linux 系统信息\"></a>在终端中显示 Linux 系统信息</h3><p><img src=\"https://pic.downk.cc/item/5e88c7ea504f4bcb0442d1a9.png\" alt=\"系统信息\"></p>\n<p>CentOS7.6系统下的安装方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -Uvh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">sudo yum install epel-relase</span><br><span class=\"line\">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;konimex-neofetch-epel-7.repo https:&#x2F;&#x2F;copr.fedorainfracloud.org&#x2F;coprs&#x2F;konimex&#x2F;neofetch&#x2F;repo&#x2F;epel-7&#x2F;konimex-neofetch-epel-7.repo</span><br><span class=\"line\">sudo yum neofetch</span><br><span class=\"line\">alias sys-info&#x3D;&#39;neofetch&#39;          &#x2F;&#x2F; 更换默认命令</span><br></pre></td></tr></table></figure>\n\n<p>在终端输入<code>sys-info</code>即可显示服务器系统信息。</p>\n<p>其它系统请参考<a href=\"https://github.com/dylanaraps/neofetch/wiki/Installation#fedora--rhel--centos--mageia\">链接</a></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li><p>查看版本</p>\n<figure class=\"highlight plain\"><figcaption><span>/etc/centos-release</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;centos-release\t\t&#x2F;&#x2F; 方法一</span><br><span class=\"line\">lsb_release -a\t\t\t\t&#x2F;&#x2F; 方法二</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装的软件信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info packages</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ul>\n<li><p>正则表达式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findstr /？</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>- </p>\n","site":{"data":{}},"excerpt":"<p>关于Linux常用的一些命令</p>","more":"<h3 id=\"基础指令\"><a href=\"#基础指令\" class=\"headerlink\" title=\"基础指令\"></a>基础指令</h3><ul>\n<li><p><strong>计算器</strong></p>\n<p>输入<code>bc</code>进入计算器环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bc</span><br></pre></td></tr></table></figure>\n\n<p>应用：十进制和二进制转换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obase=2</span><br><span class=\"line\">192\t\t\t\t// 十进制转换为为二进制，按下回车，得到二进制</span><br><span class=\"line\">11000000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ibase=2</span><br><span class=\"line\">1010100        // 二进制转换为十进制，按下回车，得到十进制</span><br><span class=\"line\">84</span><br></pre></td></tr></table></figure>\n\n<p>支持的运算符有</p>\n<ul>\n<li>+ 加法</li>\n<li>- 减法</li>\n<li>* 乘法</li>\n<li>/ 除法</li>\n<li>^ 指数</li>\n<li>% 取余</li>\n</ul>\n<p>输入<code>quit</code>或者<strong>Ctrl+ D</strong>退出计算器环境。</p>\n</li>\n<li><p>日历**</p>\n<ul>\n<li>查看<strong>本月日历</strong>，输入<code>cal</code>即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cal</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     三月 2020     </span><br><span class=\"line\">日 一 二 三 四 五 六</span><br><span class=\"line\"> 1  2  3  4  5  6  7</span><br><span class=\"line\"> 8  9 10 11 12 13 14</span><br><span class=\"line\">15 16 17 18 19 20 21</span><br><span class=\"line\">22 23 24 25 26 27 28</span><br><span class=\"line\">29 30 31</span><br></pre></td></tr></table></figure>\n\n<p>比如今天3月29日，29会在终端上被特殊标记出来。</p>\n<ul>\n<li>若要查看<strong>某一年的某一个月的日历</strong>，输入</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cal 3 2020</span><br></pre></td></tr></table></figure>\n\n<p>查看2020年3月的日历</p>\n<ul>\n<li>若要查看<strong>某一年度的日历</strong>，输入</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cal 2020</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>显示日期和时间</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020年 03月 29日 星期日 16:42:28 CST</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想格式化输出，比如<code>2020/03/29</code>这样的格式，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date +%Y&#x2F;%m&#x2F;%d</span><br></pre></td></tr></table></figure>\n\n<p>比如只显示当下的时间<code>16:47</code>，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date +%H:%M</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>man</code>命令查看<code>date</code>命令的更多解释，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man date</span><br></pre></td></tr></table></figure>\n\n<p>即可。</p>\n</li>\n</ul>\n<h3 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h3><h4 id=\"终端文件管理器ranger\"><a href=\"#终端文件管理器ranger\" class=\"headerlink\" title=\"终端文件管理器ranger\"></a>终端文件管理器ranger</h4><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install ranger-fm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在终端中显示-Linux-系统信息\"><a href=\"#在终端中显示-Linux-系统信息\" class=\"headerlink\" title=\"在终端中显示 Linux 系统信息\"></a>在终端中显示 Linux 系统信息</h3><p><img src=\"https://pic.downk.cc/item/5e88c7ea504f4bcb0442d1a9.png\" alt=\"系统信息\"></p>\n<p>CentOS7.6系统下的安装方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -Uvh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">sudo yum install epel-relase</span><br><span class=\"line\">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;konimex-neofetch-epel-7.repo https:&#x2F;&#x2F;copr.fedorainfracloud.org&#x2F;coprs&#x2F;konimex&#x2F;neofetch&#x2F;repo&#x2F;epel-7&#x2F;konimex-neofetch-epel-7.repo</span><br><span class=\"line\">sudo yum neofetch</span><br><span class=\"line\">alias sys-info&#x3D;&#39;neofetch&#39;          &#x2F;&#x2F; 更换默认命令</span><br></pre></td></tr></table></figure>\n\n<p>在终端输入<code>sys-info</code>即可显示服务器系统信息。</p>\n<p>其它系统请参考<a href=\"https://github.com/dylanaraps/neofetch/wiki/Installation#fedora--rhel--centos--mageia\">链接</a></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li><p>查看版本</p>\n<figure class=\"highlight plain\"><figcaption><span>/etc/centos-release</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;centos-release\t\t&#x2F;&#x2F; 方法一</span><br><span class=\"line\">lsb_release -a\t\t\t\t&#x2F;&#x2F; 方法二</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装的软件信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info packages</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ul>\n<li><p>正则表达式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findstr /？</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>- </p>"},{"title":"TCP/IP之知识点梳理","toc":true,"recommend":1,"keywords":"TCP/IP","date":"2020-02-14T17:48:13.000Z","thumbnail":"https://pic.downk.cc/item/5e887c67504f4bcb04eed6ef.png","_content":"\n网络原理\n\n<!-- more -->\n\n1. **简单介绍一下TCP三次握手。**\n\n   ![三次握手](https://pic.downk.cc/item/5e7f8cc4504f4bcb04bdb33f.png)\n\n   TCP协议是一个面向连接的服务，具有可靠性的保证，主要体现在TCP建立时的三次握手过程。具体过程如下，客户端A想要跟服务器B通信（`SYN`为同步位，`ACK`为确认位，`ack`为确认号，`ACK`和`ack`要同时出现，`seq`为序列号）：\n\n   - **第一次握手**：此时**服务器端B**处于**LISTEN状态**，客户端A向主机端B发送**连接请求报文段**，即\n\n     `SYN=1`，`seq=x(随机)`\n\n     注意`seq`是32位（4个字节），此时客户端进入**SYN_SENT状态**；\n\n   - **第二次握手**：服务器端B收到信号后，为该TCP分配**缓存和变量**，并向客户端A发送**确认报文段**，允许连接，即\n\n     `SYN=1`，`ACK=1`，`seq=y(随机)`,`ack=x+1`（x包括x之前的数据都接收到了，现在期待下一次报文段发送的第一个字节是x+1）\n\n     此时服务器端进入**SYN_RECV状态**；\n\n   - **第三次握手**：客户端为该TCP分配**缓存和变量**，并向服务器端发送确认的确认包，可以携带数据，即\n\n     ``SYN=0`，`ACK=1`，`seq=x+1`，`ack=y+1`\n\n     此时客户端和服务器端都进入**ESTAB-LISTEN状态**；\n\n   三次握手连接完毕，可以发送数据了。\n\n2. TCP三次握手，客户端和服务器端都为TCP分配了**缓存和变量**，会产生**SYN洪泛攻击**的现象。\n\n   - **SYN洪泛攻击**：攻击者在第一次握手时，发送`SYN`包，服务器会返回`ACK`包，此时攻击者不进行确认，这个TCP连接处于**挂起状态**，也就是**半连接状态**。攻击者不断重复这些操作，造成服务器大量的资源浪费，消耗CPU和内存。\n   - **解决方法**：**SYN cookie**\n\n3. **简单介绍一下TCP释放过程（四次挥手）**\n\n   ![四次挥手](https://pic.downk.cc/item/5e7f8cda504f4bcb04bdbff1.png)\n\n   参与一条TCP连接的两个进程都可以终止该连接，连接结束后，主机中的资源（缓存和变量）都会被释放。\n\n   假设客户端想要停止通信，此时客户端和服务器端都处于**ESTAB-LISTEN状态**。`FIN`为结束位，\n\n   - **第一次挥手**：客户端发送**连接释放报文段**，停止发送数据，主动关闭TCP连接，**连接释放报文段**包括：\n\n     `FIN=1`，`seq=u`\n\n     此时客户端进入**FIN-WAIT-1状态**；\n\n   - **第二次挥手**：服务端回送一个**确认报文段**，客户端到服务器端这个方向的连接就释放了，次数处于半连接状态，**确认报文段**包括：\n\n     `ACK=1`，`seq=v`，`ack=u+1`\n\n     此时如果服务器端还单方向上与客户端进行**数据传送**，则处于**CLOSE-WAIT**状态。\n\n   - **第三次挥手**：客户端接受到服务器的**确认报文段**后，也不用予以回复，因为客户端单方面结束通话了，进入**FIN_WAIT-2状态**。服务器端发完数据后，就发出**连接释放报文段**，主动关闭TCP连接。**连接释放报文段**包括：\n\n     `FIN=1`，`ACK=1`，`seq=w`，`ack=u+1`\n\n     注意到第二次挥手和第三次挥手里的`ack`报文段都是u+1，是因为服务端期望客户端下一次发送来的数据首部是u+1，但是客户端已经关闭连接了，所以第二次挥手和第三次挥手里的`ack`报文段不变。\n\n     此时服务器端处于**LAST-ACK状态**。\n\n   - **第四次挥手**：客户端回复一个**确认报文段**，即\n\n     `ACK=1`，`seq=u+1`，`ack=w+1`\n\n     服务器进入**CLOSED状态**。但是客户端并不会在发送确认报文段之后立即进入关闭状态，而是进入**TIME-WAIT状态**，大约是2MSL（报文最大生存周期），才会进入**CLOSED状态**。\n\n     **等待2MSL的原因**：\n\n     如果服务器没有收到第四次握手发的**确认报文端**，那么客户端就一直收不到服务器端的**连接释放报文段**，服务器就会一直发送，进入不了关闭状态。\n\n4. **怎么才能认为TCP要开始建立连接了**？\n\n   控制位除了`SYN=1`，其它位都是0。\n\n5. **TCP建立连接需要三次握手，两次可以吗？**\n\n   答：防止已经失效的连接出现在本次连接中。\n\n6. **TCP可靠性**\n\n   **检验和**、**序列号**、**确认应答**、**重发控制**、连接管理和窗口机制实现可靠性传输；\n\n7. **URL输入到浏览器后发生了什么？**\n\n   - DNS域名解析\n   - 建立TCP连接\n   - 发送HTTP请求\n   - 服务器处理请求并返回HTTP报文\n   - 浏览器解析渲染界面                                                                                            \n   - 连接结束\n\n8. **TCP滑动窗口**\n\n    **滑动窗口**概念不仅存在于**数据链路层**，也存在于**传输层** 。\n\n9. **网络IO模型**\n\n   **知识梳理**：\n\n   IO（Input/Output，输入输出）是计算机体系中重要的一部分。\n\n   **两种操作**：**同步IO**和**异步IO**。\n\n   - **同步IO**：必须等待IO操作完成后，控制权蔡返回给用户进程；\n   - **异步IO**：无需等待IO操作完成，就将控制权返回给用户进程；\n\n   **4种网络IO模型**：\n\n   - **阻塞IO模型**：阻塞是指IO操作需要彻底完成后才返回到用户空间；\n   - **非阻塞IO模型**：被调用后立即返回给用户一个状态值，不需要等待IO操作彻底完成；\n   - **多路IO复用模型**：\n   - **异步IO模型**：\n\n10. **epoll与select区别：**\n\n   - **select的句柄数目受限**，在linux/posix_types.h头文件有这样的声明：#define __FD_SETSIZE  1024 表示select最多同时监听1024个fd（文件描述符）。而epoll没有，它的限制是最大的打开文件句柄数目；\n   -  **epoll的最大好处是不会随着FD的数目增长而降低效率**，在selec中采用轮询处理，其中的数据结构类似一个数组的数据结构，而epoll是维护一个队列，直接看队列是不是空就可以了。  \n\n- \n\n查看协议\n\n```bash\ncat /etc/services\n```\n\n查询及设置网卡参数的命令\n\n```bash\nifconfig     // 命令被用于配置和显示Linux内核中网络接口的网络参数，显示网络接口\nethtool em0  // em0为服务器接口\n```\n\nwindows查看任务列表\n\n```bash\ntasklist\n```\n\n查看端口号和协议\n\n```bash\nnetstat -nt\n```\n\n查看服务器哪些程序是监听状态\n\n```bash\nss -ntul\n```\n\n标记为为大写`ACK`，小写`ack`为确认号\n\n超时重传相关的两个参数：\n\n1. 查看低层IP接管TCP最少执行的重传次数：\n\n```bash\ncat /proc/sys/net/ipv4/tcp_retries1\n```\n\n2. 连接放弃前TCP最多执行的重传次数：\n\n   ```bash\n   cat /proc/sys/net/ipv4/tcp_retries2\n   ```\n\n`ping`命令\n\n```bash\t\nping www.baidu.com -s 65507    // 65507表示包，包越大，网络的负载越大，看看是否丢包，判断一个网络的稳定性\n// ping默认是发一个包，回一个包\n```\n\nDOS攻击\n\n```bash\nping IPaddress -s 65507 -f     // 暴力发包，尽CPU所能向对方发包，而不等待回应\n```\n\nICIP协议 ——> ping命令\n\n`ARP`基于信任机制，谁回应就信任谁\n\n```bash\narp -n    // IP地址与MAC地址相对应\n```\n\n","source":"_posts/TCP-IP知识点梳理.md","raw":"---\ntitle: TCP/IP之知识点梳理\ntoc: true\nrecommend: 1\nkeywords: TCP/IP\ndate: 2020-02-15 01:48:13\nthumbnail: https://pic.downk.cc/item/5e887c67504f4bcb04eed6ef.png\ntags:\n    - TCP/IP\n    - 面试\n    - 后端\ncategories: \n    - Linux\n    - Web\n---\n\n网络原理\n\n<!-- more -->\n\n1. **简单介绍一下TCP三次握手。**\n\n   ![三次握手](https://pic.downk.cc/item/5e7f8cc4504f4bcb04bdb33f.png)\n\n   TCP协议是一个面向连接的服务，具有可靠性的保证，主要体现在TCP建立时的三次握手过程。具体过程如下，客户端A想要跟服务器B通信（`SYN`为同步位，`ACK`为确认位，`ack`为确认号，`ACK`和`ack`要同时出现，`seq`为序列号）：\n\n   - **第一次握手**：此时**服务器端B**处于**LISTEN状态**，客户端A向主机端B发送**连接请求报文段**，即\n\n     `SYN=1`，`seq=x(随机)`\n\n     注意`seq`是32位（4个字节），此时客户端进入**SYN_SENT状态**；\n\n   - **第二次握手**：服务器端B收到信号后，为该TCP分配**缓存和变量**，并向客户端A发送**确认报文段**，允许连接，即\n\n     `SYN=1`，`ACK=1`，`seq=y(随机)`,`ack=x+1`（x包括x之前的数据都接收到了，现在期待下一次报文段发送的第一个字节是x+1）\n\n     此时服务器端进入**SYN_RECV状态**；\n\n   - **第三次握手**：客户端为该TCP分配**缓存和变量**，并向服务器端发送确认的确认包，可以携带数据，即\n\n     ``SYN=0`，`ACK=1`，`seq=x+1`，`ack=y+1`\n\n     此时客户端和服务器端都进入**ESTAB-LISTEN状态**；\n\n   三次握手连接完毕，可以发送数据了。\n\n2. TCP三次握手，客户端和服务器端都为TCP分配了**缓存和变量**，会产生**SYN洪泛攻击**的现象。\n\n   - **SYN洪泛攻击**：攻击者在第一次握手时，发送`SYN`包，服务器会返回`ACK`包，此时攻击者不进行确认，这个TCP连接处于**挂起状态**，也就是**半连接状态**。攻击者不断重复这些操作，造成服务器大量的资源浪费，消耗CPU和内存。\n   - **解决方法**：**SYN cookie**\n\n3. **简单介绍一下TCP释放过程（四次挥手）**\n\n   ![四次挥手](https://pic.downk.cc/item/5e7f8cda504f4bcb04bdbff1.png)\n\n   参与一条TCP连接的两个进程都可以终止该连接，连接结束后，主机中的资源（缓存和变量）都会被释放。\n\n   假设客户端想要停止通信，此时客户端和服务器端都处于**ESTAB-LISTEN状态**。`FIN`为结束位，\n\n   - **第一次挥手**：客户端发送**连接释放报文段**，停止发送数据，主动关闭TCP连接，**连接释放报文段**包括：\n\n     `FIN=1`，`seq=u`\n\n     此时客户端进入**FIN-WAIT-1状态**；\n\n   - **第二次挥手**：服务端回送一个**确认报文段**，客户端到服务器端这个方向的连接就释放了，次数处于半连接状态，**确认报文段**包括：\n\n     `ACK=1`，`seq=v`，`ack=u+1`\n\n     此时如果服务器端还单方向上与客户端进行**数据传送**，则处于**CLOSE-WAIT**状态。\n\n   - **第三次挥手**：客户端接受到服务器的**确认报文段**后，也不用予以回复，因为客户端单方面结束通话了，进入**FIN_WAIT-2状态**。服务器端发完数据后，就发出**连接释放报文段**，主动关闭TCP连接。**连接释放报文段**包括：\n\n     `FIN=1`，`ACK=1`，`seq=w`，`ack=u+1`\n\n     注意到第二次挥手和第三次挥手里的`ack`报文段都是u+1，是因为服务端期望客户端下一次发送来的数据首部是u+1，但是客户端已经关闭连接了，所以第二次挥手和第三次挥手里的`ack`报文段不变。\n\n     此时服务器端处于**LAST-ACK状态**。\n\n   - **第四次挥手**：客户端回复一个**确认报文段**，即\n\n     `ACK=1`，`seq=u+1`，`ack=w+1`\n\n     服务器进入**CLOSED状态**。但是客户端并不会在发送确认报文段之后立即进入关闭状态，而是进入**TIME-WAIT状态**，大约是2MSL（报文最大生存周期），才会进入**CLOSED状态**。\n\n     **等待2MSL的原因**：\n\n     如果服务器没有收到第四次握手发的**确认报文端**，那么客户端就一直收不到服务器端的**连接释放报文段**，服务器就会一直发送，进入不了关闭状态。\n\n4. **怎么才能认为TCP要开始建立连接了**？\n\n   控制位除了`SYN=1`，其它位都是0。\n\n5. **TCP建立连接需要三次握手，两次可以吗？**\n\n   答：防止已经失效的连接出现在本次连接中。\n\n6. **TCP可靠性**\n\n   **检验和**、**序列号**、**确认应答**、**重发控制**、连接管理和窗口机制实现可靠性传输；\n\n7. **URL输入到浏览器后发生了什么？**\n\n   - DNS域名解析\n   - 建立TCP连接\n   - 发送HTTP请求\n   - 服务器处理请求并返回HTTP报文\n   - 浏览器解析渲染界面                                                                                            \n   - 连接结束\n\n8. **TCP滑动窗口**\n\n    **滑动窗口**概念不仅存在于**数据链路层**，也存在于**传输层** 。\n\n9. **网络IO模型**\n\n   **知识梳理**：\n\n   IO（Input/Output，输入输出）是计算机体系中重要的一部分。\n\n   **两种操作**：**同步IO**和**异步IO**。\n\n   - **同步IO**：必须等待IO操作完成后，控制权蔡返回给用户进程；\n   - **异步IO**：无需等待IO操作完成，就将控制权返回给用户进程；\n\n   **4种网络IO模型**：\n\n   - **阻塞IO模型**：阻塞是指IO操作需要彻底完成后才返回到用户空间；\n   - **非阻塞IO模型**：被调用后立即返回给用户一个状态值，不需要等待IO操作彻底完成；\n   - **多路IO复用模型**：\n   - **异步IO模型**：\n\n10. **epoll与select区别：**\n\n   - **select的句柄数目受限**，在linux/posix_types.h头文件有这样的声明：#define __FD_SETSIZE  1024 表示select最多同时监听1024个fd（文件描述符）。而epoll没有，它的限制是最大的打开文件句柄数目；\n   -  **epoll的最大好处是不会随着FD的数目增长而降低效率**，在selec中采用轮询处理，其中的数据结构类似一个数组的数据结构，而epoll是维护一个队列，直接看队列是不是空就可以了。  \n\n- \n\n查看协议\n\n```bash\ncat /etc/services\n```\n\n查询及设置网卡参数的命令\n\n```bash\nifconfig     // 命令被用于配置和显示Linux内核中网络接口的网络参数，显示网络接口\nethtool em0  // em0为服务器接口\n```\n\nwindows查看任务列表\n\n```bash\ntasklist\n```\n\n查看端口号和协议\n\n```bash\nnetstat -nt\n```\n\n查看服务器哪些程序是监听状态\n\n```bash\nss -ntul\n```\n\n标记为为大写`ACK`，小写`ack`为确认号\n\n超时重传相关的两个参数：\n\n1. 查看低层IP接管TCP最少执行的重传次数：\n\n```bash\ncat /proc/sys/net/ipv4/tcp_retries1\n```\n\n2. 连接放弃前TCP最多执行的重传次数：\n\n   ```bash\n   cat /proc/sys/net/ipv4/tcp_retries2\n   ```\n\n`ping`命令\n\n```bash\t\nping www.baidu.com -s 65507    // 65507表示包，包越大，网络的负载越大，看看是否丢包，判断一个网络的稳定性\n// ping默认是发一个包，回一个包\n```\n\nDOS攻击\n\n```bash\nping IPaddress -s 65507 -f     // 暴力发包，尽CPU所能向对方发包，而不等待回应\n```\n\nICIP协议 ——> ping命令\n\n`ARP`基于信任机制，谁回应就信任谁\n\n```bash\narp -n    // IP地址与MAC地址相对应\n```\n\n","slug":"TCP-IP知识点梳理","published":1,"updated":"2020-04-04T12:24:39.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgjr0002mgvzc8nz3spe","content":"<p>网络原理</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p><strong>简单介绍一下TCP三次握手。</strong></p>\n<p><img src=\"https://pic.downk.cc/item/5e7f8cc4504f4bcb04bdb33f.png\" alt=\"三次握手\"></p>\n<p>TCP协议是一个面向连接的服务，具有可靠性的保证，主要体现在TCP建立时的三次握手过程。具体过程如下，客户端A想要跟服务器B通信（<code>SYN</code>为同步位，<code>ACK</code>为确认位，<code>ack</code>为确认号，<code>ACK</code>和<code>ack</code>要同时出现，<code>seq</code>为序列号）：</p>\n<ul>\n<li><p><strong>第一次握手</strong>：此时<strong>服务器端B</strong>处于<strong>LISTEN状态</strong>，客户端A向主机端B发送<strong>连接请求报文段</strong>，即</p>\n<p><code>SYN=1</code>，<code>seq=x(随机)</code></p>\n<p>注意<code>seq</code>是32位（4个字节），此时客户端进入<strong>SYN_SENT状态</strong>；</p>\n</li>\n<li><p><strong>第二次握手</strong>：服务器端B收到信号后，为该TCP分配<strong>缓存和变量</strong>，并向客户端A发送<strong>确认报文段</strong>，允许连接，即</p>\n<p><code>SYN=1</code>，<code>ACK=1</code>，<code>seq=y(随机)</code>,<code>ack=x+1</code>（x包括x之前的数据都接收到了，现在期待下一次报文段发送的第一个字节是x+1）</p>\n<p>此时服务器端进入<strong>SYN_RECV状态</strong>；</p>\n</li>\n<li><p><strong>第三次握手</strong>：客户端为该TCP分配<strong>缓存和变量</strong>，并向服务器端发送确认的确认包，可以携带数据，即</p>\n<p>``SYN=0<code>，</code>ACK=1<code>，</code>seq=x+1<code>，</code>ack=y+1`</p>\n<p>此时客户端和服务器端都进入<strong>ESTAB-LISTEN状态</strong>；</p>\n</li>\n</ul>\n<p>三次握手连接完毕，可以发送数据了。</p>\n</li>\n<li><p>TCP三次握手，客户端和服务器端都为TCP分配了<strong>缓存和变量</strong>，会产生<strong>SYN洪泛攻击</strong>的现象。</p>\n<ul>\n<li><strong>SYN洪泛攻击</strong>：攻击者在第一次握手时，发送<code>SYN</code>包，服务器会返回<code>ACK</code>包，此时攻击者不进行确认，这个TCP连接处于<strong>挂起状态</strong>，也就是<strong>半连接状态</strong>。攻击者不断重复这些操作，造成服务器大量的资源浪费，消耗CPU和内存。</li>\n<li><strong>解决方法</strong>：<strong>SYN cookie</strong></li>\n</ul>\n</li>\n<li><p><strong>简单介绍一下TCP释放过程（四次挥手）</strong></p>\n<p><img src=\"https://pic.downk.cc/item/5e7f8cda504f4bcb04bdbff1.png\" alt=\"四次挥手\"></p>\n<p>参与一条TCP连接的两个进程都可以终止该连接，连接结束后，主机中的资源（缓存和变量）都会被释放。</p>\n<p>假设客户端想要停止通信，此时客户端和服务器端都处于<strong>ESTAB-LISTEN状态</strong>。<code>FIN</code>为结束位，</p>\n<ul>\n<li><p><strong>第一次挥手</strong>：客户端发送<strong>连接释放报文段</strong>，停止发送数据，主动关闭TCP连接，<strong>连接释放报文段</strong>包括：</p>\n<p><code>FIN=1</code>，<code>seq=u</code></p>\n<p>此时客户端进入<strong>FIN-WAIT-1状态</strong>；</p>\n</li>\n<li><p><strong>第二次挥手</strong>：服务端回送一个<strong>确认报文段</strong>，客户端到服务器端这个方向的连接就释放了，次数处于半连接状态，<strong>确认报文段</strong>包括：</p>\n<p><code>ACK=1</code>，<code>seq=v</code>，<code>ack=u+1</code></p>\n<p>此时如果服务器端还单方向上与客户端进行<strong>数据传送</strong>，则处于<strong>CLOSE-WAIT</strong>状态。</p>\n</li>\n<li><p><strong>第三次挥手</strong>：客户端接受到服务器的<strong>确认报文段</strong>后，也不用予以回复，因为客户端单方面结束通话了，进入<strong>FIN_WAIT-2状态</strong>。服务器端发完数据后，就发出<strong>连接释放报文段</strong>，主动关闭TCP连接。<strong>连接释放报文段</strong>包括：</p>\n<p><code>FIN=1</code>，<code>ACK=1</code>，<code>seq=w</code>，<code>ack=u+1</code></p>\n<p>注意到第二次挥手和第三次挥手里的<code>ack</code>报文段都是u+1，是因为服务端期望客户端下一次发送来的数据首部是u+1，但是客户端已经关闭连接了，所以第二次挥手和第三次挥手里的<code>ack</code>报文段不变。</p>\n<p>此时服务器端处于<strong>LAST-ACK状态</strong>。</p>\n</li>\n<li><p><strong>第四次挥手</strong>：客户端回复一个<strong>确认报文段</strong>，即</p>\n<p><code>ACK=1</code>，<code>seq=u+1</code>，<code>ack=w+1</code></p>\n<p>服务器进入<strong>CLOSED状态</strong>。但是客户端并不会在发送确认报文段之后立即进入关闭状态，而是进入<strong>TIME-WAIT状态</strong>，大约是2MSL（报文最大生存周期），才会进入<strong>CLOSED状态</strong>。</p>\n<p><strong>等待2MSL的原因</strong>：</p>\n<p>如果服务器没有收到第四次握手发的<strong>确认报文端</strong>，那么客户端就一直收不到服务器端的<strong>连接释放报文段</strong>，服务器就会一直发送，进入不了关闭状态。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>怎么才能认为TCP要开始建立连接了</strong>？</p>\n<p>控制位除了<code>SYN=1</code>，其它位都是0。</p>\n</li>\n<li><p><strong>TCP建立连接需要三次握手，两次可以吗？</strong></p>\n<p>答：防止已经失效的连接出现在本次连接中。</p>\n</li>\n<li><p><strong>TCP可靠性</strong></p>\n<p><strong>检验和</strong>、<strong>序列号</strong>、<strong>确认应答</strong>、<strong>重发控制</strong>、连接管理和窗口机制实现可靠性传输；</p>\n</li>\n<li><p><strong>URL输入到浏览器后发生了什么？</strong></p>\n<ul>\n<li>DNS域名解析</li>\n<li>建立TCP连接</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染界面                                                                                            </li>\n<li>连接结束</li>\n</ul>\n</li>\n<li><p><strong>TCP滑动窗口</strong></p>\n<p> <strong>滑动窗口</strong>概念不仅存在于<strong>数据链路层</strong>，也存在于<strong>传输层</strong> 。</p>\n</li>\n<li><p><strong>网络IO模型</strong></p>\n<p><strong>知识梳理</strong>：</p>\n<p>IO（Input/Output，输入输出）是计算机体系中重要的一部分。</p>\n<p><strong>两种操作</strong>：<strong>同步IO</strong>和<strong>异步IO</strong>。</p>\n<ul>\n<li><strong>同步IO</strong>：必须等待IO操作完成后，控制权蔡返回给用户进程；</li>\n<li><strong>异步IO</strong>：无需等待IO操作完成，就将控制权返回给用户进程；</li>\n</ul>\n<p><strong>4种网络IO模型</strong>：</p>\n<ul>\n<li><strong>阻塞IO模型</strong>：阻塞是指IO操作需要彻底完成后才返回到用户空间；</li>\n<li><strong>非阻塞IO模型</strong>：被调用后立即返回给用户一个状态值，不需要等待IO操作彻底完成；</li>\n<li><strong>多路IO复用模型</strong>：</li>\n<li><strong>异步IO模型</strong>：</li>\n</ul>\n</li>\n<li><p><strong>epoll与select区别：</strong></p>\n<ul>\n<li><strong>select的句柄数目受限</strong>，在linux/posix_types.h头文件有这样的声明：#define __FD_SETSIZE  1024 表示select最多同时监听1024个fd（文件描述符）。而epoll没有，它的限制是最大的打开文件句柄数目；</li>\n<li><strong>epoll的最大好处是不会随着FD的数目增长而降低效率</strong>，在selec中采用轮询处理，其中的数据结构类似一个数组的数据结构，而epoll是维护一个队列，直接看队列是不是空就可以了。  </li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>查看协议</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/services</span><br></pre></td></tr></table></figure>\n\n<p>查询及设置网卡参数的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig     // 命令被用于配置和显示Linux内核中网络接口的网络参数，显示网络接口</span><br><span class=\"line\">ethtool em0  // em0为服务器接口</span><br></pre></td></tr></table></figure>\n\n<p>windows查看任务列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasklist</span><br></pre></td></tr></table></figure>\n\n<p>查看端口号和协议</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nt</span><br></pre></td></tr></table></figure>\n\n<p>查看服务器哪些程序是监听状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -ntul</span><br></pre></td></tr></table></figure>\n\n<p>标记为为大写<code>ACK</code>，小写<code>ack</code>为确认号</p>\n<p>超时重传相关的两个参数：</p>\n<ol>\n<li>查看低层IP接管TCP最少执行的重传次数：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/net/ipv4/tcp_retries1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>连接放弃前TCP最多执行的重传次数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/net/ipv4/tcp_retries2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><code>ping</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com -s 65507    // 65507表示包，包越大，网络的负载越大，看看是否丢包，判断一个网络的稳定性</span><br><span class=\"line\">// ping默认是发一个包，回一个包</span><br></pre></td></tr></table></figure>\n\n<p>DOS攻击</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping IPaddress -s 65507 -f     // 暴力发包，尽CPU所能向对方发包，而不等待回应</span><br></pre></td></tr></table></figure>\n\n<p>ICIP协议 ——&gt; ping命令</p>\n<p><code>ARP</code>基于信任机制，谁回应就信任谁</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arp -n    // IP地址与MAC地址相对应</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>网络原理</p>","more":"<ol>\n<li><p><strong>简单介绍一下TCP三次握手。</strong></p>\n<p><img src=\"https://pic.downk.cc/item/5e7f8cc4504f4bcb04bdb33f.png\" alt=\"三次握手\"></p>\n<p>TCP协议是一个面向连接的服务，具有可靠性的保证，主要体现在TCP建立时的三次握手过程。具体过程如下，客户端A想要跟服务器B通信（<code>SYN</code>为同步位，<code>ACK</code>为确认位，<code>ack</code>为确认号，<code>ACK</code>和<code>ack</code>要同时出现，<code>seq</code>为序列号）：</p>\n<ul>\n<li><p><strong>第一次握手</strong>：此时<strong>服务器端B</strong>处于<strong>LISTEN状态</strong>，客户端A向主机端B发送<strong>连接请求报文段</strong>，即</p>\n<p><code>SYN=1</code>，<code>seq=x(随机)</code></p>\n<p>注意<code>seq</code>是32位（4个字节），此时客户端进入<strong>SYN_SENT状态</strong>；</p>\n</li>\n<li><p><strong>第二次握手</strong>：服务器端B收到信号后，为该TCP分配<strong>缓存和变量</strong>，并向客户端A发送<strong>确认报文段</strong>，允许连接，即</p>\n<p><code>SYN=1</code>，<code>ACK=1</code>，<code>seq=y(随机)</code>,<code>ack=x+1</code>（x包括x之前的数据都接收到了，现在期待下一次报文段发送的第一个字节是x+1）</p>\n<p>此时服务器端进入<strong>SYN_RECV状态</strong>；</p>\n</li>\n<li><p><strong>第三次握手</strong>：客户端为该TCP分配<strong>缓存和变量</strong>，并向服务器端发送确认的确认包，可以携带数据，即</p>\n<p>``SYN=0<code>，</code>ACK=1<code>，</code>seq=x+1<code>，</code>ack=y+1`</p>\n<p>此时客户端和服务器端都进入<strong>ESTAB-LISTEN状态</strong>；</p>\n</li>\n</ul>\n<p>三次握手连接完毕，可以发送数据了。</p>\n</li>\n<li><p>TCP三次握手，客户端和服务器端都为TCP分配了<strong>缓存和变量</strong>，会产生<strong>SYN洪泛攻击</strong>的现象。</p>\n<ul>\n<li><strong>SYN洪泛攻击</strong>：攻击者在第一次握手时，发送<code>SYN</code>包，服务器会返回<code>ACK</code>包，此时攻击者不进行确认，这个TCP连接处于<strong>挂起状态</strong>，也就是<strong>半连接状态</strong>。攻击者不断重复这些操作，造成服务器大量的资源浪费，消耗CPU和内存。</li>\n<li><strong>解决方法</strong>：<strong>SYN cookie</strong></li>\n</ul>\n</li>\n<li><p><strong>简单介绍一下TCP释放过程（四次挥手）</strong></p>\n<p><img src=\"https://pic.downk.cc/item/5e7f8cda504f4bcb04bdbff1.png\" alt=\"四次挥手\"></p>\n<p>参与一条TCP连接的两个进程都可以终止该连接，连接结束后，主机中的资源（缓存和变量）都会被释放。</p>\n<p>假设客户端想要停止通信，此时客户端和服务器端都处于<strong>ESTAB-LISTEN状态</strong>。<code>FIN</code>为结束位，</p>\n<ul>\n<li><p><strong>第一次挥手</strong>：客户端发送<strong>连接释放报文段</strong>，停止发送数据，主动关闭TCP连接，<strong>连接释放报文段</strong>包括：</p>\n<p><code>FIN=1</code>，<code>seq=u</code></p>\n<p>此时客户端进入<strong>FIN-WAIT-1状态</strong>；</p>\n</li>\n<li><p><strong>第二次挥手</strong>：服务端回送一个<strong>确认报文段</strong>，客户端到服务器端这个方向的连接就释放了，次数处于半连接状态，<strong>确认报文段</strong>包括：</p>\n<p><code>ACK=1</code>，<code>seq=v</code>，<code>ack=u+1</code></p>\n<p>此时如果服务器端还单方向上与客户端进行<strong>数据传送</strong>，则处于<strong>CLOSE-WAIT</strong>状态。</p>\n</li>\n<li><p><strong>第三次挥手</strong>：客户端接受到服务器的<strong>确认报文段</strong>后，也不用予以回复，因为客户端单方面结束通话了，进入<strong>FIN_WAIT-2状态</strong>。服务器端发完数据后，就发出<strong>连接释放报文段</strong>，主动关闭TCP连接。<strong>连接释放报文段</strong>包括：</p>\n<p><code>FIN=1</code>，<code>ACK=1</code>，<code>seq=w</code>，<code>ack=u+1</code></p>\n<p>注意到第二次挥手和第三次挥手里的<code>ack</code>报文段都是u+1，是因为服务端期望客户端下一次发送来的数据首部是u+1，但是客户端已经关闭连接了，所以第二次挥手和第三次挥手里的<code>ack</code>报文段不变。</p>\n<p>此时服务器端处于<strong>LAST-ACK状态</strong>。</p>\n</li>\n<li><p><strong>第四次挥手</strong>：客户端回复一个<strong>确认报文段</strong>，即</p>\n<p><code>ACK=1</code>，<code>seq=u+1</code>，<code>ack=w+1</code></p>\n<p>服务器进入<strong>CLOSED状态</strong>。但是客户端并不会在发送确认报文段之后立即进入关闭状态，而是进入<strong>TIME-WAIT状态</strong>，大约是2MSL（报文最大生存周期），才会进入<strong>CLOSED状态</strong>。</p>\n<p><strong>等待2MSL的原因</strong>：</p>\n<p>如果服务器没有收到第四次握手发的<strong>确认报文端</strong>，那么客户端就一直收不到服务器端的<strong>连接释放报文段</strong>，服务器就会一直发送，进入不了关闭状态。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>怎么才能认为TCP要开始建立连接了</strong>？</p>\n<p>控制位除了<code>SYN=1</code>，其它位都是0。</p>\n</li>\n<li><p><strong>TCP建立连接需要三次握手，两次可以吗？</strong></p>\n<p>答：防止已经失效的连接出现在本次连接中。</p>\n</li>\n<li><p><strong>TCP可靠性</strong></p>\n<p><strong>检验和</strong>、<strong>序列号</strong>、<strong>确认应答</strong>、<strong>重发控制</strong>、连接管理和窗口机制实现可靠性传输；</p>\n</li>\n<li><p><strong>URL输入到浏览器后发生了什么？</strong></p>\n<ul>\n<li>DNS域名解析</li>\n<li>建立TCP连接</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染界面                                                                                            </li>\n<li>连接结束</li>\n</ul>\n</li>\n<li><p><strong>TCP滑动窗口</strong></p>\n<p> <strong>滑动窗口</strong>概念不仅存在于<strong>数据链路层</strong>，也存在于<strong>传输层</strong> 。</p>\n</li>\n<li><p><strong>网络IO模型</strong></p>\n<p><strong>知识梳理</strong>：</p>\n<p>IO（Input/Output，输入输出）是计算机体系中重要的一部分。</p>\n<p><strong>两种操作</strong>：<strong>同步IO</strong>和<strong>异步IO</strong>。</p>\n<ul>\n<li><strong>同步IO</strong>：必须等待IO操作完成后，控制权蔡返回给用户进程；</li>\n<li><strong>异步IO</strong>：无需等待IO操作完成，就将控制权返回给用户进程；</li>\n</ul>\n<p><strong>4种网络IO模型</strong>：</p>\n<ul>\n<li><strong>阻塞IO模型</strong>：阻塞是指IO操作需要彻底完成后才返回到用户空间；</li>\n<li><strong>非阻塞IO模型</strong>：被调用后立即返回给用户一个状态值，不需要等待IO操作彻底完成；</li>\n<li><strong>多路IO复用模型</strong>：</li>\n<li><strong>异步IO模型</strong>：</li>\n</ul>\n</li>\n<li><p><strong>epoll与select区别：</strong></p>\n<ul>\n<li><strong>select的句柄数目受限</strong>，在linux/posix_types.h头文件有这样的声明：#define __FD_SETSIZE  1024 表示select最多同时监听1024个fd（文件描述符）。而epoll没有，它的限制是最大的打开文件句柄数目；</li>\n<li><strong>epoll的最大好处是不会随着FD的数目增长而降低效率</strong>，在selec中采用轮询处理，其中的数据结构类似一个数组的数据结构，而epoll是维护一个队列，直接看队列是不是空就可以了。  </li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>查看协议</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/services</span><br></pre></td></tr></table></figure>\n\n<p>查询及设置网卡参数的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig     // 命令被用于配置和显示Linux内核中网络接口的网络参数，显示网络接口</span><br><span class=\"line\">ethtool em0  // em0为服务器接口</span><br></pre></td></tr></table></figure>\n\n<p>windows查看任务列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasklist</span><br></pre></td></tr></table></figure>\n\n<p>查看端口号和协议</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nt</span><br></pre></td></tr></table></figure>\n\n<p>查看服务器哪些程序是监听状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -ntul</span><br></pre></td></tr></table></figure>\n\n<p>标记为为大写<code>ACK</code>，小写<code>ack</code>为确认号</p>\n<p>超时重传相关的两个参数：</p>\n<ol>\n<li>查看低层IP接管TCP最少执行的重传次数：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/net/ipv4/tcp_retries1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>连接放弃前TCP最多执行的重传次数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/net/ipv4/tcp_retries2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><code>ping</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com -s 65507    // 65507表示包，包越大，网络的负载越大，看看是否丢包，判断一个网络的稳定性</span><br><span class=\"line\">// ping默认是发一个包，回一个包</span><br></pre></td></tr></table></figure>\n\n<p>DOS攻击</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping IPaddress -s 65507 -f     // 暴力发包，尽CPU所能向对方发包，而不等待回应</span><br></pre></td></tr></table></figure>\n\n<p>ICIP协议 ——&gt; ping命令</p>\n<p><code>ARP</code>基于信任机制，谁回应就信任谁</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arp -n    // IP地址与MAC地址相对应</span><br></pre></td></tr></table></figure>"},{"title":"计算机操作系统","toc":true,"recommend":1,"date":"2020-02-22T09:35:31.000Z","thumbnail":"https://pic.downk.cc/item/5e7f86bc504f4bcb04ba492e.png","keywords":"操作系统","_content":"\n操作系统相关知识\n\n本文整理计算机操作系统相关知识\n\n\n\n<!-- more --> \n\n1. 进程和线程\n   \n   ![进程](https://pic.downk.cc/item/5e7f86e7504f4bcb04ba6d7e.png)\n   \n2. 线程\n\n   ![线程](https://pic.downk.cc/item/5e7f8719504f4bcb04ba972b.png)\n\n3. 进程的切换\n\n   ![进程状态切换](https://pic.downk.cc/item/5e7f872e504f4bcb04baa950.png)\n\n4. 进程通信方式：\n\n   - 共享内存\n   - 消息队列\n   - 管道通信\n   - 套接字：不同机器之间的进程通信\n\n5. 进程同步方式：\n   - 信号量\n   - 条件变量 \n\n6. 线程通信方式：\n\n   - 信号量\n\n7. 线程同步方式：\n   - 信号量\n   - 临界区 \n\n8. PV操作及信号量的概念都是由荷兰科学家E.W.Dijkstra提出的。信号量S是一个整数，S大于等于零时代表可供并发进程使用的资源实体数，但S小于零时则表示正在等待使用共享资源的进程数。 \n   - **P操作申请资源**：\n     　　（1）S减1；\n       　　（2）若S减1后仍大于等于零，则进程继续执行；\n       　　（3）若S减1后小于零，则该进程被阻塞后进入与该信号相对应的队列中，然后转入进程调度。\n   - **V操作 释放资源**：\n     　　（1）S加1；\n       　　（2）若相加结果大于零，则进程继续执行；\n       　　（3）若相加结果小于等于零，则从该信号的等待队列中唤醒一个等待进程，然后再返回原进程继续执行或转入进程调度。 \n\n https://www.cnblogs.com/youngforever/p/3250270.html \n\n6. 死锁：多个进程因竞争资源而造成的一种僵局（类似交通阻塞）\n   - 解决方法：\n     - 预防死锁\n     - 避免死锁：银行家进餐\n     - 检测及消除\n     - 撤销进程\n7. ","source":"_posts/操作系统.md","raw":"---\ntitle: 计算机操作系统\ntoc: true\nrecommend: 1\ndate: 2020-02-22 17:35:31\nthumbnail: https://pic.downk.cc/item/5e7f86bc504f4bcb04ba492e.png\ntags: \n\t- 线程\n\t- 进程\n\t- 面试\ncategories: 操作系统\nkeywords: 操作系统\n---\n\n操作系统相关知识\n\n本文整理计算机操作系统相关知识\n\n\n\n<!-- more --> \n\n1. 进程和线程\n   \n   ![进程](https://pic.downk.cc/item/5e7f86e7504f4bcb04ba6d7e.png)\n   \n2. 线程\n\n   ![线程](https://pic.downk.cc/item/5e7f8719504f4bcb04ba972b.png)\n\n3. 进程的切换\n\n   ![进程状态切换](https://pic.downk.cc/item/5e7f872e504f4bcb04baa950.png)\n\n4. 进程通信方式：\n\n   - 共享内存\n   - 消息队列\n   - 管道通信\n   - 套接字：不同机器之间的进程通信\n\n5. 进程同步方式：\n   - 信号量\n   - 条件变量 \n\n6. 线程通信方式：\n\n   - 信号量\n\n7. 线程同步方式：\n   - 信号量\n   - 临界区 \n\n8. PV操作及信号量的概念都是由荷兰科学家E.W.Dijkstra提出的。信号量S是一个整数，S大于等于零时代表可供并发进程使用的资源实体数，但S小于零时则表示正在等待使用共享资源的进程数。 \n   - **P操作申请资源**：\n     　　（1）S减1；\n       　　（2）若S减1后仍大于等于零，则进程继续执行；\n       　　（3）若S减1后小于零，则该进程被阻塞后进入与该信号相对应的队列中，然后转入进程调度。\n   - **V操作 释放资源**：\n     　　（1）S加1；\n       　　（2）若相加结果大于零，则进程继续执行；\n       　　（3）若相加结果小于等于零，则从该信号的等待队列中唤醒一个等待进程，然后再返回原进程继续执行或转入进程调度。 \n\n https://www.cnblogs.com/youngforever/p/3250270.html \n\n6. 死锁：多个进程因竞争资源而造成的一种僵局（类似交通阻塞）\n   - 解决方法：\n     - 预防死锁\n     - 避免死锁：银行家进餐\n     - 检测及消除\n     - 撤销进程\n7. ","slug":"操作系统","published":1,"updated":"2020-03-29T04:09:32.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgjz0006mgvzewgpg8fi","content":"<p>操作系统相关知识</p>\n<p>本文整理计算机操作系统相关知识</p>\n<a id=\"more\"></a> \n\n<ol>\n<li><p>进程和线程</p>\n<p><img src=\"https://pic.downk.cc/item/5e7f86e7504f4bcb04ba6d7e.png\" alt=\"进程\"></p>\n</li>\n<li><p>线程</p>\n<p><img src=\"https://pic.downk.cc/item/5e7f8719504f4bcb04ba972b.png\" alt=\"线程\"></p>\n</li>\n<li><p>进程的切换</p>\n<p><img src=\"https://pic.downk.cc/item/5e7f872e504f4bcb04baa950.png\" alt=\"进程状态切换\"></p>\n</li>\n<li><p>进程通信方式：</p>\n<ul>\n<li>共享内存</li>\n<li>消息队列</li>\n<li>管道通信</li>\n<li>套接字：不同机器之间的进程通信</li>\n</ul>\n</li>\n<li><p>进程同步方式：</p>\n<ul>\n<li>信号量</li>\n<li>条件变量 </li>\n</ul>\n</li>\n<li><p>线程通信方式：</p>\n<ul>\n<li>信号量</li>\n</ul>\n</li>\n<li><p>线程同步方式：</p>\n<ul>\n<li>信号量</li>\n<li>临界区 </li>\n</ul>\n</li>\n<li><p>PV操作及信号量的概念都是由荷兰科学家E.W.Dijkstra提出的。信号量S是一个整数，S大于等于零时代表可供并发进程使用的资源实体数，但S小于零时则表示正在等待使用共享资源的进程数。 </p>\n<ul>\n<li><strong>P操作申请资源</strong>：<br>　　（1）S减1；<br>  　　（2）若S减1后仍大于等于零，则进程继续执行；<br>  　　（3）若S减1后小于零，则该进程被阻塞后进入与该信号相对应的队列中，然后转入进程调度。</li>\n<li><strong>V操作 释放资源</strong>：<br>　　（1）S加1；<br>  　　（2）若相加结果大于零，则进程继续执行；<br>  　　（3）若相加结果小于等于零，则从该信号的等待队列中唤醒一个等待进程，然后再返回原进程继续执行或转入进程调度。 </li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/youngforever/p/3250270.html\">https://www.cnblogs.com/youngforever/p/3250270.html</a> </p>\n</li>\n<li><p>死锁：多个进程因竞争资源而造成的一种僵局（类似交通阻塞）</p>\n<ul>\n<li>解决方法：<ul>\n<li>预防死锁</li>\n<li>避免死锁：银行家进餐</li>\n<li>检测及消除</li>\n<li>撤销进程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>操作系统相关知识</p>\n<p>本文整理计算机操作系统相关知识</p>","more":"<ol>\n<li><p>进程和线程</p>\n<p><img src=\"https://pic.downk.cc/item/5e7f86e7504f4bcb04ba6d7e.png\" alt=\"进程\"></p>\n</li>\n<li><p>线程</p>\n<p><img src=\"https://pic.downk.cc/item/5e7f8719504f4bcb04ba972b.png\" alt=\"线程\"></p>\n</li>\n<li><p>进程的切换</p>\n<p><img src=\"https://pic.downk.cc/item/5e7f872e504f4bcb04baa950.png\" alt=\"进程状态切换\"></p>\n</li>\n<li><p>进程通信方式：</p>\n<ul>\n<li>共享内存</li>\n<li>消息队列</li>\n<li>管道通信</li>\n<li>套接字：不同机器之间的进程通信</li>\n</ul>\n</li>\n<li><p>进程同步方式：</p>\n<ul>\n<li>信号量</li>\n<li>条件变量 </li>\n</ul>\n</li>\n<li><p>线程通信方式：</p>\n<ul>\n<li>信号量</li>\n</ul>\n</li>\n<li><p>线程同步方式：</p>\n<ul>\n<li>信号量</li>\n<li>临界区 </li>\n</ul>\n</li>\n<li><p>PV操作及信号量的概念都是由荷兰科学家E.W.Dijkstra提出的。信号量S是一个整数，S大于等于零时代表可供并发进程使用的资源实体数，但S小于零时则表示正在等待使用共享资源的进程数。 </p>\n<ul>\n<li><strong>P操作申请资源</strong>：<br>　　（1）S减1；<br>  　　（2）若S减1后仍大于等于零，则进程继续执行；<br>  　　（3）若S减1后小于零，则该进程被阻塞后进入与该信号相对应的队列中，然后转入进程调度。</li>\n<li><strong>V操作 释放资源</strong>：<br>　　（1）S加1；<br>  　　（2）若相加结果大于零，则进程继续执行；<br>  　　（3）若相加结果小于等于零，则从该信号的等待队列中唤醒一个等待进程，然后再返回原进程继续执行或转入进程调度。 </li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/youngforever/p/3250270.html\">https://www.cnblogs.com/youngforever/p/3250270.html</a> </p>\n</li>\n<li><p>死锁：多个进程因竞争资源而造成的一种僵局（类似交通阻塞）</p>\n<ul>\n<li>解决方法：<ul>\n<li>预防死锁</li>\n<li>避免死锁：银行家进餐</li>\n<li>检测及消除</li>\n<li>撤销进程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li></li>\n</ol>"},{"title":"leetcode62-63不同路径","toc":true,"recommend":1,"keywords":"leetcode","date":"2020-02-11T16:42:31.000Z","thumbnail":"https://pic.downk.cc/item/5e7f81ca504f4bcb04b6bf98.png","_content":"Leetcode62题\n\n<!-- more -->\n\n```C++\n//-----------------------------------------------------------------------------\n// 作    者：adoredee\n// 创建时间： 2020.01.15\n// 描    述：不同路径\n// 版    本：\n// 链    接：https://leetcode-cn.com/problems/unique-paths/\n// Copyright (C) 2019 Shanghai Jiao Tong University\n\n/*\n思路：\n1. 组合优化：向右或向左的步数都是固定的，因此总步数也是固定的，一共需要 m + n - 2 步，\n   向右的步数为 m - 1，向下的步数为 n - 1，因此总共有C(m+n-2,m-1)或者C(m+n-2,n-1)路径\n2. 动态规划:2D DP优化为1D DP\n*/\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// 二维动态规划\nint uniquePaths_DP_2D(int m, int n)\n{\n\t// 异常检测\n\tif (m < 0 || n < 0)\n\t\treturn 0;\n\n\tvector<vector<int>> DP(n, vector<int>(m));\n\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tfor (int j = 0; j < m; ++j)\n\t\t{\n\t\t\tif (i == 0 || j == 0)\n\t\t\t\tDP[i][j] = 1;\n\t\t\telse\n\t\t\t    DP[i][j] = DP[i - 1][j] + DP[i][j - 1];\n\t\t}\n\t}\n\n\treturn DP[n - 1][m - 1];\n}\n\n// 一维动态规划\nint uniquePaths_DP_1D(int m, int n)\n{\n\t// 异常检测\n\tif (m < 0 || n < 0)\n\t\treturn 0;\n\n\tvector<int> DP(m);\n\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tfor (int j = 0; j < m; ++j)\n\t\t{\n\t\t\tif (i == 0 || j == 0)\n\t\t\t\tDP[j] = 1;\n\t\t\telse\n\t\t\t\tDP[j] = DP[j] + DP[j - 1];\n\t\t}\n\t}\n\n\treturn DP[m - 1];\n}\n\nint main()\n{\n\tint m, n;\n\tcin >> m >> n;\n\n\tint nPaths = uniquePaths_DP_1D(m, n);\n\tcout << nPaths << endl;\n\n}\n```","source":"_posts/leetcode62-63不同路径.md","raw":"---\ntitle: leetcode62-63不同路径\ntoc: true\nrecommend: 1\nkeywords: leetcode\ndate: 2020-02-12 00:42:31\nthumbnail: https://pic.downk.cc/item/5e7f81ca504f4bcb04b6bf98.png\ntags: \n\t- LeetCode\n    - 动态规划\n    - Medium\ncategories: \n\t- Algorithm\n---\nLeetcode62题\n\n<!-- more -->\n\n```C++\n//-----------------------------------------------------------------------------\n// 作    者：adoredee\n// 创建时间： 2020.01.15\n// 描    述：不同路径\n// 版    本：\n// 链    接：https://leetcode-cn.com/problems/unique-paths/\n// Copyright (C) 2019 Shanghai Jiao Tong University\n\n/*\n思路：\n1. 组合优化：向右或向左的步数都是固定的，因此总步数也是固定的，一共需要 m + n - 2 步，\n   向右的步数为 m - 1，向下的步数为 n - 1，因此总共有C(m+n-2,m-1)或者C(m+n-2,n-1)路径\n2. 动态规划:2D DP优化为1D DP\n*/\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// 二维动态规划\nint uniquePaths_DP_2D(int m, int n)\n{\n\t// 异常检测\n\tif (m < 0 || n < 0)\n\t\treturn 0;\n\n\tvector<vector<int>> DP(n, vector<int>(m));\n\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tfor (int j = 0; j < m; ++j)\n\t\t{\n\t\t\tif (i == 0 || j == 0)\n\t\t\t\tDP[i][j] = 1;\n\t\t\telse\n\t\t\t    DP[i][j] = DP[i - 1][j] + DP[i][j - 1];\n\t\t}\n\t}\n\n\treturn DP[n - 1][m - 1];\n}\n\n// 一维动态规划\nint uniquePaths_DP_1D(int m, int n)\n{\n\t// 异常检测\n\tif (m < 0 || n < 0)\n\t\treturn 0;\n\n\tvector<int> DP(m);\n\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tfor (int j = 0; j < m; ++j)\n\t\t{\n\t\t\tif (i == 0 || j == 0)\n\t\t\t\tDP[j] = 1;\n\t\t\telse\n\t\t\t\tDP[j] = DP[j] + DP[j - 1];\n\t\t}\n\t}\n\n\treturn DP[m - 1];\n}\n\nint main()\n{\n\tint m, n;\n\tcin >> m >> n;\n\n\tint nPaths = uniquePaths_DP_1D(m, n);\n\tcout << nPaths << endl;\n\n}\n```","slug":"leetcode62-63不同路径","published":1,"updated":"2020-03-28T17:56:04.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgk00008mgvzfb360grf","content":"<p>Leetcode62题</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作    者：adoredee</span></span><br><span class=\"line\"><span class=\"comment\">// 创建时间： 2020.01.15</span></span><br><span class=\"line\"><span class=\"comment\">// 描    述：不同路径</span></span><br><span class=\"line\"><span class=\"comment\">// 版    本：</span></span><br><span class=\"line\"><span class=\"comment\">// 链    接：https://leetcode-cn.com/problems/unique-paths/</span></span><br><span class=\"line\"><span class=\"comment\">// Copyright (C) 2019 Shanghai Jiao Tong University</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">思路：</span></span><br><span class=\"line\"><span class=\"comment\">1. 组合优化：向右或向左的步数都是固定的，因此总步数也是固定的，一共需要 m + n - 2 步，</span></span><br><span class=\"line\"><span class=\"comment\">   向右的步数为 m - 1，向下的步数为 n - 1，因此总共有C(m+n-2,m-1)或者C(m+n-2,n-1)路径</span></span><br><span class=\"line\"><span class=\"comment\">2. 动态规划:2D DP优化为1D DP</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维动态规划</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths_DP_2D</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 异常检测</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &lt; <span class=\"number\">0</span> || n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">DP</span><span class=\"params\">(n, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(m))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tDP[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t    DP[i][j] = DP[i - <span class=\"number\">1</span>][j] + DP[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DP[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一维动态规划</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths_DP_1D</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 异常检测</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &lt; <span class=\"number\">0</span> || n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">DP</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tDP[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tDP[j] = DP[j] + DP[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DP[m - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m, n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nPaths = uniquePaths_DP_1D(m, n);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; nPaths &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Leetcode62题</p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作    者：adoredee</span></span><br><span class=\"line\"><span class=\"comment\">// 创建时间： 2020.01.15</span></span><br><span class=\"line\"><span class=\"comment\">// 描    述：不同路径</span></span><br><span class=\"line\"><span class=\"comment\">// 版    本：</span></span><br><span class=\"line\"><span class=\"comment\">// 链    接：https://leetcode-cn.com/problems/unique-paths/</span></span><br><span class=\"line\"><span class=\"comment\">// Copyright (C) 2019 Shanghai Jiao Tong University</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">思路：</span></span><br><span class=\"line\"><span class=\"comment\">1. 组合优化：向右或向左的步数都是固定的，因此总步数也是固定的，一共需要 m + n - 2 步，</span></span><br><span class=\"line\"><span class=\"comment\">   向右的步数为 m - 1，向下的步数为 n - 1，因此总共有C(m+n-2,m-1)或者C(m+n-2,n-1)路径</span></span><br><span class=\"line\"><span class=\"comment\">2. 动态规划:2D DP优化为1D DP</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维动态规划</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths_DP_2D</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 异常检测</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &lt; <span class=\"number\">0</span> || n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">DP</span><span class=\"params\">(n, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(m))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tDP[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t    DP[i][j] = DP[i - <span class=\"number\">1</span>][j] + DP[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DP[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一维动态规划</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths_DP_1D</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 异常检测</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &lt; <span class=\"number\">0</span> || n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">DP</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || j == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tDP[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tDP[j] = DP[j] + DP[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DP[m - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m, n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nPaths = uniquePaths_DP_1D(m, n);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; nPaths &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"算法：判断IP地址是否属于同一网段","toc":true,"recommend":1,"date":"2020-03-09T04:51:48.000Z","thumbnail":"https://pic.downk.cc/item/5e7f6a3d504f4bcb04a20a95.png","keywords":null,"_content":"\n实用的算法题\n\n<!-- more -->\n\n#### 算法：判断IP地址是否属于同一网段\n\n题目描述：\n\n> ​\t\t  给定两个IP地址和个子网掩码， 如果两个IP地址跟子网掩码进制按位\"与\"之后的结果相同，则认为两个IP地址属于同一个网段。\n> 例`192.168.1.1`与子网掩码`255.255.255.0`二进制按位与之后为`192 168 1.0 `\n> 现给定**1个子网掩码**和**2个IP地址**，判断是否2个IP地址是否是一个网段。\n\n输入描述：\n\n>三个**string类型的字符串**，分别是子网掩码：str_mask、IP地址1：str_IP1、IP地址2：str_IP2，字符串之间用空格分开\n\n输出描述：\n\n>true或者false\n\n例子：\n\n> 输入：255.255.255.0  192.168.1.1  192.168.1.2\n>\n> 输出：true\n\n#### 解题思路：\n\n这道题是一道比较实用的题目，关键点在于字符串的处理上，所以需要将IP地址中`.`去掉，并将`.`分割出来的各个字符类型的数字**先**转化为整型，再存放到数组中，这一部分由函数`str2num`完成，其中用到一个非常重要的库函数[`stoi`]( https://zh.cppreference.com/w/cpp/string/basic_string/stol )完成，该部分的具体代码如下：\n\n```C++\nvector<int> str2num(string str)    // 将IP地址转换为整型，并将其存放到数组中。\n{                                  // 例如str = \"192.168.1.0\"\n\tvector<int> res;       \n\tfor (int i = 0; i < str.size(); ++i)\n\t{\n\t\tstring tmp;\n\t\twhile (i < str.size() && str[i] != '.')    // 遇到'.'就停止查询\n\t\t{\n\t\t\ttmp.push_back(str[i]);\n\t\t\t++i;\n\t\t}                       // 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192\n\t\tif (stoi(tmp) > 255)    // 判断IP地址的合法性，0~255\n\t\t{\n\t\t\tres.clear();\n\t\t\treturn res;\n\t\t}\n\t\telse      // tmp是一个string类型，利用stoi将其转换为一个十进制整型数\n\t\t\tres.push_back(stoi(tmp));\n\t}\n\n\treturn res;    // res = {192, 168, 1, 0}\n}\n```\n\n然后将按照题目的意思，进行“与”运算，完整代码如下：\n\n```C++\n#include <iostream>\n#include <string>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n\nusing namespace std;\n\n// 将字符类型的数字先转化为整型，再存放到数组中\nvector<int> str2num(string str)    // 将IP地址转换为整型，并将其存放到数组中。\n{                                  // 例如str = \"192.168.1.0\"\n\tvector<int> res;       \n\tfor (int i = 0; i < str.size(); ++i)\n\t{\n\t\tstring tmp;\n\t\twhile (i < str.size() && str[i] != '.')    // 遇到'.'就停止查询\n\t\t{\n\t\t\ttmp.push_back(str[i]);\n\t\t\t++i;\n\t\t}                       // 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192\n\t\tif (stoi(tmp) > 255)    // 判断IP地址的合法性，0~255\n\t\t{\n\t\t\tres.clear();\n\t\t\treturn res;\n\t\t}\n\t\telse      // tmp是一个string类型，利用stoi将其转换为一个十进制整型数\n\t\t\tres.push_back(stoi(tmp));\n\t}\n\n\treturn res;    // res = {192, 168, 1, 0}\n}\n\nbool checkNetSegment(string mask_addr, string ip1_addr, string ip2_addr)\n{\n    /*\n    假设\n    string mask = \"255.255.255.0\";\n\tstring ip1 = \"192.168.0.1\";\n\tstring ip2 = \"192.168.0.102\";\n    */\n    // 判断字符串是否为空\n\tif (mask_addr.empty() || ip1_addr.empty() || ip2_addr.empty())\n\t\treturn false;\n\n\tvector<int> mask_vec, ip1_vec, ip2_vec;\n\tmask_vec = str2num(mask_addr);    // mask_vec = {255, 255, 255, 0};\n\tip1_vec = str2num(ip1_addr);\t  // ip1_vec = {192, 168, 0, 1};\n\tip2_vec = str2num(ip2_addr);      // ip2_vec = {192, 168, 0, 102};\n\n    // 为什么需要这一步，因为判断字符串输入是否为空，并不代表在函数str2num\n    // 转换时，就合法，在代码第21行，如果字段>255，说明该字符串输入有问题，被置为零\n    // 所以此时应该要判断转换后的数组是否合法。\n\tif (mask_vec.empty() || ip1_vec.empty() || ip2_vec.empty())\n\t\treturn false;\n\n\tbool flag = true;\n\tfor (int i = 0; flag && i < mask_vec.size(); ++i)\n\t{\n\t\tint cur_mask = mask_vec[i];\n\t\tif (cur_mask == 255)     // 子网掩码字段为255时，只需要判断ip1和ip2的各个字段是否相等即可\n\t\t{\n\t\t\tif (ip1_vec[i] != ip2_vec[i])\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ip1_vec[i] & cur_mask != ip2_vec[i] & cur_mask)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (flag)\n\t\treturn true;\n\telse\n\t\treturn false;\n\n}\n\nint main()\n{\n\tstring mask = \"255.255.255.0\";\n\tstring ip1 = \"192.168.0.1\";\n\tstring ip2 = \"192.168.0.102\";\n\t\n\tbool flag = checkNetSegment(mask, ip1, ip2);\n\tcout << flag << endl;\n\n\treturn 0;\n}\n```\n\n\n\n","source":"_posts/算法 - 判断IP地址是否属于同一网段.md","raw":"---\ntitle: 算法：判断IP地址是否属于同一网段\ntoc: true\nrecommend: 1\ndate: 2020-03-09 12:51:48\nthumbnail: https://pic.downk.cc/item/5e7f6a3d504f4bcb04a20a95.png\ntags: \n\t- 字符串\ncategories:\n\t- Algorithm\nkeywords:\n---\n\n实用的算法题\n\n<!-- more -->\n\n#### 算法：判断IP地址是否属于同一网段\n\n题目描述：\n\n> ​\t\t  给定两个IP地址和个子网掩码， 如果两个IP地址跟子网掩码进制按位\"与\"之后的结果相同，则认为两个IP地址属于同一个网段。\n> 例`192.168.1.1`与子网掩码`255.255.255.0`二进制按位与之后为`192 168 1.0 `\n> 现给定**1个子网掩码**和**2个IP地址**，判断是否2个IP地址是否是一个网段。\n\n输入描述：\n\n>三个**string类型的字符串**，分别是子网掩码：str_mask、IP地址1：str_IP1、IP地址2：str_IP2，字符串之间用空格分开\n\n输出描述：\n\n>true或者false\n\n例子：\n\n> 输入：255.255.255.0  192.168.1.1  192.168.1.2\n>\n> 输出：true\n\n#### 解题思路：\n\n这道题是一道比较实用的题目，关键点在于字符串的处理上，所以需要将IP地址中`.`去掉，并将`.`分割出来的各个字符类型的数字**先**转化为整型，再存放到数组中，这一部分由函数`str2num`完成，其中用到一个非常重要的库函数[`stoi`]( https://zh.cppreference.com/w/cpp/string/basic_string/stol )完成，该部分的具体代码如下：\n\n```C++\nvector<int> str2num(string str)    // 将IP地址转换为整型，并将其存放到数组中。\n{                                  // 例如str = \"192.168.1.0\"\n\tvector<int> res;       \n\tfor (int i = 0; i < str.size(); ++i)\n\t{\n\t\tstring tmp;\n\t\twhile (i < str.size() && str[i] != '.')    // 遇到'.'就停止查询\n\t\t{\n\t\t\ttmp.push_back(str[i]);\n\t\t\t++i;\n\t\t}                       // 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192\n\t\tif (stoi(tmp) > 255)    // 判断IP地址的合法性，0~255\n\t\t{\n\t\t\tres.clear();\n\t\t\treturn res;\n\t\t}\n\t\telse      // tmp是一个string类型，利用stoi将其转换为一个十进制整型数\n\t\t\tres.push_back(stoi(tmp));\n\t}\n\n\treturn res;    // res = {192, 168, 1, 0}\n}\n```\n\n然后将按照题目的意思，进行“与”运算，完整代码如下：\n\n```C++\n#include <iostream>\n#include <string>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n\nusing namespace std;\n\n// 将字符类型的数字先转化为整型，再存放到数组中\nvector<int> str2num(string str)    // 将IP地址转换为整型，并将其存放到数组中。\n{                                  // 例如str = \"192.168.1.0\"\n\tvector<int> res;       \n\tfor (int i = 0; i < str.size(); ++i)\n\t{\n\t\tstring tmp;\n\t\twhile (i < str.size() && str[i] != '.')    // 遇到'.'就停止查询\n\t\t{\n\t\t\ttmp.push_back(str[i]);\n\t\t\t++i;\n\t\t}                       // 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192\n\t\tif (stoi(tmp) > 255)    // 判断IP地址的合法性，0~255\n\t\t{\n\t\t\tres.clear();\n\t\t\treturn res;\n\t\t}\n\t\telse      // tmp是一个string类型，利用stoi将其转换为一个十进制整型数\n\t\t\tres.push_back(stoi(tmp));\n\t}\n\n\treturn res;    // res = {192, 168, 1, 0}\n}\n\nbool checkNetSegment(string mask_addr, string ip1_addr, string ip2_addr)\n{\n    /*\n    假设\n    string mask = \"255.255.255.0\";\n\tstring ip1 = \"192.168.0.1\";\n\tstring ip2 = \"192.168.0.102\";\n    */\n    // 判断字符串是否为空\n\tif (mask_addr.empty() || ip1_addr.empty() || ip2_addr.empty())\n\t\treturn false;\n\n\tvector<int> mask_vec, ip1_vec, ip2_vec;\n\tmask_vec = str2num(mask_addr);    // mask_vec = {255, 255, 255, 0};\n\tip1_vec = str2num(ip1_addr);\t  // ip1_vec = {192, 168, 0, 1};\n\tip2_vec = str2num(ip2_addr);      // ip2_vec = {192, 168, 0, 102};\n\n    // 为什么需要这一步，因为判断字符串输入是否为空，并不代表在函数str2num\n    // 转换时，就合法，在代码第21行，如果字段>255，说明该字符串输入有问题，被置为零\n    // 所以此时应该要判断转换后的数组是否合法。\n\tif (mask_vec.empty() || ip1_vec.empty() || ip2_vec.empty())\n\t\treturn false;\n\n\tbool flag = true;\n\tfor (int i = 0; flag && i < mask_vec.size(); ++i)\n\t{\n\t\tint cur_mask = mask_vec[i];\n\t\tif (cur_mask == 255)     // 子网掩码字段为255时，只需要判断ip1和ip2的各个字段是否相等即可\n\t\t{\n\t\t\tif (ip1_vec[i] != ip2_vec[i])\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ip1_vec[i] & cur_mask != ip2_vec[i] & cur_mask)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (flag)\n\t\treturn true;\n\telse\n\t\treturn false;\n\n}\n\nint main()\n{\n\tstring mask = \"255.255.255.0\";\n\tstring ip1 = \"192.168.0.1\";\n\tstring ip2 = \"192.168.0.102\";\n\t\n\tbool flag = checkNetSegment(mask, ip1, ip2);\n\tcout << flag << endl;\n\n\treturn 0;\n}\n```\n\n\n\n","slug":"算法 - 判断IP地址是否属于同一网段","published":1,"updated":"2020-03-28T15:16:26.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgk2000amgvzcsa1eutj","content":"<p>实用的算法题</p>\n<a id=\"more\"></a>\n\n<h4 id=\"算法：判断IP地址是否属于同一网段\"><a href=\"#算法：判断IP地址是否属于同一网段\" class=\"headerlink\" title=\"算法：判断IP地址是否属于同一网段\"></a>算法：判断IP地址是否属于同一网段</h4><p>题目描述：</p>\n<blockquote>\n<p>​          给定两个IP地址和个子网掩码， 如果两个IP地址跟子网掩码进制按位”与”之后的结果相同，则认为两个IP地址属于同一个网段。<br>例<code>192.168.1.1</code>与子网掩码<code>255.255.255.0</code>二进制按位与之后为<code>192 168 1.0</code><br>现给定<strong>1个子网掩码</strong>和<strong>2个IP地址</strong>，判断是否2个IP地址是否是一个网段。</p>\n</blockquote>\n<p>输入描述：</p>\n<blockquote>\n<p>三个<strong>string类型的字符串</strong>，分别是子网掩码：str_mask、IP地址1：str_IP1、IP地址2：str_IP2，字符串之间用空格分开</p>\n</blockquote>\n<p>输出描述：</p>\n<blockquote>\n<p>true或者false</p>\n</blockquote>\n<p>例子：</p>\n<blockquote>\n<p>输入：255.255.255.0  192.168.1.1  192.168.1.2</p>\n<p>输出：true</p>\n</blockquote>\n<h4 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h4><p>这道题是一道比较实用的题目，关键点在于字符串的处理上，所以需要将IP地址中<code>.</code>去掉，并将<code>.</code>分割出来的各个字符类型的数字<strong>先</strong>转化为整型，再存放到数组中，这一部分由函数<code>str2num</code>完成，其中用到一个非常重要的库函数<a href=\"https://zh.cppreference.com/w/cpp/string/basic_string/stol\"><code>stoi</code></a>完成，该部分的具体代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">str2num</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span>    <span class=\"comment\">// 将IP地址转换为整型，并将其存放到数组中。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                                  <span class=\"comment\">// 例如str = \"192.168.1.0\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;       </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> tmp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; str.<span class=\"built_in\">size</span>() &amp;&amp; str[i] != <span class=\"string\">'.'</span>)    <span class=\"comment\">// 遇到'.'就停止查询</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp.push_back(str[i]);</span><br><span class=\"line\">\t\t\t++i;</span><br><span class=\"line\">\t\t&#125;                       <span class=\"comment\">// 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (stoi(tmp) &gt; <span class=\"number\">255</span>)    <span class=\"comment\">// 判断IP地址的合法性，0~255</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>      <span class=\"comment\">// tmp是一个string类型，利用stoi将其转换为一个十进制整型数</span></span><br><span class=\"line\">\t\t\tres.push_back(stoi(tmp));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;    <span class=\"comment\">// res = &#123;192, 168, 1, 0&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将按照题目的意思，进行“与”运算，完整代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符类型的数字先转化为整型，再存放到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">str2num</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span>    <span class=\"comment\">// 将IP地址转换为整型，并将其存放到数组中。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                                  <span class=\"comment\">// 例如str = \"192.168.1.0\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;       </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> tmp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; str.<span class=\"built_in\">size</span>() &amp;&amp; str[i] != <span class=\"string\">'.'</span>)    <span class=\"comment\">// 遇到'.'就停止查询</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp.push_back(str[i]);</span><br><span class=\"line\">\t\t\t++i;</span><br><span class=\"line\">\t\t&#125;                       <span class=\"comment\">// 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (stoi(tmp) &gt; <span class=\"number\">255</span>)    <span class=\"comment\">// 判断IP地址的合法性，0~255</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>      <span class=\"comment\">// tmp是一个string类型，利用stoi将其转换为一个十进制整型数</span></span><br><span class=\"line\">\t\t\tres.push_back(stoi(tmp));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;    <span class=\"comment\">// res = &#123;192, 168, 1, 0&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">checkNetSegment</span><span class=\"params\">(<span class=\"built_in\">string</span> mask_addr, <span class=\"built_in\">string</span> ip1_addr, <span class=\"built_in\">string</span> ip2_addr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    假设</span></span><br><span class=\"line\"><span class=\"comment\">    string mask = \"255.255.255.0\";</span></span><br><span class=\"line\"><span class=\"comment\">\tstring ip1 = \"192.168.0.1\";</span></span><br><span class=\"line\"><span class=\"comment\">\tstring ip2 = \"192.168.0.102\";</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断字符串是否为空</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mask_addr.empty() || ip1_addr.empty() || ip2_addr.empty())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; mask_vec, ip1_vec, ip2_vec;</span><br><span class=\"line\">\tmask_vec = str2num(mask_addr);    <span class=\"comment\">// mask_vec = &#123;255, 255, 255, 0&#125;;</span></span><br><span class=\"line\">\tip1_vec = str2num(ip1_addr);\t  <span class=\"comment\">// ip1_vec = &#123;192, 168, 0, 1&#125;;</span></span><br><span class=\"line\">\tip2_vec = str2num(ip2_addr);      <span class=\"comment\">// ip2_vec = &#123;192, 168, 0, 102&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为什么需要这一步，因为判断字符串输入是否为空，并不代表在函数str2num</span></span><br><span class=\"line\">    <span class=\"comment\">// 转换时，就合法，在代码第21行，如果字段&gt;255，说明该字符串输入有问题，被置为零</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以此时应该要判断转换后的数组是否合法。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mask_vec.empty() || ip1_vec.empty() || ip2_vec.empty())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; flag &amp;&amp; i &lt; mask_vec.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cur_mask = mask_vec[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cur_mask == <span class=\"number\">255</span>)     <span class=\"comment\">// 子网掩码字段为255时，只需要判断ip1和ip2的各个字段是否相等即可</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ip1_vec[i] != ip2_vec[i])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ip1_vec[i] &amp; cur_mask != ip2_vec[i] &amp; cur_mask)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> mask = <span class=\"string\">\"255.255.255.0\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> ip1 = <span class=\"string\">\"192.168.0.1\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> ip2 = <span class=\"string\">\"192.168.0.102\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = checkNetSegment(mask, ip1, ip2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; flag &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>实用的算法题</p>","more":"<h4 id=\"算法：判断IP地址是否属于同一网段\"><a href=\"#算法：判断IP地址是否属于同一网段\" class=\"headerlink\" title=\"算法：判断IP地址是否属于同一网段\"></a>算法：判断IP地址是否属于同一网段</h4><p>题目描述：</p>\n<blockquote>\n<p>​          给定两个IP地址和个子网掩码， 如果两个IP地址跟子网掩码进制按位”与”之后的结果相同，则认为两个IP地址属于同一个网段。<br>例<code>192.168.1.1</code>与子网掩码<code>255.255.255.0</code>二进制按位与之后为<code>192 168 1.0</code><br>现给定<strong>1个子网掩码</strong>和<strong>2个IP地址</strong>，判断是否2个IP地址是否是一个网段。</p>\n</blockquote>\n<p>输入描述：</p>\n<blockquote>\n<p>三个<strong>string类型的字符串</strong>，分别是子网掩码：str_mask、IP地址1：str_IP1、IP地址2：str_IP2，字符串之间用空格分开</p>\n</blockquote>\n<p>输出描述：</p>\n<blockquote>\n<p>true或者false</p>\n</blockquote>\n<p>例子：</p>\n<blockquote>\n<p>输入：255.255.255.0  192.168.1.1  192.168.1.2</p>\n<p>输出：true</p>\n</blockquote>\n<h4 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h4><p>这道题是一道比较实用的题目，关键点在于字符串的处理上，所以需要将IP地址中<code>.</code>去掉，并将<code>.</code>分割出来的各个字符类型的数字<strong>先</strong>转化为整型，再存放到数组中，这一部分由函数<code>str2num</code>完成，其中用到一个非常重要的库函数<a href=\"https://zh.cppreference.com/w/cpp/string/basic_string/stol\"><code>stoi</code></a>完成，该部分的具体代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">str2num</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span>    <span class=\"comment\">// 将IP地址转换为整型，并将其存放到数组中。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                                  <span class=\"comment\">// 例如str = \"192.168.1.0\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;       </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> tmp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; str.<span class=\"built_in\">size</span>() &amp;&amp; str[i] != <span class=\"string\">'.'</span>)    <span class=\"comment\">// 遇到'.'就停止查询</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp.push_back(str[i]);</span><br><span class=\"line\">\t\t\t++i;</span><br><span class=\"line\">\t\t&#125;                       <span class=\"comment\">// 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (stoi(tmp) &gt; <span class=\"number\">255</span>)    <span class=\"comment\">// 判断IP地址的合法性，0~255</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>      <span class=\"comment\">// tmp是一个string类型，利用stoi将其转换为一个十进制整型数</span></span><br><span class=\"line\">\t\t\tres.push_back(stoi(tmp));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;    <span class=\"comment\">// res = &#123;192, 168, 1, 0&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将按照题目的意思，进行“与”运算，完整代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符类型的数字先转化为整型，再存放到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">str2num</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span>    <span class=\"comment\">// 将IP地址转换为整型，并将其存放到数组中。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                                  <span class=\"comment\">// 例如str = \"192.168.1.0\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;       </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> tmp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; str.<span class=\"built_in\">size</span>() &amp;&amp; str[i] != <span class=\"string\">'.'</span>)    <span class=\"comment\">// 遇到'.'就停止查询</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp.push_back(str[i]);</span><br><span class=\"line\">\t\t\t++i;</span><br><span class=\"line\">\t\t&#125;                       <span class=\"comment\">// 在第一次查询中，tmp = \"192\"，stoi(tmp) = 192</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (stoi(tmp) &gt; <span class=\"number\">255</span>)    <span class=\"comment\">// 判断IP地址的合法性，0~255</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>      <span class=\"comment\">// tmp是一个string类型，利用stoi将其转换为一个十进制整型数</span></span><br><span class=\"line\">\t\t\tres.push_back(stoi(tmp));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;    <span class=\"comment\">// res = &#123;192, 168, 1, 0&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">checkNetSegment</span><span class=\"params\">(<span class=\"built_in\">string</span> mask_addr, <span class=\"built_in\">string</span> ip1_addr, <span class=\"built_in\">string</span> ip2_addr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    假设</span></span><br><span class=\"line\"><span class=\"comment\">    string mask = \"255.255.255.0\";</span></span><br><span class=\"line\"><span class=\"comment\">\tstring ip1 = \"192.168.0.1\";</span></span><br><span class=\"line\"><span class=\"comment\">\tstring ip2 = \"192.168.0.102\";</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断字符串是否为空</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mask_addr.empty() || ip1_addr.empty() || ip2_addr.empty())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; mask_vec, ip1_vec, ip2_vec;</span><br><span class=\"line\">\tmask_vec = str2num(mask_addr);    <span class=\"comment\">// mask_vec = &#123;255, 255, 255, 0&#125;;</span></span><br><span class=\"line\">\tip1_vec = str2num(ip1_addr);\t  <span class=\"comment\">// ip1_vec = &#123;192, 168, 0, 1&#125;;</span></span><br><span class=\"line\">\tip2_vec = str2num(ip2_addr);      <span class=\"comment\">// ip2_vec = &#123;192, 168, 0, 102&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为什么需要这一步，因为判断字符串输入是否为空，并不代表在函数str2num</span></span><br><span class=\"line\">    <span class=\"comment\">// 转换时，就合法，在代码第21行，如果字段&gt;255，说明该字符串输入有问题，被置为零</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以此时应该要判断转换后的数组是否合法。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mask_vec.empty() || ip1_vec.empty() || ip2_vec.empty())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; flag &amp;&amp; i &lt; mask_vec.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cur_mask = mask_vec[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cur_mask == <span class=\"number\">255</span>)     <span class=\"comment\">// 子网掩码字段为255时，只需要判断ip1和ip2的各个字段是否相等即可</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ip1_vec[i] != ip2_vec[i])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ip1_vec[i] &amp; cur_mask != ip2_vec[i] &amp; cur_mask)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> mask = <span class=\"string\">\"255.255.255.0\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> ip1 = <span class=\"string\">\"192.168.0.1\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> ip2 = <span class=\"string\">\"192.168.0.102\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = checkNetSegment(mask, ip1, ip2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; flag &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"深度学习在几何空间中的应用（一）：三维可视化","thumbnail":"https://pic.downk.cc/item/5e7f739c504f4bcb04aabc0c.png","data":"2018-12-13T16:00:00.000Z","author":"kangzhiheng","toc":true,"_content":"点云可视化的探索。\n<!-- more -->\n\n### 前言\n> 目前点云方面的研究是一个热门方向，点云分类、零件分割、语义分割等研究正处于热门研究时期；\n深度学习大热以来，渐渐地把二维世界里的框架，或移植，或改进，运用到三维世界中来，那么如何将点云可视化呢？This is a question.\n下面让我们一起来探索。\n\n### 可视化\n#### 点云数据准备\n如无特别说明，本系列使用的数据是[ModelNet40](https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip)，ModelNet40包含了来自40类的12311个三维形状,其中9843个文件用来训练，2468个文件用来测试。\n\n#### 系统环境\n- **操作系统**：ubuntu16.04或者windows10，建议在Ubuntu下开发\n- **编程软件**：PyCharm\n- **语言环境**：Python3.6\n\n#### python包依赖\n使用python3.6读取点云文件，需要提取安装`numpy`、`h5py`、`mayavi`、`matplotlib`，其中安装mayavi的方法如下(前提：python3.x和64位系统)：\n``` python\npip install mayavi    # mayavi包\npip install PyQt5     # GUI\n```\n故所需要的包有：\n```python\nimport os\nimport sys\nimport numpy as np\nimport h5py\nfrom mayavi import mlab\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n```\n\n#### 下载数据集[ModelNet40](https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip)\n- **在线方式**（ubuntu16.04系统下）\n``` python\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))    # 当前py文件所在的路径\nprint(BASE_DIR)                                          # 显示py文件当前路径\nsys.path.append(BASE_DIR)                                # 加入到系路径里\n\n# download modelnet40 dataset\n# 将数据集下载到当前py文件所处路径里的data文件夹里,假设当前py文件在\n# BASE_DIR=E:/PointCloud路径里，那么数据集将下载到E:/PointCloud\nDATA_DIR = os.path.join(BASE_DIR, 'data')                \nif not os.path.exists(DATA_DIR):                         # 如果不存在此文件夹\n    os.mkdir(DATA_DIR)                                   # 新建data文件夹\n\n# 数据集应在BASE_DIR/data/modelnet40_ply_hdf5_2048里，如果不存在\n# BASE_DIR/data/modelnet40_ply_hdf5_2048文件夹，则下载数据集\n# modelnet40_ply_hdf5_2048.zip并解压，且输出.zip文件\nif not os.path.exists(os.path.join(DATA_DIR, 'modelnet40_ply_hdf5_2048')):  \n    # 数据集文件网址\n    www = 'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'\n    # 返回path最后的文件名，即zipfile=modelnet40_ply_hdf5_2048.zip\n    zipfile = os.path.basename(www)   \n    os.system('wget %s; unzip %s' % (www, zipfile))    # wget:下载，unzp： 解压\n    # zipfile=modelnet40_ply_hdf5_2048.zip\n    # zipfile[:-4]=modelnet40_ply_hdf5_2048\n    # 把解压后的文件夹modelnet40_ply_hdf5_2048移到BASE_DIR/data/路径下\n    os.system('mv %s %s' % (zipfile[:-4], DATA_DIR))\n    os.system('rm %s' % (zipfile))    # 删除压缩包  \n```\n\n- **离线方式**（ubuntu16.04系统或windows10）\n如果没有合适的ubuntu环境，那么我们首先通过[网站](https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip)下载数据集，然后利用windows上的解压工具解压到对应的文件夹，文件夹可以对应到**在线方式**里的路径，本文采用的这种方法，简单粗暴，但是不推荐，不利于代码的自动化。\n\n\n运行代码或者解压文件夹，将在BASE_DIR/data/modelnet40_ply_hdf5_2048/文件夹里看到一下内容，注意BASE_DIR指的是当前py文件的路径。\n![ModelNet40.png](https://www.z4a.net/images/2018/12/29/ModelNet40.png)\n\n#### 读取点云\n由上图可以看到，点云文件由`.h5`文件格式来存储，有关h5格式的介绍请移步[这里](https://segmentfault.com/a/1190000016670881)，下面我们就来读取点云文件，代码如下（以读取ply_data_train1.h5为例）：\n\n```python\n\"\"\"\n    读取H5文件里的键值\n\"\"\"\nimport h5py\n# ply_data_train1.h5路径\nH5_FILE = './data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'\n\n\ndef read_h5file_keys(h5_filename):   # 定义python函数，函数体前后空两行\n    \"\"\"\n    读取H5文件里的键值\n    :param h5_filename:\n    :return:\n    \"\"\"\n    with h5py.File(h5_filename) as f:\n        return [item for item in f.keys()]\n\n\nkeys = read_h5file_keys(H5_FILE)\nprint(\"key is : %s\" % keys)\n```\n运行，得到以下结果：\n```bash\nkey is : ['data', 'faceId', 'label', 'normal']\n```\n其中\n`'data'`对应`点云xyz坐标`\n`'label'`对应`标签`\n`'normal'`对应`法向量`\n`'faceId'`未知\n我们感兴趣的是键值`data`和`label`\n\n紧接着，读取点云数据，代码如下：\n```python\nwith h5py.File(H5_FILE) as f:\n    data = f['data'][:]\n    label = f['label'][:]\n```\n由于数据集较大，所以是否读取成功，可以利用PyCharm里的`Scientific Mode`来查看，开启姿势位`View`——>`Scientific Mode`，可追踪变量变化，如下图\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/>\n</div>\n\n<div align =center><img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/></div>\n\n\n运行程序后，就会看到这样的情形，\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/show.png\"/>\n</div>\n\n点击变量`data`后的**_View as Array_**，就可以在右边的SciView里看见数据，**ply_data_train1.h5**里共有 **2048**个物体的点云数据，所以范围在data[0]到data[2047]之间，每一个物体共有 **2048** 个点，每个点的坐标位(x, y, z).\n\n 可以打印出`data`和`label`的形状：\n```python\nprint(data.shape)    # (2048, 2048, 3)\nprint(label.shpae)   # (2048, 1)\n```\n#### 显示点云\n- **获取坐标**\n```python\nimport numpy as np\nfrom mayavi import mlab\n\nx = []\ny = []\nz = []\nnum_obj = 1079             # 比如显示第756 + 1个物体\nmax_num_point = 2048      # 最大渲染点的个数，最大是2048个点\n\n# 依次获取x、y、z的坐标 —— 1D array\nx = data[num_obj, 0:max_num_point, 0]   # shape为(max_num_point, 1)\ny = data[num_obj, 0:max_num_point, 1]   # shape为(max_num_point, 1)\nz = data[num_obj, 0:max_num_point, 2]   # shape为(max_num_point, 1)\n```\n- **点云可视化方法一 —— mayavi**\n```python\n# ——————————————————————————————————————————————————————————————\n#                        mayavi可视化\n# ——————————————————————————————————————————————————————————————\n# s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点\n# 提供关联的标量值，或者返回标量值的函数f(x，y，z)\n# 此标量值可用于调整点的颜色和大小。\ns = np.sqrt(x ** 2 + y ** 2 + z ** 2 )\n# 设置背景为白色，画布大小为300 * 200\nfig = mlab.figure(bgcolor=(1, 1, 1), size=(450, 300))\n# https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d\nfigure = mlab.points3d(x, y, z, s, mode=\"point\", colormap='spectral', scale_factor=1)\nmlab.show()    # 显示3D点云图\n```\n**Notice**: 使用这种方法，电脑较卡顿。\n在这里，使用了mlab.points3d()函数来进行可视化，具体参数[这里](https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d)，需要注意的是，坐标(x, y, z)各为1D array，需要与mayavi里的surf等方法进行区别，在使用时，注意追踪变量变化，可视化结果\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_mayavi.png\"/>\n</div>\n\n- **点云可视化方法一 —— matplotlib**\n```python\n# ——————————————————————————————————————————————————————————————\n#                matplotlib——Axes3D可视化\n# ——————————————————————————————————————————————————————————————\n# 使用Axes3D()创建3D图像对象\nfig = plt.figure()\nax = Axes3D(fig)\n# 调用散点图绘制方法绘图并显示出来\nax.scatter(x, y, z)\nplt.show()\n```\n可视化结果\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_matplotlib.md.png\" width=\"450\" height=\"350\"/>\n</div>\n\n```python\n# shape_name.txt文件路径\nSHAPE_NAME = '../data/modelnet40_ply_hdf5_2048/shape_names.txt'\n# 显示对应物体的名称\n# 读取SHAPE_NAME文件，并存储为numpy数组形式\nshape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)\n# 查询该物体名称\nshape_name = shape_name_list[label[num_obj]]\n\nprint('label is: %s' % shape_name)\n```\n\n#### 总结\n- mayavi和TVTK配合可以自定义点云颜色，可支持自定义点云颜色，官方范例请点击[这里](https://docs.enthought.com/mayavi/mayavi/auto/example_custom_colormap.html#example-custom-colormap)，mayavi运行时较卡顿，自定义程度较高，可视化语义分割和场景分割时很有用；\n- matplotlib库里的Axes3D对象可视化点云方法较为简单，自定义程度较低，在论文中要想显示精美的可视化效果图，不太建议用matplotlib库；\n\n#### 后续工作\n除了用这两个库，还有一些python工具可以进行可视化，如\n- python包：[pyntcloud](https://pyntcloud.readthedocs.io/en/latest/)、[pptk](https://heremaps.github.io/pptk/tutorials/viewer/tanks_and_temples.html)、[open3d](http://www.open3d.org/docs/tutorial/Basic/pointcloud.html#)、[vispy](https://docs.enthought.com/mayavi/mayavi/)等\n- GUI工具：[meshlab](http://www.meshlab.net/)、[CloudCompare](https://www.danielgm.net/cc/)、Point Cloud Library库里的cloudviewer函数等\n\n我的研究发现时利用深度学习对点云数据集进行分类、场景分割、语义分割等，可视化工具是必不缺少的一环，下一步准备学习meshlab，思路是把点云及相关颜色信息保存成.obj文件，然后在meshlab里显示，具体工作请关注我的博客，如果志同道合者，十分欢迎与联系，这是我的[邮箱](kangzhiheng@sjru.edu.cn)。\n\n本文的完整代码如下（已在win10环境下，在PyCharm里运行成功，数据集是提前下好的，建议在Ubuntu系统尝试，体会linux的命令）：\n\n``` python\n#! python3\n# -*- coding:utf-8 -*-\n\n\"\"\"\n    Author     : adoredee\n    Date       : November 28th 2018\n    BlogName   : www.kangzhiheng.top\n    Contact    : kangzhiheng@sjtu.edu.cn\n    点云显示\n\"\"\"\n\nimport os\nimport sys\nimport numpy as np\nimport h5py\n\nfrom mayavi import mlab\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))    # 当前py文件所在的路径\nsys.path.append(BASE_DIR)                                # 显示py文件当前路径\nprint(\"the path is: %s\" % BASE_DIR)                      # 加入到系路径里\n\n# ply_data_train1.h5路径\nH5_FILE = '../data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'\n# shape_names.txt文件路径\nSHAPE_NAME = '../data/modelnet40_ply_hdf5_2048/shape_names.txt'\n\n\ndef read_h5file_keys(h5_filename):\n    \"\"\"\n    读取H5文件里的键值\n    :param h5_filename:\n    :return:\n    \"\"\"\n    with h5py.File(h5_filename) as f:\n        return [item for item in f.keys()]\n\n\nkeys = read_h5file_keys(H5_FILE)\nprint(\"key is : %s\" % keys)    # ['data', 'faceId', 'label', 'normal']\n\nwith h5py.File(H5_FILE) as f:\n    data = f['data'][:]    # 读取主键'data'的值\n    label = f['label'][:]\n\nprint(data.shape)    # 2048组，每组2048个点，每个的值位(x,y,z)\nprint(label.shape)\n\nx = []\ny = []\nz = []\n\nnum_obj = 1079              # 比如显示第num_obj + 1个物体\nmax_num_point = 2048      # 最大渲染点的个数，最大是2048个点\n\nx = data[num_obj, 0:max_num_point, 0] * 10  # shape为(max_num_point, 1)\ny = data[num_obj, 0:max_num_point, 1] * 10  # shape为(max_num_point, 1)\nz = data[num_obj, 0:max_num_point, 2] * 10  # shape为(max_num_point, 1)\n\n\n# ——————————————————————————————————————————————————————————————\n#                        mayavi可视化\n# ——————————————————————————————————————————————————————————————\n# s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点\n# 提供关联的标量值，或者返回标量值的函数f(x，y，z)\n# 此标量值可用于调整点的颜色和大小。\ns = np.sqrt(x ** 2 + y ** 2 + z ** 2)\n\n# visualization\nfig = mlab.figure(bgcolor=(1, 1, 1), size=(450, 300))\nfigure = mlab.points3d(x, y, z, s, mode=\"point\", colormap='spectral', scale_factor=0.25)\n\nmlab.show()\n\n'''\n# ——————————————————————————————————————————————————————————————\n#                         Axes3D可视化\n# ——————————————————————————————————————————————————————————————\n# 开始绘图\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(x, y, z)\n\nplt.show()\n'''\n# 显示对应物体的名称\n# 读取SHAPE_NAME文件，并存储为numpy数组形式\nshape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)\n# 查询该物体名称\nshape_name = shape_name_list[label[num_obj]]\n\nprint('label is: %s' % shape_name)\n\n```","source":"_posts/点云可视化.md","raw":"---\ntitle: 深度学习在几何空间中的应用（一）：三维可视化\nthumbnail: https://pic.downk.cc/item/5e7f739c504f4bcb04aabc0c.png\ndata: 2018-12-14 00:00:00\nauthor: kangzhiheng\ncategories: Point Cloud\ntoc: true\ntags:\n  - python\n  - tensorflow\n  - CNN\n  - 3D\n---\n点云可视化的探索。\n<!-- more -->\n\n### 前言\n> 目前点云方面的研究是一个热门方向，点云分类、零件分割、语义分割等研究正处于热门研究时期；\n深度学习大热以来，渐渐地把二维世界里的框架，或移植，或改进，运用到三维世界中来，那么如何将点云可视化呢？This is a question.\n下面让我们一起来探索。\n\n### 可视化\n#### 点云数据准备\n如无特别说明，本系列使用的数据是[ModelNet40](https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip)，ModelNet40包含了来自40类的12311个三维形状,其中9843个文件用来训练，2468个文件用来测试。\n\n#### 系统环境\n- **操作系统**：ubuntu16.04或者windows10，建议在Ubuntu下开发\n- **编程软件**：PyCharm\n- **语言环境**：Python3.6\n\n#### python包依赖\n使用python3.6读取点云文件，需要提取安装`numpy`、`h5py`、`mayavi`、`matplotlib`，其中安装mayavi的方法如下(前提：python3.x和64位系统)：\n``` python\npip install mayavi    # mayavi包\npip install PyQt5     # GUI\n```\n故所需要的包有：\n```python\nimport os\nimport sys\nimport numpy as np\nimport h5py\nfrom mayavi import mlab\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n```\n\n#### 下载数据集[ModelNet40](https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip)\n- **在线方式**（ubuntu16.04系统下）\n``` python\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))    # 当前py文件所在的路径\nprint(BASE_DIR)                                          # 显示py文件当前路径\nsys.path.append(BASE_DIR)                                # 加入到系路径里\n\n# download modelnet40 dataset\n# 将数据集下载到当前py文件所处路径里的data文件夹里,假设当前py文件在\n# BASE_DIR=E:/PointCloud路径里，那么数据集将下载到E:/PointCloud\nDATA_DIR = os.path.join(BASE_DIR, 'data')                \nif not os.path.exists(DATA_DIR):                         # 如果不存在此文件夹\n    os.mkdir(DATA_DIR)                                   # 新建data文件夹\n\n# 数据集应在BASE_DIR/data/modelnet40_ply_hdf5_2048里，如果不存在\n# BASE_DIR/data/modelnet40_ply_hdf5_2048文件夹，则下载数据集\n# modelnet40_ply_hdf5_2048.zip并解压，且输出.zip文件\nif not os.path.exists(os.path.join(DATA_DIR, 'modelnet40_ply_hdf5_2048')):  \n    # 数据集文件网址\n    www = 'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'\n    # 返回path最后的文件名，即zipfile=modelnet40_ply_hdf5_2048.zip\n    zipfile = os.path.basename(www)   \n    os.system('wget %s; unzip %s' % (www, zipfile))    # wget:下载，unzp： 解压\n    # zipfile=modelnet40_ply_hdf5_2048.zip\n    # zipfile[:-4]=modelnet40_ply_hdf5_2048\n    # 把解压后的文件夹modelnet40_ply_hdf5_2048移到BASE_DIR/data/路径下\n    os.system('mv %s %s' % (zipfile[:-4], DATA_DIR))\n    os.system('rm %s' % (zipfile))    # 删除压缩包  \n```\n\n- **离线方式**（ubuntu16.04系统或windows10）\n如果没有合适的ubuntu环境，那么我们首先通过[网站](https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip)下载数据集，然后利用windows上的解压工具解压到对应的文件夹，文件夹可以对应到**在线方式**里的路径，本文采用的这种方法，简单粗暴，但是不推荐，不利于代码的自动化。\n\n\n运行代码或者解压文件夹，将在BASE_DIR/data/modelnet40_ply_hdf5_2048/文件夹里看到一下内容，注意BASE_DIR指的是当前py文件的路径。\n![ModelNet40.png](https://www.z4a.net/images/2018/12/29/ModelNet40.png)\n\n#### 读取点云\n由上图可以看到，点云文件由`.h5`文件格式来存储，有关h5格式的介绍请移步[这里](https://segmentfault.com/a/1190000016670881)，下面我们就来读取点云文件，代码如下（以读取ply_data_train1.h5为例）：\n\n```python\n\"\"\"\n    读取H5文件里的键值\n\"\"\"\nimport h5py\n# ply_data_train1.h5路径\nH5_FILE = './data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'\n\n\ndef read_h5file_keys(h5_filename):   # 定义python函数，函数体前后空两行\n    \"\"\"\n    读取H5文件里的键值\n    :param h5_filename:\n    :return:\n    \"\"\"\n    with h5py.File(h5_filename) as f:\n        return [item for item in f.keys()]\n\n\nkeys = read_h5file_keys(H5_FILE)\nprint(\"key is : %s\" % keys)\n```\n运行，得到以下结果：\n```bash\nkey is : ['data', 'faceId', 'label', 'normal']\n```\n其中\n`'data'`对应`点云xyz坐标`\n`'label'`对应`标签`\n`'normal'`对应`法向量`\n`'faceId'`未知\n我们感兴趣的是键值`data`和`label`\n\n紧接着，读取点云数据，代码如下：\n```python\nwith h5py.File(H5_FILE) as f:\n    data = f['data'][:]\n    label = f['label'][:]\n```\n由于数据集较大，所以是否读取成功，可以利用PyCharm里的`Scientific Mode`来查看，开启姿势位`View`——>`Scientific Mode`，可追踪变量变化，如下图\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/>\n</div>\n\n<div align =center><img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/></div>\n\n\n运行程序后，就会看到这样的情形，\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/show.png\"/>\n</div>\n\n点击变量`data`后的**_View as Array_**，就可以在右边的SciView里看见数据，**ply_data_train1.h5**里共有 **2048**个物体的点云数据，所以范围在data[0]到data[2047]之间，每一个物体共有 **2048** 个点，每个点的坐标位(x, y, z).\n\n 可以打印出`data`和`label`的形状：\n```python\nprint(data.shape)    # (2048, 2048, 3)\nprint(label.shpae)   # (2048, 1)\n```\n#### 显示点云\n- **获取坐标**\n```python\nimport numpy as np\nfrom mayavi import mlab\n\nx = []\ny = []\nz = []\nnum_obj = 1079             # 比如显示第756 + 1个物体\nmax_num_point = 2048      # 最大渲染点的个数，最大是2048个点\n\n# 依次获取x、y、z的坐标 —— 1D array\nx = data[num_obj, 0:max_num_point, 0]   # shape为(max_num_point, 1)\ny = data[num_obj, 0:max_num_point, 1]   # shape为(max_num_point, 1)\nz = data[num_obj, 0:max_num_point, 2]   # shape为(max_num_point, 1)\n```\n- **点云可视化方法一 —— mayavi**\n```python\n# ——————————————————————————————————————————————————————————————\n#                        mayavi可视化\n# ——————————————————————————————————————————————————————————————\n# s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点\n# 提供关联的标量值，或者返回标量值的函数f(x，y，z)\n# 此标量值可用于调整点的颜色和大小。\ns = np.sqrt(x ** 2 + y ** 2 + z ** 2 )\n# 设置背景为白色，画布大小为300 * 200\nfig = mlab.figure(bgcolor=(1, 1, 1), size=(450, 300))\n# https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d\nfigure = mlab.points3d(x, y, z, s, mode=\"point\", colormap='spectral', scale_factor=1)\nmlab.show()    # 显示3D点云图\n```\n**Notice**: 使用这种方法，电脑较卡顿。\n在这里，使用了mlab.points3d()函数来进行可视化，具体参数[这里](https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d)，需要注意的是，坐标(x, y, z)各为1D array，需要与mayavi里的surf等方法进行区别，在使用时，注意追踪变量变化，可视化结果\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_mayavi.png\"/>\n</div>\n\n- **点云可视化方法一 —— matplotlib**\n```python\n# ——————————————————————————————————————————————————————————————\n#                matplotlib——Axes3D可视化\n# ——————————————————————————————————————————————————————————————\n# 使用Axes3D()创建3D图像对象\nfig = plt.figure()\nax = Axes3D(fig)\n# 调用散点图绘制方法绘图并显示出来\nax.scatter(x, y, z)\nplt.show()\n```\n可视化结果\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_matplotlib.md.png\" width=\"450\" height=\"350\"/>\n</div>\n\n```python\n# shape_name.txt文件路径\nSHAPE_NAME = '../data/modelnet40_ply_hdf5_2048/shape_names.txt'\n# 显示对应物体的名称\n# 读取SHAPE_NAME文件，并存储为numpy数组形式\nshape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)\n# 查询该物体名称\nshape_name = shape_name_list[label[num_obj]]\n\nprint('label is: %s' % shape_name)\n```\n\n#### 总结\n- mayavi和TVTK配合可以自定义点云颜色，可支持自定义点云颜色，官方范例请点击[这里](https://docs.enthought.com/mayavi/mayavi/auto/example_custom_colormap.html#example-custom-colormap)，mayavi运行时较卡顿，自定义程度较高，可视化语义分割和场景分割时很有用；\n- matplotlib库里的Axes3D对象可视化点云方法较为简单，自定义程度较低，在论文中要想显示精美的可视化效果图，不太建议用matplotlib库；\n\n#### 后续工作\n除了用这两个库，还有一些python工具可以进行可视化，如\n- python包：[pyntcloud](https://pyntcloud.readthedocs.io/en/latest/)、[pptk](https://heremaps.github.io/pptk/tutorials/viewer/tanks_and_temples.html)、[open3d](http://www.open3d.org/docs/tutorial/Basic/pointcloud.html#)、[vispy](https://docs.enthought.com/mayavi/mayavi/)等\n- GUI工具：[meshlab](http://www.meshlab.net/)、[CloudCompare](https://www.danielgm.net/cc/)、Point Cloud Library库里的cloudviewer函数等\n\n我的研究发现时利用深度学习对点云数据集进行分类、场景分割、语义分割等，可视化工具是必不缺少的一环，下一步准备学习meshlab，思路是把点云及相关颜色信息保存成.obj文件，然后在meshlab里显示，具体工作请关注我的博客，如果志同道合者，十分欢迎与联系，这是我的[邮箱](kangzhiheng@sjru.edu.cn)。\n\n本文的完整代码如下（已在win10环境下，在PyCharm里运行成功，数据集是提前下好的，建议在Ubuntu系统尝试，体会linux的命令）：\n\n``` python\n#! python3\n# -*- coding:utf-8 -*-\n\n\"\"\"\n    Author     : adoredee\n    Date       : November 28th 2018\n    BlogName   : www.kangzhiheng.top\n    Contact    : kangzhiheng@sjtu.edu.cn\n    点云显示\n\"\"\"\n\nimport os\nimport sys\nimport numpy as np\nimport h5py\n\nfrom mayavi import mlab\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))    # 当前py文件所在的路径\nsys.path.append(BASE_DIR)                                # 显示py文件当前路径\nprint(\"the path is: %s\" % BASE_DIR)                      # 加入到系路径里\n\n# ply_data_train1.h5路径\nH5_FILE = '../data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'\n# shape_names.txt文件路径\nSHAPE_NAME = '../data/modelnet40_ply_hdf5_2048/shape_names.txt'\n\n\ndef read_h5file_keys(h5_filename):\n    \"\"\"\n    读取H5文件里的键值\n    :param h5_filename:\n    :return:\n    \"\"\"\n    with h5py.File(h5_filename) as f:\n        return [item for item in f.keys()]\n\n\nkeys = read_h5file_keys(H5_FILE)\nprint(\"key is : %s\" % keys)    # ['data', 'faceId', 'label', 'normal']\n\nwith h5py.File(H5_FILE) as f:\n    data = f['data'][:]    # 读取主键'data'的值\n    label = f['label'][:]\n\nprint(data.shape)    # 2048组，每组2048个点，每个的值位(x,y,z)\nprint(label.shape)\n\nx = []\ny = []\nz = []\n\nnum_obj = 1079              # 比如显示第num_obj + 1个物体\nmax_num_point = 2048      # 最大渲染点的个数，最大是2048个点\n\nx = data[num_obj, 0:max_num_point, 0] * 10  # shape为(max_num_point, 1)\ny = data[num_obj, 0:max_num_point, 1] * 10  # shape为(max_num_point, 1)\nz = data[num_obj, 0:max_num_point, 2] * 10  # shape为(max_num_point, 1)\n\n\n# ——————————————————————————————————————————————————————————————\n#                        mayavi可视化\n# ——————————————————————————————————————————————————————————————\n# s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点\n# 提供关联的标量值，或者返回标量值的函数f(x，y，z)\n# 此标量值可用于调整点的颜色和大小。\ns = np.sqrt(x ** 2 + y ** 2 + z ** 2)\n\n# visualization\nfig = mlab.figure(bgcolor=(1, 1, 1), size=(450, 300))\nfigure = mlab.points3d(x, y, z, s, mode=\"point\", colormap='spectral', scale_factor=0.25)\n\nmlab.show()\n\n'''\n# ——————————————————————————————————————————————————————————————\n#                         Axes3D可视化\n# ——————————————————————————————————————————————————————————————\n# 开始绘图\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(x, y, z)\n\nplt.show()\n'''\n# 显示对应物体的名称\n# 读取SHAPE_NAME文件，并存储为numpy数组形式\nshape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)\n# 查询该物体名称\nshape_name = shape_name_list[label[num_obj]]\n\nprint('label is: %s' % shape_name)\n\n```","slug":"点云可视化","published":1,"date":"2018-12-30T07:14:52.417Z","updated":"2020-03-28T16:01:30.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmguh001cmgvz6sre6c7t","content":"<p>点云可视化的探索。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>目前点云方面的研究是一个热门方向，点云分类、零件分割、语义分割等研究正处于热门研究时期；<br>深度学习大热以来，渐渐地把二维世界里的框架，或移植，或改进，运用到三维世界中来，那么如何将点云可视化呢？This is a question.<br>下面让我们一起来探索。</p>\n</blockquote>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><h4 id=\"点云数据准备\"><a href=\"#点云数据准备\" class=\"headerlink\" title=\"点云数据准备\"></a>点云数据准备</h4><p>如无特别说明，本系列使用的数据是<a href=\"https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip\">ModelNet40</a>，ModelNet40包含了来自40类的12311个三维形状,其中9843个文件用来训练，2468个文件用来测试。</p>\n<h4 id=\"系统环境\"><a href=\"#系统环境\" class=\"headerlink\" title=\"系统环境\"></a>系统环境</h4><ul>\n<li><strong>操作系统</strong>：ubuntu16.04或者windows10，建议在Ubuntu下开发</li>\n<li><strong>编程软件</strong>：PyCharm</li>\n<li><strong>语言环境</strong>：Python3.6</li>\n</ul>\n<h4 id=\"python包依赖\"><a href=\"#python包依赖\" class=\"headerlink\" title=\"python包依赖\"></a>python包依赖</h4><p>使用python3.6读取点云文件，需要提取安装<code>numpy</code>、<code>h5py</code>、<code>mayavi</code>、<code>matplotlib</code>，其中安装mayavi的方法如下(前提：python3.x和64位系统)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mayavi    <span class=\"comment\"># mayavi包</span></span><br><span class=\"line\">pip install PyQt5     <span class=\"comment\"># GUI</span></span><br></pre></td></tr></table></figure>\n<p>故所需要的包有：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> h5py</span><br><span class=\"line\"><span class=\"keyword\">from</span> mayavi <span class=\"keyword\">import</span> mlab</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载数据集ModelNet40\"><a href=\"#下载数据集ModelNet40\" class=\"headerlink\" title=\"下载数据集ModelNet40\"></a>下载数据集<a href=\"https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip\">ModelNet40</a></h4><ul>\n<li><p><strong>在线方式</strong>（ubuntu16.04系统下）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASE_DIR = os.path.dirname(os.path.abspath(__file__))    <span class=\"comment\"># 当前py文件所在的路径</span></span><br><span class=\"line\">print(BASE_DIR)                                          <span class=\"comment\"># 显示py文件当前路径</span></span><br><span class=\"line\">sys.path.append(BASE_DIR)                                <span class=\"comment\"># 加入到系路径里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># download modelnet40 dataset</span></span><br><span class=\"line\"><span class=\"comment\"># 将数据集下载到当前py文件所处路径里的data文件夹里,假设当前py文件在</span></span><br><span class=\"line\"><span class=\"comment\"># BASE_DIR=E:/PointCloud路径里，那么数据集将下载到E:/PointCloud</span></span><br><span class=\"line\">DATA_DIR = os.path.join(BASE_DIR, <span class=\"string\">'data'</span>)                </span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(DATA_DIR):                         <span class=\"comment\"># 如果不存在此文件夹</span></span><br><span class=\"line\">    os.mkdir(DATA_DIR)                                   <span class=\"comment\"># 新建data文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集应在BASE_DIR/data/modelnet40_ply_hdf5_2048里，如果不存在</span></span><br><span class=\"line\"><span class=\"comment\"># BASE_DIR/data/modelnet40_ply_hdf5_2048文件夹，则下载数据集</span></span><br><span class=\"line\"><span class=\"comment\"># modelnet40_ply_hdf5_2048.zip并解压，且输出.zip文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(os.path.join(DATA_DIR, <span class=\"string\">'modelnet40_ply_hdf5_2048'</span>)):  </span><br><span class=\"line\">    <span class=\"comment\"># 数据集文件网址</span></span><br><span class=\"line\">    www = <span class=\"string\">'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回path最后的文件名，即zipfile=modelnet40_ply_hdf5_2048.zip</span></span><br><span class=\"line\">    zipfile = os.path.basename(www)   </span><br><span class=\"line\">    os.system(<span class=\"string\">'wget %s; unzip %s'</span> % (www, zipfile))    <span class=\"comment\"># wget:下载，unzp： 解压</span></span><br><span class=\"line\">    <span class=\"comment\"># zipfile=modelnet40_ply_hdf5_2048.zip</span></span><br><span class=\"line\">    <span class=\"comment\"># zipfile[:-4]=modelnet40_ply_hdf5_2048</span></span><br><span class=\"line\">    <span class=\"comment\"># 把解压后的文件夹modelnet40_ply_hdf5_2048移到BASE_DIR/data/路径下</span></span><br><span class=\"line\">    os.system(<span class=\"string\">'mv %s %s'</span> % (zipfile[:<span class=\"number\">-4</span>], DATA_DIR))</span><br><span class=\"line\">    os.system(<span class=\"string\">'rm %s'</span> % (zipfile))    <span class=\"comment\"># 删除压缩包</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>离线方式</strong>（ubuntu16.04系统或windows10）<br>如果没有合适的ubuntu环境，那么我们首先通过<a href=\"https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip\">网站</a>下载数据集，然后利用windows上的解压工具解压到对应的文件夹，文件夹可以对应到<strong>在线方式</strong>里的路径，本文采用的这种方法，简单粗暴，但是不推荐，不利于代码的自动化。</p>\n</li>\n</ul>\n<p>运行代码或者解压文件夹，将在BASE_DIR/data/modelnet40_ply_hdf5_2048/文件夹里看到一下内容，注意BASE_DIR指的是当前py文件的路径。<br><img src=\"https://www.z4a.net/images/2018/12/29/ModelNet40.png\" alt=\"ModelNet40.png\"></p>\n<h4 id=\"读取点云\"><a href=\"#读取点云\" class=\"headerlink\" title=\"读取点云\"></a>读取点云</h4><p>由上图可以看到，点云文件由<code>.h5</code>文件格式来存储，有关h5格式的介绍请移步<a href=\"https://segmentfault.com/a/1190000016670881\">这里</a>，下面我们就来读取点云文件，代码如下（以读取ply_data_train1.h5为例）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    读取H5文件里的键值</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> h5py</span><br><span class=\"line\"><span class=\"comment\"># ply_data_train1.h5路径</span></span><br><span class=\"line\">H5_FILE = <span class=\"string\">'./data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_h5file_keys</span><span class=\"params\">(h5_filename)</span>:</span>   <span class=\"comment\"># 定义python函数，函数体前后空两行</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    读取H5文件里的键值</span></span><br><span class=\"line\"><span class=\"string\">    :param h5_filename:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> h5py.File(h5_filename) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> f.keys()]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">keys = read_h5file_keys(H5_FILE)</span><br><span class=\"line\">print(<span class=\"string\">\"key is : %s\"</span> % keys)</span><br></pre></td></tr></table></figure>\n<p>运行，得到以下结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key is : [<span class=\"string\">'data'</span>, <span class=\"string\">'faceId'</span>, <span class=\"string\">'label'</span>, <span class=\"string\">'normal'</span>]</span><br></pre></td></tr></table></figure>\n<p>其中<br><code>&#39;data&#39;</code>对应<code>点云xyz坐标</code><br><code>&#39;label&#39;</code>对应<code>标签</code><br><code>&#39;normal&#39;</code>对应<code>法向量</code><br><code>&#39;faceId&#39;</code>未知<br>我们感兴趣的是键值<code>data</code>和<code>label</code></p>\n<p>紧接着，读取点云数据，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> h5py.File(H5_FILE) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f[<span class=\"string\">'data'</span>][:]</span><br><span class=\"line\">    label = f[<span class=\"string\">'label'</span>][:]</span><br></pre></td></tr></table></figure>\n<p>由于数据集较大，所以是否读取成功，可以利用PyCharm里的<code>Scientific Mode</code>来查看，开启姿势位<code>View</code>——&gt;<code>Scientific Mode</code>，可追踪变量变化，如下图</p>\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/>\n</div>\n\n<div align =center><img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/></div>\n\n\n<p>运行程序后，就会看到这样的情形，</p>\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/show.png\"/>\n</div>\n\n<p>点击变量<code>data</code>后的<strong><em>View as Array</em></strong>，就可以在右边的SciView里看见数据，<strong>ply_data_train1.h5</strong>里共有 <strong>2048</strong>个物体的点云数据，所以范围在data[0]到data[2047]之间，每一个物体共有 <strong>2048</strong> 个点，每个点的坐标位(x, y, z).</p>\n<p> 可以打印出<code>data</code>和<code>label</code>的形状：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(data.shape)    <span class=\"comment\"># (2048, 2048, 3)</span></span><br><span class=\"line\">print(label.shpae)   <span class=\"comment\"># (2048, 1)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"显示点云\"><a href=\"#显示点云\" class=\"headerlink\" title=\"显示点云\"></a>显示点云</h4><ul>\n<li><strong>获取坐标</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> mayavi <span class=\"keyword\">import</span> mlab</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\">z = []</span><br><span class=\"line\">num_obj = <span class=\"number\">1079</span>             <span class=\"comment\"># 比如显示第756 + 1个物体</span></span><br><span class=\"line\">max_num_point = <span class=\"number\">2048</span>      <span class=\"comment\"># 最大渲染点的个数，最大是2048个点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 依次获取x、y、z的坐标 —— 1D array</span></span><br><span class=\"line\">x = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">0</span>]   <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">y = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">1</span>]   <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">z = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">2</span>]   <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>点云可视化方法一 —— mayavi</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\">#                        mayavi可视化</span></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\"># s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点</span></span><br><span class=\"line\"><span class=\"comment\"># 提供关联的标量值，或者返回标量值的函数f(x，y，z)</span></span><br><span class=\"line\"><span class=\"comment\"># 此标量值可用于调整点的颜色和大小。</span></span><br><span class=\"line\">s = np.sqrt(x ** <span class=\"number\">2</span> + y ** <span class=\"number\">2</span> + z ** <span class=\"number\">2</span> )</span><br><span class=\"line\"><span class=\"comment\"># 设置背景为白色，画布大小为300 * 200</span></span><br><span class=\"line\">fig = mlab.figure(bgcolor=(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), size=(<span class=\"number\">450</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\"><span class=\"comment\"># https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d</span></span><br><span class=\"line\">figure = mlab.points3d(x, y, z, s, mode=<span class=\"string\">\"point\"</span>, colormap=<span class=\"string\">'spectral'</span>, scale_factor=<span class=\"number\">1</span>)</span><br><span class=\"line\">mlab.show()    <span class=\"comment\"># 显示3D点云图</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>Notice</strong>: 使用这种方法，电脑较卡顿。<br>在这里，使用了mlab.points3d()函数来进行可视化，具体参数<a href=\"https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d\">这里</a>，需要注意的是，坐标(x, y, z)各为1D array，需要与mayavi里的surf等方法进行区别，在使用时，注意追踪变量变化，可视化结果</p>\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_mayavi.png\"/>\n</div>\n\n<ul>\n<li><strong>点云可视化方法一 —— matplotlib</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\">#                matplotlib——Axes3D可视化</span></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 使用Axes3D()创建3D图像对象</span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">ax = Axes3D(fig)</span><br><span class=\"line\"><span class=\"comment\"># 调用散点图绘制方法绘图并显示出来</span></span><br><span class=\"line\">ax.scatter(x, y, z)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n可视化结果<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_matplotlib.md.png\" width=\"450\" height=\"350\"/>\n</div>\n\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shape_name.txt文件路径</span></span><br><span class=\"line\">SHAPE_NAME = <span class=\"string\">'../data/modelnet40_ply_hdf5_2048/shape_names.txt'</span></span><br><span class=\"line\"><span class=\"comment\"># 显示对应物体的名称</span></span><br><span class=\"line\"><span class=\"comment\"># 读取SHAPE_NAME文件，并存储为numpy数组形式</span></span><br><span class=\"line\">shape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)</span><br><span class=\"line\"><span class=\"comment\"># 查询该物体名称</span></span><br><span class=\"line\">shape_name = shape_name_list[label[num_obj]]</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'label is: %s'</span> % shape_name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>mayavi和TVTK配合可以自定义点云颜色，可支持自定义点云颜色，官方范例请点击<a href=\"https://docs.enthought.com/mayavi/mayavi/auto/example_custom_colormap.html#example-custom-colormap\">这里</a>，mayavi运行时较卡顿，自定义程度较高，可视化语义分割和场景分割时很有用；</li>\n<li>matplotlib库里的Axes3D对象可视化点云方法较为简单，自定义程度较低，在论文中要想显示精美的可视化效果图，不太建议用matplotlib库；</li>\n</ul>\n<h4 id=\"后续工作\"><a href=\"#后续工作\" class=\"headerlink\" title=\"后续工作\"></a>后续工作</h4><p>除了用这两个库，还有一些python工具可以进行可视化，如</p>\n<ul>\n<li>python包：<a href=\"https://pyntcloud.readthedocs.io/en/latest/\">pyntcloud</a>、<a href=\"https://heremaps.github.io/pptk/tutorials/viewer/tanks_and_temples.html\">pptk</a>、<a href=\"http://www.open3d.org/docs/tutorial/Basic/pointcloud.html#\">open3d</a>、<a href=\"https://docs.enthought.com/mayavi/mayavi/\">vispy</a>等</li>\n<li>GUI工具：<a href=\"http://www.meshlab.net/\">meshlab</a>、<a href=\"https://www.danielgm.net/cc/\">CloudCompare</a>、Point Cloud Library库里的cloudviewer函数等</li>\n</ul>\n<p>我的研究发现时利用深度学习对点云数据集进行分类、场景分割、语义分割等，可视化工具是必不缺少的一环，下一步准备学习meshlab，思路是把点云及相关颜色信息保存成.obj文件，然后在meshlab里显示，具体工作请关注我的博客，如果志同道合者，十分欢迎与联系，这是我的<a href=\"kangzhiheng@sjru.edu.cn\">邮箱</a>。</p>\n<p>本文的完整代码如下（已在win10环境下，在PyCharm里运行成功，数据集是提前下好的，建议在Ubuntu系统尝试，体会linux的命令）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Author     : adoredee</span></span><br><span class=\"line\"><span class=\"string\">    Date       : November 28th 2018</span></span><br><span class=\"line\"><span class=\"string\">    BlogName   : www.kangzhiheng.top</span></span><br><span class=\"line\"><span class=\"string\">    Contact    : kangzhiheng@sjtu.edu.cn</span></span><br><span class=\"line\"><span class=\"string\">    点云显示</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> h5py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> mayavi <span class=\"keyword\">import</span> mlab</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">BASE_DIR = os.path.dirname(os.path.abspath(__file__))    <span class=\"comment\"># 当前py文件所在的路径</span></span><br><span class=\"line\">sys.path.append(BASE_DIR)                                <span class=\"comment\"># 显示py文件当前路径</span></span><br><span class=\"line\">print(<span class=\"string\">\"the path is: %s\"</span> % BASE_DIR)                      <span class=\"comment\"># 加入到系路径里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ply_data_train1.h5路径</span></span><br><span class=\"line\">H5_FILE = <span class=\"string\">'../data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'</span></span><br><span class=\"line\"><span class=\"comment\"># shape_names.txt文件路径</span></span><br><span class=\"line\">SHAPE_NAME = <span class=\"string\">'../data/modelnet40_ply_hdf5_2048/shape_names.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_h5file_keys</span><span class=\"params\">(h5_filename)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    读取H5文件里的键值</span></span><br><span class=\"line\"><span class=\"string\">    :param h5_filename:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> h5py.File(h5_filename) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> f.keys()]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">keys = read_h5file_keys(H5_FILE)</span><br><span class=\"line\">print(<span class=\"string\">\"key is : %s\"</span> % keys)    <span class=\"comment\"># ['data', 'faceId', 'label', 'normal']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> h5py.File(H5_FILE) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f[<span class=\"string\">'data'</span>][:]    <span class=\"comment\"># 读取主键'data'的值</span></span><br><span class=\"line\">    label = f[<span class=\"string\">'label'</span>][:]</span><br><span class=\"line\"></span><br><span class=\"line\">print(data.shape)    <span class=\"comment\"># 2048组，每组2048个点，每个的值位(x,y,z)</span></span><br><span class=\"line\">print(label.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\">z = []</span><br><span class=\"line\"></span><br><span class=\"line\">num_obj = <span class=\"number\">1079</span>              <span class=\"comment\"># 比如显示第num_obj + 1个物体</span></span><br><span class=\"line\">max_num_point = <span class=\"number\">2048</span>      <span class=\"comment\"># 最大渲染点的个数，最大是2048个点</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">0</span>] * <span class=\"number\">10</span>  <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">y = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">1</span>] * <span class=\"number\">10</span>  <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">z = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">2</span>] * <span class=\"number\">10</span>  <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\">#                        mayavi可视化</span></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\"># s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点</span></span><br><span class=\"line\"><span class=\"comment\"># 提供关联的标量值，或者返回标量值的函数f(x，y，z)</span></span><br><span class=\"line\"><span class=\"comment\"># 此标量值可用于调整点的颜色和大小。</span></span><br><span class=\"line\">s = np.sqrt(x ** <span class=\"number\">2</span> + y ** <span class=\"number\">2</span> + z ** <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># visualization</span></span><br><span class=\"line\">fig = mlab.figure(bgcolor=(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), size=(<span class=\"number\">450</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\">figure = mlab.points3d(x, y, z, s, mode=<span class=\"string\">\"point\"</span>, colormap=<span class=\"string\">'spectral'</span>, scale_factor=<span class=\"number\">0.25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mlab.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"string\">#                         Axes3D可视化</span></span><br><span class=\"line\"><span class=\"string\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"string\"># 开始绘图</span></span><br><span class=\"line\"><span class=\"string\">fig = plt.figure()</span></span><br><span class=\"line\"><span class=\"string\">ax = Axes3D(fig)</span></span><br><span class=\"line\"><span class=\"string\">ax.scatter(x, y, z)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">plt.show()</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"comment\"># 显示对应物体的名称</span></span><br><span class=\"line\"><span class=\"comment\"># 读取SHAPE_NAME文件，并存储为numpy数组形式</span></span><br><span class=\"line\">shape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)</span><br><span class=\"line\"><span class=\"comment\"># 查询该物体名称</span></span><br><span class=\"line\">shape_name = shape_name_list[label[num_obj]]</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'label is: %s'</span> % shape_name)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>点云可视化的探索。</p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>目前点云方面的研究是一个热门方向，点云分类、零件分割、语义分割等研究正处于热门研究时期；<br>深度学习大热以来，渐渐地把二维世界里的框架，或移植，或改进，运用到三维世界中来，那么如何将点云可视化呢？This is a question.<br>下面让我们一起来探索。</p>\n</blockquote>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><h4 id=\"点云数据准备\"><a href=\"#点云数据准备\" class=\"headerlink\" title=\"点云数据准备\"></a>点云数据准备</h4><p>如无特别说明，本系列使用的数据是<a href=\"https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip\">ModelNet40</a>，ModelNet40包含了来自40类的12311个三维形状,其中9843个文件用来训练，2468个文件用来测试。</p>\n<h4 id=\"系统环境\"><a href=\"#系统环境\" class=\"headerlink\" title=\"系统环境\"></a>系统环境</h4><ul>\n<li><strong>操作系统</strong>：ubuntu16.04或者windows10，建议在Ubuntu下开发</li>\n<li><strong>编程软件</strong>：PyCharm</li>\n<li><strong>语言环境</strong>：Python3.6</li>\n</ul>\n<h4 id=\"python包依赖\"><a href=\"#python包依赖\" class=\"headerlink\" title=\"python包依赖\"></a>python包依赖</h4><p>使用python3.6读取点云文件，需要提取安装<code>numpy</code>、<code>h5py</code>、<code>mayavi</code>、<code>matplotlib</code>，其中安装mayavi的方法如下(前提：python3.x和64位系统)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mayavi    <span class=\"comment\"># mayavi包</span></span><br><span class=\"line\">pip install PyQt5     <span class=\"comment\"># GUI</span></span><br></pre></td></tr></table></figure>\n<p>故所需要的包有：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> h5py</span><br><span class=\"line\"><span class=\"keyword\">from</span> mayavi <span class=\"keyword\">import</span> mlab</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载数据集ModelNet40\"><a href=\"#下载数据集ModelNet40\" class=\"headerlink\" title=\"下载数据集ModelNet40\"></a>下载数据集<a href=\"https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip\">ModelNet40</a></h4><ul>\n<li><p><strong>在线方式</strong>（ubuntu16.04系统下）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASE_DIR = os.path.dirname(os.path.abspath(__file__))    <span class=\"comment\"># 当前py文件所在的路径</span></span><br><span class=\"line\">print(BASE_DIR)                                          <span class=\"comment\"># 显示py文件当前路径</span></span><br><span class=\"line\">sys.path.append(BASE_DIR)                                <span class=\"comment\"># 加入到系路径里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># download modelnet40 dataset</span></span><br><span class=\"line\"><span class=\"comment\"># 将数据集下载到当前py文件所处路径里的data文件夹里,假设当前py文件在</span></span><br><span class=\"line\"><span class=\"comment\"># BASE_DIR=E:/PointCloud路径里，那么数据集将下载到E:/PointCloud</span></span><br><span class=\"line\">DATA_DIR = os.path.join(BASE_DIR, <span class=\"string\">'data'</span>)                </span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(DATA_DIR):                         <span class=\"comment\"># 如果不存在此文件夹</span></span><br><span class=\"line\">    os.mkdir(DATA_DIR)                                   <span class=\"comment\"># 新建data文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集应在BASE_DIR/data/modelnet40_ply_hdf5_2048里，如果不存在</span></span><br><span class=\"line\"><span class=\"comment\"># BASE_DIR/data/modelnet40_ply_hdf5_2048文件夹，则下载数据集</span></span><br><span class=\"line\"><span class=\"comment\"># modelnet40_ply_hdf5_2048.zip并解压，且输出.zip文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(os.path.join(DATA_DIR, <span class=\"string\">'modelnet40_ply_hdf5_2048'</span>)):  </span><br><span class=\"line\">    <span class=\"comment\"># 数据集文件网址</span></span><br><span class=\"line\">    www = <span class=\"string\">'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回path最后的文件名，即zipfile=modelnet40_ply_hdf5_2048.zip</span></span><br><span class=\"line\">    zipfile = os.path.basename(www)   </span><br><span class=\"line\">    os.system(<span class=\"string\">'wget %s; unzip %s'</span> % (www, zipfile))    <span class=\"comment\"># wget:下载，unzp： 解压</span></span><br><span class=\"line\">    <span class=\"comment\"># zipfile=modelnet40_ply_hdf5_2048.zip</span></span><br><span class=\"line\">    <span class=\"comment\"># zipfile[:-4]=modelnet40_ply_hdf5_2048</span></span><br><span class=\"line\">    <span class=\"comment\"># 把解压后的文件夹modelnet40_ply_hdf5_2048移到BASE_DIR/data/路径下</span></span><br><span class=\"line\">    os.system(<span class=\"string\">'mv %s %s'</span> % (zipfile[:<span class=\"number\">-4</span>], DATA_DIR))</span><br><span class=\"line\">    os.system(<span class=\"string\">'rm %s'</span> % (zipfile))    <span class=\"comment\"># 删除压缩包</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>离线方式</strong>（ubuntu16.04系统或windows10）<br>如果没有合适的ubuntu环境，那么我们首先通过<a href=\"https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip\">网站</a>下载数据集，然后利用windows上的解压工具解压到对应的文件夹，文件夹可以对应到<strong>在线方式</strong>里的路径，本文采用的这种方法，简单粗暴，但是不推荐，不利于代码的自动化。</p>\n</li>\n</ul>\n<p>运行代码或者解压文件夹，将在BASE_DIR/data/modelnet40_ply_hdf5_2048/文件夹里看到一下内容，注意BASE_DIR指的是当前py文件的路径。<br><img src=\"https://www.z4a.net/images/2018/12/29/ModelNet40.png\" alt=\"ModelNet40.png\"></p>\n<h4 id=\"读取点云\"><a href=\"#读取点云\" class=\"headerlink\" title=\"读取点云\"></a>读取点云</h4><p>由上图可以看到，点云文件由<code>.h5</code>文件格式来存储，有关h5格式的介绍请移步<a href=\"https://segmentfault.com/a/1190000016670881\">这里</a>，下面我们就来读取点云文件，代码如下（以读取ply_data_train1.h5为例）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    读取H5文件里的键值</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> h5py</span><br><span class=\"line\"><span class=\"comment\"># ply_data_train1.h5路径</span></span><br><span class=\"line\">H5_FILE = <span class=\"string\">'./data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_h5file_keys</span><span class=\"params\">(h5_filename)</span>:</span>   <span class=\"comment\"># 定义python函数，函数体前后空两行</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    读取H5文件里的键值</span></span><br><span class=\"line\"><span class=\"string\">    :param h5_filename:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> h5py.File(h5_filename) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> f.keys()]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">keys = read_h5file_keys(H5_FILE)</span><br><span class=\"line\">print(<span class=\"string\">\"key is : %s\"</span> % keys)</span><br></pre></td></tr></table></figure>\n<p>运行，得到以下结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key is : [<span class=\"string\">'data'</span>, <span class=\"string\">'faceId'</span>, <span class=\"string\">'label'</span>, <span class=\"string\">'normal'</span>]</span><br></pre></td></tr></table></figure>\n<p>其中<br><code>&#39;data&#39;</code>对应<code>点云xyz坐标</code><br><code>&#39;label&#39;</code>对应<code>标签</code><br><code>&#39;normal&#39;</code>对应<code>法向量</code><br><code>&#39;faceId&#39;</code>未知<br>我们感兴趣的是键值<code>data</code>和<code>label</code></p>\n<p>紧接着，读取点云数据，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> h5py.File(H5_FILE) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f[<span class=\"string\">'data'</span>][:]</span><br><span class=\"line\">    label = f[<span class=\"string\">'label'</span>][:]</span><br></pre></td></tr></table></figure>\n<p>由于数据集较大，所以是否读取成功，可以利用PyCharm里的<code>Scientific Mode</code>来查看，开启姿势位<code>View</code>——&gt;<code>Scientific Mode</code>，可追踪变量变化，如下图</p>\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/>\n</div>\n\n<div align =center><img src=\"https://www.z4a.net/images/2018/12/29/scientific-mode.png\"/></div>\n\n\n<p>运行程序后，就会看到这样的情形，</p>\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/29/show.png\"/>\n</div>\n\n<p>点击变量<code>data</code>后的<strong><em>View as Array</em></strong>，就可以在右边的SciView里看见数据，<strong>ply_data_train1.h5</strong>里共有 <strong>2048</strong>个物体的点云数据，所以范围在data[0]到data[2047]之间，每一个物体共有 <strong>2048</strong> 个点，每个点的坐标位(x, y, z).</p>\n<p> 可以打印出<code>data</code>和<code>label</code>的形状：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(data.shape)    <span class=\"comment\"># (2048, 2048, 3)</span></span><br><span class=\"line\">print(label.shpae)   <span class=\"comment\"># (2048, 1)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"显示点云\"><a href=\"#显示点云\" class=\"headerlink\" title=\"显示点云\"></a>显示点云</h4><ul>\n<li><strong>获取坐标</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> mayavi <span class=\"keyword\">import</span> mlab</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\">z = []</span><br><span class=\"line\">num_obj = <span class=\"number\">1079</span>             <span class=\"comment\"># 比如显示第756 + 1个物体</span></span><br><span class=\"line\">max_num_point = <span class=\"number\">2048</span>      <span class=\"comment\"># 最大渲染点的个数，最大是2048个点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 依次获取x、y、z的坐标 —— 1D array</span></span><br><span class=\"line\">x = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">0</span>]   <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">y = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">1</span>]   <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">z = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">2</span>]   <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>点云可视化方法一 —— mayavi</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\">#                        mayavi可视化</span></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\"># s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点</span></span><br><span class=\"line\"><span class=\"comment\"># 提供关联的标量值，或者返回标量值的函数f(x，y，z)</span></span><br><span class=\"line\"><span class=\"comment\"># 此标量值可用于调整点的颜色和大小。</span></span><br><span class=\"line\">s = np.sqrt(x ** <span class=\"number\">2</span> + y ** <span class=\"number\">2</span> + z ** <span class=\"number\">2</span> )</span><br><span class=\"line\"><span class=\"comment\"># 设置背景为白色，画布大小为300 * 200</span></span><br><span class=\"line\">fig = mlab.figure(bgcolor=(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), size=(<span class=\"number\">450</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\"><span class=\"comment\"># https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d</span></span><br><span class=\"line\">figure = mlab.points3d(x, y, z, s, mode=<span class=\"string\">\"point\"</span>, colormap=<span class=\"string\">'spectral'</span>, scale_factor=<span class=\"number\">1</span>)</span><br><span class=\"line\">mlab.show()    <span class=\"comment\"># 显示3D点云图</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>Notice</strong>: 使用这种方法，电脑较卡顿。<br>在这里，使用了mlab.points3d()函数来进行可视化，具体参数<a href=\"https://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d\">这里</a>，需要注意的是，坐标(x, y, z)各为1D array，需要与mayavi里的surf等方法进行区别，在使用时，注意追踪变量变化，可视化结果</p>\n<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_mayavi.png\"/>\n</div>\n\n<ul>\n<li><strong>点云可视化方法一 —— matplotlib</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\">#                matplotlib——Axes3D可视化</span></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 使用Axes3D()创建3D图像对象</span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">ax = Axes3D(fig)</span><br><span class=\"line\"><span class=\"comment\"># 调用散点图绘制方法绘图并显示出来</span></span><br><span class=\"line\">ax.scatter(x, y, z)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n可视化结果<div align=center>\n<img src=\"https://www.z4a.net/images/2018/12/30/visual_matplotlib.md.png\" width=\"450\" height=\"350\"/>\n</div>\n\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shape_name.txt文件路径</span></span><br><span class=\"line\">SHAPE_NAME = <span class=\"string\">'../data/modelnet40_ply_hdf5_2048/shape_names.txt'</span></span><br><span class=\"line\"><span class=\"comment\"># 显示对应物体的名称</span></span><br><span class=\"line\"><span class=\"comment\"># 读取SHAPE_NAME文件，并存储为numpy数组形式</span></span><br><span class=\"line\">shape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)</span><br><span class=\"line\"><span class=\"comment\"># 查询该物体名称</span></span><br><span class=\"line\">shape_name = shape_name_list[label[num_obj]]</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'label is: %s'</span> % shape_name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>mayavi和TVTK配合可以自定义点云颜色，可支持自定义点云颜色，官方范例请点击<a href=\"https://docs.enthought.com/mayavi/mayavi/auto/example_custom_colormap.html#example-custom-colormap\">这里</a>，mayavi运行时较卡顿，自定义程度较高，可视化语义分割和场景分割时很有用；</li>\n<li>matplotlib库里的Axes3D对象可视化点云方法较为简单，自定义程度较低，在论文中要想显示精美的可视化效果图，不太建议用matplotlib库；</li>\n</ul>\n<h4 id=\"后续工作\"><a href=\"#后续工作\" class=\"headerlink\" title=\"后续工作\"></a>后续工作</h4><p>除了用这两个库，还有一些python工具可以进行可视化，如</p>\n<ul>\n<li>python包：<a href=\"https://pyntcloud.readthedocs.io/en/latest/\">pyntcloud</a>、<a href=\"https://heremaps.github.io/pptk/tutorials/viewer/tanks_and_temples.html\">pptk</a>、<a href=\"http://www.open3d.org/docs/tutorial/Basic/pointcloud.html#\">open3d</a>、<a href=\"https://docs.enthought.com/mayavi/mayavi/\">vispy</a>等</li>\n<li>GUI工具：<a href=\"http://www.meshlab.net/\">meshlab</a>、<a href=\"https://www.danielgm.net/cc/\">CloudCompare</a>、Point Cloud Library库里的cloudviewer函数等</li>\n</ul>\n<p>我的研究发现时利用深度学习对点云数据集进行分类、场景分割、语义分割等，可视化工具是必不缺少的一环，下一步准备学习meshlab，思路是把点云及相关颜色信息保存成.obj文件，然后在meshlab里显示，具体工作请关注我的博客，如果志同道合者，十分欢迎与联系，这是我的<a href=\"kangzhiheng@sjru.edu.cn\">邮箱</a>。</p>\n<p>本文的完整代码如下（已在win10环境下，在PyCharm里运行成功，数据集是提前下好的，建议在Ubuntu系统尝试，体会linux的命令）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Author     : adoredee</span></span><br><span class=\"line\"><span class=\"string\">    Date       : November 28th 2018</span></span><br><span class=\"line\"><span class=\"string\">    BlogName   : www.kangzhiheng.top</span></span><br><span class=\"line\"><span class=\"string\">    Contact    : kangzhiheng@sjtu.edu.cn</span></span><br><span class=\"line\"><span class=\"string\">    点云显示</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> h5py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> mayavi <span class=\"keyword\">import</span> mlab</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">BASE_DIR = os.path.dirname(os.path.abspath(__file__))    <span class=\"comment\"># 当前py文件所在的路径</span></span><br><span class=\"line\">sys.path.append(BASE_DIR)                                <span class=\"comment\"># 显示py文件当前路径</span></span><br><span class=\"line\">print(<span class=\"string\">\"the path is: %s\"</span> % BASE_DIR)                      <span class=\"comment\"># 加入到系路径里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ply_data_train1.h5路径</span></span><br><span class=\"line\">H5_FILE = <span class=\"string\">'../data/modelnet40_ply_hdf5_2048/ply_data_train1.h5'</span></span><br><span class=\"line\"><span class=\"comment\"># shape_names.txt文件路径</span></span><br><span class=\"line\">SHAPE_NAME = <span class=\"string\">'../data/modelnet40_ply_hdf5_2048/shape_names.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_h5file_keys</span><span class=\"params\">(h5_filename)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    读取H5文件里的键值</span></span><br><span class=\"line\"><span class=\"string\">    :param h5_filename:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> h5py.File(h5_filename) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> f.keys()]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">keys = read_h5file_keys(H5_FILE)</span><br><span class=\"line\">print(<span class=\"string\">\"key is : %s\"</span> % keys)    <span class=\"comment\"># ['data', 'faceId', 'label', 'normal']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> h5py.File(H5_FILE) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f[<span class=\"string\">'data'</span>][:]    <span class=\"comment\"># 读取主键'data'的值</span></span><br><span class=\"line\">    label = f[<span class=\"string\">'label'</span>][:]</span><br><span class=\"line\"></span><br><span class=\"line\">print(data.shape)    <span class=\"comment\"># 2048组，每组2048个点，每个的值位(x,y,z)</span></span><br><span class=\"line\">print(label.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\">z = []</span><br><span class=\"line\"></span><br><span class=\"line\">num_obj = <span class=\"number\">1079</span>              <span class=\"comment\"># 比如显示第num_obj + 1个物体</span></span><br><span class=\"line\">max_num_point = <span class=\"number\">2048</span>      <span class=\"comment\"># 最大渲染点的个数，最大是2048个点</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">0</span>] * <span class=\"number\">10</span>  <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">y = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">1</span>] * <span class=\"number\">10</span>  <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\">z = data[num_obj, <span class=\"number\">0</span>:max_num_point, <span class=\"number\">2</span>] * <span class=\"number\">10</span>  <span class=\"comment\"># shape为(max_num_point, 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\">#                        mayavi可视化</span></span><br><span class=\"line\"><span class=\"comment\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"comment\"># s为points3d()函数的第四个参数，与x，y和z具有相同的形状，为每个点</span></span><br><span class=\"line\"><span class=\"comment\"># 提供关联的标量值，或者返回标量值的函数f(x，y，z)</span></span><br><span class=\"line\"><span class=\"comment\"># 此标量值可用于调整点的颜色和大小。</span></span><br><span class=\"line\">s = np.sqrt(x ** <span class=\"number\">2</span> + y ** <span class=\"number\">2</span> + z ** <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># visualization</span></span><br><span class=\"line\">fig = mlab.figure(bgcolor=(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), size=(<span class=\"number\">450</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\">figure = mlab.points3d(x, y, z, s, mode=<span class=\"string\">\"point\"</span>, colormap=<span class=\"string\">'spectral'</span>, scale_factor=<span class=\"number\">0.25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mlab.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"string\">#                         Axes3D可视化</span></span><br><span class=\"line\"><span class=\"string\"># ——————————————————————————————————————————————————————————————</span></span><br><span class=\"line\"><span class=\"string\"># 开始绘图</span></span><br><span class=\"line\"><span class=\"string\">fig = plt.figure()</span></span><br><span class=\"line\"><span class=\"string\">ax = Axes3D(fig)</span></span><br><span class=\"line\"><span class=\"string\">ax.scatter(x, y, z)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">plt.show()</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"comment\"># 显示对应物体的名称</span></span><br><span class=\"line\"><span class=\"comment\"># 读取SHAPE_NAME文件，并存储为numpy数组形式</span></span><br><span class=\"line\">shape_name_list = np.loadtxt(SHAPE_NAME, dtype=bytes).astype(str)</span><br><span class=\"line\"><span class=\"comment\"># 查询该物体名称</span></span><br><span class=\"line\">shape_name = shape_name_list[label[num_obj]]</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'label is: %s'</span> % shape_name)</span><br></pre></td></tr></table></figure>"},{"title":"Lab532服务器环境(CentOS 7.6)须知","thumbnail":"https://pic.downk.cc/item/5e7f804a504f4bcb04b58112.png","data":"2018-10-06T16:00:00.000Z","author":"kangzhiheng","toc":true,"_content":"这篇文章的目的是针对Lab532不了解实验室服务器情况的同学，进行一些必要的说明。\n\n<!-- more -->\n\n### Contents\n\n* [安装SSH和FileZilla](#安装ssh和filezilla)\n  * [SSH](#ssh)\n    * [SSH安装](#ssh安装)\n    * [SSH登录](#ssh登录)\n    * [修改密码](#修改密码)\n  * [FileZilla](#filezilla)\n    * [安装FileZilla](#安装filezilla)\n    * [登录服务器](#登录服务器)\n    * [文件传输](#文件传输)\n    * [总结](#总结)\n* [服务器环境检查](#服务器环境检查)\n* [安装tensorflow的GPU版本](#安装tensorflow的gpu版本)\n  * [硬件支持](#硬件支持)\n  * [系统要求](#系统要求)\n  * [软件需求](#软件需求)\n  * [安装tensorflow-gpu](#安装tensorflow-gpu)\n    * [virtualenv安装tensorflow-gpu](#virtualenv安装tensorflow-gpu)\n    * [Anaconda安装tensorflow-gpu](#anaconda安装tensorflow-gpu)\n    * [测试tensorflow-gpu版本的正确性](#测试tensorflow-gpu版本的正确性)\n* [问题汇总](#问题汇总)\n* [在服务器上利用GPU跑程序的简化步骤](#在服务器上利用gpu跑程序的简化步骤)\n\n## 安装SSH和FileZilla\n\n- **SSH**是用来**登录**远程服务器的安全协议；\n- **FileZilla**是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的**文件传输**)\n\nSSH和FileZilla都安装在**本地计算机系统**中\n\n### SSH\n\n> [SSH](https://en.wikipedia.org/wiki/Secure_Shell)(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。\n\n### SSH安装 \n\n在**本地计算机系统**中，`UNIX`、`Window`以及`Mac`系统都可运行SSH,安装方法如下：\n\n - **_CentOS 7_**\n\n需要普通管理员权限(sudo)，用快捷键`ctrl`+`alt`+`t`打开终端Terminal窗口，运行：\n\n```python\nsudo yum install openssh-server\n```\n\n然后回车,输入`y`，即可安装完成。\n\n- **_Windows10_**\n\n下载[openssh for windows](https://www.mls-software.com/files/setupssh-7.9p1-1.exe)，进行默认安装即可。\n\n- **_Mac_**\n\n由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动`sshd服务`：\n\n```bash\nsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist\n```\n\n输入Mac密码后即可开启。\n\n### SSH登录\n\n在任一平台上打开终端(Windows上推荐[**Xshell**]( https://www.netsarang.com/zh/xshell-download/ )、[**FinalShell**]( http://www.hostbuf.com/t/988.html )，Linux系统和Mac直接打开终端即可)，输入命令\n\n```bash\nssh username@IPaddress -p PORT\n```\n\n其中，\n`username`为服务器的用户名\n`IPaddress`为服务器的IP地址\n`PORT`为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员\n\n输入密码后即可进入自己账户的主目录（普通用户，无root权限）\n\n### 修改密码\n\n登录到服务器之后，修改原始密码保证账户安全，直接输入\n\n```bash\npasswd\n```\n\n`username`为您在服务器上的用户名，根据提示修改新的密码。\n\n至此，您已经安全登录到服务器上。\n\n### FileZilla\n\n> FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。\n\n![FileZilla](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_Client.png)\n\n以windows 10为例，下载[FileZilla](https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe)，选择安装位置，正常安装即可。\n\n### 登录服务器\n\n打开FileZilla软件，\n\n* 1. 点击\"**文件**\"——\"**站点管理器**\"\n\n* 2. 点击\"**新站点**\"，在\"**我的站点**\"下重命名，此处设为“Lab532”\n\n* 3. 继停留在\"**站点管理器**\"界面，在\"**常规**\"选项卡中，设置如下：\n\n  * 主机：**IPaddress**\n  * 端口：**22**或者**8888**\n  * 协议：**SFTP - SSH File transfer Protocol**\n  * 登录类型：\n    - 1）若选\"**正常**\"\n      - 用户名：username\n      - 密码：password\n    - 2）若选\"**询问密码**\"，只能填写用户名：username，然后点击右下角的\"**连接**\"，再输入密码。\n\n* 4. 之后一直ok即可。\n\n### 文件传输  \n\n以window 10为例，利用FileZilla登录到服务器后，可以看到左边是**本地站点**，右边是**远程站点**(服务器上的目录)，如下图所示，直接将本地文件`test.py`用鼠标拖拽到服务器上的指定目录即可（**上传过程**），这个过程是可逆的（**下载过程**），非常方便。\n\n![FileZilla_file](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_file.png)\n\n### 总结\n\n利用**FileZilla**软件配合**SSH**协议，即可完成文件传输及程序运行等必要工作。\n\n\n## 服务器环境检查\n\n登录到服务器后，检查是否可以检测到GPU1080信息(管理员已全局安装)，打开终端，输入命令\n\n```bash\nnvidia-smi\n```\n\n若输出以下信息，即证明显卡驱动已安装。\n\n![nvidia](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/nvidia.png)\n\n若有错误提示，请及时联系管理员**adoredee**(kangzhiheng@sjtu.edu.cn)\n\n**实验室GPU信息如下：**\n\n|      规格      |        核心参数        |\n| :------------: | :--------------------: |\n|    显卡核心    | NVIDIA GeForce GTX1080 |\n|    显存频率    |        10010MHz        |\n|    显存大小    |           8G           |\n|    显存类型    |         GDDR5X         |\n|    显存位宽    |         256位          |\n|    总线类型    |     PCI-E 3.0 x 16     |\n| 数字最高分辨率 |      7680 x 4320       |\n|      SLI       |          支持          |\n|   散热器类型   |          风冷          |\n|    额定电源    |          500W          |\n|  供电外接需求  |        8pin x 1        |\n| OpneGL支持版本 |       OpenGL 4.5       |\n\n## 安装tensorflow的GPU版本\n\n配置TensorFlow GPU环境需要各种库和包支持，为了简化和避免库之间的冲突，建议使用[virtualenv](https://tensorflow.google.cn/install/pip)、[pip](https://tensorflow.google.cn/install/pip)或者[Docker](https://tensorflow.google.cn/install/docker)安装，本篇教程介绍[virtualenv](https://tensorflow.google.cn/install/pip)和[pip](https://tensorflow.google.cn/install/pip)两种方法安装`tensorflow-gpu-1.6.0`版本。\n\n### 硬件支持\n\n* 具有CUDA®计算能力3.5或更高版本的NVIDIA®GPU卡,请参阅支持[CUDA的GPU卡列表](https://developer.nvidia.com/cuda-gpus)。\n\n### 系统要求\n\n* CentOS 7.x 更高版本(64-bit)\n* macOS 10.12.6 (Sierra)更高版本(64-bit)(*不支持 tensorflow GPU版本*)\n* Windows 7或更高版本 (64-bit)(只支持Python3)\n* Raspbian 9.0或更高版本\n\n### 软件需求\n\n根据[官网](https://tensorflow.google.cn/install/gpu) 以及我个人经验，**_Tensorflow1.6.0的GPU版本_** 要求**在系统上安装以下NVIDIA®软件**\n\n- [NVIDIA® GPU驱动](https://www.nvidia.com/drivers) —— CUDA 9.0要求NVIDIA驱动384.x或者更高版本\n- [CUDA® Toolkit](https://developer.nvidia.com/cuda-zone) —— TensorFlow1.6.0支持CUDA 9.0.\n- [cuDNN](https://developer.nvidia.com/cudnn) —— 大于等于cuDNN 7.0，这里选择cuDNN 7.0.5\n\n\n在服务器上管理员已经提前安装好了NVIDIA驱动、CUDA及cuDNN，具体信息如下：\n\n|      所需环境       | 版本信息  |    备注    |\n| :-----------------: | :-------: | :--------: |\n|     NVIDIA驱动      |  390.77   |  *已安装*  |\n|        CUDA         |    9.0    |  *已安装*  |\n|        cuDNN        |   7.0.5   |  *已安装*  |\n|       gcc/g++       |   4.8.5   |  *已降级*  |\n| Tensorflow(GPU版本) | 建议`1.6` | **未安装** |\n\n### 安装tensorflow-gpu\n\n下面将介绍两种方法安装tensorflow-gpu：\n\n1. [virtualenv](https://tensorflow.google.cn/install/pip)\n2. [pip](https://tensorflow.google.cn/install/pip)\n\n### virtualenv安装tensorflow-gpu\n\n* **_安装Python包管理工具——pip_**\n\n在终端利用SSH登录到服务器系统(CentOS 7.6)，由于**普通用户**无法使用`sudo`，故不能直接使用`sudo yum install virtualenv`安装virtualenv虚拟环境，故使用以下方法，**先安装pip**，再安装**virtualenv**，在终端中运行\n\n```bash\nwget https://bootstrap.pypa.io/get-pip.py\npython3 get-pip.py --user\n```\n\n**注意**:参数`--user`一定要记得使用，否则会提示权限不足。\n\n安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量\n\n```bash\nexport PATH=~/.local/bin:$PATH\n```\n\n此时已在非root用户环境中安装好通用的Python包管理工具`pip`，故利用pip安装**virtualenv**\n\n```bash\npip3 install -U virtualenv --user\n```\n\n* **_创建虚拟环境——tensorflow-gpu_**\n\n在终端继续运行\n\n```bash\nvirtualenv --system-site-packages -p python3 ~/virtual-envs/tensorflow-gpu\n```\n\n即在 **~/virtual-envs** 文件夹里创建了名为 **_tensorflow-gpu_** 的虚拟环境，再输入以下命令**激活环境**\n\n```bash\n$ source ~/virtual-envs/tensorflow-gpu/bin/activate\n```\n\n此时终端会变成如下模样\n\n```bash\n(tensorflow-gpu) username@devices:~$\n```\n\n即为正常。\n\n上述命令解释\n\n|       name       |      意义      |\n| :--------------: | :------------: |\n|     username     |     用户名     |\n|     devices      |     主机名     |\n|        ~         | 当前用户主目录 |\n|        $         |    普通用户    |\n| (tensorflow-gpu) |  系统指定环境  |\n\n>为什么要激活环境？\n>\n>因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；而且virtualenv可用于创建独立的Python环境，多个Python相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。\n\n若退出当前环境，有命令:\n\n```bash\ndeactivate\n```\n\n* **_安装tensorflow-gpu 1.6.0_**\n\n在**激活**的环境中输入\n\n```bash\npip install tensorflow-gpu==1.6.0\n```\n\n安装过程中，有`yes`输入 **_yes_** ,等待tensorflow 1.6.0的GPU版本安装完成。\n\n若想安装**CPU版本**，无需CUDA和cuDNN，激活虚拟环境后，输入`pip install tensorflow==1.6.0`即可。\n\n是否正确安装，请参照章节 **_测试tensorflow-gpu版本的正确性_** 里的方法验证。\n\n### Anaconda安装tensorflow-gpu\n\n* **_安装conda_**\n\n管理员已经在各位用户的主目录里备份了文件夹`backup`，里面有***Anaconda***安装包，在终端利用SSH登录到服务器系统(CentOS 7.6)，运行\n\n```bash\ncd ~/backup\nls\n```\n\n查看是否有*Anaconda3-5.2.0-Linux-x86_64.sh*文件，这是 **_python3.6_** 版本的Anaconda安装包，继续运行\n\n```bash\nbash Anaconda3-5.2.0-Linux-x86_64.sh\n```\n\n按`Enter`键继续，出现以下的界面\n\n![Anaconda_1](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/Anaconda_1.png)\n此时按一下`space`(空格)键，有如下提示，在`[no] >>>` 后面输入`yes`，如下所示：\n\n```bash\nDo you accept the license terms? [yes|no]\n[no] >>> yes\n```\n\n紧接着有提示\n\n```bash\nAnaconda3 will now be installed into this location:\n/home/test/anaconda3\n\n  - Press ENTER to confirm the location\n  - Press CTRL-C to abort the installation\n  - Or specify a different location below\n\n[/home/test/anaconda3] >>>\n```\n\n按下`Enter`键即可开始安装，安装完成后，提示如下\n\n```bash\ninstallation finished.\nDo you wish the installer to prepend the Anaconda3 install location\nto PATH in your /home/test/.bashrc ? [yes|no]\n[no] >>> yes\n```\n\n在`[no] >>>` 后面输入`yes`后出现Anaconda安装成功的消息，此时出现*是否安装Microsoft VSCode*的消息，输入`no`即可。\n\npython3.6版本的Anaconda安装完成，此时在终端输入`conda`，会提示`conda:未找到命令`，不要慌，反手输入\n\n```bash\nsource ~/.bashrc\n```\n\n刷新环境，再输入`conda`即有消息提示，表明conda安装成功。\n\n* **_创建虚拟环境——tensorflow-gpu_**\n  在终端输入\n\n```bash\nconda create -n tensorflow-gpu pip python=3.6\n```\n\n在 **~/anaconda/env** 文件夹下创建名为 **_tensorflow-gpu_** 的虚拟环境\n\n激活环境\n\n```bash\nsource activate tensorflow-gpu\n```\n\n若要退出当前环境，输入\n\n```bash\nsource deactivate tensorflow-gpu\n```\n\n* **_安装tensorflow-gpu 1.6.0_**\n\n在激活的环境中输入\n\n```bash\npip install tensorflow-gpu==1.6.0\n```\n\n是否正确安装，请参照章节 **_测试tensorflow-gpu版本的正确性_** 里的方法验证。\n\n### 测试tensorflow-gpu版本的正确性\n\n在激活的环境中，输入`python`，进入到python3.6环境中，依次输入命令\n\n```python\n>>> import tensorflow as tf\n>>> tf.test.is_gpu_available()\n```\n\n若输出类似的内容，且最后一行为`True`，则表示tensorflow-gpu 1.6 版本安装成功！\n\n```python\n2018-11-10 01:32:45.539907: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n2018-11-10 01:32:46.425789: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:\nname: GeForce GTX 1080 major: 6 minor: 1 memoryClockRate(GHz): 1.7715\npciBusID: 0000:04:00.0\ntotalMemory: 7.93GiB freeMemory: 7.81GiB\n2018-11-10 01:32:46.425831: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\n2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)\nTrue\n```\n\n查看tensorflow的版本的命令为\n\n```python\n>>> import tensorflow as tf\n>>> print(tf.__version__)\n```\n\n注意，`__`为两个`_`组合而成。\n\n## 问题汇总\n\n#### 情况1\n\n- **错误**——激活环境后，导入`import tensorflow as tf`包后，出现错误\n\n  > ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量`LD_LIBRARY_PATH`未能配置正确\n\n- **解决**——`libcublas.so.9.0`文件在`/usr/local/cuda/lib64`路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行\n\n  ```bash\n  sudo ldconfig /usr/local/cuda/lib64\n  ```\n\n  问题可能会被解决，如果出现了**情况2**，请看解答。\n\n#### 情况2\n\n- **错误**——运行**情况1**里的`sudo ldconfig /usr/local/cuda/lib64`后，出现错误\n\n  > libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——符号链接出错\n\n- **解决**——创建软链接，将`libcudnn.so.7.0.5`软连接到`libcudnn.so.7`，如果`libcudnn.so.7.0.5`丢失，`libcudnn.so.7`将失效，`-s`表示建立软连接，`-f`表示强制执行。\n\n  ```bash\n  sudo ln -sf /usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/local/cuda-9.0/lib64/libcudnn.so.7\n  ```\n\n（未完待续，随时更新）\n\n## 在服务器上利用GPU跑程序的简化步骤\n\n1. 利用FileZilla软件登录远程服务器上传所需程序文件\n2. 在终端利用SSH登录远程服务器\n3. 按照下面的命令进行操作，建议使用**tmux终端复用神器**，第2、3、4步不是必须的，但是强烈推荐使用！\n\n```bash\nssh username@IPaddress -p 22      # 登录服务器\ntmux ls                           # 查看终端会话列表，若没有，新建一个\n                                  # 会话窗口 tmux new -s YourSeeName，保证程序在后台运行\ntmux a -t YourSeeName             # 进入你指定的会话窗口\nsource activate tensorflow-gpu    # 在会话窗口中激活tensorflow-gpu环境\ncd xxx/yyy                        # 程序文件所在路径\nls                                # 查看文件\npython abc.py                     # 运行程序\n```\n\n\n- [x] 1. 实验室服务器用户名清单\n- [x] 2. 安装ssh和FileZilla\n- [x] 3. 服务器环境检查\n- [x] 4. 安装tensorflow的GPU版本\n- [x] 5. 在服务器上利用GPU跑程序的简化步骤","source":"_posts/Lab532服务器环境.md","raw":"---\ntitle: Lab532服务器环境(CentOS 7.6)须知\nthumbnail: https://pic.downk.cc/item/5e7f804a504f4bcb04b58112.png\ndata: 2018-10-07 00:00:00\nauthor: kangzhiheng\ncategories: Linux\ntoc: true\ntags:\n  - Lab\n---\n这篇文章的目的是针对Lab532不了解实验室服务器情况的同学，进行一些必要的说明。\n\n<!-- more -->\n\n### Contents\n\n* [安装SSH和FileZilla](#安装ssh和filezilla)\n  * [SSH](#ssh)\n    * [SSH安装](#ssh安装)\n    * [SSH登录](#ssh登录)\n    * [修改密码](#修改密码)\n  * [FileZilla](#filezilla)\n    * [安装FileZilla](#安装filezilla)\n    * [登录服务器](#登录服务器)\n    * [文件传输](#文件传输)\n    * [总结](#总结)\n* [服务器环境检查](#服务器环境检查)\n* [安装tensorflow的GPU版本](#安装tensorflow的gpu版本)\n  * [硬件支持](#硬件支持)\n  * [系统要求](#系统要求)\n  * [软件需求](#软件需求)\n  * [安装tensorflow-gpu](#安装tensorflow-gpu)\n    * [virtualenv安装tensorflow-gpu](#virtualenv安装tensorflow-gpu)\n    * [Anaconda安装tensorflow-gpu](#anaconda安装tensorflow-gpu)\n    * [测试tensorflow-gpu版本的正确性](#测试tensorflow-gpu版本的正确性)\n* [问题汇总](#问题汇总)\n* [在服务器上利用GPU跑程序的简化步骤](#在服务器上利用gpu跑程序的简化步骤)\n\n## 安装SSH和FileZilla\n\n- **SSH**是用来**登录**远程服务器的安全协议；\n- **FileZilla**是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的**文件传输**)\n\nSSH和FileZilla都安装在**本地计算机系统**中\n\n### SSH\n\n> [SSH](https://en.wikipedia.org/wiki/Secure_Shell)(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。\n\n### SSH安装 \n\n在**本地计算机系统**中，`UNIX`、`Window`以及`Mac`系统都可运行SSH,安装方法如下：\n\n - **_CentOS 7_**\n\n需要普通管理员权限(sudo)，用快捷键`ctrl`+`alt`+`t`打开终端Terminal窗口，运行：\n\n```python\nsudo yum install openssh-server\n```\n\n然后回车,输入`y`，即可安装完成。\n\n- **_Windows10_**\n\n下载[openssh for windows](https://www.mls-software.com/files/setupssh-7.9p1-1.exe)，进行默认安装即可。\n\n- **_Mac_**\n\n由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动`sshd服务`：\n\n```bash\nsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist\n```\n\n输入Mac密码后即可开启。\n\n### SSH登录\n\n在任一平台上打开终端(Windows上推荐[**Xshell**]( https://www.netsarang.com/zh/xshell-download/ )、[**FinalShell**]( http://www.hostbuf.com/t/988.html )，Linux系统和Mac直接打开终端即可)，输入命令\n\n```bash\nssh username@IPaddress -p PORT\n```\n\n其中，\n`username`为服务器的用户名\n`IPaddress`为服务器的IP地址\n`PORT`为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员\n\n输入密码后即可进入自己账户的主目录（普通用户，无root权限）\n\n### 修改密码\n\n登录到服务器之后，修改原始密码保证账户安全，直接输入\n\n```bash\npasswd\n```\n\n`username`为您在服务器上的用户名，根据提示修改新的密码。\n\n至此，您已经安全登录到服务器上。\n\n### FileZilla\n\n> FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。\n\n![FileZilla](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_Client.png)\n\n以windows 10为例，下载[FileZilla](https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe)，选择安装位置，正常安装即可。\n\n### 登录服务器\n\n打开FileZilla软件，\n\n* 1. 点击\"**文件**\"——\"**站点管理器**\"\n\n* 2. 点击\"**新站点**\"，在\"**我的站点**\"下重命名，此处设为“Lab532”\n\n* 3. 继停留在\"**站点管理器**\"界面，在\"**常规**\"选项卡中，设置如下：\n\n  * 主机：**IPaddress**\n  * 端口：**22**或者**8888**\n  * 协议：**SFTP - SSH File transfer Protocol**\n  * 登录类型：\n    - 1）若选\"**正常**\"\n      - 用户名：username\n      - 密码：password\n    - 2）若选\"**询问密码**\"，只能填写用户名：username，然后点击右下角的\"**连接**\"，再输入密码。\n\n* 4. 之后一直ok即可。\n\n### 文件传输  \n\n以window 10为例，利用FileZilla登录到服务器后，可以看到左边是**本地站点**，右边是**远程站点**(服务器上的目录)，如下图所示，直接将本地文件`test.py`用鼠标拖拽到服务器上的指定目录即可（**上传过程**），这个过程是可逆的（**下载过程**），非常方便。\n\n![FileZilla_file](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_file.png)\n\n### 总结\n\n利用**FileZilla**软件配合**SSH**协议，即可完成文件传输及程序运行等必要工作。\n\n\n## 服务器环境检查\n\n登录到服务器后，检查是否可以检测到GPU1080信息(管理员已全局安装)，打开终端，输入命令\n\n```bash\nnvidia-smi\n```\n\n若输出以下信息，即证明显卡驱动已安装。\n\n![nvidia](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/nvidia.png)\n\n若有错误提示，请及时联系管理员**adoredee**(kangzhiheng@sjtu.edu.cn)\n\n**实验室GPU信息如下：**\n\n|      规格      |        核心参数        |\n| :------------: | :--------------------: |\n|    显卡核心    | NVIDIA GeForce GTX1080 |\n|    显存频率    |        10010MHz        |\n|    显存大小    |           8G           |\n|    显存类型    |         GDDR5X         |\n|    显存位宽    |         256位          |\n|    总线类型    |     PCI-E 3.0 x 16     |\n| 数字最高分辨率 |      7680 x 4320       |\n|      SLI       |          支持          |\n|   散热器类型   |          风冷          |\n|    额定电源    |          500W          |\n|  供电外接需求  |        8pin x 1        |\n| OpneGL支持版本 |       OpenGL 4.5       |\n\n## 安装tensorflow的GPU版本\n\n配置TensorFlow GPU环境需要各种库和包支持，为了简化和避免库之间的冲突，建议使用[virtualenv](https://tensorflow.google.cn/install/pip)、[pip](https://tensorflow.google.cn/install/pip)或者[Docker](https://tensorflow.google.cn/install/docker)安装，本篇教程介绍[virtualenv](https://tensorflow.google.cn/install/pip)和[pip](https://tensorflow.google.cn/install/pip)两种方法安装`tensorflow-gpu-1.6.0`版本。\n\n### 硬件支持\n\n* 具有CUDA®计算能力3.5或更高版本的NVIDIA®GPU卡,请参阅支持[CUDA的GPU卡列表](https://developer.nvidia.com/cuda-gpus)。\n\n### 系统要求\n\n* CentOS 7.x 更高版本(64-bit)\n* macOS 10.12.6 (Sierra)更高版本(64-bit)(*不支持 tensorflow GPU版本*)\n* Windows 7或更高版本 (64-bit)(只支持Python3)\n* Raspbian 9.0或更高版本\n\n### 软件需求\n\n根据[官网](https://tensorflow.google.cn/install/gpu) 以及我个人经验，**_Tensorflow1.6.0的GPU版本_** 要求**在系统上安装以下NVIDIA®软件**\n\n- [NVIDIA® GPU驱动](https://www.nvidia.com/drivers) —— CUDA 9.0要求NVIDIA驱动384.x或者更高版本\n- [CUDA® Toolkit](https://developer.nvidia.com/cuda-zone) —— TensorFlow1.6.0支持CUDA 9.0.\n- [cuDNN](https://developer.nvidia.com/cudnn) —— 大于等于cuDNN 7.0，这里选择cuDNN 7.0.5\n\n\n在服务器上管理员已经提前安装好了NVIDIA驱动、CUDA及cuDNN，具体信息如下：\n\n|      所需环境       | 版本信息  |    备注    |\n| :-----------------: | :-------: | :--------: |\n|     NVIDIA驱动      |  390.77   |  *已安装*  |\n|        CUDA         |    9.0    |  *已安装*  |\n|        cuDNN        |   7.0.5   |  *已安装*  |\n|       gcc/g++       |   4.8.5   |  *已降级*  |\n| Tensorflow(GPU版本) | 建议`1.6` | **未安装** |\n\n### 安装tensorflow-gpu\n\n下面将介绍两种方法安装tensorflow-gpu：\n\n1. [virtualenv](https://tensorflow.google.cn/install/pip)\n2. [pip](https://tensorflow.google.cn/install/pip)\n\n### virtualenv安装tensorflow-gpu\n\n* **_安装Python包管理工具——pip_**\n\n在终端利用SSH登录到服务器系统(CentOS 7.6)，由于**普通用户**无法使用`sudo`，故不能直接使用`sudo yum install virtualenv`安装virtualenv虚拟环境，故使用以下方法，**先安装pip**，再安装**virtualenv**，在终端中运行\n\n```bash\nwget https://bootstrap.pypa.io/get-pip.py\npython3 get-pip.py --user\n```\n\n**注意**:参数`--user`一定要记得使用，否则会提示权限不足。\n\n安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量\n\n```bash\nexport PATH=~/.local/bin:$PATH\n```\n\n此时已在非root用户环境中安装好通用的Python包管理工具`pip`，故利用pip安装**virtualenv**\n\n```bash\npip3 install -U virtualenv --user\n```\n\n* **_创建虚拟环境——tensorflow-gpu_**\n\n在终端继续运行\n\n```bash\nvirtualenv --system-site-packages -p python3 ~/virtual-envs/tensorflow-gpu\n```\n\n即在 **~/virtual-envs** 文件夹里创建了名为 **_tensorflow-gpu_** 的虚拟环境，再输入以下命令**激活环境**\n\n```bash\n$ source ~/virtual-envs/tensorflow-gpu/bin/activate\n```\n\n此时终端会变成如下模样\n\n```bash\n(tensorflow-gpu) username@devices:~$\n```\n\n即为正常。\n\n上述命令解释\n\n|       name       |      意义      |\n| :--------------: | :------------: |\n|     username     |     用户名     |\n|     devices      |     主机名     |\n|        ~         | 当前用户主目录 |\n|        $         |    普通用户    |\n| (tensorflow-gpu) |  系统指定环境  |\n\n>为什么要激活环境？\n>\n>因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；而且virtualenv可用于创建独立的Python环境，多个Python相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。\n\n若退出当前环境，有命令:\n\n```bash\ndeactivate\n```\n\n* **_安装tensorflow-gpu 1.6.0_**\n\n在**激活**的环境中输入\n\n```bash\npip install tensorflow-gpu==1.6.0\n```\n\n安装过程中，有`yes`输入 **_yes_** ,等待tensorflow 1.6.0的GPU版本安装完成。\n\n若想安装**CPU版本**，无需CUDA和cuDNN，激活虚拟环境后，输入`pip install tensorflow==1.6.0`即可。\n\n是否正确安装，请参照章节 **_测试tensorflow-gpu版本的正确性_** 里的方法验证。\n\n### Anaconda安装tensorflow-gpu\n\n* **_安装conda_**\n\n管理员已经在各位用户的主目录里备份了文件夹`backup`，里面有***Anaconda***安装包，在终端利用SSH登录到服务器系统(CentOS 7.6)，运行\n\n```bash\ncd ~/backup\nls\n```\n\n查看是否有*Anaconda3-5.2.0-Linux-x86_64.sh*文件，这是 **_python3.6_** 版本的Anaconda安装包，继续运行\n\n```bash\nbash Anaconda3-5.2.0-Linux-x86_64.sh\n```\n\n按`Enter`键继续，出现以下的界面\n\n![Anaconda_1](https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/Anaconda_1.png)\n此时按一下`space`(空格)键，有如下提示，在`[no] >>>` 后面输入`yes`，如下所示：\n\n```bash\nDo you accept the license terms? [yes|no]\n[no] >>> yes\n```\n\n紧接着有提示\n\n```bash\nAnaconda3 will now be installed into this location:\n/home/test/anaconda3\n\n  - Press ENTER to confirm the location\n  - Press CTRL-C to abort the installation\n  - Or specify a different location below\n\n[/home/test/anaconda3] >>>\n```\n\n按下`Enter`键即可开始安装，安装完成后，提示如下\n\n```bash\ninstallation finished.\nDo you wish the installer to prepend the Anaconda3 install location\nto PATH in your /home/test/.bashrc ? [yes|no]\n[no] >>> yes\n```\n\n在`[no] >>>` 后面输入`yes`后出现Anaconda安装成功的消息，此时出现*是否安装Microsoft VSCode*的消息，输入`no`即可。\n\npython3.6版本的Anaconda安装完成，此时在终端输入`conda`，会提示`conda:未找到命令`，不要慌，反手输入\n\n```bash\nsource ~/.bashrc\n```\n\n刷新环境，再输入`conda`即有消息提示，表明conda安装成功。\n\n* **_创建虚拟环境——tensorflow-gpu_**\n  在终端输入\n\n```bash\nconda create -n tensorflow-gpu pip python=3.6\n```\n\n在 **~/anaconda/env** 文件夹下创建名为 **_tensorflow-gpu_** 的虚拟环境\n\n激活环境\n\n```bash\nsource activate tensorflow-gpu\n```\n\n若要退出当前环境，输入\n\n```bash\nsource deactivate tensorflow-gpu\n```\n\n* **_安装tensorflow-gpu 1.6.0_**\n\n在激活的环境中输入\n\n```bash\npip install tensorflow-gpu==1.6.0\n```\n\n是否正确安装，请参照章节 **_测试tensorflow-gpu版本的正确性_** 里的方法验证。\n\n### 测试tensorflow-gpu版本的正确性\n\n在激活的环境中，输入`python`，进入到python3.6环境中，依次输入命令\n\n```python\n>>> import tensorflow as tf\n>>> tf.test.is_gpu_available()\n```\n\n若输出类似的内容，且最后一行为`True`，则表示tensorflow-gpu 1.6 版本安装成功！\n\n```python\n2018-11-10 01:32:45.539907: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n2018-11-10 01:32:46.425789: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:\nname: GeForce GTX 1080 major: 6 minor: 1 memoryClockRate(GHz): 1.7715\npciBusID: 0000:04:00.0\ntotalMemory: 7.93GiB freeMemory: 7.81GiB\n2018-11-10 01:32:46.425831: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\n2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)\nTrue\n```\n\n查看tensorflow的版本的命令为\n\n```python\n>>> import tensorflow as tf\n>>> print(tf.__version__)\n```\n\n注意，`__`为两个`_`组合而成。\n\n## 问题汇总\n\n#### 情况1\n\n- **错误**——激活环境后，导入`import tensorflow as tf`包后，出现错误\n\n  > ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量`LD_LIBRARY_PATH`未能配置正确\n\n- **解决**——`libcublas.so.9.0`文件在`/usr/local/cuda/lib64`路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行\n\n  ```bash\n  sudo ldconfig /usr/local/cuda/lib64\n  ```\n\n  问题可能会被解决，如果出现了**情况2**，请看解答。\n\n#### 情况2\n\n- **错误**——运行**情况1**里的`sudo ldconfig /usr/local/cuda/lib64`后，出现错误\n\n  > libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——符号链接出错\n\n- **解决**——创建软链接，将`libcudnn.so.7.0.5`软连接到`libcudnn.so.7`，如果`libcudnn.so.7.0.5`丢失，`libcudnn.so.7`将失效，`-s`表示建立软连接，`-f`表示强制执行。\n\n  ```bash\n  sudo ln -sf /usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/local/cuda-9.0/lib64/libcudnn.so.7\n  ```\n\n（未完待续，随时更新）\n\n## 在服务器上利用GPU跑程序的简化步骤\n\n1. 利用FileZilla软件登录远程服务器上传所需程序文件\n2. 在终端利用SSH登录远程服务器\n3. 按照下面的命令进行操作，建议使用**tmux终端复用神器**，第2、3、4步不是必须的，但是强烈推荐使用！\n\n```bash\nssh username@IPaddress -p 22      # 登录服务器\ntmux ls                           # 查看终端会话列表，若没有，新建一个\n                                  # 会话窗口 tmux new -s YourSeeName，保证程序在后台运行\ntmux a -t YourSeeName             # 进入你指定的会话窗口\nsource activate tensorflow-gpu    # 在会话窗口中激活tensorflow-gpu环境\ncd xxx/yyy                        # 程序文件所在路径\nls                                # 查看文件\npython abc.py                     # 运行程序\n```\n\n\n- [x] 1. 实验室服务器用户名清单\n- [x] 2. 安装ssh和FileZilla\n- [x] 3. 服务器环境检查\n- [x] 4. 安装tensorflow的GPU版本\n- [x] 5. 在服务器上利用GPU跑程序的简化步骤","slug":"Lab532服务器环境","published":1,"date":"2018-11-28T08:33:07.084Z","updated":"2020-04-16T02:53:55.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgv1001nmgvz1p707u6n","content":"<p>这篇文章的目的是针对Lab532不了解实验室服务器情况的同学，进行一些必要的说明。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h3><ul>\n<li><a href=\"#安装ssh和filezilla\">安装SSH和FileZilla</a><ul>\n<li><a href=\"#ssh\">SSH</a><ul>\n<li><a href=\"#ssh安装\">SSH安装</a></li>\n<li><a href=\"#ssh登录\">SSH登录</a></li>\n<li><a href=\"#修改密码\">修改密码</a></li>\n</ul>\n</li>\n<li><a href=\"#filezilla\">FileZilla</a><ul>\n<li><a href=\"#安装filezilla\">安装FileZilla</a></li>\n<li><a href=\"#登录服务器\">登录服务器</a></li>\n<li><a href=\"#文件传输\">文件传输</a></li>\n<li><a href=\"#总结\">总结</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#服务器环境检查\">服务器环境检查</a></li>\n<li><a href=\"#安装tensorflow的gpu版本\">安装tensorflow的GPU版本</a><ul>\n<li><a href=\"#硬件支持\">硬件支持</a></li>\n<li><a href=\"#系统要求\">系统要求</a></li>\n<li><a href=\"#软件需求\">软件需求</a></li>\n<li><a href=\"#安装tensorflow-gpu\">安装tensorflow-gpu</a><ul>\n<li><a href=\"#virtualenv安装tensorflow-gpu\">virtualenv安装tensorflow-gpu</a></li>\n<li><a href=\"#anaconda安装tensorflow-gpu\">Anaconda安装tensorflow-gpu</a></li>\n<li><a href=\"#测试tensorflow-gpu版本的正确性\">测试tensorflow-gpu版本的正确性</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#问题汇总\">问题汇总</a></li>\n<li><a href=\"#在服务器上利用gpu跑程序的简化步骤\">在服务器上利用GPU跑程序的简化步骤</a></li>\n</ul>\n<h2 id=\"安装SSH和FileZilla\"><a href=\"#安装SSH和FileZilla\" class=\"headerlink\" title=\"安装SSH和FileZilla\"></a>安装SSH和FileZilla</h2><ul>\n<li><strong>SSH</strong>是用来<strong>登录</strong>远程服务器的安全协议；</li>\n<li><strong>FileZilla</strong>是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的<strong>文件传输</strong>)</li>\n</ul>\n<p>SSH和FileZilla都安装在<strong>本地计算机系统</strong>中</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">SSH</a>(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>\n</blockquote>\n<h3 id=\"SSH安装\"><a href=\"#SSH安装\" class=\"headerlink\" title=\"SSH安装\"></a>SSH安装</h3><p>在<strong>本地计算机系统</strong>中，<code>UNIX</code>、<code>Window</code>以及<code>Mac</code>系统都可运行SSH,安装方法如下：</p>\n<ul>\n<li><strong><em>CentOS 7</em></strong></li>\n</ul>\n<p>需要普通管理员权限(sudo)，用快捷键<code>ctrl</code>+<code>alt</code>+<code>t</code>打开终端Terminal窗口，运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>然后回车,输入<code>y</code>，即可安装完成。</p>\n<ul>\n<li><strong><em>Windows10</em></strong></li>\n</ul>\n<p>下载<a href=\"https://www.mls-software.com/files/setupssh-7.9p1-1.exe\">openssh for windows</a>，进行默认安装即可。</p>\n<ul>\n<li><strong><em>Mac</em></strong></li>\n</ul>\n<p>由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动<code>sshd服务</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>\n\n<p>输入Mac密码后即可开启。</p>\n<h3 id=\"SSH登录\"><a href=\"#SSH登录\" class=\"headerlink\" title=\"SSH登录\"></a>SSH登录</h3><p>在任一平台上打开终端(Windows上推荐<a href=\"https://www.netsarang.com/zh/xshell-download/\"><strong>Xshell</strong></a>、<a href=\"http://www.hostbuf.com/t/988.html\"><strong>FinalShell</strong></a>，Linux系统和Mac直接打开终端即可)，输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p PORT</span><br></pre></td></tr></table></figure>\n\n<p>其中，<br><code>username</code>为服务器的用户名<br><code>IPaddress</code>为服务器的IP地址<br><code>PORT</code>为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员</p>\n<p>输入密码后即可进入自己账户的主目录（普通用户，无root权限）</p>\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><p>登录到服务器之后，修改原始密码保证账户安全，直接输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p><code>username</code>为您在服务器上的用户名，根据提示修改新的密码。</p>\n<p>至此，您已经安全登录到服务器上。</p>\n<h3 id=\"FileZilla\"><a href=\"#FileZilla\" class=\"headerlink\" title=\"FileZilla\"></a>FileZilla</h3><blockquote>\n<p>FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。</p>\n</blockquote>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_Client.png\" alt=\"FileZilla\"></p>\n<p>以windows 10为例，下载<a href=\"https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe\">FileZilla</a>，选择安装位置，正常安装即可。</p>\n<h3 id=\"登录服务器\"><a href=\"#登录服务器\" class=\"headerlink\" title=\"登录服务器\"></a>登录服务器</h3><p>打开FileZilla软件，</p>\n<ul>\n<li><ol>\n<li>点击”<strong>文件</strong>“——“<strong>站点管理器</strong>“</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>点击”<strong>新站点</strong>“，在”<strong>我的站点</strong>“下重命名，此处设为“Lab532”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>继停留在”<strong>站点管理器</strong>“界面，在”<strong>常规</strong>“选项卡中，设置如下：</li>\n</ol>\n<ul>\n<li>主机：<strong>IPaddress</strong></li>\n<li>端口：<strong>22</strong>或者<strong>8888</strong></li>\n<li>协议：<strong>SFTP - SSH File transfer Protocol</strong></li>\n<li>登录类型：<ul>\n<li>1）若选”<strong>正常</strong>“<ul>\n<li>用户名：username</li>\n<li>密码：password</li>\n</ul>\n</li>\n<li>2）若选”<strong>询问密码</strong>“，只能填写用户名：username，然后点击右下角的”<strong>连接</strong>“，再输入密码。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"4\">\n<li>之后一直ok即可。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h3><p>以window 10为例，利用FileZilla登录到服务器后，可以看到左边是<strong>本地站点</strong>，右边是<strong>远程站点</strong>(服务器上的目录)，如下图所示，直接将本地文件<code>test.py</code>用鼠标拖拽到服务器上的指定目录即可（<strong>上传过程</strong>），这个过程是可逆的（<strong>下载过程</strong>），非常方便。</p>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_file.png\" alt=\"FileZilla_file\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>利用<strong>FileZilla</strong>软件配合<strong>SSH</strong>协议，即可完成文件传输及程序运行等必要工作。</p>\n<h2 id=\"服务器环境检查\"><a href=\"#服务器环境检查\" class=\"headerlink\" title=\"服务器环境检查\"></a>服务器环境检查</h2><p>登录到服务器后，检查是否可以检测到GPU1080信息(管理员已全局安装)，打开终端，输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>若输出以下信息，即证明显卡驱动已安装。</p>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/nvidia.png\" alt=\"nvidia\"></p>\n<p>若有错误提示，请及时联系管理员<strong>adoredee</strong>(kangzhiheng@sjtu.edu.cn)</p>\n<p><strong>实验室GPU信息如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">规格</th>\n<th align=\"center\">核心参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">显卡核心</td>\n<td align=\"center\">NVIDIA GeForce GTX1080</td>\n</tr>\n<tr>\n<td align=\"center\">显存频率</td>\n<td align=\"center\">10010MHz</td>\n</tr>\n<tr>\n<td align=\"center\">显存大小</td>\n<td align=\"center\">8G</td>\n</tr>\n<tr>\n<td align=\"center\">显存类型</td>\n<td align=\"center\">GDDR5X</td>\n</tr>\n<tr>\n<td align=\"center\">显存位宽</td>\n<td align=\"center\">256位</td>\n</tr>\n<tr>\n<td align=\"center\">总线类型</td>\n<td align=\"center\">PCI-E 3.0 x 16</td>\n</tr>\n<tr>\n<td align=\"center\">数字最高分辨率</td>\n<td align=\"center\">7680 x 4320</td>\n</tr>\n<tr>\n<td align=\"center\">SLI</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">散热器类型</td>\n<td align=\"center\">风冷</td>\n</tr>\n<tr>\n<td align=\"center\">额定电源</td>\n<td align=\"center\">500W</td>\n</tr>\n<tr>\n<td align=\"center\">供电外接需求</td>\n<td align=\"center\">8pin x 1</td>\n</tr>\n<tr>\n<td align=\"center\">OpneGL支持版本</td>\n<td align=\"center\">OpenGL 4.5</td>\n</tr>\n</tbody></table>\n<h2 id=\"安装tensorflow的GPU版本\"><a href=\"#安装tensorflow的GPU版本\" class=\"headerlink\" title=\"安装tensorflow的GPU版本\"></a>安装tensorflow的GPU版本</h2><p>配置TensorFlow GPU环境需要各种库和包支持，为了简化和避免库之间的冲突，建议使用<a href=\"https://tensorflow.google.cn/install/pip\">virtualenv</a>、<a href=\"https://tensorflow.google.cn/install/pip\">pip</a>或者<a href=\"https://tensorflow.google.cn/install/docker\">Docker</a>安装，本篇教程介绍<a href=\"https://tensorflow.google.cn/install/pip\">virtualenv</a>和<a href=\"https://tensorflow.google.cn/install/pip\">pip</a>两种方法安装<code>tensorflow-gpu-1.6.0</code>版本。</p>\n<h3 id=\"硬件支持\"><a href=\"#硬件支持\" class=\"headerlink\" title=\"硬件支持\"></a>硬件支持</h3><ul>\n<li>具有CUDA®计算能力3.5或更高版本的NVIDIA®GPU卡,请参阅支持<a href=\"https://developer.nvidia.com/cuda-gpus\">CUDA的GPU卡列表</a>。</li>\n</ul>\n<h3 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h3><ul>\n<li>CentOS 7.x 更高版本(64-bit)</li>\n<li>macOS 10.12.6 (Sierra)更高版本(64-bit)(<em>不支持 tensorflow GPU版本</em>)</li>\n<li>Windows 7或更高版本 (64-bit)(只支持Python3)</li>\n<li>Raspbian 9.0或更高版本</li>\n</ul>\n<h3 id=\"软件需求\"><a href=\"#软件需求\" class=\"headerlink\" title=\"软件需求\"></a>软件需求</h3><p>根据<a href=\"https://tensorflow.google.cn/install/gpu\">官网</a> 以及我个人经验，<strong><em>Tensorflow1.6.0的GPU版本</em></strong> 要求<strong>在系统上安装以下NVIDIA®软件</strong></p>\n<ul>\n<li><a href=\"https://www.nvidia.com/drivers\">NVIDIA® GPU驱动</a> —— CUDA 9.0要求NVIDIA驱动384.x或者更高版本</li>\n<li><a href=\"https://developer.nvidia.com/cuda-zone\">CUDA® Toolkit</a> —— TensorFlow1.6.0支持CUDA 9.0.</li>\n<li><a href=\"https://developer.nvidia.com/cudnn\">cuDNN</a> —— 大于等于cuDNN 7.0，这里选择cuDNN 7.0.5</li>\n</ul>\n<p>在服务器上管理员已经提前安装好了NVIDIA驱动、CUDA及cuDNN，具体信息如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">所需环境</th>\n<th align=\"center\">版本信息</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">NVIDIA驱动</td>\n<td align=\"center\">390.77</td>\n<td align=\"center\"><em>已安装</em></td>\n</tr>\n<tr>\n<td align=\"center\">CUDA</td>\n<td align=\"center\">9.0</td>\n<td align=\"center\"><em>已安装</em></td>\n</tr>\n<tr>\n<td align=\"center\">cuDNN</td>\n<td align=\"center\">7.0.5</td>\n<td align=\"center\"><em>已安装</em></td>\n</tr>\n<tr>\n<td align=\"center\">gcc/g++</td>\n<td align=\"center\">4.8.5</td>\n<td align=\"center\"><em>已降级</em></td>\n</tr>\n<tr>\n<td align=\"center\">Tensorflow(GPU版本)</td>\n<td align=\"center\">建议<code>1.6</code></td>\n<td align=\"center\"><strong>未安装</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"安装tensorflow-gpu\"><a href=\"#安装tensorflow-gpu\" class=\"headerlink\" title=\"安装tensorflow-gpu\"></a>安装tensorflow-gpu</h3><p>下面将介绍两种方法安装tensorflow-gpu：</p>\n<ol>\n<li><a href=\"https://tensorflow.google.cn/install/pip\">virtualenv</a></li>\n<li><a href=\"https://tensorflow.google.cn/install/pip\">pip</a></li>\n</ol>\n<h3 id=\"virtualenv安装tensorflow-gpu\"><a href=\"#virtualenv安装tensorflow-gpu\" class=\"headerlink\" title=\"virtualenv安装tensorflow-gpu\"></a>virtualenv安装tensorflow-gpu</h3><ul>\n<li><strong><em>安装Python包管理工具——pip</em></strong></li>\n</ul>\n<p>在终端利用SSH登录到服务器系统(CentOS 7.6)，由于<strong>普通用户</strong>无法使用<code>sudo</code>，故不能直接使用<code>sudo yum install virtualenv</code>安装virtualenv虚拟环境，故使用以下方法，<strong>先安装pip</strong>，再安装<strong>virtualenv</strong>，在终端中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python3 get-pip.py --user</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>:参数<code>--user</code>一定要记得使用，否则会提示权限不足。</p>\n<p>安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=~/.<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>此时已在非root用户环境中安装好通用的Python包管理工具<code>pip</code>，故利用pip安装<strong>virtualenv</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -U virtualenv --user</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><em>创建虚拟环境——tensorflow-gpu</em></strong></li>\n</ul>\n<p>在终端继续运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --system-site-packages -p python3 ~/virtual-envs/tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<p>即在 <strong>~/virtual-envs</strong> 文件夹里创建了名为 <strong><em>tensorflow-gpu</em></strong> 的虚拟环境，再输入以下命令<strong>激活环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/virtual-envs/tensorflow-gpu/bin/activate</span><br></pre></td></tr></table></figure>\n\n<p>此时终端会变成如下模样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(tensorflow-gpu) username@devices:~$</span><br></pre></td></tr></table></figure>\n\n<p>即为正常。</p>\n<p>上述命令解释</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">username</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">devices</td>\n<td align=\"center\">主机名</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">当前用户主目录</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">普通用户</td>\n</tr>\n<tr>\n<td align=\"center\">(tensorflow-gpu)</td>\n<td align=\"center\">系统指定环境</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>为什么要激活环境？</p>\n<p>因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；而且virtualenv可用于创建独立的Python环境，多个Python相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。</p>\n</blockquote>\n<p>若退出当前环境，有命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><em>安装tensorflow-gpu 1.6.0</em></strong></li>\n</ul>\n<p>在<strong>激活</strong>的环境中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>安装过程中，有<code>yes</code>输入 <strong><em>yes</em></strong> ,等待tensorflow 1.6.0的GPU版本安装完成。</p>\n<p>若想安装<strong>CPU版本</strong>，无需CUDA和cuDNN，激活虚拟环境后，输入<code>pip install tensorflow==1.6.0</code>即可。</p>\n<p>是否正确安装，请参照章节 <strong><em>测试tensorflow-gpu版本的正确性</em></strong> 里的方法验证。</p>\n<h3 id=\"Anaconda安装tensorflow-gpu\"><a href=\"#Anaconda安装tensorflow-gpu\" class=\"headerlink\" title=\"Anaconda安装tensorflow-gpu\"></a>Anaconda安装tensorflow-gpu</h3><ul>\n<li><strong><em>安装conda</em></strong></li>\n</ul>\n<p>管理员已经在各位用户的主目录里备份了文件夹<code>backup</code>，里面有<strong><em>Anaconda</em></strong>安装包，在终端利用SSH登录到服务器系统(CentOS 7.6)，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/backup</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n\n<p>查看是否有<em>Anaconda3-5.2.0-Linux-x86_64.sh</em>文件，这是 <strong><em>python3.6</em></strong> 版本的Anaconda安装包，继续运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>按<code>Enter</code>键继续，出现以下的界面</p>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/Anaconda_1.png\" alt=\"Anaconda_1\"><br>此时按一下<code>space</code>(空格)键，有如下提示，在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Do you accept the license terms? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>紧接着有提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Anaconda3 will now be installed into this location:</span><br><span class=\"line\">/home/<span class=\"built_in\">test</span>/anaconda3</span><br><span class=\"line\"></span><br><span class=\"line\">  - Press ENTER to confirm the location</span><br><span class=\"line\">  - Press CTRL-C to abort the installation</span><br><span class=\"line\">  - Or specify a different location below</span><br><span class=\"line\"></span><br><span class=\"line\">[/home/<span class=\"built_in\">test</span>/anaconda3] &gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>按下<code>Enter</code>键即可开始安装，安装完成后，提示如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">installation finished.</span><br><span class=\"line\">Do you wish the installer to prepend the Anaconda3 install location</span><br><span class=\"line\">to PATH <span class=\"keyword\">in</span> your /home/<span class=\"built_in\">test</span>/.bashrc ? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>后出现Anaconda安装成功的消息，此时出现<em>是否安装Microsoft VSCode</em>的消息，输入<code>no</code>即可。</p>\n<p>python3.6版本的Anaconda安装完成，此时在终端输入<code>conda</code>，会提示<code>conda:未找到命令</code>，不要慌，反手输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>刷新环境，再输入<code>conda</code>即有消息提示，表明conda安装成功。</p>\n<ul>\n<li><strong><em>创建虚拟环境——tensorflow-gpu</em></strong><br>在终端输入</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow-gpu pip python=3.6</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>~/anaconda/env</strong> 文件夹下创建名为 <strong><em>tensorflow-gpu</em></strong> 的虚拟环境</p>\n<p>激活环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<p>若要退出当前环境，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> deactivate tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><em>安装tensorflow-gpu 1.6.0</em></strong></li>\n</ul>\n<p>在激活的环境中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>是否正确安装，请参照章节 <strong><em>测试tensorflow-gpu版本的正确性</em></strong> 里的方法验证。</p>\n<h3 id=\"测试tensorflow-gpu版本的正确性\"><a href=\"#测试tensorflow-gpu版本的正确性\" class=\"headerlink\" title=\"测试tensorflow-gpu版本的正确性\"></a>测试tensorflow-gpu版本的正确性</h3><p>在激活的环境中，输入<code>python</code>，进入到python3.6环境中，依次输入命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tf.test.is_gpu_available()</span><br></pre></td></tr></table></figure>\n\n<p>若输出类似的内容，且最后一行为<code>True</code>，则表示tensorflow-gpu 1.6 版本安装成功！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">45.539907</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class=\"number\">140</span>] Your CPU supports instructions that this TensorFlow binary was <span class=\"keyword\">not</span> compiled to use: AVX2 FMA</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425789</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1212</span>] Found device <span class=\"number\">0</span> <span class=\"keyword\">with</span> properties:</span><br><span class=\"line\">name: GeForce GTX <span class=\"number\">1080</span> major: <span class=\"number\">6</span> minor: <span class=\"number\">1</span> memoryClockRate(GHz): <span class=\"number\">1.7715</span></span><br><span class=\"line\">pciBusID: <span class=\"number\">0000</span>:<span class=\"number\">04</span>:<span class=\"number\">00.0</span></span><br><span class=\"line\">totalMemory: <span class=\"number\">7.93</span>GiB freeMemory: <span class=\"number\">7.81</span>GiB</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425831</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1312</span>] Adding visible gpu devices: <span class=\"number\">0</span></span><br><span class=\"line\">2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>查看tensorflow的版本的命令为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tf.__version__)</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>__</code>为两个<code>_</code>组合而成。</p>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><h4 id=\"情况1\"><a href=\"#情况1\" class=\"headerlink\" title=\"情况1\"></a>情况1</h4><ul>\n<li><p><strong>错误</strong>——激活环境后，导入<code>import tensorflow as tf</code>包后，出现错误</p>\n<blockquote>\n<p>ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量<code>LD_LIBRARY_PATH</code>未能配置正确</p>\n</li>\n<li><p><strong>解决</strong>——<code>libcublas.so.9.0</code>文件在<code>/usr/local/cuda/lib64</code>路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ldconfig /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>\n\n<p>问题可能会被解决，如果出现了<strong>情况2</strong>，请看解答。</p>\n</li>\n</ul>\n<h4 id=\"情况2\"><a href=\"#情况2\" class=\"headerlink\" title=\"情况2\"></a>情况2</h4><ul>\n<li><p><strong>错误</strong>——运行<strong>情况1</strong>里的<code>sudo ldconfig /usr/local/cuda/lib64</code>后，出现错误</p>\n<blockquote>\n<p>libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——符号链接出错</p>\n</li>\n<li><p><strong>解决</strong>——创建软链接，将<code>libcudnn.so.7.0.5</code>软连接到<code>libcudnn.so.7</code>，如果<code>libcudnn.so.7.0.5</code>丢失，<code>libcudnn.so.7</code>将失效，<code>-s</code>表示建立软连接，<code>-f</code>表示强制执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sf /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>（未完待续，随时更新）</p>\n<h2 id=\"在服务器上利用GPU跑程序的简化步骤\"><a href=\"#在服务器上利用GPU跑程序的简化步骤\" class=\"headerlink\" title=\"在服务器上利用GPU跑程序的简化步骤\"></a>在服务器上利用GPU跑程序的简化步骤</h2><ol>\n<li>利用FileZilla软件登录远程服务器上传所需程序文件</li>\n<li>在终端利用SSH登录远程服务器</li>\n<li>按照下面的命令进行操作，建议使用<strong>tmux终端复用神器</strong>，第2、3、4步不是必须的，但是强烈推荐使用！</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p 22      <span class=\"comment\"># 登录服务器</span></span><br><span class=\"line\">tmux ls                           <span class=\"comment\"># 查看终端会话列表，若没有，新建一个</span></span><br><span class=\"line\">                                  <span class=\"comment\"># 会话窗口 tmux new -s YourSeeName，保证程序在后台运行</span></span><br><span class=\"line\">tmux a -t YourSeeName             <span class=\"comment\"># 进入你指定的会话窗口</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu    <span class=\"comment\"># 在会话窗口中激活tensorflow-gpu环境</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> xxx/yyy                        <span class=\"comment\"># 程序文件所在路径</span></span><br><span class=\"line\">ls                                <span class=\"comment\"># 查看文件</span></span><br><span class=\"line\">python abc.py                     <span class=\"comment\"># 运行程序</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol>\n<li>实验室服务器用户名清单</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"2\">\n<li>安装ssh和FileZilla</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"3\">\n<li>服务器环境检查</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"4\">\n<li>安装tensorflow的GPU版本</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"5\">\n<li>在服务器上利用GPU跑程序的简化步骤</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇文章的目的是针对Lab532不了解实验室服务器情况的同学，进行一些必要的说明。</p>","more":"<h3 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h3><ul>\n<li><a href=\"#安装ssh和filezilla\">安装SSH和FileZilla</a><ul>\n<li><a href=\"#ssh\">SSH</a><ul>\n<li><a href=\"#ssh安装\">SSH安装</a></li>\n<li><a href=\"#ssh登录\">SSH登录</a></li>\n<li><a href=\"#修改密码\">修改密码</a></li>\n</ul>\n</li>\n<li><a href=\"#filezilla\">FileZilla</a><ul>\n<li><a href=\"#安装filezilla\">安装FileZilla</a></li>\n<li><a href=\"#登录服务器\">登录服务器</a></li>\n<li><a href=\"#文件传输\">文件传输</a></li>\n<li><a href=\"#总结\">总结</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#服务器环境检查\">服务器环境检查</a></li>\n<li><a href=\"#安装tensorflow的gpu版本\">安装tensorflow的GPU版本</a><ul>\n<li><a href=\"#硬件支持\">硬件支持</a></li>\n<li><a href=\"#系统要求\">系统要求</a></li>\n<li><a href=\"#软件需求\">软件需求</a></li>\n<li><a href=\"#安装tensorflow-gpu\">安装tensorflow-gpu</a><ul>\n<li><a href=\"#virtualenv安装tensorflow-gpu\">virtualenv安装tensorflow-gpu</a></li>\n<li><a href=\"#anaconda安装tensorflow-gpu\">Anaconda安装tensorflow-gpu</a></li>\n<li><a href=\"#测试tensorflow-gpu版本的正确性\">测试tensorflow-gpu版本的正确性</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#问题汇总\">问题汇总</a></li>\n<li><a href=\"#在服务器上利用gpu跑程序的简化步骤\">在服务器上利用GPU跑程序的简化步骤</a></li>\n</ul>\n<h2 id=\"安装SSH和FileZilla\"><a href=\"#安装SSH和FileZilla\" class=\"headerlink\" title=\"安装SSH和FileZilla\"></a>安装SSH和FileZilla</h2><ul>\n<li><strong>SSH</strong>是用来<strong>登录</strong>远程服务器的安全协议；</li>\n<li><strong>FileZilla</strong>是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的<strong>文件传输</strong>)</li>\n</ul>\n<p>SSH和FileZilla都安装在<strong>本地计算机系统</strong>中</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">SSH</a>(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>\n</blockquote>\n<h3 id=\"SSH安装\"><a href=\"#SSH安装\" class=\"headerlink\" title=\"SSH安装\"></a>SSH安装</h3><p>在<strong>本地计算机系统</strong>中，<code>UNIX</code>、<code>Window</code>以及<code>Mac</code>系统都可运行SSH,安装方法如下：</p>\n<ul>\n<li><strong><em>CentOS 7</em></strong></li>\n</ul>\n<p>需要普通管理员权限(sudo)，用快捷键<code>ctrl</code>+<code>alt</code>+<code>t</code>打开终端Terminal窗口，运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>然后回车,输入<code>y</code>，即可安装完成。</p>\n<ul>\n<li><strong><em>Windows10</em></strong></li>\n</ul>\n<p>下载<a href=\"https://www.mls-software.com/files/setupssh-7.9p1-1.exe\">openssh for windows</a>，进行默认安装即可。</p>\n<ul>\n<li><strong><em>Mac</em></strong></li>\n</ul>\n<p>由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动<code>sshd服务</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>\n\n<p>输入Mac密码后即可开启。</p>\n<h3 id=\"SSH登录\"><a href=\"#SSH登录\" class=\"headerlink\" title=\"SSH登录\"></a>SSH登录</h3><p>在任一平台上打开终端(Windows上推荐<a href=\"https://www.netsarang.com/zh/xshell-download/\"><strong>Xshell</strong></a>、<a href=\"http://www.hostbuf.com/t/988.html\"><strong>FinalShell</strong></a>，Linux系统和Mac直接打开终端即可)，输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p PORT</span><br></pre></td></tr></table></figure>\n\n<p>其中，<br><code>username</code>为服务器的用户名<br><code>IPaddress</code>为服务器的IP地址<br><code>PORT</code>为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员</p>\n<p>输入密码后即可进入自己账户的主目录（普通用户，无root权限）</p>\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><p>登录到服务器之后，修改原始密码保证账户安全，直接输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p><code>username</code>为您在服务器上的用户名，根据提示修改新的密码。</p>\n<p>至此，您已经安全登录到服务器上。</p>\n<h3 id=\"FileZilla\"><a href=\"#FileZilla\" class=\"headerlink\" title=\"FileZilla\"></a>FileZilla</h3><blockquote>\n<p>FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。</p>\n</blockquote>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_Client.png\" alt=\"FileZilla\"></p>\n<p>以windows 10为例，下载<a href=\"https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe\">FileZilla</a>，选择安装位置，正常安装即可。</p>\n<h3 id=\"登录服务器\"><a href=\"#登录服务器\" class=\"headerlink\" title=\"登录服务器\"></a>登录服务器</h3><p>打开FileZilla软件，</p>\n<ul>\n<li><ol>\n<li>点击”<strong>文件</strong>“——“<strong>站点管理器</strong>“</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>点击”<strong>新站点</strong>“，在”<strong>我的站点</strong>“下重命名，此处设为“Lab532”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>继停留在”<strong>站点管理器</strong>“界面，在”<strong>常规</strong>“选项卡中，设置如下：</li>\n</ol>\n<ul>\n<li>主机：<strong>IPaddress</strong></li>\n<li>端口：<strong>22</strong>或者<strong>8888</strong></li>\n<li>协议：<strong>SFTP - SSH File transfer Protocol</strong></li>\n<li>登录类型：<ul>\n<li>1）若选”<strong>正常</strong>“<ul>\n<li>用户名：username</li>\n<li>密码：password</li>\n</ul>\n</li>\n<li>2）若选”<strong>询问密码</strong>“，只能填写用户名：username，然后点击右下角的”<strong>连接</strong>“，再输入密码。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"4\">\n<li>之后一直ok即可。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h3><p>以window 10为例，利用FileZilla登录到服务器后，可以看到左边是<strong>本地站点</strong>，右边是<strong>远程站点</strong>(服务器上的目录)，如下图所示，直接将本地文件<code>test.py</code>用鼠标拖拽到服务器上的指定目录即可（<strong>上传过程</strong>），这个过程是可逆的（<strong>下载过程</strong>），非常方便。</p>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/FileZilla_file.png\" alt=\"FileZilla_file\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>利用<strong>FileZilla</strong>软件配合<strong>SSH</strong>协议，即可完成文件传输及程序运行等必要工作。</p>\n<h2 id=\"服务器环境检查\"><a href=\"#服务器环境检查\" class=\"headerlink\" title=\"服务器环境检查\"></a>服务器环境检查</h2><p>登录到服务器后，检查是否可以检测到GPU1080信息(管理员已全局安装)，打开终端，输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>若输出以下信息，即证明显卡驱动已安装。</p>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/nvidia.png\" alt=\"nvidia\"></p>\n<p>若有错误提示，请及时联系管理员<strong>adoredee</strong>(kangzhiheng@sjtu.edu.cn)</p>\n<p><strong>实验室GPU信息如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">规格</th>\n<th align=\"center\">核心参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">显卡核心</td>\n<td align=\"center\">NVIDIA GeForce GTX1080</td>\n</tr>\n<tr>\n<td align=\"center\">显存频率</td>\n<td align=\"center\">10010MHz</td>\n</tr>\n<tr>\n<td align=\"center\">显存大小</td>\n<td align=\"center\">8G</td>\n</tr>\n<tr>\n<td align=\"center\">显存类型</td>\n<td align=\"center\">GDDR5X</td>\n</tr>\n<tr>\n<td align=\"center\">显存位宽</td>\n<td align=\"center\">256位</td>\n</tr>\n<tr>\n<td align=\"center\">总线类型</td>\n<td align=\"center\">PCI-E 3.0 x 16</td>\n</tr>\n<tr>\n<td align=\"center\">数字最高分辨率</td>\n<td align=\"center\">7680 x 4320</td>\n</tr>\n<tr>\n<td align=\"center\">SLI</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">散热器类型</td>\n<td align=\"center\">风冷</td>\n</tr>\n<tr>\n<td align=\"center\">额定电源</td>\n<td align=\"center\">500W</td>\n</tr>\n<tr>\n<td align=\"center\">供电外接需求</td>\n<td align=\"center\">8pin x 1</td>\n</tr>\n<tr>\n<td align=\"center\">OpneGL支持版本</td>\n<td align=\"center\">OpenGL 4.5</td>\n</tr>\n</tbody></table>\n<h2 id=\"安装tensorflow的GPU版本\"><a href=\"#安装tensorflow的GPU版本\" class=\"headerlink\" title=\"安装tensorflow的GPU版本\"></a>安装tensorflow的GPU版本</h2><p>配置TensorFlow GPU环境需要各种库和包支持，为了简化和避免库之间的冲突，建议使用<a href=\"https://tensorflow.google.cn/install/pip\">virtualenv</a>、<a href=\"https://tensorflow.google.cn/install/pip\">pip</a>或者<a href=\"https://tensorflow.google.cn/install/docker\">Docker</a>安装，本篇教程介绍<a href=\"https://tensorflow.google.cn/install/pip\">virtualenv</a>和<a href=\"https://tensorflow.google.cn/install/pip\">pip</a>两种方法安装<code>tensorflow-gpu-1.6.0</code>版本。</p>\n<h3 id=\"硬件支持\"><a href=\"#硬件支持\" class=\"headerlink\" title=\"硬件支持\"></a>硬件支持</h3><ul>\n<li>具有CUDA®计算能力3.5或更高版本的NVIDIA®GPU卡,请参阅支持<a href=\"https://developer.nvidia.com/cuda-gpus\">CUDA的GPU卡列表</a>。</li>\n</ul>\n<h3 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h3><ul>\n<li>CentOS 7.x 更高版本(64-bit)</li>\n<li>macOS 10.12.6 (Sierra)更高版本(64-bit)(<em>不支持 tensorflow GPU版本</em>)</li>\n<li>Windows 7或更高版本 (64-bit)(只支持Python3)</li>\n<li>Raspbian 9.0或更高版本</li>\n</ul>\n<h3 id=\"软件需求\"><a href=\"#软件需求\" class=\"headerlink\" title=\"软件需求\"></a>软件需求</h3><p>根据<a href=\"https://tensorflow.google.cn/install/gpu\">官网</a> 以及我个人经验，<strong><em>Tensorflow1.6.0的GPU版本</em></strong> 要求<strong>在系统上安装以下NVIDIA®软件</strong></p>\n<ul>\n<li><a href=\"https://www.nvidia.com/drivers\">NVIDIA® GPU驱动</a> —— CUDA 9.0要求NVIDIA驱动384.x或者更高版本</li>\n<li><a href=\"https://developer.nvidia.com/cuda-zone\">CUDA® Toolkit</a> —— TensorFlow1.6.0支持CUDA 9.0.</li>\n<li><a href=\"https://developer.nvidia.com/cudnn\">cuDNN</a> —— 大于等于cuDNN 7.0，这里选择cuDNN 7.0.5</li>\n</ul>\n<p>在服务器上管理员已经提前安装好了NVIDIA驱动、CUDA及cuDNN，具体信息如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">所需环境</th>\n<th align=\"center\">版本信息</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">NVIDIA驱动</td>\n<td align=\"center\">390.77</td>\n<td align=\"center\"><em>已安装</em></td>\n</tr>\n<tr>\n<td align=\"center\">CUDA</td>\n<td align=\"center\">9.0</td>\n<td align=\"center\"><em>已安装</em></td>\n</tr>\n<tr>\n<td align=\"center\">cuDNN</td>\n<td align=\"center\">7.0.5</td>\n<td align=\"center\"><em>已安装</em></td>\n</tr>\n<tr>\n<td align=\"center\">gcc/g++</td>\n<td align=\"center\">4.8.5</td>\n<td align=\"center\"><em>已降级</em></td>\n</tr>\n<tr>\n<td align=\"center\">Tensorflow(GPU版本)</td>\n<td align=\"center\">建议<code>1.6</code></td>\n<td align=\"center\"><strong>未安装</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"安装tensorflow-gpu\"><a href=\"#安装tensorflow-gpu\" class=\"headerlink\" title=\"安装tensorflow-gpu\"></a>安装tensorflow-gpu</h3><p>下面将介绍两种方法安装tensorflow-gpu：</p>\n<ol>\n<li><a href=\"https://tensorflow.google.cn/install/pip\">virtualenv</a></li>\n<li><a href=\"https://tensorflow.google.cn/install/pip\">pip</a></li>\n</ol>\n<h3 id=\"virtualenv安装tensorflow-gpu\"><a href=\"#virtualenv安装tensorflow-gpu\" class=\"headerlink\" title=\"virtualenv安装tensorflow-gpu\"></a>virtualenv安装tensorflow-gpu</h3><ul>\n<li><strong><em>安装Python包管理工具——pip</em></strong></li>\n</ul>\n<p>在终端利用SSH登录到服务器系统(CentOS 7.6)，由于<strong>普通用户</strong>无法使用<code>sudo</code>，故不能直接使用<code>sudo yum install virtualenv</code>安装virtualenv虚拟环境，故使用以下方法，<strong>先安装pip</strong>，再安装<strong>virtualenv</strong>，在终端中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python3 get-pip.py --user</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>:参数<code>--user</code>一定要记得使用，否则会提示权限不足。</p>\n<p>安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=~/.<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>此时已在非root用户环境中安装好通用的Python包管理工具<code>pip</code>，故利用pip安装<strong>virtualenv</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -U virtualenv --user</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><em>创建虚拟环境——tensorflow-gpu</em></strong></li>\n</ul>\n<p>在终端继续运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --system-site-packages -p python3 ~/virtual-envs/tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<p>即在 <strong>~/virtual-envs</strong> 文件夹里创建了名为 <strong><em>tensorflow-gpu</em></strong> 的虚拟环境，再输入以下命令<strong>激活环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/virtual-envs/tensorflow-gpu/bin/activate</span><br></pre></td></tr></table></figure>\n\n<p>此时终端会变成如下模样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(tensorflow-gpu) username@devices:~$</span><br></pre></td></tr></table></figure>\n\n<p>即为正常。</p>\n<p>上述命令解释</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">username</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">devices</td>\n<td align=\"center\">主机名</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">当前用户主目录</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">普通用户</td>\n</tr>\n<tr>\n<td align=\"center\">(tensorflow-gpu)</td>\n<td align=\"center\">系统指定环境</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>为什么要激活环境？</p>\n<p>因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；而且virtualenv可用于创建独立的Python环境，多个Python相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。</p>\n</blockquote>\n<p>若退出当前环境，有命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><em>安装tensorflow-gpu 1.6.0</em></strong></li>\n</ul>\n<p>在<strong>激活</strong>的环境中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>安装过程中，有<code>yes</code>输入 <strong><em>yes</em></strong> ,等待tensorflow 1.6.0的GPU版本安装完成。</p>\n<p>若想安装<strong>CPU版本</strong>，无需CUDA和cuDNN，激活虚拟环境后，输入<code>pip install tensorflow==1.6.0</code>即可。</p>\n<p>是否正确安装，请参照章节 <strong><em>测试tensorflow-gpu版本的正确性</em></strong> 里的方法验证。</p>\n<h3 id=\"Anaconda安装tensorflow-gpu\"><a href=\"#Anaconda安装tensorflow-gpu\" class=\"headerlink\" title=\"Anaconda安装tensorflow-gpu\"></a>Anaconda安装tensorflow-gpu</h3><ul>\n<li><strong><em>安装conda</em></strong></li>\n</ul>\n<p>管理员已经在各位用户的主目录里备份了文件夹<code>backup</code>，里面有<strong><em>Anaconda</em></strong>安装包，在终端利用SSH登录到服务器系统(CentOS 7.6)，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/backup</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n\n<p>查看是否有<em>Anaconda3-5.2.0-Linux-x86_64.sh</em>文件，这是 <strong><em>python3.6</em></strong> 版本的Anaconda安装包，继续运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>按<code>Enter</code>键继续，出现以下的界面</p>\n<p><img src=\"https://github.com/kangzhiheng/GitLocalDoc/blob/master/img/Anaconda_1.png\" alt=\"Anaconda_1\"><br>此时按一下<code>space</code>(空格)键，有如下提示，在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Do you accept the license terms? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>紧接着有提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Anaconda3 will now be installed into this location:</span><br><span class=\"line\">/home/<span class=\"built_in\">test</span>/anaconda3</span><br><span class=\"line\"></span><br><span class=\"line\">  - Press ENTER to confirm the location</span><br><span class=\"line\">  - Press CTRL-C to abort the installation</span><br><span class=\"line\">  - Or specify a different location below</span><br><span class=\"line\"></span><br><span class=\"line\">[/home/<span class=\"built_in\">test</span>/anaconda3] &gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>按下<code>Enter</code>键即可开始安装，安装完成后，提示如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">installation finished.</span><br><span class=\"line\">Do you wish the installer to prepend the Anaconda3 install location</span><br><span class=\"line\">to PATH <span class=\"keyword\">in</span> your /home/<span class=\"built_in\">test</span>/.bashrc ? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>后出现Anaconda安装成功的消息，此时出现<em>是否安装Microsoft VSCode</em>的消息，输入<code>no</code>即可。</p>\n<p>python3.6版本的Anaconda安装完成，此时在终端输入<code>conda</code>，会提示<code>conda:未找到命令</code>，不要慌，反手输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>刷新环境，再输入<code>conda</code>即有消息提示，表明conda安装成功。</p>\n<ul>\n<li><strong><em>创建虚拟环境——tensorflow-gpu</em></strong><br>在终端输入</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow-gpu pip python=3.6</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>~/anaconda/env</strong> 文件夹下创建名为 <strong><em>tensorflow-gpu</em></strong> 的虚拟环境</p>\n<p>激活环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<p>若要退出当前环境，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> deactivate tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><em>安装tensorflow-gpu 1.6.0</em></strong></li>\n</ul>\n<p>在激活的环境中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>是否正确安装，请参照章节 <strong><em>测试tensorflow-gpu版本的正确性</em></strong> 里的方法验证。</p>\n<h3 id=\"测试tensorflow-gpu版本的正确性\"><a href=\"#测试tensorflow-gpu版本的正确性\" class=\"headerlink\" title=\"测试tensorflow-gpu版本的正确性\"></a>测试tensorflow-gpu版本的正确性</h3><p>在激活的环境中，输入<code>python</code>，进入到python3.6环境中，依次输入命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tf.test.is_gpu_available()</span><br></pre></td></tr></table></figure>\n\n<p>若输出类似的内容，且最后一行为<code>True</code>，则表示tensorflow-gpu 1.6 版本安装成功！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">45.539907</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class=\"number\">140</span>] Your CPU supports instructions that this TensorFlow binary was <span class=\"keyword\">not</span> compiled to use: AVX2 FMA</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425789</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1212</span>] Found device <span class=\"number\">0</span> <span class=\"keyword\">with</span> properties:</span><br><span class=\"line\">name: GeForce GTX <span class=\"number\">1080</span> major: <span class=\"number\">6</span> minor: <span class=\"number\">1</span> memoryClockRate(GHz): <span class=\"number\">1.7715</span></span><br><span class=\"line\">pciBusID: <span class=\"number\">0000</span>:<span class=\"number\">04</span>:<span class=\"number\">00.0</span></span><br><span class=\"line\">totalMemory: <span class=\"number\">7.93</span>GiB freeMemory: <span class=\"number\">7.81</span>GiB</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425831</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1312</span>] Adding visible gpu devices: <span class=\"number\">0</span></span><br><span class=\"line\">2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>查看tensorflow的版本的命令为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tf.__version__)</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>__</code>为两个<code>_</code>组合而成。</p>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><h4 id=\"情况1\"><a href=\"#情况1\" class=\"headerlink\" title=\"情况1\"></a>情况1</h4><ul>\n<li><p><strong>错误</strong>——激活环境后，导入<code>import tensorflow as tf</code>包后，出现错误</p>\n<blockquote>\n<p>ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量<code>LD_LIBRARY_PATH</code>未能配置正确</p>\n</li>\n<li><p><strong>解决</strong>——<code>libcublas.so.9.0</code>文件在<code>/usr/local/cuda/lib64</code>路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ldconfig /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>\n\n<p>问题可能会被解决，如果出现了<strong>情况2</strong>，请看解答。</p>\n</li>\n</ul>\n<h4 id=\"情况2\"><a href=\"#情况2\" class=\"headerlink\" title=\"情况2\"></a>情况2</h4><ul>\n<li><p><strong>错误</strong>——运行<strong>情况1</strong>里的<code>sudo ldconfig /usr/local/cuda/lib64</code>后，出现错误</p>\n<blockquote>\n<p>libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——符号链接出错</p>\n</li>\n<li><p><strong>解决</strong>——创建软链接，将<code>libcudnn.so.7.0.5</code>软连接到<code>libcudnn.so.7</code>，如果<code>libcudnn.so.7.0.5</code>丢失，<code>libcudnn.so.7</code>将失效，<code>-s</code>表示建立软连接，<code>-f</code>表示强制执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sf /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>（未完待续，随时更新）</p>\n<h2 id=\"在服务器上利用GPU跑程序的简化步骤\"><a href=\"#在服务器上利用GPU跑程序的简化步骤\" class=\"headerlink\" title=\"在服务器上利用GPU跑程序的简化步骤\"></a>在服务器上利用GPU跑程序的简化步骤</h2><ol>\n<li>利用FileZilla软件登录远程服务器上传所需程序文件</li>\n<li>在终端利用SSH登录远程服务器</li>\n<li>按照下面的命令进行操作，建议使用<strong>tmux终端复用神器</strong>，第2、3、4步不是必须的，但是强烈推荐使用！</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p 22      <span class=\"comment\"># 登录服务器</span></span><br><span class=\"line\">tmux ls                           <span class=\"comment\"># 查看终端会话列表，若没有，新建一个</span></span><br><span class=\"line\">                                  <span class=\"comment\"># 会话窗口 tmux new -s YourSeeName，保证程序在后台运行</span></span><br><span class=\"line\">tmux a -t YourSeeName             <span class=\"comment\"># 进入你指定的会话窗口</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu    <span class=\"comment\"># 在会话窗口中激活tensorflow-gpu环境</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> xxx/yyy                        <span class=\"comment\"># 程序文件所在路径</span></span><br><span class=\"line\">ls                                <span class=\"comment\"># 查看文件</span></span><br><span class=\"line\">python abc.py                     <span class=\"comment\"># 运行程序</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol>\n<li>实验室服务器用户名清单</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"2\">\n<li>安装ssh和FileZilla</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"3\">\n<li>服务器环境检查</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"4\">\n<li>安装tensorflow的GPU版本</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"5\">\n<li>在服务器上利用GPU跑程序的简化步骤</li>\n</ol>\n</li>\n</ul>"},{"bashtitle":"Linux之像IDE一样使用vim（C++版本/Python版本）","toc":true,"recommend":1,"date":"2020-03-30T06:30:43.000Z","thumbnail":"https://pic.downk.cc/item/5e887c1d504f4bcb04ee9d03.png","keywords":"Vim","_content":"\n打造vim实用配置方案\n\n <!-- more --> \n\n这篇文章的目的，是打造让自己感觉舒服好用的[Vim](https://github.com/vim/vim)/[NeoVim](https://github.com/neovim/neovim)环境以便获得更好的编程体验，并将我所遇到的一些问题列出解决方案，不足之处还请见谅，欢迎与各位进行交流，邮箱是<kangzhiheng@live.cn>。\n\n本文所有命令，在**CentOS7.6** 上全部测试通过，Mac系统相对来说配置比较容易，在此不做特别说明，每一步都有详细的步骤，敬请参考。\n\n### 什么是Vim？\n\n**[Vim](https://www.vim.org/)- the ubiquitous text editor**，一种无处不在的文本编辑器，维基百科是这么介绍**vim**的：\n\n> **Vim**是从[vi](https://zh.wikipedia.org/wiki/Vi)发展出来的一个[文本编辑器](https://zh.wikipedia.org/wiki/文本编辑器)。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和[Emacs](https://zh.wikipedia.org/wiki/Emacs)并列成为[类Unix系统](https://zh.wikipedia.org/wiki/类Unix系统)用户最喜欢的编辑器。\n>\n> Vim的第一个版本由[布莱姆·米勒](https://zh.wikipedia.org/wiki/布萊姆·米勒)在1991年发布。最初的简称是**V**i **IM**itation，随着功能的不断增加，正式名称改成了**V**i **IM**proved。现在是在[开放源代码](https://zh.wikipedia.org/wiki/开放源代码)方式下发行的[自由软件](https://zh.wikipedia.org/wiki/自由软件)。\n\n**文件的增删查改**——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。\n\n**配置文件**——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿`git clone repoyoulike`，然后按照配置文档进行修改，什么**tf**要升级啦，**gcc/g++**要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用`gedit`来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用**ssh**连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。\n\n**知其然知其所以然**——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。\n\n**Vim**适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从[官网](https://www.vim.org/download.php)下载。 \n\n### Vim哲学\n\n简单概括：摆脱鼠标，一键到达。\n\n即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。\n\n### 升级支持python3的Vim8\n\n在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是**vi**编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，[Vim8](https://github.com/vim/vim)在[NeoVim](https://github.com/neovim/neovim)的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口**terminal**，尤其是支持**terminal**非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，在升级了支持**Python3**的Vim8后（**在Vim版本中，不能同时支持Python2和Python3**），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。在这一小节，介绍怎么**编译支持Python3的Vim8版本**，**前提是系统了安装Python3**，Python3的安装不做讨论。\n\n1. **编译安装yum源里的vim最新版**\n\n   [参考YouCompleteMe](https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source)里给出的方法，略作调整。\n\n   首先检查系统里的Vim是否已经安装，在终端输入命令\n\n   ```bash\n   rpm -qa | grep vim\n   ```\n\n   如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（**下载Vim最新版源代码**）开始阅读。\n\n   一般情况下，运行下列命令安装Vim\n\n   ```bash\n   yum -y install yum*    // CentOS7.6系统\n   ```\n\n   查看vim版本\n\n   ```bash\n   vim --version\n   ```\n\n   可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。\n\n   如果是Vim版本，查看Vim是否支持Python3\n\n   ```bash\n   vim --version | grep python\n   ```\n\n   如果结果显示python3前面是`+`号，则这一小节可以跳过，如果是`-`号，则需要自己编译Vim，需执行以下步骤。\n\n2. **卸载Vim**\n\n   在编译之前，需要卸载系统上的Vim版本\n\n   - 如果使用`yum install vim*`命令安装的Vim，卸载Vim时执行\n\n     ```bash\n     yum remove vim\n     ```\n\n   - 如果Vim是使用`make`编译过的，在**CentOS7.6系统**下，进入到Vim源代码目录，执行\n\n     ```bash\n     sudo make uninstall\n     ```\n\n   如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone https://github.com/vim/vim.git)，然后`cd vim`，再执行上述语句。\n\n   如果是**Ubuntu系统**，卸载起来就比较方便\n\n   ```bash\n   sudo apt install checkinstall\n   cd ~/vim       // vim是Vim源代码文件夹\n   sudo checkinstall\n   ```\n\n3. **下载Vim最新版源代码**\n\n   ```bash\n   cd ~                                         // 进入到当前用户的根目录下\n   git clone https://github.com/vim/vim.git     // 下载Vim源代码\n   cd vim                                       // 进入到Vim源代码文件\n   ```\n\n4. **配置**\n\n   ```bash\n   ./configure --with-features=huge \\\n               --enable-multibyte \\\n               --enable-rubyinterp=yes \\\n               --enable-python3interp=yes \\\n               --with-python3-config-dir=$(python3-config --configdir) \\\n               --enable-perlinterp=yes \\\n               --enable-luainterp=yes \\\n               --enable-gui=gtk2 \\\n               --enable-cscope \\\n               --prefix=/usr/local\n   ```\n\n   命令[解释](https://www.jianshu.com/p/aac78ff576c5)：\n\n   ` --with-features=huge`：支持最大特性\n\n   `--enable-multibyte`：打开多字节支持，可以在Vim中输入中文\n\n   `--enable-rubyinterp`：打开对ruby编写的插件的支持\n\n   ` --enable-python3interp`：打开对python3编写的插件的支持\n\n   `--with-python-config-dir`：Python3的路径\n\n   `--enable-perlinterp`：打开对perl编写的插件的支持\n\n   ` --enable-luainterp`：打开对lua编写的插件的支持\n\n   `--enable-gui`：打开GUI支持\n\n   `--enable-cscope`：打开对cscope的支持\n\n   `--prefix=/usr/local/`：指定将要安装到的路径\n\n5. **设置VIMRUNTIMEDIR**\n\n   **VIMRUNTIMEDIR**是vim运行时候所需资源的目录，非常重要。\n\n   ```bash\n       make VIMRUNTIMEDIR=/usr/local/share/vim/vim82\n   ```\n\n6. **编译安装**\n\n   ```bash\n   sudo make install\n   ```\n\n7. **设置Vim为默认的编辑器**\n\n   使用`update-alternative`设置vim为默认编辑器：\n\n   ```bash\n   sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim 1\n   sudo update-alternatives --set editor /usr/local/bin/vim\n   sudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim 1\n   sudo update-alternatives --set vi /usr/local/bin/vim\n   ```\n\n按照上述步骤完成后查看Vim**版本\n\n```\nvim --version\n```\n\n![vim版本](https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png)\n\n可以看到Vim版本是8.2版本，已开启**python3支持**，需要进行验证，在终端输入`vim`，接着在**正常模式**下输入`:echo has(\"python3\")`，按一下回车键，若屏幕最下面输出`1`，则配置正确，Vim支持Python3。\n\n编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及**Issues（非常有用）**、[stackoverflow](https://stackoverflow.com/)等，其次再考虑其它出处，尽可能多看**专业的英文文档**，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！\n\n该方法是全局设置方法。\n\n- **安装中文vim帮助文档**\n\n  进入Vim环境，按一下前缀键`esc`，在英文语法环境下，输入`:help`后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：\n\n  - **下载中文安装包**\n\n    ```bash\n    wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz\n    ```\n\n  - **解压**\n\n    ```bash\n    tar zxvf v2.3.0.tar.gz\n    ```\n\n  - **安装**\n\n    ```bash\n    cd vimcdoc-2.3.0/\t\t\t\t# 进入解压后的目录\n    ./vimcdoc.sh -i\t\t\t\t\t# 安装\n    ```\n\n    命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。\n\n### Vim8 —> NeoVim\n\n完全是偶然。在上回讲到，在Vim下折腾了两三天的[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。\n\n### 基本操作\n\n\n\n基本模式\n\n编辑模式\n\n### 基础设置\n\n[键盘映射技巧](https://zhuanlan.zhihu.com/p/38150203)\n\n`\"+p`可以将外部内容粘贴到终端vim文件中\n\n### 插件管理\n\n#### vim-plug插件管理器\n\nVim的插件管理有[Vundle](https://github.com/VundleVim/Vundle.vim)、[vim-plug](https://github.com/junegunn/vim-plug)、[SpaceVim](https://github.com/SpaceVim/SpaceVim)等，[Vundle](https://github.com/VundleVim/Vundle.vim)是一款非常出名且历史悠久的Vim插件管理工具，但随着安装的vim插件越来越多，使用Vundle来管理这些插件时效率变得越来越低，vim启动耗时也越来越大，且多年没有更新；[SpaceVim](https://github.com/SpaceVim/SpaceVim)挺酷炫，有时间可以尝试一下，在这里推荐使用[vim-plug](https://github.com/junegunn/vim-plug)，\n\n**Unix安装**（包括CentOS和Mac）\n\n```bash\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\n该命令在Unix系统下无须进行修改，会自动创建目录`~/.vim/autoload/`。\n\n更新vim-plug插件自身：\n\n```bash\n:PlugUpgrade\n```\n\n批量更新所有已安装的插件：\n\n```bash\n:PlugUpdate\n```\n\n查看插件状态\n\n```bash\n:PlugStatus\n```\n\n卸载插件：请先在**~/.vim/vimrc**或者**~/.config/nvim/init.vim**配置文件中注释或者删除对应插件的配置信息，然后再执行以下命令：\n\n```\n:PlugClean\n```\n\n\n\n#### 插件安装\n\n假设系统已经安装了python3解释器，如没有安装，请参考这篇[文章]([https://github.com/kangzhiheng/GitLocalDoc#anaconda%E5%AE%89%E8%A3%85tensorflow-gpu](https://github.com/kangzhiheng/GitLocalDoc#anaconda安装tensorflow-gpu))\n\n##### 美化启动界面  — vim-startify\n\nhttps://github.com/mhinz/vim-startify\n\n```bash\nPlug 'mhinz/vim-startify'\n```\n\n![startigy](https://pic.downk.cc/item/5e8de221504f4bcb0466b21e.png)\n\n在终端输入`nvim`后，显示nvim启动界面，列出最近打开的文件，很方便。\n\n##### 美化状态栏 — ariline\n\nhttps://github.com/vim-airline/vim-airline\n\n```bash\nPlug 'vim-airline/vim-airline'\n```\n\n![美化状态栏](https://github.com/vim-airline/vim-airline/wiki/screenshots/demo.gif)\n\n\n\n##### 文件管理插件 — NERDTree\n\n使用方法\n\nCtrl + w + w   窗口之间的跳转\n\n当光标在NERDTree窗口时，\n\n`shift+i`是打开/关闭隐藏文件\n\no - 展开/合并某个目录\n\nC - 如果需要某个文件夹作为你的工作区，则需要按下大写C即可设置此目录为当前工作区\n\nU - 跳转到上一层目录\n\ncd - 设置该目录为家目录\n\nCD - 可能在别的目录迷失了方向，直接输入`CD`跳转到已经设置好的家目录\n\n##### 代码自动补全 — YouCompleteMe\n\n```bash\n\ncall plug#begin('~/.vim/pluged')\n\n\" 插件配置\n\n\" 文件树\nPlug 'scrooloose/nerdtree'\n\n\" 代码补全\nPlug 'ycm-core/YouCompleteMe'\n\ncall plug#end()               \n```\n\n在Vim配置文件`~/.vim/vimrc`下的插件Vundle部分，加入[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，然后在**正常模式**下，键入`:PluginInstall`进行插件安装，安装完成后，会在命令行提出\n\n```bash\nThe ycmd server SHUT DOWN (restart with ‘:YcmRestartServer’). YCM core library not detected; you need to compile YCM before using it. Follow the instructions in the documentation.\n```\n\n这是因为，**YouCompleteMe** 需要手工编译出库文件 ycm_core.so (以及依赖的libclang.so) 才可使用。**YouCompleteMe**支持的语言\n\n- **C系列（C/C++/Objective-C/Objective-C++）**：编译时添加`--clangd-completer`\n- **C#**：先安装[Mono](http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives)，编译时添加`--cs-completer`\n- **Go**：先安装[Go](https://golang.org/doc/install，编译时添加`--go-completer`\n- **JavaScript**和**TypeScript**：先安装 [Node.js and npm](https://docs.npmjs.com/getting-started/installing-node#1-install-nodejs--npm)，编译时添加`--ts-completer`\n- **Rust**: 编译时添加`--rust-completer`\n- **Java**: 先安装[JDK8](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)，编译时添加`--java-completer`\n- 全部支持：先安装所有的依赖环境，编译时添加`--all`\n\n要使用`--all`功能进行安装，请确保已在`PATH`中安装了**msbuild**，**go**，**node**和**npm**工具。\n\n个人对C系列使用较多，因此\n\n```bash\ncd ~/.vim/pluged/YouCompleteMe\npython3 install.py --clangd-completer\n```\n\n如果系统没有设置默认的Python为Python3版本，则需要注意以上命令是`python3`开头的，这时**C系列**语言的代码自动补全功能配置完毕。\n\npython语言自动补全\n\n需要在Vim配置文件`~/.config/nvim/init.vim`下的插件Vundle部分，加入\n\n```bash\n \" YouCompleteMe配置                                                                                                                              \nnnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>                                 nnoremap g/ :YcmCompleter GetDoc<CR>                                                       nnoremap gt :YcmCompleter GetType<CR>                                                       nnoremap gr :YcmCompleter GoToReferences<CR>                                                 let g:ycm_autoclose_preview_window_after_completion=0                                       let g:ycm_autoclose_preview_window_after_insertion=1                                         let g:ycm_use_clangd = 0                                                                     let g:ycm_seed_identifiers_with_syntax=1                                                     let g:ycm_collect_identifiers_from_tags_files = 1                                           let g:ycm_min_num_of_chars_for_completion=2                                                  let g:ycm_path_to_python_interpreter='/usr/bin/python3' \n```\n\n注意python3解释器的位置，这个设置好像对第三方库不是很友好，我再探索探索。\n\n##### 括号自动补全 — auto-pairs\n\n[链接  ](https://github.com/jiangmiao/auto-pairs)\n\n##### 函数列表 — TagBar\n\n[链接](https://github.com/majutsushi/tagbar)\n\n首先安装`ctags`\n\n```bash\n# CentOS7.6\nsudo yum install ctags\n# Ubuntu\nsudo apt-get install ctags\n# Mac\nbrew install ctags\n```\n\n在`~/.config/nvim/init.vim`里的**插件配置**里\n\n```bash\n\" 显示函数列表                        \nPlug 'majutsushi/tagbar'\n```\n\n\n\n##### 代码自动补全 coc-vim（推荐）\n\n根据[官网](https://github.com/neoclide/coc.nvim)建议，安装coc-vim前，需要首先安装[nodejs](https://nodejs.org/en/download/)\n\n```bash\ncurl -sL install-node.now.sh/lts | bash\n```\n\n利用vim-plus来进行安装\n\n```bash\n\" Coc-vim 自动补全插件\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n```\n\n保存并重启（更新）`~/.config/nvim/init.vim`文件，运行`PlugInstall`进行安装。\n\n如果出现[错误](https://github.com/neoclide/coc.nvim/issues/651)\n\n```bash\n[coc.nvim] javascript file not found, please compile the code or use release branch.\n```\n\n参考[issue651](https://github.com/neoclide/coc.nvim/issues/651)，打开`~/.config/nvim/init.vim`文件，运行命令`:call coc#util#install()`可以解决该问题。\n\n安装完成后，根据[项目](https://github.com/neoclide/coc.nvim/)对coc-vim插件进行配置，参考[链接](https://github.com/neoclide/coc.nvim/blob/master/doc/coc.cnx)（重要），在`~/.config/nvim/init.vim`下进行coc-vim插件进行个性化配置使其更加易用，这部分配置文件如下：\n\n```bash\n\" ====\n\" ==== coc-vim插件配置\n\" ====\n\" 允许在有未保存的修改时切换缓冲区, 此时的修改由 vim 负责保存\nset hidden\n\n\" 覆盖文件时不备份\nset nobackup\n\n\" 表示编辑的时候不需要备份文件\nset nowritebackup\n\n\" 命令行（在状态行下）的高度, 默认为1, 这里是2, 展示更多的信息\nset cmdheight=2\n\n\" 根据默认设置，交换文件会每隔4000毫秒（4秒）或者200个字符保存一次\n\" 我们可以使用以下命令，修改保存交换文件的频率\n\" 较长的更新时间（默认值为4000 ms = 4 s）会导致明显的延迟和较差的用户体验。\nset updatetime=300\n\n\" 历史原因，Vim的界面可能会显示“帮助乌干达的可怜儿童”，该命令将其屏蔽\n\" Don't pass messages to |ins-completion-menu|.\nset shortmess+=c\n\n\" 始终显示标号列\nset signcolumn=yes\n\n\" inoremap命令用于在“插入模式”中进行映射按键\n\" 使用TAB键来启动代码补全触发器，并在前面加上字符并进行导航。\n\" 注意：使用命令'：verbose imap <tab>'来确保选项卡未由\n\"，然后再将其放入配置中\ninoremap <silent><expr> <TAB>\n      \\ pumvisible() ? \"\\<C-n>\" :\n      \\ <SID>check_back_space() ? \"\\<TAB>\" :\n      \\ coc#refresh()\ninoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"\n\nfunction! s:check_back_space() abort\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~# '\\s'\nendfunction\n\n\" 使用ctrl+空格键来强制触发补全\ninoremap <silent><expr> <c-space> coc#refresh()\n\n\" <cr>表示空格键，<C-g>表示Ctrl+g\n\" 使用<cr>确认补全，“ <C-g> u”表示在当前位置断开撤消链\n\" Coc仅在确认时进行摘要和其他编辑\nif has('patch8.1.1068')\n  \" Use `complete_info` if your (Neo)Vim version supports it.\n  inoremap <expr> <cr> complete_info()[\"selected\"] != \"-1\" ? \"\\<C-y>\" : \"\\<C-g>u\\<CR>\"\nelse\n  imap <expr> <cr> pumvisible() ? \"\\<C-y>\" : \"\\<C-g>u\\<CR>\"\nendif\n\n\"  键盘映射参考：https://zhuanlan.zhihu.com/p/38150203\n\" nmap是:map的普通模式板，也就是说其绑定的键只作用于普通模式 \n\" <silent> 表示静默映射，不会显示Vim在处理rhs(映射后的键位)过程中对界面产生的变化\n\" 使用`[g`和`]g`浏览诊断\nnmap <silent> [g <Plug>(coc-diagnostic-prev)\nnmap <silent> ]g <Plug>(coc-diagnostic-next)\n\n\" 代码跳转\n\" GoTo code navigation.\nnmap <silent> gd <Plug>(coc-definition)\nnmap <silent> gy <Plug>(coc-type-definition)\nnmap <silent> gi <Plug>(coc-implementation)\nnmap <silent> gr <Plug>(coc-references)\n\n\" 使用K键在预览窗口中显示文档\nnnoremap <silent> K :call <SID>show_documentation()<CR>\nfunction! s:show_documentation()\n  if (index(['vim','help'], &filetype) >= 0)\n    execute 'h '.expand('<cword>')\n  else\n    call CocAction('doHover')\n  endif\nendfunction\n\n\" 按住光标时高亮符号及其引用\nautocmd CursorHold * silent call CocActionAsync('highlight')\n\n\" 符号重命名\nnmap <leader>rn <Plug>(coc-rename)\n\n\" 格式化所选代码\nxmap <leader>f  <Plug>(coc-format-selected)\nnmap <leader>f  <Plug>(coc-format-selected)\naugroup mygroup\n  autocmd!\n  \" Setup formatexpr specified filetype(s).\n  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')\n  \" Update signature help on jump placeholder.\n  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')\naugroup end\n\n\" 将codeAction应用于所选区域。\n\" 示例：<leader> aap 表示当前代码段\nxmap <leader>a  <Plug>(coc-codeaction-selected)\nnmap <leader>a  <Plug>(coc-codeaction-selected)\n\n\" 将codeAction应用于当前行的键的重新映射\nnmap <leader>ac  <Plug>(coc-codeaction)\n\" 自动修复当前行的代码问题\nnmap <leader>qf  <Plug>(coc-fix-current)\n\n\" 介绍功能文本对象\nxmap if <Plug>(coc-funcobj-i)\nxmap af <Plug>(coc-funcobj-a)\nomap if <Plug>(coc-funcobj-i)\nomap af <Plug>(coc-funcobj-a)\n\n\" 将<TAB>用于选择范围\nnmap <silent> <TAB> <Plug>(coc-range-select)\nxmap <silent> <TAB> <Plug>(coc-range-select)\n\n\" 添加`:Format`命令格式化当前缓冲区\ncommand! -nargs=0 Format :call CocAction('format')\n\n\" 添加`:Fold`命令折叠当前缓冲区\ncommand! -nargs=? Fold :call     CocAction('fold', <f-args>)\n\n\" 添加`:OR`命令来组织当前缓冲区的import\ncommand! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')\n\n\" 关于CoCList的一些键盘映射\n\" 显示所有的诊断\nnnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>\n\" 管理所有的插件\nnnoremap <silent> <space>e  :<C-u>CocList extensions<cr>\n\" 显示命令\nnnoremap <silent> <space>c  :<C-u>CocList commands<cr>\n\" 找出当前文件的符号\nnnoremap <silent> <space>o  :<C-u>CocList outline<cr>\n\" 在当前文件进行搜索\nnnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>\n\" 对下一项执行默认操作\nnnoremap <silent> <space>j  :<C-u>CocNext<CR>\n\" 对前一项执行默认操作\nnnoremap <silent> <space>k  :<C-u>CocPrev<CR>\n\" 恢复最新的coc列表\nnnoremap <silent> <space>p  :<C-u>CocListResume<CR>\n```\n\nLanguage Server Protocol，[LSP](https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions)以及[链接](https://github.com/neoclide/coc.nvim/wiki/Language-servers)\n\n**配置C/C++环境**\n\n安装clangd，需要`cmake>=3.12`和`gcc>=5.1`\n\n首先检测cmake版本\n\n```bash\ncmake --version\n```\n\n如果其版本小于3.12，则需要升级cmake，下面是编译最新cmake版本的脚本，在终端里新建`build_camke.sh`脚本，将下面的内容复制到脚本里\n\n```bash\n#!/bin/bash                                                                                                                                                                    \nyum remove cmake -y && rm -f /usr/bin/cmake\nwget -c https://github.com/Kitware/CMake/releases/download/v3.14.2/cmake-3.14.2.tar.gz\ntar xvf cmake-3.14.2.tar.gz \ncd $(pwd)/cmake-3.14.2   \n./bootstrap              \ngmake                    \ngmake install            \nsudo ln -s /usr/local/bin/cmake /usr/bin/\ncmake --version\n```\n\n然后在终端里运行\n\n```bash\nbash build_camke.sh\n```\n\n即可，如果出现问题，可以一步一步在终端运行命令。\n\n接着查看gcc版本信息\n\n```bash\ngcc --version\n```\n\n如果版本小于5.1，则需要对gcc进行[升级](https://tlanyan.me/install-upgrade-gcc-on-centos/)\n\n```bash\nsudo yum install devtoolset-4-gcc devtoolset-4-gcc-c++\nscl enable devtoolset-4 bash\n```\n\n再查看gcc版本，输出\n\n```bash\ngcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n接下来编译`clangd`，参考[链接](https://clangd.llvm.org/installation.html)、[链接](![image-20200408000824059](C:\\Users\\Dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200408000824059.png))、[链接](https://gist.github.com/jakob/929ed728c96741a119798647a32618ca)\n\n- 在**Mac OS**下，直接运行\n\n  ```\n  brew install llvm\n  ```\n\n- 在**Windows**下，下载预编译好的[版本](https://releases.llvm.org/download.html)，安装即可\n\n- 在**Debian/Ubuntu**系统下，运行代码\n\n  ```\n  sudo apt-get install clangd-9\n  ```\n\n  `clangd `的二进制文件将被安装在`/usr/bin/clangd-9`，将其设置为默认的连接符\n\n  ```bash\n  sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-9 100\n  ```\n\n- **Other systems（CentOS等）**\n\n  服务器因为是CentOS7.6版本，所有需要自己编译，通过查阅无数资料，`clangd`的编译脚本如下：\n\n  ```bash\n  #!/bin/bash\n  \n  set -e\n  \n  mkdir clangd\n  cd clangd/\n  svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\n  \n  cd llvm/tools\n  svn co http://llvm.org/svn/llvm-project/cfe/trunk clang\n  cd ../..\n  \n  cd llvm/tools/clang/tools\n  svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra\n  cd ../../../..\n  \n  mkdir build\n  cd build\n  cmake -G \"Unix Makefiles\" ../llvm\n  make clangd\n  \n  sudo update-alternatives --install /usr/bin/clangd clangd ./bin/clangd 100\n  ```\n\n将其保存为`build-clangd.sh`，在终端**根目录**(`cd ~`进入自己的根目录下)运行`bash build-clangd.sh`进行编译，我大概花费了**7个小时**左右的时间进行编译\n\n![build clangd](https://pic.downk.cc/item/5e8cab56504f4bcb046002b7.png)\n\n如图所示，编译完成，二进制文件在`~/clangd/build/bin`目录下，脚本的`Line 22`设置默认的`clangd`链接符，以便系统对`clangd`进行识别，在终端输入`clangd --version`，若可以看到版本信息且没有报错，则表明安装成功。若有类似的提示：未知的clangd命令，则可能需要将其二进制文件添加到系统`PATH`下，打开\n\n```bash\nnvim ~/.bashrc\n```\n\n在最后一行，加入`export PATH=\"~/clangd/build/bin:$PATH\"`，即添加`clangd`编译好的二进制文件目录路径到`PATH`，再运行\n\n```bash\nsource ~/.bashrc    // 更新文件，即时生效\nsudo update-alternatives --install /usr/bin/clangd clangd ~/clangd/build//clangd 100\n```\n\n安装`coc-clangd`\n\n打开`~/.vim/vimrc`文件，运行命令`:CocInstall coc-clangd`，coc-clangd[不需要在coc-settings.json里进行设置](https://github.com/clangd/coc-clangd#quick-start)，至此在nvim里的C/C++智能代码感知功能安装完成。\n\n你以为到这儿就结束了吗？本来我是这么以为的，直到……\n\n我创建了一个示例文件试试代码补全的功能，一顿操作\n\n```bash\nnvim ~/a.cpp\n```\n\n输入内容\n\n```\n#include <iostream>\n#include <vector>        \n#include <unordered_map> \n#include <queue>\n#include <list>          \n\nusing namespace std;     \n\nint main()               \n{\n\tcout << \"hello world!\" << endl;                         \n\t\n\treturn 0;            \n}\n```\n\n在终端运行`g++ a.cpp -o a`，然后翻车了\n\n![编译error](https://pic.downk.cc/item/5e8d4a68504f4bcb04df533a.png)\n\n啥意思呢？就是说`a.py`用到了**C++11**的新特性（#include <unordered_map> ），而当前g++版本是4.8.5（g++ --version查看），默认支持**C++98**，所以如果要使用C++11的新特性，在编译时加上`-std=c++11`或`-std=gnu++11`，即\n\n```bash\ng++ -std=c++11 a.cpp -o a\n```\n\n**配置Python环境**\n\n参考[链接](https://github.com/neoclide/coc-python)，首先需要安装[python-language-server](https://github.com/palantir/python-language-server)\n\n```bash\nsudo pip3 install 'python-language-server[all]'\n```\n\n接着安装[Jedi](https://jedi.readthedocs.io/en/latest/docs/installation.html)\n\n```bash\nsudo pip3 install jedi\n```\n\n此时语言解析器配置完成。\n\n在终端输入`nvim`，运行命令`:CocInstall coc-python`，显示`[coc.nvim]Installed extension: coc-python`，表示安装完成。\n\n在系统里，可能不同的python脚本需要不同的python解释器，系统也允许存在不同的python解释器，所以在打开你想要编辑的python文件后，需要设置你所有需要的python解释器，假设`a.py`需要python3解释器，\n\n```bash\nnvim a.py\n```\n\n然后在**普通模式**下输入命令`:CocCommand`，接着找到`python.setInterpreter`，找到你所需要的环境即可，这时安装在此环境下的包才会出发自动补全功能。\n\n![coc-python](https://pic.downk.cc/item/5e8dbdda504f4bcb0443d423.png)\n\n其它语言请参考[LSP](https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions)\n\n##### 缩进显示 — indentLine\n\n```bash\n\" 显示缩进标注, Python语言必须\nPlug 'Yggdroot/indentLine'\n```\n\n##### 文件操作历史 — Undotree\n\n```bash\n\" 列出文件最近的操作历史\nPlug 'mbbill/undotree'\n```\n\n##### 命令行模糊搜索工具 — fzf/fzf-vim\n\n[fzf](https://github.com/junegunn/fzf)\n\n```bash\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\n[fzf-vim](https://github.com/junegunn/fzf.vim)\n\n```bash\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\n```\n\n要想使用文件内搜索命令，需要提前安装[ag](https://github.com/ggreer/the_silver_searcher)\n\n```bash\nsudo yum install the_silver_searcher\n```\n\n\n\n### 一些要点\n\n\n\n### 一些问题\n\n- :PluginInstall 不是编辑器命令？\n\n  两个原因\n\n  - 路径配置出错\n\n  目前来看是路径问题，根据[官网](https://github.com/VundleVim/Vundle.vim/)描述，安装命令为\n\n  ```\n  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n  ```\n\n  可能在~/.vim/vimrc配置文件中把**bundle**写成了**bunlde**，**Vundle**写成**Vumdle**……真的醉了……浪费了两个小时时间……\n\n  - 实在没有办法，将安装命令调整为\n\n  ```\n  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/plugin/Vundle.vim\n  ```\n\n  哔了狗了。\n\n- **Vim卡住，死机？**\n\n  **原因**：\n\n  使用vim时，会因为不小心按了Ctrl + s后，会发现不能输入任何字符，类似死机；\n\n  这并不是Linux死机，或者vim卡住，而只是按了Ctrl + s后，vim停止向终端输出。\n\n  **解决方法**：\n\n  退出这种状态，按下**Ctrl + q** 。\n\n- 升级**Ruby**\n\n  打开`nvim`，输入命令`:CheckHealth`，如果提示Ruby版本过低，则需要升级\n\n  1. 查看当前Ruby版本\n\n     ```bash\n     ruby --version\n     ```\n\n     显示的是**ruby 2.0.0p648 (2015-12-16) [x86_64-linux]**\n\n  2. 安装yum源\n\n     ```bash\n     yum install -y centos-release-scl-rh\n     ```\n\n  3. 安装指定版本的ruby\n\n     ```bash\n     yum install -y rh-ruby24\n     ```\n\n  4. 使升级后的ruby版本生效\n\n     ```bash\n     scl enable rh-ruby24 bash\n     ```\n\n  5. 查看是否升级成功\n\n     ```bash\n     ruby --version\n     ```\n\n     显示**ruby 2.4.6p354 (2019-04-01 revision 67394) [x86_64-linux]**\n\n  **但是**，这种方法，**只会在当前环境下有效**，也就是说，退出当前环境就没有用了，还要执行第5步，所以最好对的方法是重新编译，方法如下\n\n  ```bash\n  wget http://cache.ruby-lang.org/pub/ruby/ruby-2.4.10.tar.gz\n  tar xvfvz ruby-2.4.10.tar.gz\n  cd ruby-2.4.10\n  ./configure\n  make\n  sudo make install\n  ```\n\n- 安装[screenkey](https://gitlab.com/screenkey/screenkey)\n\n  ```bash\n  sudo yum install python-distutils-extra    // optional\n  wget https://www.thregr.org/~wavexx/software/screenkey/releases/screenkey-0.9.tar.gz\n  tar -zxvf screenkey-0.9.tar.gz\n  cd cd screenkey-0.9/\n  ./screenkey\n  sudo ./setup.py install\n  ```\n\n\n### 结语\n\nnvim的外壳[onivim](https://github.com/onivim/oni)\n\n### 后续计划\n\n插件相关\n\n- [ ] Python交互式编程[vim-repl](https://github.com/sillybun/vim-repl)\n- [ ] git相关插件\n\nLinux相关\n\n- [ ] 在客户端界面下安装[i3](https://i3wm.org/)\n- [ ] 使用**fish**和**oh my fish**\n- [ ] 结合**tmux**工具\n- [ ] 配置[oh my zsh](https://github.com/robbyrussell/oh-my-zsh)和[主题](https://github.com/bhilburn/powerlevel9k)\n- [ ] 更换系统字体为[Monaco](http://www.mycode.net.cn/wp-content/uploads/2016/06/Monaco.zip)\n- [ ] 更新[zsh版本](https://www.jianshu.com/p/0659d5561502)\n\n### 参考\n\n- https://juejin.im/post/5a38c37f6fb9a0450909a151#heading-1\n- [编译支持python3的Vim](https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source)\n\n- [Vim插件管理Vundle](https://github.com/VundleVim/Vundle.vim)","source":"_posts/Linux之打造vim实用配置方案.md","raw":"---\nbashtitle: Linux之像IDE一样使用vim（C++版本/Python版本）\ntoc: true\nrecommend: 1\ndate: 2020-03-30 14:30:43\nthumbnail: https://pic.downk.cc/item/5e887c1d504f4bcb04ee9d03.png\ntags: Vim\ncategories: Linux\nkeywords: Vim\n---\n\n打造vim实用配置方案\n\n <!-- more --> \n\n这篇文章的目的，是打造让自己感觉舒服好用的[Vim](https://github.com/vim/vim)/[NeoVim](https://github.com/neovim/neovim)环境以便获得更好的编程体验，并将我所遇到的一些问题列出解决方案，不足之处还请见谅，欢迎与各位进行交流，邮箱是<kangzhiheng@live.cn>。\n\n本文所有命令，在**CentOS7.6** 上全部测试通过，Mac系统相对来说配置比较容易，在此不做特别说明，每一步都有详细的步骤，敬请参考。\n\n### 什么是Vim？\n\n**[Vim](https://www.vim.org/)- the ubiquitous text editor**，一种无处不在的文本编辑器，维基百科是这么介绍**vim**的：\n\n> **Vim**是从[vi](https://zh.wikipedia.org/wiki/Vi)发展出来的一个[文本编辑器](https://zh.wikipedia.org/wiki/文本编辑器)。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和[Emacs](https://zh.wikipedia.org/wiki/Emacs)并列成为[类Unix系统](https://zh.wikipedia.org/wiki/类Unix系统)用户最喜欢的编辑器。\n>\n> Vim的第一个版本由[布莱姆·米勒](https://zh.wikipedia.org/wiki/布萊姆·米勒)在1991年发布。最初的简称是**V**i **IM**itation，随着功能的不断增加，正式名称改成了**V**i **IM**proved。现在是在[开放源代码](https://zh.wikipedia.org/wiki/开放源代码)方式下发行的[自由软件](https://zh.wikipedia.org/wiki/自由软件)。\n\n**文件的增删查改**——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。\n\n**配置文件**——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿`git clone repoyoulike`，然后按照配置文档进行修改，什么**tf**要升级啦，**gcc/g++**要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用`gedit`来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用**ssh**连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。\n\n**知其然知其所以然**——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。\n\n**Vim**适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从[官网](https://www.vim.org/download.php)下载。 \n\n### Vim哲学\n\n简单概括：摆脱鼠标，一键到达。\n\n即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。\n\n### 升级支持python3的Vim8\n\n在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是**vi**编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，[Vim8](https://github.com/vim/vim)在[NeoVim](https://github.com/neovim/neovim)的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口**terminal**，尤其是支持**terminal**非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，在升级了支持**Python3**的Vim8后（**在Vim版本中，不能同时支持Python2和Python3**），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。在这一小节，介绍怎么**编译支持Python3的Vim8版本**，**前提是系统了安装Python3**，Python3的安装不做讨论。\n\n1. **编译安装yum源里的vim最新版**\n\n   [参考YouCompleteMe](https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source)里给出的方法，略作调整。\n\n   首先检查系统里的Vim是否已经安装，在终端输入命令\n\n   ```bash\n   rpm -qa | grep vim\n   ```\n\n   如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（**下载Vim最新版源代码**）开始阅读。\n\n   一般情况下，运行下列命令安装Vim\n\n   ```bash\n   yum -y install yum*    // CentOS7.6系统\n   ```\n\n   查看vim版本\n\n   ```bash\n   vim --version\n   ```\n\n   可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。\n\n   如果是Vim版本，查看Vim是否支持Python3\n\n   ```bash\n   vim --version | grep python\n   ```\n\n   如果结果显示python3前面是`+`号，则这一小节可以跳过，如果是`-`号，则需要自己编译Vim，需执行以下步骤。\n\n2. **卸载Vim**\n\n   在编译之前，需要卸载系统上的Vim版本\n\n   - 如果使用`yum install vim*`命令安装的Vim，卸载Vim时执行\n\n     ```bash\n     yum remove vim\n     ```\n\n   - 如果Vim是使用`make`编译过的，在**CentOS7.6系统**下，进入到Vim源代码目录，执行\n\n     ```bash\n     sudo make uninstall\n     ```\n\n   如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone https://github.com/vim/vim.git)，然后`cd vim`，再执行上述语句。\n\n   如果是**Ubuntu系统**，卸载起来就比较方便\n\n   ```bash\n   sudo apt install checkinstall\n   cd ~/vim       // vim是Vim源代码文件夹\n   sudo checkinstall\n   ```\n\n3. **下载Vim最新版源代码**\n\n   ```bash\n   cd ~                                         // 进入到当前用户的根目录下\n   git clone https://github.com/vim/vim.git     // 下载Vim源代码\n   cd vim                                       // 进入到Vim源代码文件\n   ```\n\n4. **配置**\n\n   ```bash\n   ./configure --with-features=huge \\\n               --enable-multibyte \\\n               --enable-rubyinterp=yes \\\n               --enable-python3interp=yes \\\n               --with-python3-config-dir=$(python3-config --configdir) \\\n               --enable-perlinterp=yes \\\n               --enable-luainterp=yes \\\n               --enable-gui=gtk2 \\\n               --enable-cscope \\\n               --prefix=/usr/local\n   ```\n\n   命令[解释](https://www.jianshu.com/p/aac78ff576c5)：\n\n   ` --with-features=huge`：支持最大特性\n\n   `--enable-multibyte`：打开多字节支持，可以在Vim中输入中文\n\n   `--enable-rubyinterp`：打开对ruby编写的插件的支持\n\n   ` --enable-python3interp`：打开对python3编写的插件的支持\n\n   `--with-python-config-dir`：Python3的路径\n\n   `--enable-perlinterp`：打开对perl编写的插件的支持\n\n   ` --enable-luainterp`：打开对lua编写的插件的支持\n\n   `--enable-gui`：打开GUI支持\n\n   `--enable-cscope`：打开对cscope的支持\n\n   `--prefix=/usr/local/`：指定将要安装到的路径\n\n5. **设置VIMRUNTIMEDIR**\n\n   **VIMRUNTIMEDIR**是vim运行时候所需资源的目录，非常重要。\n\n   ```bash\n       make VIMRUNTIMEDIR=/usr/local/share/vim/vim82\n   ```\n\n6. **编译安装**\n\n   ```bash\n   sudo make install\n   ```\n\n7. **设置Vim为默认的编辑器**\n\n   使用`update-alternative`设置vim为默认编辑器：\n\n   ```bash\n   sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim 1\n   sudo update-alternatives --set editor /usr/local/bin/vim\n   sudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim 1\n   sudo update-alternatives --set vi /usr/local/bin/vim\n   ```\n\n按照上述步骤完成后查看Vim**版本\n\n```\nvim --version\n```\n\n![vim版本](https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png)\n\n可以看到Vim版本是8.2版本，已开启**python3支持**，需要进行验证，在终端输入`vim`，接着在**正常模式**下输入`:echo has(\"python3\")`，按一下回车键，若屏幕最下面输出`1`，则配置正确，Vim支持Python3。\n\n编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及**Issues（非常有用）**、[stackoverflow](https://stackoverflow.com/)等，其次再考虑其它出处，尽可能多看**专业的英文文档**，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！\n\n该方法是全局设置方法。\n\n- **安装中文vim帮助文档**\n\n  进入Vim环境，按一下前缀键`esc`，在英文语法环境下，输入`:help`后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：\n\n  - **下载中文安装包**\n\n    ```bash\n    wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz\n    ```\n\n  - **解压**\n\n    ```bash\n    tar zxvf v2.3.0.tar.gz\n    ```\n\n  - **安装**\n\n    ```bash\n    cd vimcdoc-2.3.0/\t\t\t\t# 进入解压后的目录\n    ./vimcdoc.sh -i\t\t\t\t\t# 安装\n    ```\n\n    命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。\n\n### Vim8 —> NeoVim\n\n完全是偶然。在上回讲到，在Vim下折腾了两三天的[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。\n\n### 基本操作\n\n\n\n基本模式\n\n编辑模式\n\n### 基础设置\n\n[键盘映射技巧](https://zhuanlan.zhihu.com/p/38150203)\n\n`\"+p`可以将外部内容粘贴到终端vim文件中\n\n### 插件管理\n\n#### vim-plug插件管理器\n\nVim的插件管理有[Vundle](https://github.com/VundleVim/Vundle.vim)、[vim-plug](https://github.com/junegunn/vim-plug)、[SpaceVim](https://github.com/SpaceVim/SpaceVim)等，[Vundle](https://github.com/VundleVim/Vundle.vim)是一款非常出名且历史悠久的Vim插件管理工具，但随着安装的vim插件越来越多，使用Vundle来管理这些插件时效率变得越来越低，vim启动耗时也越来越大，且多年没有更新；[SpaceVim](https://github.com/SpaceVim/SpaceVim)挺酷炫，有时间可以尝试一下，在这里推荐使用[vim-plug](https://github.com/junegunn/vim-plug)，\n\n**Unix安装**（包括CentOS和Mac）\n\n```bash\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\n该命令在Unix系统下无须进行修改，会自动创建目录`~/.vim/autoload/`。\n\n更新vim-plug插件自身：\n\n```bash\n:PlugUpgrade\n```\n\n批量更新所有已安装的插件：\n\n```bash\n:PlugUpdate\n```\n\n查看插件状态\n\n```bash\n:PlugStatus\n```\n\n卸载插件：请先在**~/.vim/vimrc**或者**~/.config/nvim/init.vim**配置文件中注释或者删除对应插件的配置信息，然后再执行以下命令：\n\n```\n:PlugClean\n```\n\n\n\n#### 插件安装\n\n假设系统已经安装了python3解释器，如没有安装，请参考这篇[文章]([https://github.com/kangzhiheng/GitLocalDoc#anaconda%E5%AE%89%E8%A3%85tensorflow-gpu](https://github.com/kangzhiheng/GitLocalDoc#anaconda安装tensorflow-gpu))\n\n##### 美化启动界面  — vim-startify\n\nhttps://github.com/mhinz/vim-startify\n\n```bash\nPlug 'mhinz/vim-startify'\n```\n\n![startigy](https://pic.downk.cc/item/5e8de221504f4bcb0466b21e.png)\n\n在终端输入`nvim`后，显示nvim启动界面，列出最近打开的文件，很方便。\n\n##### 美化状态栏 — ariline\n\nhttps://github.com/vim-airline/vim-airline\n\n```bash\nPlug 'vim-airline/vim-airline'\n```\n\n![美化状态栏](https://github.com/vim-airline/vim-airline/wiki/screenshots/demo.gif)\n\n\n\n##### 文件管理插件 — NERDTree\n\n使用方法\n\nCtrl + w + w   窗口之间的跳转\n\n当光标在NERDTree窗口时，\n\n`shift+i`是打开/关闭隐藏文件\n\no - 展开/合并某个目录\n\nC - 如果需要某个文件夹作为你的工作区，则需要按下大写C即可设置此目录为当前工作区\n\nU - 跳转到上一层目录\n\ncd - 设置该目录为家目录\n\nCD - 可能在别的目录迷失了方向，直接输入`CD`跳转到已经设置好的家目录\n\n##### 代码自动补全 — YouCompleteMe\n\n```bash\n\ncall plug#begin('~/.vim/pluged')\n\n\" 插件配置\n\n\" 文件树\nPlug 'scrooloose/nerdtree'\n\n\" 代码补全\nPlug 'ycm-core/YouCompleteMe'\n\ncall plug#end()               \n```\n\n在Vim配置文件`~/.vim/vimrc`下的插件Vundle部分，加入[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，然后在**正常模式**下，键入`:PluginInstall`进行插件安装，安装完成后，会在命令行提出\n\n```bash\nThe ycmd server SHUT DOWN (restart with ‘:YcmRestartServer’). YCM core library not detected; you need to compile YCM before using it. Follow the instructions in the documentation.\n```\n\n这是因为，**YouCompleteMe** 需要手工编译出库文件 ycm_core.so (以及依赖的libclang.so) 才可使用。**YouCompleteMe**支持的语言\n\n- **C系列（C/C++/Objective-C/Objective-C++）**：编译时添加`--clangd-completer`\n- **C#**：先安装[Mono](http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives)，编译时添加`--cs-completer`\n- **Go**：先安装[Go](https://golang.org/doc/install，编译时添加`--go-completer`\n- **JavaScript**和**TypeScript**：先安装 [Node.js and npm](https://docs.npmjs.com/getting-started/installing-node#1-install-nodejs--npm)，编译时添加`--ts-completer`\n- **Rust**: 编译时添加`--rust-completer`\n- **Java**: 先安装[JDK8](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)，编译时添加`--java-completer`\n- 全部支持：先安装所有的依赖环境，编译时添加`--all`\n\n要使用`--all`功能进行安装，请确保已在`PATH`中安装了**msbuild**，**go**，**node**和**npm**工具。\n\n个人对C系列使用较多，因此\n\n```bash\ncd ~/.vim/pluged/YouCompleteMe\npython3 install.py --clangd-completer\n```\n\n如果系统没有设置默认的Python为Python3版本，则需要注意以上命令是`python3`开头的，这时**C系列**语言的代码自动补全功能配置完毕。\n\npython语言自动补全\n\n需要在Vim配置文件`~/.config/nvim/init.vim`下的插件Vundle部分，加入\n\n```bash\n \" YouCompleteMe配置                                                                                                                              \nnnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>                                 nnoremap g/ :YcmCompleter GetDoc<CR>                                                       nnoremap gt :YcmCompleter GetType<CR>                                                       nnoremap gr :YcmCompleter GoToReferences<CR>                                                 let g:ycm_autoclose_preview_window_after_completion=0                                       let g:ycm_autoclose_preview_window_after_insertion=1                                         let g:ycm_use_clangd = 0                                                                     let g:ycm_seed_identifiers_with_syntax=1                                                     let g:ycm_collect_identifiers_from_tags_files = 1                                           let g:ycm_min_num_of_chars_for_completion=2                                                  let g:ycm_path_to_python_interpreter='/usr/bin/python3' \n```\n\n注意python3解释器的位置，这个设置好像对第三方库不是很友好，我再探索探索。\n\n##### 括号自动补全 — auto-pairs\n\n[链接  ](https://github.com/jiangmiao/auto-pairs)\n\n##### 函数列表 — TagBar\n\n[链接](https://github.com/majutsushi/tagbar)\n\n首先安装`ctags`\n\n```bash\n# CentOS7.6\nsudo yum install ctags\n# Ubuntu\nsudo apt-get install ctags\n# Mac\nbrew install ctags\n```\n\n在`~/.config/nvim/init.vim`里的**插件配置**里\n\n```bash\n\" 显示函数列表                        \nPlug 'majutsushi/tagbar'\n```\n\n\n\n##### 代码自动补全 coc-vim（推荐）\n\n根据[官网](https://github.com/neoclide/coc.nvim)建议，安装coc-vim前，需要首先安装[nodejs](https://nodejs.org/en/download/)\n\n```bash\ncurl -sL install-node.now.sh/lts | bash\n```\n\n利用vim-plus来进行安装\n\n```bash\n\" Coc-vim 自动补全插件\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n```\n\n保存并重启（更新）`~/.config/nvim/init.vim`文件，运行`PlugInstall`进行安装。\n\n如果出现[错误](https://github.com/neoclide/coc.nvim/issues/651)\n\n```bash\n[coc.nvim] javascript file not found, please compile the code or use release branch.\n```\n\n参考[issue651](https://github.com/neoclide/coc.nvim/issues/651)，打开`~/.config/nvim/init.vim`文件，运行命令`:call coc#util#install()`可以解决该问题。\n\n安装完成后，根据[项目](https://github.com/neoclide/coc.nvim/)对coc-vim插件进行配置，参考[链接](https://github.com/neoclide/coc.nvim/blob/master/doc/coc.cnx)（重要），在`~/.config/nvim/init.vim`下进行coc-vim插件进行个性化配置使其更加易用，这部分配置文件如下：\n\n```bash\n\" ====\n\" ==== coc-vim插件配置\n\" ====\n\" 允许在有未保存的修改时切换缓冲区, 此时的修改由 vim 负责保存\nset hidden\n\n\" 覆盖文件时不备份\nset nobackup\n\n\" 表示编辑的时候不需要备份文件\nset nowritebackup\n\n\" 命令行（在状态行下）的高度, 默认为1, 这里是2, 展示更多的信息\nset cmdheight=2\n\n\" 根据默认设置，交换文件会每隔4000毫秒（4秒）或者200个字符保存一次\n\" 我们可以使用以下命令，修改保存交换文件的频率\n\" 较长的更新时间（默认值为4000 ms = 4 s）会导致明显的延迟和较差的用户体验。\nset updatetime=300\n\n\" 历史原因，Vim的界面可能会显示“帮助乌干达的可怜儿童”，该命令将其屏蔽\n\" Don't pass messages to |ins-completion-menu|.\nset shortmess+=c\n\n\" 始终显示标号列\nset signcolumn=yes\n\n\" inoremap命令用于在“插入模式”中进行映射按键\n\" 使用TAB键来启动代码补全触发器，并在前面加上字符并进行导航。\n\" 注意：使用命令'：verbose imap <tab>'来确保选项卡未由\n\"，然后再将其放入配置中\ninoremap <silent><expr> <TAB>\n      \\ pumvisible() ? \"\\<C-n>\" :\n      \\ <SID>check_back_space() ? \"\\<TAB>\" :\n      \\ coc#refresh()\ninoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"\n\nfunction! s:check_back_space() abort\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~# '\\s'\nendfunction\n\n\" 使用ctrl+空格键来强制触发补全\ninoremap <silent><expr> <c-space> coc#refresh()\n\n\" <cr>表示空格键，<C-g>表示Ctrl+g\n\" 使用<cr>确认补全，“ <C-g> u”表示在当前位置断开撤消链\n\" Coc仅在确认时进行摘要和其他编辑\nif has('patch8.1.1068')\n  \" Use `complete_info` if your (Neo)Vim version supports it.\n  inoremap <expr> <cr> complete_info()[\"selected\"] != \"-1\" ? \"\\<C-y>\" : \"\\<C-g>u\\<CR>\"\nelse\n  imap <expr> <cr> pumvisible() ? \"\\<C-y>\" : \"\\<C-g>u\\<CR>\"\nendif\n\n\"  键盘映射参考：https://zhuanlan.zhihu.com/p/38150203\n\" nmap是:map的普通模式板，也就是说其绑定的键只作用于普通模式 \n\" <silent> 表示静默映射，不会显示Vim在处理rhs(映射后的键位)过程中对界面产生的变化\n\" 使用`[g`和`]g`浏览诊断\nnmap <silent> [g <Plug>(coc-diagnostic-prev)\nnmap <silent> ]g <Plug>(coc-diagnostic-next)\n\n\" 代码跳转\n\" GoTo code navigation.\nnmap <silent> gd <Plug>(coc-definition)\nnmap <silent> gy <Plug>(coc-type-definition)\nnmap <silent> gi <Plug>(coc-implementation)\nnmap <silent> gr <Plug>(coc-references)\n\n\" 使用K键在预览窗口中显示文档\nnnoremap <silent> K :call <SID>show_documentation()<CR>\nfunction! s:show_documentation()\n  if (index(['vim','help'], &filetype) >= 0)\n    execute 'h '.expand('<cword>')\n  else\n    call CocAction('doHover')\n  endif\nendfunction\n\n\" 按住光标时高亮符号及其引用\nautocmd CursorHold * silent call CocActionAsync('highlight')\n\n\" 符号重命名\nnmap <leader>rn <Plug>(coc-rename)\n\n\" 格式化所选代码\nxmap <leader>f  <Plug>(coc-format-selected)\nnmap <leader>f  <Plug>(coc-format-selected)\naugroup mygroup\n  autocmd!\n  \" Setup formatexpr specified filetype(s).\n  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')\n  \" Update signature help on jump placeholder.\n  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')\naugroup end\n\n\" 将codeAction应用于所选区域。\n\" 示例：<leader> aap 表示当前代码段\nxmap <leader>a  <Plug>(coc-codeaction-selected)\nnmap <leader>a  <Plug>(coc-codeaction-selected)\n\n\" 将codeAction应用于当前行的键的重新映射\nnmap <leader>ac  <Plug>(coc-codeaction)\n\" 自动修复当前行的代码问题\nnmap <leader>qf  <Plug>(coc-fix-current)\n\n\" 介绍功能文本对象\nxmap if <Plug>(coc-funcobj-i)\nxmap af <Plug>(coc-funcobj-a)\nomap if <Plug>(coc-funcobj-i)\nomap af <Plug>(coc-funcobj-a)\n\n\" 将<TAB>用于选择范围\nnmap <silent> <TAB> <Plug>(coc-range-select)\nxmap <silent> <TAB> <Plug>(coc-range-select)\n\n\" 添加`:Format`命令格式化当前缓冲区\ncommand! -nargs=0 Format :call CocAction('format')\n\n\" 添加`:Fold`命令折叠当前缓冲区\ncommand! -nargs=? Fold :call     CocAction('fold', <f-args>)\n\n\" 添加`:OR`命令来组织当前缓冲区的import\ncommand! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')\n\n\" 关于CoCList的一些键盘映射\n\" 显示所有的诊断\nnnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>\n\" 管理所有的插件\nnnoremap <silent> <space>e  :<C-u>CocList extensions<cr>\n\" 显示命令\nnnoremap <silent> <space>c  :<C-u>CocList commands<cr>\n\" 找出当前文件的符号\nnnoremap <silent> <space>o  :<C-u>CocList outline<cr>\n\" 在当前文件进行搜索\nnnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>\n\" 对下一项执行默认操作\nnnoremap <silent> <space>j  :<C-u>CocNext<CR>\n\" 对前一项执行默认操作\nnnoremap <silent> <space>k  :<C-u>CocPrev<CR>\n\" 恢复最新的coc列表\nnnoremap <silent> <space>p  :<C-u>CocListResume<CR>\n```\n\nLanguage Server Protocol，[LSP](https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions)以及[链接](https://github.com/neoclide/coc.nvim/wiki/Language-servers)\n\n**配置C/C++环境**\n\n安装clangd，需要`cmake>=3.12`和`gcc>=5.1`\n\n首先检测cmake版本\n\n```bash\ncmake --version\n```\n\n如果其版本小于3.12，则需要升级cmake，下面是编译最新cmake版本的脚本，在终端里新建`build_camke.sh`脚本，将下面的内容复制到脚本里\n\n```bash\n#!/bin/bash                                                                                                                                                                    \nyum remove cmake -y && rm -f /usr/bin/cmake\nwget -c https://github.com/Kitware/CMake/releases/download/v3.14.2/cmake-3.14.2.tar.gz\ntar xvf cmake-3.14.2.tar.gz \ncd $(pwd)/cmake-3.14.2   \n./bootstrap              \ngmake                    \ngmake install            \nsudo ln -s /usr/local/bin/cmake /usr/bin/\ncmake --version\n```\n\n然后在终端里运行\n\n```bash\nbash build_camke.sh\n```\n\n即可，如果出现问题，可以一步一步在终端运行命令。\n\n接着查看gcc版本信息\n\n```bash\ngcc --version\n```\n\n如果版本小于5.1，则需要对gcc进行[升级](https://tlanyan.me/install-upgrade-gcc-on-centos/)\n\n```bash\nsudo yum install devtoolset-4-gcc devtoolset-4-gcc-c++\nscl enable devtoolset-4 bash\n```\n\n再查看gcc版本，输出\n\n```bash\ngcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n接下来编译`clangd`，参考[链接](https://clangd.llvm.org/installation.html)、[链接](![image-20200408000824059](C:\\Users\\Dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200408000824059.png))、[链接](https://gist.github.com/jakob/929ed728c96741a119798647a32618ca)\n\n- 在**Mac OS**下，直接运行\n\n  ```\n  brew install llvm\n  ```\n\n- 在**Windows**下，下载预编译好的[版本](https://releases.llvm.org/download.html)，安装即可\n\n- 在**Debian/Ubuntu**系统下，运行代码\n\n  ```\n  sudo apt-get install clangd-9\n  ```\n\n  `clangd `的二进制文件将被安装在`/usr/bin/clangd-9`，将其设置为默认的连接符\n\n  ```bash\n  sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-9 100\n  ```\n\n- **Other systems（CentOS等）**\n\n  服务器因为是CentOS7.6版本，所有需要自己编译，通过查阅无数资料，`clangd`的编译脚本如下：\n\n  ```bash\n  #!/bin/bash\n  \n  set -e\n  \n  mkdir clangd\n  cd clangd/\n  svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\n  \n  cd llvm/tools\n  svn co http://llvm.org/svn/llvm-project/cfe/trunk clang\n  cd ../..\n  \n  cd llvm/tools/clang/tools\n  svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra\n  cd ../../../..\n  \n  mkdir build\n  cd build\n  cmake -G \"Unix Makefiles\" ../llvm\n  make clangd\n  \n  sudo update-alternatives --install /usr/bin/clangd clangd ./bin/clangd 100\n  ```\n\n将其保存为`build-clangd.sh`，在终端**根目录**(`cd ~`进入自己的根目录下)运行`bash build-clangd.sh`进行编译，我大概花费了**7个小时**左右的时间进行编译\n\n![build clangd](https://pic.downk.cc/item/5e8cab56504f4bcb046002b7.png)\n\n如图所示，编译完成，二进制文件在`~/clangd/build/bin`目录下，脚本的`Line 22`设置默认的`clangd`链接符，以便系统对`clangd`进行识别，在终端输入`clangd --version`，若可以看到版本信息且没有报错，则表明安装成功。若有类似的提示：未知的clangd命令，则可能需要将其二进制文件添加到系统`PATH`下，打开\n\n```bash\nnvim ~/.bashrc\n```\n\n在最后一行，加入`export PATH=\"~/clangd/build/bin:$PATH\"`，即添加`clangd`编译好的二进制文件目录路径到`PATH`，再运行\n\n```bash\nsource ~/.bashrc    // 更新文件，即时生效\nsudo update-alternatives --install /usr/bin/clangd clangd ~/clangd/build//clangd 100\n```\n\n安装`coc-clangd`\n\n打开`~/.vim/vimrc`文件，运行命令`:CocInstall coc-clangd`，coc-clangd[不需要在coc-settings.json里进行设置](https://github.com/clangd/coc-clangd#quick-start)，至此在nvim里的C/C++智能代码感知功能安装完成。\n\n你以为到这儿就结束了吗？本来我是这么以为的，直到……\n\n我创建了一个示例文件试试代码补全的功能，一顿操作\n\n```bash\nnvim ~/a.cpp\n```\n\n输入内容\n\n```\n#include <iostream>\n#include <vector>        \n#include <unordered_map> \n#include <queue>\n#include <list>          \n\nusing namespace std;     \n\nint main()               \n{\n\tcout << \"hello world!\" << endl;                         \n\t\n\treturn 0;            \n}\n```\n\n在终端运行`g++ a.cpp -o a`，然后翻车了\n\n![编译error](https://pic.downk.cc/item/5e8d4a68504f4bcb04df533a.png)\n\n啥意思呢？就是说`a.py`用到了**C++11**的新特性（#include <unordered_map> ），而当前g++版本是4.8.5（g++ --version查看），默认支持**C++98**，所以如果要使用C++11的新特性，在编译时加上`-std=c++11`或`-std=gnu++11`，即\n\n```bash\ng++ -std=c++11 a.cpp -o a\n```\n\n**配置Python环境**\n\n参考[链接](https://github.com/neoclide/coc-python)，首先需要安装[python-language-server](https://github.com/palantir/python-language-server)\n\n```bash\nsudo pip3 install 'python-language-server[all]'\n```\n\n接着安装[Jedi](https://jedi.readthedocs.io/en/latest/docs/installation.html)\n\n```bash\nsudo pip3 install jedi\n```\n\n此时语言解析器配置完成。\n\n在终端输入`nvim`，运行命令`:CocInstall coc-python`，显示`[coc.nvim]Installed extension: coc-python`，表示安装完成。\n\n在系统里，可能不同的python脚本需要不同的python解释器，系统也允许存在不同的python解释器，所以在打开你想要编辑的python文件后，需要设置你所有需要的python解释器，假设`a.py`需要python3解释器，\n\n```bash\nnvim a.py\n```\n\n然后在**普通模式**下输入命令`:CocCommand`，接着找到`python.setInterpreter`，找到你所需要的环境即可，这时安装在此环境下的包才会出发自动补全功能。\n\n![coc-python](https://pic.downk.cc/item/5e8dbdda504f4bcb0443d423.png)\n\n其它语言请参考[LSP](https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions)\n\n##### 缩进显示 — indentLine\n\n```bash\n\" 显示缩进标注, Python语言必须\nPlug 'Yggdroot/indentLine'\n```\n\n##### 文件操作历史 — Undotree\n\n```bash\n\" 列出文件最近的操作历史\nPlug 'mbbill/undotree'\n```\n\n##### 命令行模糊搜索工具 — fzf/fzf-vim\n\n[fzf](https://github.com/junegunn/fzf)\n\n```bash\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\n[fzf-vim](https://github.com/junegunn/fzf.vim)\n\n```bash\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\n```\n\n要想使用文件内搜索命令，需要提前安装[ag](https://github.com/ggreer/the_silver_searcher)\n\n```bash\nsudo yum install the_silver_searcher\n```\n\n\n\n### 一些要点\n\n\n\n### 一些问题\n\n- :PluginInstall 不是编辑器命令？\n\n  两个原因\n\n  - 路径配置出错\n\n  目前来看是路径问题，根据[官网](https://github.com/VundleVim/Vundle.vim/)描述，安装命令为\n\n  ```\n  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n  ```\n\n  可能在~/.vim/vimrc配置文件中把**bundle**写成了**bunlde**，**Vundle**写成**Vumdle**……真的醉了……浪费了两个小时时间……\n\n  - 实在没有办法，将安装命令调整为\n\n  ```\n  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/plugin/Vundle.vim\n  ```\n\n  哔了狗了。\n\n- **Vim卡住，死机？**\n\n  **原因**：\n\n  使用vim时，会因为不小心按了Ctrl + s后，会发现不能输入任何字符，类似死机；\n\n  这并不是Linux死机，或者vim卡住，而只是按了Ctrl + s后，vim停止向终端输出。\n\n  **解决方法**：\n\n  退出这种状态，按下**Ctrl + q** 。\n\n- 升级**Ruby**\n\n  打开`nvim`，输入命令`:CheckHealth`，如果提示Ruby版本过低，则需要升级\n\n  1. 查看当前Ruby版本\n\n     ```bash\n     ruby --version\n     ```\n\n     显示的是**ruby 2.0.0p648 (2015-12-16) [x86_64-linux]**\n\n  2. 安装yum源\n\n     ```bash\n     yum install -y centos-release-scl-rh\n     ```\n\n  3. 安装指定版本的ruby\n\n     ```bash\n     yum install -y rh-ruby24\n     ```\n\n  4. 使升级后的ruby版本生效\n\n     ```bash\n     scl enable rh-ruby24 bash\n     ```\n\n  5. 查看是否升级成功\n\n     ```bash\n     ruby --version\n     ```\n\n     显示**ruby 2.4.6p354 (2019-04-01 revision 67394) [x86_64-linux]**\n\n  **但是**，这种方法，**只会在当前环境下有效**，也就是说，退出当前环境就没有用了，还要执行第5步，所以最好对的方法是重新编译，方法如下\n\n  ```bash\n  wget http://cache.ruby-lang.org/pub/ruby/ruby-2.4.10.tar.gz\n  tar xvfvz ruby-2.4.10.tar.gz\n  cd ruby-2.4.10\n  ./configure\n  make\n  sudo make install\n  ```\n\n- 安装[screenkey](https://gitlab.com/screenkey/screenkey)\n\n  ```bash\n  sudo yum install python-distutils-extra    // optional\n  wget https://www.thregr.org/~wavexx/software/screenkey/releases/screenkey-0.9.tar.gz\n  tar -zxvf screenkey-0.9.tar.gz\n  cd cd screenkey-0.9/\n  ./screenkey\n  sudo ./setup.py install\n  ```\n\n\n### 结语\n\nnvim的外壳[onivim](https://github.com/onivim/oni)\n\n### 后续计划\n\n插件相关\n\n- [ ] Python交互式编程[vim-repl](https://github.com/sillybun/vim-repl)\n- [ ] git相关插件\n\nLinux相关\n\n- [ ] 在客户端界面下安装[i3](https://i3wm.org/)\n- [ ] 使用**fish**和**oh my fish**\n- [ ] 结合**tmux**工具\n- [ ] 配置[oh my zsh](https://github.com/robbyrussell/oh-my-zsh)和[主题](https://github.com/bhilburn/powerlevel9k)\n- [ ] 更换系统字体为[Monaco](http://www.mycode.net.cn/wp-content/uploads/2016/06/Monaco.zip)\n- [ ] 更新[zsh版本](https://www.jianshu.com/p/0659d5561502)\n\n### 参考\n\n- https://juejin.im/post/5a38c37f6fb9a0450909a151#heading-1\n- [编译支持python3的Vim](https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source)\n\n- [Vim插件管理Vundle](https://github.com/VundleVim/Vundle.vim)","slug":"Linux之打造vim实用配置方案","published":1,"updated":"2020-04-16T09:07:53.375Z","title":"Linux之打造vim实用配置方案","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgv4001qmgvzdn3vcw1w","content":"<p>打造vim实用配置方案</p>\n <a id=\"more\"></a> \n\n<p>这篇文章的目的，是打造让自己感觉舒服好用的<a href=\"https://github.com/vim/vim\">Vim</a>/<a href=\"https://github.com/neovim/neovim\">NeoVim</a>环境以便获得更好的编程体验，并将我所遇到的一些问题列出解决方案，不足之处还请见谅，欢迎与各位进行交流，邮箱是<a href=\"mailto:&#x6b;&#x61;&#110;&#103;&#x7a;&#x68;&#x69;&#x68;&#101;&#x6e;&#x67;&#64;&#108;&#105;&#x76;&#x65;&#x2e;&#99;&#x6e;\">&#x6b;&#x61;&#110;&#103;&#x7a;&#x68;&#x69;&#x68;&#101;&#x6e;&#x67;&#64;&#108;&#105;&#x76;&#x65;&#x2e;&#99;&#x6e;</a>。</p>\n<p>本文所有命令，在<strong>CentOS7.6</strong> 上全部测试通过，Mac系统相对来说配置比较容易，在此不做特别说明，每一步都有详细的步骤，敬请参考。</p>\n<h3 id=\"什么是Vim？\"><a href=\"#什么是Vim？\" class=\"headerlink\" title=\"什么是Vim？\"></a>什么是Vim？</h3><p><strong><a href=\"https://www.vim.org/\">Vim</a>- the ubiquitous text editor</strong>，一种无处不在的文本编辑器，维基百科是这么介绍<strong>vim</strong>的：</p>\n<blockquote>\n<p><strong>Vim</strong>是从<a href=\"https://zh.wikipedia.org/wiki/Vi\">vi</a>发展出来的一个<a href=\"https://zh.wikipedia.org/wiki/文本编辑器\">文本编辑器</a>。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和<a href=\"https://zh.wikipedia.org/wiki/Emacs\">Emacs</a>并列成为<a href=\"https://zh.wikipedia.org/wiki/类Unix系统\">类Unix系统</a>用户最喜欢的编辑器。</p>\n<p>Vim的第一个版本由<a href=\"https://zh.wikipedia.org/wiki/布萊姆·米勒\">布莱姆·米勒</a>在1991年发布。最初的简称是<strong>V</strong>i <strong>IM</strong>itation，随着功能的不断增加，正式名称改成了<strong>V</strong>i <strong>IM</strong>proved。现在是在<a href=\"https://zh.wikipedia.org/wiki/开放源代码\">开放源代码</a>方式下发行的<a href=\"https://zh.wikipedia.org/wiki/自由软件\">自由软件</a>。</p>\n</blockquote>\n<p><strong>文件的增删查改</strong>——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。</p>\n<p><strong>配置文件</strong>——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿<code>git clone repoyoulike</code>，然后按照配置文档进行修改，什么<strong>tf</strong>要升级啦，<strong>gcc/g++</strong>要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用<code>gedit</code>来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用<strong>ssh</strong>连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。</p>\n<p><strong>知其然知其所以然</strong>——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。</p>\n<p><strong>Vim</strong>适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从<a href=\"https://www.vim.org/download.php\">官网</a>下载。 </p>\n<h3 id=\"Vim哲学\"><a href=\"#Vim哲学\" class=\"headerlink\" title=\"Vim哲学\"></a>Vim哲学</h3><p>简单概括：摆脱鼠标，一键到达。</p>\n<p>即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。</p>\n<h3 id=\"升级支持python3的Vim8\"><a href=\"#升级支持python3的Vim8\" class=\"headerlink\" title=\"升级支持python3的Vim8\"></a>升级支持python3的Vim8</h3><p>在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是<strong>vi</strong>编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，<a href=\"https://github.com/vim/vim\">Vim8</a>在<a href=\"https://github.com/neovim/neovim\">NeoVim</a>的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口<strong>terminal</strong>，尤其是支持<strong>terminal</strong>非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，在升级了支持<strong>Python3</strong>的Vim8后（<strong>在Vim版本中，不能同时支持Python2和Python3</strong>），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。在这一小节，介绍怎么<strong>编译支持Python3的Vim8版本</strong>，<strong>前提是系统了安装Python3</strong>，Python3的安装不做讨论。</p>\n<ol>\n<li><p><strong>编译安装yum源里的vim最新版</strong></p>\n<p><a href=\"https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source\">参考YouCompleteMe</a>里给出的方法，略作调整。</p>\n<p>首先检查系统里的Vim是否已经安装，在终端输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep vim</span><br></pre></td></tr></table></figure>\n\n<p>如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（<strong>下载Vim最新版源代码</strong>）开始阅读。</p>\n<p>一般情况下，运行下列命令安装Vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install yum*    // CentOS7.6系统</span><br></pre></td></tr></table></figure>\n\n<p>查看vim版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。</p>\n<p>如果是Vim版本，查看Vim是否支持Python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version | grep python</span><br></pre></td></tr></table></figure>\n\n<p>如果结果显示python3前面是<code>+</code>号，则这一小节可以跳过，如果是<code>-</code>号，则需要自己编译Vim，需执行以下步骤。</p>\n</li>\n<li><p><strong>卸载Vim</strong></p>\n<p>在编译之前，需要卸载系统上的Vim版本</p>\n<ul>\n<li><p>如果使用<code>yum install vim*</code>命令安装的Vim，卸载Vim时执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果Vim是使用<code>make</code>编译过的，在<strong>CentOS7.6系统</strong>下，进入到Vim源代码目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make uninstall</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone <a href=\"https://github.com/vim/vim.git)，然后`cd\">https://github.com/vim/vim.git)，然后`cd</a> vim`，再执行上述语句。</p>\n<p>如果是<strong>Ubuntu系统</strong>，卸载起来就比较方便</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install checkinstall</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/vim       // vim是Vim源代码文件夹</span><br><span class=\"line\">sudo checkinstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>下载Vim最新版源代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~                                         // 进入到当前用户的根目录下</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vim/vim.git     // 下载Vim源代码</span><br><span class=\"line\"><span class=\"built_in\">cd</span> vim                                       // 进入到Vim源代码文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-features=huge \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-multibyte \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-rubyinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-python3interp=yes \\</span><br><span class=\"line\">            --with-python3-config-dir=$(python3-config --configdir) \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-perlinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-luainterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-gui=gtk2 \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-cscope \\</span><br><span class=\"line\">            --prefix=/usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>命令<a href=\"https://www.jianshu.com/p/aac78ff576c5\">解释</a>：</p>\n<p><code>--with-features=huge</code>：支持最大特性</p>\n<p><code>--enable-multibyte</code>：打开多字节支持，可以在Vim中输入中文</p>\n<p><code>--enable-rubyinterp</code>：打开对ruby编写的插件的支持</p>\n<p><code>--enable-python3interp</code>：打开对python3编写的插件的支持</p>\n<p><code>--with-python-config-dir</code>：Python3的路径</p>\n<p><code>--enable-perlinterp</code>：打开对perl编写的插件的支持</p>\n<p><code>--enable-luainterp</code>：打开对lua编写的插件的支持</p>\n<p><code>--enable-gui</code>：打开GUI支持</p>\n<p><code>--enable-cscope</code>：打开对cscope的支持</p>\n<p><code>--prefix=/usr/local/</code>：指定将要安装到的路径</p>\n</li>\n<li><p><strong>设置VIMRUNTIMEDIR</strong></p>\n<p><strong>VIMRUNTIMEDIR</strong>是vim运行时候所需资源的目录，非常重要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make VIMRUNTIMEDIR=/usr/<span class=\"built_in\">local</span>/share/vim/vim82</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编译安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置Vim为默认的编辑器</strong></p>\n<p>使用<code>update-alternative</code>设置vim为默认编辑器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/editor editor /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> editor /usr/<span class=\"built_in\">local</span>/bin/vim</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/vi vi /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> vi /usr/<span class=\"built_in\">local</span>/bin/vim</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>按照上述步骤完成后查看Vim**版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png\" alt=\"vim版本\"></p>\n<p>可以看到Vim版本是8.2版本，已开启<strong>python3支持</strong>，需要进行验证，在终端输入<code>vim</code>，接着在<strong>正常模式</strong>下输入<code>:echo has(&quot;python3&quot;)</code>，按一下回车键，若屏幕最下面输出<code>1</code>，则配置正确，Vim支持Python3。</p>\n<p>编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及<strong>Issues（非常有用）</strong>、<a href=\"https://stackoverflow.com/\">stackoverflow</a>等，其次再考虑其它出处，尽可能多看<strong>专业的英文文档</strong>，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！</p>\n<p>该方法是全局设置方法。</p>\n<ul>\n<li><p><strong>安装中文vim帮助文档</strong></p>\n<p>进入Vim环境，按一下前缀键<code>esc</code>，在英文语法环境下，输入<code>:help</code>后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：</p>\n<ul>\n<li><p><strong>下载中文安装包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>解压</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vimcdoc-2.3.0/\t\t\t\t<span class=\"comment\"># 进入解压后的目录</span></span><br><span class=\"line\">./vimcdoc.sh -i\t\t\t\t\t<span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n\n<p>命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vim8-—-gt-NeoVim\"><a href=\"#Vim8-—-gt-NeoVim\" class=\"headerlink\" title=\"Vim8 —&gt; NeoVim\"></a>Vim8 —&gt; NeoVim</h3><p>完全是偶然。在上回讲到，在Vim下折腾了两三天的<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>基本模式</p>\n<p>编辑模式</p>\n<h3 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h3><p><a href=\"https://zhuanlan.zhihu.com/p/38150203\">键盘映射技巧</a></p>\n<p><code>&quot;+p</code>可以将外部内容粘贴到终端vim文件中</p>\n<h3 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h3><h4 id=\"vim-plug插件管理器\"><a href=\"#vim-plug插件管理器\" class=\"headerlink\" title=\"vim-plug插件管理器\"></a>vim-plug插件管理器</h4><p>Vim的插件管理有<a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a>、<a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>、<a href=\"https://github.com/SpaceVim/SpaceVim\">SpaceVim</a>等，<a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a>是一款非常出名且历史悠久的Vim插件管理工具，但随着安装的vim插件越来越多，使用Vundle来管理这些插件时效率变得越来越低，vim启动耗时也越来越大，且多年没有更新；<a href=\"https://github.com/SpaceVim/SpaceVim\">SpaceVim</a>挺酷炫，有时间可以尝试一下，在这里推荐使用<a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>，</p>\n<p><strong>Unix安装</strong>（包括CentOS和Mac）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fLo ~/.vim/<span class=\"built_in\">autoload</span>/plug.vim --create-dirs \\</span><br><span class=\"line\">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>\n\n<p>该命令在Unix系统下无须进行修改，会自动创建目录<code>~/.vim/autoload/</code>。</p>\n<p>更新vim-plug插件自身：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugUpgrade</span><br></pre></td></tr></table></figure>\n\n<p>批量更新所有已安装的插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugUpdate</span><br></pre></td></tr></table></figure>\n\n<p>查看插件状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugStatus</span><br></pre></td></tr></table></figure>\n\n<p>卸载插件：请先在<strong>~/.vim/vimrc</strong>或者<strong>~/.config/nvim/init.vim</strong>配置文件中注释或者删除对应插件的配置信息，然后再执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugClean</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h4><p>假设系统已经安装了python3解释器，如没有安装，请参考这篇<a href=\"[https://github.com/kangzhiheng/GitLocalDoc#anaconda%E5%AE%89%E8%A3%85tensorflow-gpu](https://github.com/kangzhiheng/GitLocalDoc#anaconda安装tensorflow-gpu)\">文章</a></p>\n<h5 id=\"美化启动界面-—-vim-startify\"><a href=\"#美化启动界面-—-vim-startify\" class=\"headerlink\" title=\"美化启动界面  — vim-startify\"></a>美化启动界面  — vim-startify</h5><p><a href=\"https://github.com/mhinz/vim-startify\">https://github.com/mhinz/vim-startify</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug <span class=\"string\">'mhinz/vim-startify'</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e8de221504f4bcb0466b21e.png\" alt=\"startigy\"></p>\n<p>在终端输入<code>nvim</code>后，显示nvim启动界面，列出最近打开的文件，很方便。</p>\n<h5 id=\"美化状态栏-—-ariline\"><a href=\"#美化状态栏-—-ariline\" class=\"headerlink\" title=\"美化状态栏 — ariline\"></a>美化状态栏 — ariline</h5><p><a href=\"https://github.com/vim-airline/vim-airline\">https://github.com/vim-airline/vim-airline</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug <span class=\"string\">'vim-airline/vim-airline'</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/vim-airline/vim-airline/wiki/screenshots/demo.gif\" alt=\"美化状态栏\"></p>\n<h5 id=\"文件管理插件-—-NERDTree\"><a href=\"#文件管理插件-—-NERDTree\" class=\"headerlink\" title=\"文件管理插件 — NERDTree\"></a>文件管理插件 — NERDTree</h5><p>使用方法</p>\n<p>Ctrl + w + w   窗口之间的跳转</p>\n<p>当光标在NERDTree窗口时，</p>\n<p><code>shift+i</code>是打开/关闭隐藏文件</p>\n<p>o - 展开/合并某个目录</p>\n<p>C - 如果需要某个文件夹作为你的工作区，则需要按下大写C即可设置此目录为当前工作区</p>\n<p>U - 跳转到上一层目录</p>\n<p>cd - 设置该目录为家目录</p>\n<p>CD - 可能在别的目录迷失了方向，直接输入<code>CD</code>跳转到已经设置好的家目录</p>\n<h5 id=\"代码自动补全-—-YouCompleteMe\"><a href=\"#代码自动补全-—-YouCompleteMe\" class=\"headerlink\" title=\"代码自动补全 — YouCompleteMe\"></a>代码自动补全 — YouCompleteMe</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">call plug<span class=\"comment\">#begin('~/.vim/pluged')</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 插件配置</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 文件树</span><br><span class=\"line\">Plug <span class=\"string\">'scrooloose/nerdtree'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 代码补全</span></span><br><span class=\"line\"><span class=\"string\">Plug 'ycm-core/YouCompleteMe'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">call plug#end()</span></span><br></pre></td></tr></table></figure>\n\n<p>在Vim配置文件<code>~/.vim/vimrc</code>下的插件Vundle部分，加入<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，然后在<strong>正常模式</strong>下，键入<code>:PluginInstall</code>进行插件安装，安装完成后，会在命令行提出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The ycmd server SHUT DOWN (restart with ‘:YcmRestartServer’). YCM core library not detected; you need to compile YCM before using it. Follow the instructions <span class=\"keyword\">in</span> the documentation.</span><br></pre></td></tr></table></figure>\n\n<p>这是因为，<strong>YouCompleteMe</strong> 需要手工编译出库文件 ycm_core.so (以及依赖的libclang.so) 才可使用。<strong>YouCompleteMe</strong>支持的语言</p>\n<ul>\n<li><strong>C系列（C/C++/Objective-C/Objective-C++）</strong>：编译时添加<code>--clangd-completer</code></li>\n<li><strong>C#</strong>：先安装<a href=\"http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives\">Mono</a>，编译时添加<code>--cs-completer</code></li>\n<li><strong>Go</strong>：先安装[Go](<a href=\"https://golang.org/doc/install，编译时添加`--go-completer`\">https://golang.org/doc/install，编译时添加`--go-completer`</a></li>\n<li><strong>JavaScript</strong>和<strong>TypeScript</strong>：先安装 <a href=\"https://docs.npmjs.com/getting-started/installing-node#1-install-nodejs--npm\">Node.js and npm</a>，编译时添加<code>--ts-completer</code></li>\n<li><strong>Rust</strong>: 编译时添加<code>--rust-completer</code></li>\n<li><strong>Java</strong>: 先安装<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">JDK8</a>，编译时添加<code>--java-completer</code></li>\n<li>全部支持：先安装所有的依赖环境，编译时添加<code>--all</code></li>\n</ul>\n<p>要使用<code>--all</code>功能进行安装，请确保已在<code>PATH</code>中安装了<strong>msbuild</strong>，<strong>go</strong>，<strong>node</strong>和<strong>npm</strong>工具。</p>\n<p>个人对C系列使用较多，因此</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.vim/pluged/YouCompleteMe</span><br><span class=\"line\">python3 install.py --clangd-completer</span><br></pre></td></tr></table></figure>\n\n<p>如果系统没有设置默认的Python为Python3版本，则需要注意以上命令是<code>python3</code>开头的，这时<strong>C系列</strong>语言的代码自动补全功能配置完毕。</p>\n<p>python语言自动补全</p>\n<p>需要在Vim配置文件<code>~/.config/nvim/init.vim</code>下的插件Vundle部分，加入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">\" YouCompleteMe配置                                                                                                                              </span></span><br><span class=\"line\"><span class=\"string\">nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;                                 nnoremap g/ :YcmCompleter GetDoc&lt;CR&gt;                                                       nnoremap gt :YcmCompleter GetType&lt;CR&gt;                                                       nnoremap gr :YcmCompleter GoToReferences&lt;CR&gt;                                                 let g:ycm_autoclose_preview_window_after_completion=0                                       let g:ycm_autoclose_preview_window_after_insertion=1                                         let g:ycm_use_clangd = 0                                                                     let g:ycm_seed_identifiers_with_syntax=1                                                     let g:ycm_collect_identifiers_from_tags_files = 1                                           let g:ycm_min_num_of_chars_for_completion=2                                                  let g:ycm_path_to_python_interpreter='/usr/bin/python3'</span></span><br></pre></td></tr></table></figure>\n\n<p>注意python3解释器的位置，这个设置好像对第三方库不是很友好，我再探索探索。</p>\n<h5 id=\"括号自动补全-—-auto-pairs\"><a href=\"#括号自动补全-—-auto-pairs\" class=\"headerlink\" title=\"括号自动补全 — auto-pairs\"></a>括号自动补全 — auto-pairs</h5><p><a href=\"https://github.com/jiangmiao/auto-pairs\">链接  </a></p>\n<h5 id=\"函数列表-—-TagBar\"><a href=\"#函数列表-—-TagBar\" class=\"headerlink\" title=\"函数列表 — TagBar\"></a>函数列表 — TagBar</h5><p><a href=\"https://github.com/majutsushi/tagbar\">链接</a></p>\n<p>首先安装<code>ctags</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS7.6</span></span><br><span class=\"line\">sudo yum install ctags</span><br><span class=\"line\"><span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">sudo apt-get install ctags</span><br><span class=\"line\"><span class=\"comment\"># Mac</span></span><br><span class=\"line\">brew install ctags</span><br></pre></td></tr></table></figure>\n\n<p>在<code>~/.config/nvim/init.vim</code>里的<strong>插件配置</strong>里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 显示函数列表                        </span></span><br><span class=\"line\"><span class=\"string\">Plug 'majutsushi/tagbar'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"代码自动补全-coc-vim（推荐）\"><a href=\"#代码自动补全-coc-vim（推荐）\" class=\"headerlink\" title=\"代码自动补全 coc-vim（推荐）\"></a>代码自动补全 coc-vim（推荐）</h5><p>根据<a href=\"https://github.com/neoclide/coc.nvim\">官网</a>建议，安装coc-vim前，需要首先安装<a href=\"https://nodejs.org/en/download/\">nodejs</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL install-node.now.sh/lts | bash</span><br></pre></td></tr></table></figure>\n\n<p>利用vim-plus来进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" Coc-vim 自动补全插件</span></span><br><span class=\"line\"><span class=\"string\">Plug 'neoclide/coc.nvim', &#123;'branch': 'release'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存并重启（更新）<code>~/.config/nvim/init.vim</code>文件，运行<code>PlugInstall</code>进行安装。</p>\n<p>如果出现<a href=\"https://github.com/neoclide/coc.nvim/issues/651\">错误</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[coc.nvim] javascript file not found, please compile the code or use release branch.</span><br></pre></td></tr></table></figure>\n\n<p>参考<a href=\"https://github.com/neoclide/coc.nvim/issues/651\">issue651</a>，打开<code>~/.config/nvim/init.vim</code>文件，运行命令<code>:call coc#util#install()</code>可以解决该问题。</p>\n<p>安装完成后，根据<a href=\"https://github.com/neoclide/coc.nvim/\">项目</a>对coc-vim插件进行配置，参考<a href=\"https://github.com/neoclide/coc.nvim/blob/master/doc/coc.cnx\">链接</a>（重要），在<code>~/.config/nvim/init.vim</code>下进行coc-vim插件进行个性化配置使其更加易用，这部分配置文件如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" ====</span></span><br><span class=\"line\"><span class=\"string\">\"</span> ==== coc-vim插件配置</span><br><span class=\"line\"><span class=\"string\">\" ====</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 允许在有未保存的修改时切换缓冲区, 此时的修改由 vim 负责保存</span><br><span class=\"line\"><span class=\"built_in\">set</span> hidden</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 覆盖文件时不备份</span></span><br><span class=\"line\"><span class=\"string\">set nobackup</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 表示编辑的时候不需要备份文件</span><br><span class=\"line\"><span class=\"built_in\">set</span> nowritebackup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 命令行（在状态行下）的高度, 默认为1, 这里是2, 展示更多的信息</span></span><br><span class=\"line\"><span class=\"string\">set cmdheight=2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 根据默认设置，交换文件会每隔4000毫秒（4秒）或者200个字符保存一次</span><br><span class=\"line\"><span class=\"string\">\" 我们可以使用以下命令，修改保存交换文件的频率</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 较长的更新时间（默认值为4000 ms = 4 s）会导致明显的延迟和较差的用户体验。</span><br><span class=\"line\"><span class=\"built_in\">set</span> updatetime=300</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 历史原因，Vim的界面可能会显示“帮助乌干达的可怜儿童”，该命令将其屏蔽</span></span><br><span class=\"line\"><span class=\"string\">\"</span> Don<span class=\"string\">'t pass messages to |ins-completion-menu|.</span></span><br><span class=\"line\"><span class=\"string\">set shortmess+=c</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 始终显示标号列</span></span><br><span class=\"line\"><span class=\"string\">set signcolumn=yes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" inoremap命令用于在“插入模式”中进行映射按键</span></span><br><span class=\"line\"><span class=\"string\">\" 使用TAB键来启动代码补全触发器，并在前面加上字符并进行导航。</span></span><br><span class=\"line\"><span class=\"string\">\" 注意：使用命令'</span>：verbose imap &lt;tab&gt;<span class=\"string\">'来确保选项卡未由</span></span><br><span class=\"line\"><span class=\"string\">\"，然后再将其放入配置中</span></span><br><span class=\"line\"><span class=\"string\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;</span></span><br><span class=\"line\"><span class=\"string\">      \\ pumvisible() ? \"\\&lt;C-n&gt;\" :</span></span><br><span class=\"line\"><span class=\"string\">      \\ &lt;SID&gt;check_back_space() ? \"\\&lt;TAB&gt;\" :</span></span><br><span class=\"line\"><span class=\"string\">      \\ coc#refresh()</span></span><br><span class=\"line\"><span class=\"string\">inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? \"\\&lt;C-p&gt;\" : \"\\&lt;C-h&gt;\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function! s:check_back_space() abort</span></span><br><span class=\"line\"><span class=\"string\">  let col = col('</span>.<span class=\"string\">') - 1</span></span><br><span class=\"line\"><span class=\"string\">  return !col || getline('</span>.<span class=\"string\">')[col - 1]  =~# '</span>\\s<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">endfunction</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 使用ctrl+空格键来强制触发补全</span></span><br><span class=\"line\"><span class=\"string\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" &lt;cr&gt;表示空格键，&lt;C-g&gt;表示Ctrl+g</span></span><br><span class=\"line\"><span class=\"string\">\" 使用&lt;cr&gt;确认补全，“ &lt;C-g&gt; u”表示在当前位置断开撤消链</span></span><br><span class=\"line\"><span class=\"string\">\" Coc仅在确认时进行摘要和其他编辑</span></span><br><span class=\"line\"><span class=\"string\">if has('</span>patch8.1.1068<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  \" Use `complete_info` if your (Neo)Vim version supports it.</span></span><br><span class=\"line\"><span class=\"string\">  inoremap &lt;expr&gt; &lt;cr&gt; complete_info()[\"selected\"] != \"-1\" ? \"\\&lt;C-y&gt;\" : \"\\&lt;C-g&gt;u\\&lt;CR&gt;\"</span></span><br><span class=\"line\"><span class=\"string\">else</span></span><br><span class=\"line\"><span class=\"string\">  imap &lt;expr&gt; &lt;cr&gt; pumvisible() ? \"\\&lt;C-y&gt;\" : \"\\&lt;C-g&gt;u\\&lt;CR&gt;\"</span></span><br><span class=\"line\"><span class=\"string\">endif</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"  键盘映射参考：https://zhuanlan.zhihu.com/p/38150203</span></span><br><span class=\"line\"><span class=\"string\">\" nmap是:map的普通模式板，也就是说其绑定的键只作用于普通模式 </span></span><br><span class=\"line\"><span class=\"string\">\" &lt;silent&gt; 表示静默映射，不会显示Vim在处理rhs(映射后的键位)过程中对界面产生的变化</span></span><br><span class=\"line\"><span class=\"string\">\" 使用`[g`和`]g`浏览诊断</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; [g &lt;Plug&gt;(coc-diagnostic-prev)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; ]g &lt;Plug&gt;(coc-diagnostic-next)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 代码跳转</span></span><br><span class=\"line\"><span class=\"string\">\" GoTo code navigation.</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gd &lt;Plug&gt;(coc-definition)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gi &lt;Plug&gt;(coc-implementation)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 使用K键在预览窗口中显示文档</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; K :call &lt;SID&gt;show_documentation()&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"string\">function! s:show_documentation()</span></span><br><span class=\"line\"><span class=\"string\">  if (index(['</span>vim<span class=\"string\">','</span><span class=\"built_in\">help</span><span class=\"string\">'], &amp;filetype) &gt;= 0)</span></span><br><span class=\"line\"><span class=\"string\">    execute '</span>h <span class=\"string\">'.expand('</span>&lt;cword&gt;<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  else</span></span><br><span class=\"line\"><span class=\"string\">    call CocAction('</span>doHover<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  endif</span></span><br><span class=\"line\"><span class=\"string\">endfunction</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 按住光标时高亮符号及其引用</span></span><br><span class=\"line\"><span class=\"string\">autocmd CursorHold * silent call CocActionAsync('</span>highlight<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 符号重命名</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 格式化所选代码</span></span><br><span class=\"line\"><span class=\"string\">xmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span></span><br><span class=\"line\"><span class=\"string\">augroup mygroup</span></span><br><span class=\"line\"><span class=\"string\">  autocmd!</span></span><br><span class=\"line\"><span class=\"string\">  \" Setup formatexpr specified filetype(s).</span></span><br><span class=\"line\"><span class=\"string\">  autocmd FileType typescript,json setl formatexpr=CocAction('</span>formatSelected<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  \" Update signature help on jump placeholder.</span></span><br><span class=\"line\"><span class=\"string\">  autocmd User CocJumpPlaceholder call CocActionAsync('</span>showSignatureHelp<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">augroup end</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 将codeAction应用于所选区域。</span></span><br><span class=\"line\"><span class=\"string\">\" 示例：&lt;leader&gt; aap 表示当前代码段</span></span><br><span class=\"line\"><span class=\"string\">xmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 将codeAction应用于当前行的键的重新映射</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;ac  &lt;Plug&gt;(coc-codeaction)</span></span><br><span class=\"line\"><span class=\"string\">\" 自动修复当前行的代码问题</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;qf  &lt;Plug&gt;(coc-fix-current)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 介绍功能文本对象</span></span><br><span class=\"line\"><span class=\"string\">xmap if &lt;Plug&gt;(coc-funcobj-i)</span></span><br><span class=\"line\"><span class=\"string\">xmap af &lt;Plug&gt;(coc-funcobj-a)</span></span><br><span class=\"line\"><span class=\"string\">omap if &lt;Plug&gt;(coc-funcobj-i)</span></span><br><span class=\"line\"><span class=\"string\">omap af &lt;Plug&gt;(coc-funcobj-a)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 将&lt;TAB&gt;用于选择范围</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; &lt;TAB&gt; &lt;Plug&gt;(coc-range-select)</span></span><br><span class=\"line\"><span class=\"string\">xmap &lt;silent&gt; &lt;TAB&gt; &lt;Plug&gt;(coc-range-select)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 添加`:Format`命令格式化当前缓冲区</span></span><br><span class=\"line\"><span class=\"string\">command! -nargs=0 Format :call CocAction('</span>format<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 添加`:Fold`命令折叠当前缓冲区</span></span><br><span class=\"line\"><span class=\"string\">command! -nargs=? Fold :call     CocAction('</span>fold<span class=\"string\">', &lt;f-args&gt;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 添加`:OR`命令来组织当前缓冲区的import</span></span><br><span class=\"line\"><span class=\"string\">command! -nargs=0 OR   :call     CocAction('</span>runCommand<span class=\"string\">', '</span>editor.action.organizeImport<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 关于CoCList的一些键盘映射</span></span><br><span class=\"line\"><span class=\"string\">\" 显示所有的诊断</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 管理所有的插件</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 显示命令</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;c  :&lt;C-u&gt;CocList commands&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 找出当前文件的符号</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 在当前文件进行搜索</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;s  :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 对下一项执行默认操作</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;j  :&lt;C-u&gt;CocNext&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 对前一项执行默认操作</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;k  :&lt;C-u&gt;CocPrev&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 恢复最新的coc列表</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;p  :&lt;C-u&gt;CocListResume&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Language Server Protocol，<a href=\"https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions\">LSP</a>以及<a href=\"https://github.com/neoclide/coc.nvim/wiki/Language-servers\">链接</a></p>\n<p><strong>配置C/C++环境</strong></p>\n<p>安装clangd，需要<code>cmake&gt;=3.12</code>和<code>gcc&gt;=5.1</code></p>\n<p>首先检测cmake版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>如果其版本小于3.12，则需要升级cmake，下面是编译最新cmake版本的脚本，在终端里新建<code>build_camke.sh</code>脚本，将下面的内容复制到脚本里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash                                                                                                                                                                    </span></span><br><span class=\"line\">yum remove cmake -y &amp;&amp; rm -f /usr/bin/cmake</span><br><span class=\"line\">wget -c https://github.com/Kitware/CMake/releases/download/v3.14.2/cmake-3.14.2.tar.gz</span><br><span class=\"line\">tar xvf cmake-3.14.2.tar.gz </span><br><span class=\"line\"><span class=\"built_in\">cd</span> $(<span class=\"built_in\">pwd</span>)/cmake-3.14.2   </span><br><span class=\"line\">./bootstrap              </span><br><span class=\"line\">gmake                    </span><br><span class=\"line\">gmake install            </span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/bin/cmake /usr/bin/</span><br><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>然后在终端里运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash build_camke.sh</span><br></pre></td></tr></table></figure>\n\n<p>即可，如果出现问题，可以一步一步在终端运行命令。</p>\n<p>接着查看gcc版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<p>如果版本小于5.1，则需要对gcc进行<a href=\"https://tlanyan.me/install-upgrade-gcc-on-centos/\">升级</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-4-gcc devtoolset-4-gcc-c++</span><br><span class=\"line\">scl <span class=\"built_in\">enable</span> devtoolset-4 bash</span><br></pre></td></tr></table></figure>\n\n<p>再查看gcc版本，输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6)</span><br><span class=\"line\">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>\n\n<p>接下来编译<code>clangd</code>，参考<a href=\"https://clangd.llvm.org/installation.html\">链接</a>、<a href=\"![image-20200408000824059](C:\\Users\\Dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200408000824059.png)\">链接</a>、<a href=\"https://gist.github.com/jakob/929ed728c96741a119798647a32618ca\">链接</a></p>\n<ul>\n<li><p>在<strong>Mac OS</strong>下，直接运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install llvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<strong>Windows</strong>下，下载预编译好的<a href=\"https://releases.llvm.org/download.html\">版本</a>，安装即可</p>\n</li>\n<li><p>在<strong>Debian/Ubuntu</strong>系统下，运行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install clangd-9</span><br></pre></td></tr></table></figure>\n\n<p><code>clangd</code>的二进制文件将被安装在<code>/usr/bin/clangd-9</code>，将其设置为默认的连接符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-9 100</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Other systems（CentOS等）</strong></p>\n<p>服务器因为是CentOS7.6版本，所有需要自己编译，通过查阅无数资料，<code>clangd</code>的编译脚本如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir clangd</span><br><span class=\"line\"><span class=\"built_in\">cd</span> clangd/</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> llvm/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> llvm/tools/clang/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../../../..</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake -G <span class=\"string\">\"Unix Makefiles\"</span> ../llvm</span><br><span class=\"line\">make clangd</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/clangd clangd ./bin/clangd 100</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>将其保存为<code>build-clangd.sh</code>，在终端<strong>根目录</strong>(<code>cd ~</code>进入自己的根目录下)运行<code>bash build-clangd.sh</code>进行编译，我大概花费了<strong>7个小时</strong>左右的时间进行编译</p>\n<p><img src=\"https://pic.downk.cc/item/5e8cab56504f4bcb046002b7.png\" alt=\"build clangd\"></p>\n<p>如图所示，编译完成，二进制文件在<code>~/clangd/build/bin</code>目录下，脚本的<code>Line 22</code>设置默认的<code>clangd</code>链接符，以便系统对<code>clangd</code>进行识别，在终端输入<code>clangd --version</code>，若可以看到版本信息且没有报错，则表明安装成功。若有类似的提示：未知的clangd命令，则可能需要将其二进制文件添加到系统<code>PATH</code>下，打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行，加入<code>export PATH=&quot;~/clangd/build/bin:$PATH&quot;</code>，即添加<code>clangd</code>编译好的二进制文件目录路径到<code>PATH</code>，再运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc    // 更新文件，即时生效</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/clangd clangd ~/clangd/build//clangd 100</span><br></pre></td></tr></table></figure>\n\n<p>安装<code>coc-clangd</code></p>\n<p>打开<code>~/.vim/vimrc</code>文件，运行命令<code>:CocInstall coc-clangd</code>，coc-clangd<a href=\"https://github.com/clangd/coc-clangd#quick-start\">不需要在coc-settings.json里进行设置</a>，至此在nvim里的C/C++智能代码感知功能安装完成。</p>\n<p>你以为到这儿就结束了吗？本来我是这么以为的，直到……</p>\n<p>我创建了一个示例文件试试代码补全的功能，一顿操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/a.cpp</span><br></pre></td></tr></table></figure>\n\n<p>输入内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;        </span><br><span class=\"line\">#include &lt;unordered_map&gt; </span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;list&gt;          </span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;     </span><br><span class=\"line\"></span><br><span class=\"line\">int main()               </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;hello world!&quot; &lt;&lt; endl;                         </span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn 0;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在终端运行<code>g++ a.cpp -o a</code>，然后翻车了</p>\n<p><img src=\"https://pic.downk.cc/item/5e8d4a68504f4bcb04df533a.png\" alt=\"编译error\"></p>\n<p>啥意思呢？就是说<code>a.py</code>用到了<strong>C++11</strong>的新特性（#include <unordered_map> ），而当前g++版本是4.8.5（g++ –version查看），默认支持<strong>C++98</strong>，所以如果要使用C++11的新特性，在编译时加上<code>-std=c++11</code>或<code>-std=gnu++11</code>，即</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 a.cpp -o a</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置Python环境</strong></p>\n<p>参考<a href=\"https://github.com/neoclide/coc-python\">链接</a>，首先需要安装<a href=\"https://github.com/palantir/python-language-server\">python-language-server</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install <span class=\"string\">'python-language-server[all]'</span></span><br></pre></td></tr></table></figure>\n\n<p>接着安装<a href=\"https://jedi.readthedocs.io/en/latest/docs/installation.html\">Jedi</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install jedi</span><br></pre></td></tr></table></figure>\n\n<p>此时语言解析器配置完成。</p>\n<p>在终端输入<code>nvim</code>，运行命令<code>:CocInstall coc-python</code>，显示<code>[coc.nvim]Installed extension: coc-python</code>，表示安装完成。</p>\n<p>在系统里，可能不同的python脚本需要不同的python解释器，系统也允许存在不同的python解释器，所以在打开你想要编辑的python文件后，需要设置你所有需要的python解释器，假设<code>a.py</code>需要python3解释器，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim a.py</span><br></pre></td></tr></table></figure>\n\n<p>然后在<strong>普通模式</strong>下输入命令<code>:CocCommand</code>，接着找到<code>python.setInterpreter</code>，找到你所需要的环境即可，这时安装在此环境下的包才会出发自动补全功能。</p>\n<p><img src=\"https://pic.downk.cc/item/5e8dbdda504f4bcb0443d423.png\" alt=\"coc-python\"></p>\n<p>其它语言请参考<a href=\"https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions\">LSP</a></p>\n<h5 id=\"缩进显示-—-indentLine\"><a href=\"#缩进显示-—-indentLine\" class=\"headerlink\" title=\"缩进显示 — indentLine\"></a>缩进显示 — indentLine</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 显示缩进标注, Python语言必须</span></span><br><span class=\"line\"><span class=\"string\">Plug 'Yggdroot/indentLine'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件操作历史-—-Undotree\"><a href=\"#文件操作历史-—-Undotree\" class=\"headerlink\" title=\"文件操作历史 — Undotree\"></a>文件操作历史 — Undotree</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 列出文件最近的操作历史</span></span><br><span class=\"line\"><span class=\"string\">Plug 'mbbill/undotree'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命令行模糊搜索工具-—-fzf-fzf-vim\"><a href=\"#命令行模糊搜索工具-—-fzf-fzf-vim\" class=\"headerlink\" title=\"命令行模糊搜索工具 — fzf/fzf-vim\"></a>命令行模糊搜索工具 — fzf/fzf-vim</h5><p><a href=\"https://github.com/junegunn/fzf\">fzf</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class=\"line\">~/.fzf/install</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/junegunn/fzf.vim\">fzf-vim</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug <span class=\"string\">'junegunn/fzf'</span>, &#123; <span class=\"string\">'do'</span>: &#123; -&gt; fzf<span class=\"comment\">#install() &#125; &#125;</span></span><br><span class=\"line\">Plug <span class=\"string\">'junegunn/fzf.vim'</span></span><br></pre></td></tr></table></figure>\n\n<p>要想使用文件内搜索命令，需要提前安装<a href=\"https://github.com/ggreer/the_silver_searcher\">ag</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install the_silver_searcher</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"一些要点\"><a href=\"#一些要点\" class=\"headerlink\" title=\"一些要点\"></a>一些要点</h3><h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><ul>\n<li><p>:PluginInstall 不是编辑器命令？</p>\n<p>两个原因</p>\n<ul>\n<li>路径配置出错</li>\n</ul>\n<p>目前来看是路径问题，根据<a href=\"https://github.com/VundleVim/Vundle.vim/\">官网</a>描述，安装命令为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;gmarik&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br></pre></td></tr></table></figure>\n\n<p>可能在~/.vim/vimrc配置文件中把<strong>bundle</strong>写成了<strong>bunlde</strong>，<strong>Vundle</strong>写成<strong>Vumdle</strong>……真的醉了……浪费了两个小时时间……</p>\n<ul>\n<li>实在没有办法，将安装命令调整为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;gmarik&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;plugin&#x2F;Vundle.vim</span><br></pre></td></tr></table></figure>\n\n<p>哔了狗了。</p>\n</li>\n<li><p><strong>Vim卡住，死机？</strong></p>\n<p><strong>原因</strong>：</p>\n<p>使用vim时，会因为不小心按了Ctrl + s后，会发现不能输入任何字符，类似死机；</p>\n<p>这并不是Linux死机，或者vim卡住，而只是按了Ctrl + s后，vim停止向终端输出。</p>\n<p><strong>解决方法</strong>：</p>\n<p>退出这种状态，按下<strong>Ctrl + q</strong> 。</p>\n</li>\n<li><p>升级<strong>Ruby</strong></p>\n<p>打开<code>nvim</code>，输入命令<code>:CheckHealth</code>，如果提示Ruby版本过低，则需要升级</p>\n<ol>\n<li><p>查看当前Ruby版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby --version</span><br></pre></td></tr></table></figure>\n\n<p>显示的是<strong>ruby 2.0.0p648 (2015-12-16) [x86_64-linux]</strong></p>\n</li>\n<li><p>安装yum源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y centos-release-scl-rh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装指定版本的ruby</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y rh-ruby24</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使升级后的ruby版本生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl <span class=\"built_in\">enable</span> rh-ruby24 bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否升级成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby --version</span><br></pre></td></tr></table></figure>\n\n<p>显示<strong>ruby 2.4.6p354 (2019-04-01 revision 67394) [x86_64-linux]</strong></p>\n</li>\n</ol>\n<p><strong>但是</strong>，这种方法，<strong>只会在当前环境下有效</strong>，也就是说，退出当前环境就没有用了，还要执行第5步，所以最好对的方法是重新编译，方法如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cache.ruby-lang.org/pub/ruby/ruby-2.4.10.tar.gz</span><br><span class=\"line\">tar xvfvz ruby-2.4.10.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ruby-2.4.10</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装<a href=\"https://gitlab.com/screenkey/screenkey\">screenkey</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install python-distutils-extra    // optional</span><br><span class=\"line\">wget https://www.thregr.org/~wavexx/software/screenkey/releases/screenkey-0.9.tar.gz</span><br><span class=\"line\">tar -zxvf screenkey-0.9.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">cd</span> screenkey-0.9/</span><br><span class=\"line\">./screenkey</span><br><span class=\"line\">sudo ./setup.py install</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>nvim的外壳<a href=\"https://github.com/onivim/oni\">onivim</a></p>\n<h3 id=\"后续计划\"><a href=\"#后续计划\" class=\"headerlink\" title=\"后续计划\"></a>后续计划</h3><p>插件相关</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Python交互式编程<a href=\"https://github.com/sillybun/vim-repl\">vim-repl</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> git相关插件</li>\n</ul>\n<p>Linux相关</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 在客户端界面下安装<a href=\"https://i3wm.org/\">i3</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用<strong>fish</strong>和<strong>oh my fish</strong></li>\n<li><input disabled=\"\" type=\"checkbox\"> 结合<strong>tmux</strong>工具</li>\n<li><input disabled=\"\" type=\"checkbox\"> 配置<a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh my zsh</a>和<a href=\"https://github.com/bhilburn/powerlevel9k\">主题</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 更换系统字体为<a href=\"http://www.mycode.net.cn/wp-content/uploads/2016/06/Monaco.zip\">Monaco</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 更新<a href=\"https://www.jianshu.com/p/0659d5561502\">zsh版本</a></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://juejin.im/post/5a38c37f6fb9a0450909a151#heading-1\">https://juejin.im/post/5a38c37f6fb9a0450909a151#heading-1</a></p>\n</li>\n<li><p><a href=\"https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source\">编译支持python3的Vim</a></p>\n</li>\n<li><p><a href=\"https://github.com/VundleVim/Vundle.vim\">Vim插件管理Vundle</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>打造vim实用配置方案</p>","more":"<p>这篇文章的目的，是打造让自己感觉舒服好用的<a href=\"https://github.com/vim/vim\">Vim</a>/<a href=\"https://github.com/neovim/neovim\">NeoVim</a>环境以便获得更好的编程体验，并将我所遇到的一些问题列出解决方案，不足之处还请见谅，欢迎与各位进行交流，邮箱是<a href=\"mailto:&#x6b;&#x61;&#110;&#103;&#x7a;&#x68;&#x69;&#x68;&#101;&#x6e;&#x67;&#64;&#108;&#105;&#x76;&#x65;&#x2e;&#99;&#x6e;\">&#x6b;&#x61;&#110;&#103;&#x7a;&#x68;&#x69;&#x68;&#101;&#x6e;&#x67;&#64;&#108;&#105;&#x76;&#x65;&#x2e;&#99;&#x6e;</a>。</p>\n<p>本文所有命令，在<strong>CentOS7.6</strong> 上全部测试通过，Mac系统相对来说配置比较容易，在此不做特别说明，每一步都有详细的步骤，敬请参考。</p>\n<h3 id=\"什么是Vim？\"><a href=\"#什么是Vim？\" class=\"headerlink\" title=\"什么是Vim？\"></a>什么是Vim？</h3><p><strong><a href=\"https://www.vim.org/\">Vim</a>- the ubiquitous text editor</strong>，一种无处不在的文本编辑器，维基百科是这么介绍<strong>vim</strong>的：</p>\n<blockquote>\n<p><strong>Vim</strong>是从<a href=\"https://zh.wikipedia.org/wiki/Vi\">vi</a>发展出来的一个<a href=\"https://zh.wikipedia.org/wiki/文本编辑器\">文本编辑器</a>。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和<a href=\"https://zh.wikipedia.org/wiki/Emacs\">Emacs</a>并列成为<a href=\"https://zh.wikipedia.org/wiki/类Unix系统\">类Unix系统</a>用户最喜欢的编辑器。</p>\n<p>Vim的第一个版本由<a href=\"https://zh.wikipedia.org/wiki/布萊姆·米勒\">布莱姆·米勒</a>在1991年发布。最初的简称是<strong>V</strong>i <strong>IM</strong>itation，随着功能的不断增加，正式名称改成了<strong>V</strong>i <strong>IM</strong>proved。现在是在<a href=\"https://zh.wikipedia.org/wiki/开放源代码\">开放源代码</a>方式下发行的<a href=\"https://zh.wikipedia.org/wiki/自由软件\">自由软件</a>。</p>\n</blockquote>\n<p><strong>文件的增删查改</strong>——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。</p>\n<p><strong>配置文件</strong>——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿<code>git clone repoyoulike</code>，然后按照配置文档进行修改，什么<strong>tf</strong>要升级啦，<strong>gcc/g++</strong>要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用<code>gedit</code>来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用<strong>ssh</strong>连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。</p>\n<p><strong>知其然知其所以然</strong>——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。</p>\n<p><strong>Vim</strong>适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从<a href=\"https://www.vim.org/download.php\">官网</a>下载。 </p>\n<h3 id=\"Vim哲学\"><a href=\"#Vim哲学\" class=\"headerlink\" title=\"Vim哲学\"></a>Vim哲学</h3><p>简单概括：摆脱鼠标，一键到达。</p>\n<p>即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。</p>\n<h3 id=\"升级支持python3的Vim8\"><a href=\"#升级支持python3的Vim8\" class=\"headerlink\" title=\"升级支持python3的Vim8\"></a>升级支持python3的Vim8</h3><p>在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是<strong>vi</strong>编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，<a href=\"https://github.com/vim/vim\">Vim8</a>在<a href=\"https://github.com/neovim/neovim\">NeoVim</a>的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口<strong>terminal</strong>，尤其是支持<strong>terminal</strong>非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，在升级了支持<strong>Python3</strong>的Vim8后（<strong>在Vim版本中，不能同时支持Python2和Python3</strong>），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。在这一小节，介绍怎么<strong>编译支持Python3的Vim8版本</strong>，<strong>前提是系统了安装Python3</strong>，Python3的安装不做讨论。</p>\n<ol>\n<li><p><strong>编译安装yum源里的vim最新版</strong></p>\n<p><a href=\"https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source\">参考YouCompleteMe</a>里给出的方法，略作调整。</p>\n<p>首先检查系统里的Vim是否已经安装，在终端输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep vim</span><br></pre></td></tr></table></figure>\n\n<p>如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（<strong>下载Vim最新版源代码</strong>）开始阅读。</p>\n<p>一般情况下，运行下列命令安装Vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install yum*    // CentOS7.6系统</span><br></pre></td></tr></table></figure>\n\n<p>查看vim版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。</p>\n<p>如果是Vim版本，查看Vim是否支持Python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version | grep python</span><br></pre></td></tr></table></figure>\n\n<p>如果结果显示python3前面是<code>+</code>号，则这一小节可以跳过，如果是<code>-</code>号，则需要自己编译Vim，需执行以下步骤。</p>\n</li>\n<li><p><strong>卸载Vim</strong></p>\n<p>在编译之前，需要卸载系统上的Vim版本</p>\n<ul>\n<li><p>如果使用<code>yum install vim*</code>命令安装的Vim，卸载Vim时执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果Vim是使用<code>make</code>编译过的，在<strong>CentOS7.6系统</strong>下，进入到Vim源代码目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make uninstall</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone <a href=\"https://github.com/vim/vim.git)，然后`cd\">https://github.com/vim/vim.git)，然后`cd</a> vim`，再执行上述语句。</p>\n<p>如果是<strong>Ubuntu系统</strong>，卸载起来就比较方便</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install checkinstall</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/vim       // vim是Vim源代码文件夹</span><br><span class=\"line\">sudo checkinstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>下载Vim最新版源代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~                                         // 进入到当前用户的根目录下</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vim/vim.git     // 下载Vim源代码</span><br><span class=\"line\"><span class=\"built_in\">cd</span> vim                                       // 进入到Vim源代码文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-features=huge \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-multibyte \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-rubyinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-python3interp=yes \\</span><br><span class=\"line\">            --with-python3-config-dir=$(python3-config --configdir) \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-perlinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-luainterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-gui=gtk2 \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-cscope \\</span><br><span class=\"line\">            --prefix=/usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>命令<a href=\"https://www.jianshu.com/p/aac78ff576c5\">解释</a>：</p>\n<p><code>--with-features=huge</code>：支持最大特性</p>\n<p><code>--enable-multibyte</code>：打开多字节支持，可以在Vim中输入中文</p>\n<p><code>--enable-rubyinterp</code>：打开对ruby编写的插件的支持</p>\n<p><code>--enable-python3interp</code>：打开对python3编写的插件的支持</p>\n<p><code>--with-python-config-dir</code>：Python3的路径</p>\n<p><code>--enable-perlinterp</code>：打开对perl编写的插件的支持</p>\n<p><code>--enable-luainterp</code>：打开对lua编写的插件的支持</p>\n<p><code>--enable-gui</code>：打开GUI支持</p>\n<p><code>--enable-cscope</code>：打开对cscope的支持</p>\n<p><code>--prefix=/usr/local/</code>：指定将要安装到的路径</p>\n</li>\n<li><p><strong>设置VIMRUNTIMEDIR</strong></p>\n<p><strong>VIMRUNTIMEDIR</strong>是vim运行时候所需资源的目录，非常重要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make VIMRUNTIMEDIR=/usr/<span class=\"built_in\">local</span>/share/vim/vim82</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编译安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置Vim为默认的编辑器</strong></p>\n<p>使用<code>update-alternative</code>设置vim为默认编辑器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/editor editor /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> editor /usr/<span class=\"built_in\">local</span>/bin/vim</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/vi vi /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> vi /usr/<span class=\"built_in\">local</span>/bin/vim</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>按照上述步骤完成后查看Vim**版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png\" alt=\"vim版本\"></p>\n<p>可以看到Vim版本是8.2版本，已开启<strong>python3支持</strong>，需要进行验证，在终端输入<code>vim</code>，接着在<strong>正常模式</strong>下输入<code>:echo has(&quot;python3&quot;)</code>，按一下回车键，若屏幕最下面输出<code>1</code>，则配置正确，Vim支持Python3。</p>\n<p>编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及<strong>Issues（非常有用）</strong>、<a href=\"https://stackoverflow.com/\">stackoverflow</a>等，其次再考虑其它出处，尽可能多看<strong>专业的英文文档</strong>，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！</p>\n<p>该方法是全局设置方法。</p>\n<ul>\n<li><p><strong>安装中文vim帮助文档</strong></p>\n<p>进入Vim环境，按一下前缀键<code>esc</code>，在英文语法环境下，输入<code>:help</code>后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：</p>\n<ul>\n<li><p><strong>下载中文安装包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>解压</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vimcdoc-2.3.0/\t\t\t\t<span class=\"comment\"># 进入解压后的目录</span></span><br><span class=\"line\">./vimcdoc.sh -i\t\t\t\t\t<span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n\n<p>命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vim8-—-gt-NeoVim\"><a href=\"#Vim8-—-gt-NeoVim\" class=\"headerlink\" title=\"Vim8 —&gt; NeoVim\"></a>Vim8 —&gt; NeoVim</h3><p>完全是偶然。在上回讲到，在Vim下折腾了两三天的<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>基本模式</p>\n<p>编辑模式</p>\n<h3 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h3><p><a href=\"https://zhuanlan.zhihu.com/p/38150203\">键盘映射技巧</a></p>\n<p><code>&quot;+p</code>可以将外部内容粘贴到终端vim文件中</p>\n<h3 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h3><h4 id=\"vim-plug插件管理器\"><a href=\"#vim-plug插件管理器\" class=\"headerlink\" title=\"vim-plug插件管理器\"></a>vim-plug插件管理器</h4><p>Vim的插件管理有<a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a>、<a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>、<a href=\"https://github.com/SpaceVim/SpaceVim\">SpaceVim</a>等，<a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a>是一款非常出名且历史悠久的Vim插件管理工具，但随着安装的vim插件越来越多，使用Vundle来管理这些插件时效率变得越来越低，vim启动耗时也越来越大，且多年没有更新；<a href=\"https://github.com/SpaceVim/SpaceVim\">SpaceVim</a>挺酷炫，有时间可以尝试一下，在这里推荐使用<a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>，</p>\n<p><strong>Unix安装</strong>（包括CentOS和Mac）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fLo ~/.vim/<span class=\"built_in\">autoload</span>/plug.vim --create-dirs \\</span><br><span class=\"line\">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>\n\n<p>该命令在Unix系统下无须进行修改，会自动创建目录<code>~/.vim/autoload/</code>。</p>\n<p>更新vim-plug插件自身：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugUpgrade</span><br></pre></td></tr></table></figure>\n\n<p>批量更新所有已安装的插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugUpdate</span><br></pre></td></tr></table></figure>\n\n<p>查看插件状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugStatus</span><br></pre></td></tr></table></figure>\n\n<p>卸载插件：请先在<strong>~/.vim/vimrc</strong>或者<strong>~/.config/nvim/init.vim</strong>配置文件中注释或者删除对应插件的配置信息，然后再执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PlugClean</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h4><p>假设系统已经安装了python3解释器，如没有安装，请参考这篇<a href=\"[https://github.com/kangzhiheng/GitLocalDoc#anaconda%E5%AE%89%E8%A3%85tensorflow-gpu](https://github.com/kangzhiheng/GitLocalDoc#anaconda安装tensorflow-gpu)\">文章</a></p>\n<h5 id=\"美化启动界面-—-vim-startify\"><a href=\"#美化启动界面-—-vim-startify\" class=\"headerlink\" title=\"美化启动界面  — vim-startify\"></a>美化启动界面  — vim-startify</h5><p><a href=\"https://github.com/mhinz/vim-startify\">https://github.com/mhinz/vim-startify</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug <span class=\"string\">'mhinz/vim-startify'</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e8de221504f4bcb0466b21e.png\" alt=\"startigy\"></p>\n<p>在终端输入<code>nvim</code>后，显示nvim启动界面，列出最近打开的文件，很方便。</p>\n<h5 id=\"美化状态栏-—-ariline\"><a href=\"#美化状态栏-—-ariline\" class=\"headerlink\" title=\"美化状态栏 — ariline\"></a>美化状态栏 — ariline</h5><p><a href=\"https://github.com/vim-airline/vim-airline\">https://github.com/vim-airline/vim-airline</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug <span class=\"string\">'vim-airline/vim-airline'</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/vim-airline/vim-airline/wiki/screenshots/demo.gif\" alt=\"美化状态栏\"></p>\n<h5 id=\"文件管理插件-—-NERDTree\"><a href=\"#文件管理插件-—-NERDTree\" class=\"headerlink\" title=\"文件管理插件 — NERDTree\"></a>文件管理插件 — NERDTree</h5><p>使用方法</p>\n<p>Ctrl + w + w   窗口之间的跳转</p>\n<p>当光标在NERDTree窗口时，</p>\n<p><code>shift+i</code>是打开/关闭隐藏文件</p>\n<p>o - 展开/合并某个目录</p>\n<p>C - 如果需要某个文件夹作为你的工作区，则需要按下大写C即可设置此目录为当前工作区</p>\n<p>U - 跳转到上一层目录</p>\n<p>cd - 设置该目录为家目录</p>\n<p>CD - 可能在别的目录迷失了方向，直接输入<code>CD</code>跳转到已经设置好的家目录</p>\n<h5 id=\"代码自动补全-—-YouCompleteMe\"><a href=\"#代码自动补全-—-YouCompleteMe\" class=\"headerlink\" title=\"代码自动补全 — YouCompleteMe\"></a>代码自动补全 — YouCompleteMe</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">call plug<span class=\"comment\">#begin('~/.vim/pluged')</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 插件配置</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 文件树</span><br><span class=\"line\">Plug <span class=\"string\">'scrooloose/nerdtree'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 代码补全</span></span><br><span class=\"line\"><span class=\"string\">Plug 'ycm-core/YouCompleteMe'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">call plug#end()</span></span><br></pre></td></tr></table></figure>\n\n<p>在Vim配置文件<code>~/.vim/vimrc</code>下的插件Vundle部分，加入<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，然后在<strong>正常模式</strong>下，键入<code>:PluginInstall</code>进行插件安装，安装完成后，会在命令行提出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The ycmd server SHUT DOWN (restart with ‘:YcmRestartServer’). YCM core library not detected; you need to compile YCM before using it. Follow the instructions <span class=\"keyword\">in</span> the documentation.</span><br></pre></td></tr></table></figure>\n\n<p>这是因为，<strong>YouCompleteMe</strong> 需要手工编译出库文件 ycm_core.so (以及依赖的libclang.so) 才可使用。<strong>YouCompleteMe</strong>支持的语言</p>\n<ul>\n<li><strong>C系列（C/C++/Objective-C/Objective-C++）</strong>：编译时添加<code>--clangd-completer</code></li>\n<li><strong>C#</strong>：先安装<a href=\"http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives\">Mono</a>，编译时添加<code>--cs-completer</code></li>\n<li><strong>Go</strong>：先安装[Go](<a href=\"https://golang.org/doc/install，编译时添加`--go-completer`\">https://golang.org/doc/install，编译时添加`--go-completer`</a></li>\n<li><strong>JavaScript</strong>和<strong>TypeScript</strong>：先安装 <a href=\"https://docs.npmjs.com/getting-started/installing-node#1-install-nodejs--npm\">Node.js and npm</a>，编译时添加<code>--ts-completer</code></li>\n<li><strong>Rust</strong>: 编译时添加<code>--rust-completer</code></li>\n<li><strong>Java</strong>: 先安装<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">JDK8</a>，编译时添加<code>--java-completer</code></li>\n<li>全部支持：先安装所有的依赖环境，编译时添加<code>--all</code></li>\n</ul>\n<p>要使用<code>--all</code>功能进行安装，请确保已在<code>PATH</code>中安装了<strong>msbuild</strong>，<strong>go</strong>，<strong>node</strong>和<strong>npm</strong>工具。</p>\n<p>个人对C系列使用较多，因此</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.vim/pluged/YouCompleteMe</span><br><span class=\"line\">python3 install.py --clangd-completer</span><br></pre></td></tr></table></figure>\n\n<p>如果系统没有设置默认的Python为Python3版本，则需要注意以上命令是<code>python3</code>开头的，这时<strong>C系列</strong>语言的代码自动补全功能配置完毕。</p>\n<p>python语言自动补全</p>\n<p>需要在Vim配置文件<code>~/.config/nvim/init.vim</code>下的插件Vundle部分，加入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">\" YouCompleteMe配置                                                                                                                              </span></span><br><span class=\"line\"><span class=\"string\">nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;                                 nnoremap g/ :YcmCompleter GetDoc&lt;CR&gt;                                                       nnoremap gt :YcmCompleter GetType&lt;CR&gt;                                                       nnoremap gr :YcmCompleter GoToReferences&lt;CR&gt;                                                 let g:ycm_autoclose_preview_window_after_completion=0                                       let g:ycm_autoclose_preview_window_after_insertion=1                                         let g:ycm_use_clangd = 0                                                                     let g:ycm_seed_identifiers_with_syntax=1                                                     let g:ycm_collect_identifiers_from_tags_files = 1                                           let g:ycm_min_num_of_chars_for_completion=2                                                  let g:ycm_path_to_python_interpreter='/usr/bin/python3'</span></span><br></pre></td></tr></table></figure>\n\n<p>注意python3解释器的位置，这个设置好像对第三方库不是很友好，我再探索探索。</p>\n<h5 id=\"括号自动补全-—-auto-pairs\"><a href=\"#括号自动补全-—-auto-pairs\" class=\"headerlink\" title=\"括号自动补全 — auto-pairs\"></a>括号自动补全 — auto-pairs</h5><p><a href=\"https://github.com/jiangmiao/auto-pairs\">链接  </a></p>\n<h5 id=\"函数列表-—-TagBar\"><a href=\"#函数列表-—-TagBar\" class=\"headerlink\" title=\"函数列表 — TagBar\"></a>函数列表 — TagBar</h5><p><a href=\"https://github.com/majutsushi/tagbar\">链接</a></p>\n<p>首先安装<code>ctags</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS7.6</span></span><br><span class=\"line\">sudo yum install ctags</span><br><span class=\"line\"><span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">sudo apt-get install ctags</span><br><span class=\"line\"><span class=\"comment\"># Mac</span></span><br><span class=\"line\">brew install ctags</span><br></pre></td></tr></table></figure>\n\n<p>在<code>~/.config/nvim/init.vim</code>里的<strong>插件配置</strong>里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 显示函数列表                        </span></span><br><span class=\"line\"><span class=\"string\">Plug 'majutsushi/tagbar'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"代码自动补全-coc-vim（推荐）\"><a href=\"#代码自动补全-coc-vim（推荐）\" class=\"headerlink\" title=\"代码自动补全 coc-vim（推荐）\"></a>代码自动补全 coc-vim（推荐）</h5><p>根据<a href=\"https://github.com/neoclide/coc.nvim\">官网</a>建议，安装coc-vim前，需要首先安装<a href=\"https://nodejs.org/en/download/\">nodejs</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL install-node.now.sh/lts | bash</span><br></pre></td></tr></table></figure>\n\n<p>利用vim-plus来进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" Coc-vim 自动补全插件</span></span><br><span class=\"line\"><span class=\"string\">Plug 'neoclide/coc.nvim', &#123;'branch': 'release'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存并重启（更新）<code>~/.config/nvim/init.vim</code>文件，运行<code>PlugInstall</code>进行安装。</p>\n<p>如果出现<a href=\"https://github.com/neoclide/coc.nvim/issues/651\">错误</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[coc.nvim] javascript file not found, please compile the code or use release branch.</span><br></pre></td></tr></table></figure>\n\n<p>参考<a href=\"https://github.com/neoclide/coc.nvim/issues/651\">issue651</a>，打开<code>~/.config/nvim/init.vim</code>文件，运行命令<code>:call coc#util#install()</code>可以解决该问题。</p>\n<p>安装完成后，根据<a href=\"https://github.com/neoclide/coc.nvim/\">项目</a>对coc-vim插件进行配置，参考<a href=\"https://github.com/neoclide/coc.nvim/blob/master/doc/coc.cnx\">链接</a>（重要），在<code>~/.config/nvim/init.vim</code>下进行coc-vim插件进行个性化配置使其更加易用，这部分配置文件如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" ====</span></span><br><span class=\"line\"><span class=\"string\">\"</span> ==== coc-vim插件配置</span><br><span class=\"line\"><span class=\"string\">\" ====</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 允许在有未保存的修改时切换缓冲区, 此时的修改由 vim 负责保存</span><br><span class=\"line\"><span class=\"built_in\">set</span> hidden</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 覆盖文件时不备份</span></span><br><span class=\"line\"><span class=\"string\">set nobackup</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 表示编辑的时候不需要备份文件</span><br><span class=\"line\"><span class=\"built_in\">set</span> nowritebackup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 命令行（在状态行下）的高度, 默认为1, 这里是2, 展示更多的信息</span></span><br><span class=\"line\"><span class=\"string\">set cmdheight=2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 根据默认设置，交换文件会每隔4000毫秒（4秒）或者200个字符保存一次</span><br><span class=\"line\"><span class=\"string\">\" 我们可以使用以下命令，修改保存交换文件的频率</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 较长的更新时间（默认值为4000 ms = 4 s）会导致明显的延迟和较差的用户体验。</span><br><span class=\"line\"><span class=\"built_in\">set</span> updatetime=300</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 历史原因，Vim的界面可能会显示“帮助乌干达的可怜儿童”，该命令将其屏蔽</span></span><br><span class=\"line\"><span class=\"string\">\"</span> Don<span class=\"string\">'t pass messages to |ins-completion-menu|.</span></span><br><span class=\"line\"><span class=\"string\">set shortmess+=c</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 始终显示标号列</span></span><br><span class=\"line\"><span class=\"string\">set signcolumn=yes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" inoremap命令用于在“插入模式”中进行映射按键</span></span><br><span class=\"line\"><span class=\"string\">\" 使用TAB键来启动代码补全触发器，并在前面加上字符并进行导航。</span></span><br><span class=\"line\"><span class=\"string\">\" 注意：使用命令'</span>：verbose imap &lt;tab&gt;<span class=\"string\">'来确保选项卡未由</span></span><br><span class=\"line\"><span class=\"string\">\"，然后再将其放入配置中</span></span><br><span class=\"line\"><span class=\"string\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;</span></span><br><span class=\"line\"><span class=\"string\">      \\ pumvisible() ? \"\\&lt;C-n&gt;\" :</span></span><br><span class=\"line\"><span class=\"string\">      \\ &lt;SID&gt;check_back_space() ? \"\\&lt;TAB&gt;\" :</span></span><br><span class=\"line\"><span class=\"string\">      \\ coc#refresh()</span></span><br><span class=\"line\"><span class=\"string\">inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? \"\\&lt;C-p&gt;\" : \"\\&lt;C-h&gt;\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function! s:check_back_space() abort</span></span><br><span class=\"line\"><span class=\"string\">  let col = col('</span>.<span class=\"string\">') - 1</span></span><br><span class=\"line\"><span class=\"string\">  return !col || getline('</span>.<span class=\"string\">')[col - 1]  =~# '</span>\\s<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">endfunction</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 使用ctrl+空格键来强制触发补全</span></span><br><span class=\"line\"><span class=\"string\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" &lt;cr&gt;表示空格键，&lt;C-g&gt;表示Ctrl+g</span></span><br><span class=\"line\"><span class=\"string\">\" 使用&lt;cr&gt;确认补全，“ &lt;C-g&gt; u”表示在当前位置断开撤消链</span></span><br><span class=\"line\"><span class=\"string\">\" Coc仅在确认时进行摘要和其他编辑</span></span><br><span class=\"line\"><span class=\"string\">if has('</span>patch8.1.1068<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  \" Use `complete_info` if your (Neo)Vim version supports it.</span></span><br><span class=\"line\"><span class=\"string\">  inoremap &lt;expr&gt; &lt;cr&gt; complete_info()[\"selected\"] != \"-1\" ? \"\\&lt;C-y&gt;\" : \"\\&lt;C-g&gt;u\\&lt;CR&gt;\"</span></span><br><span class=\"line\"><span class=\"string\">else</span></span><br><span class=\"line\"><span class=\"string\">  imap &lt;expr&gt; &lt;cr&gt; pumvisible() ? \"\\&lt;C-y&gt;\" : \"\\&lt;C-g&gt;u\\&lt;CR&gt;\"</span></span><br><span class=\"line\"><span class=\"string\">endif</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"  键盘映射参考：https://zhuanlan.zhihu.com/p/38150203</span></span><br><span class=\"line\"><span class=\"string\">\" nmap是:map的普通模式板，也就是说其绑定的键只作用于普通模式 </span></span><br><span class=\"line\"><span class=\"string\">\" &lt;silent&gt; 表示静默映射，不会显示Vim在处理rhs(映射后的键位)过程中对界面产生的变化</span></span><br><span class=\"line\"><span class=\"string\">\" 使用`[g`和`]g`浏览诊断</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; [g &lt;Plug&gt;(coc-diagnostic-prev)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; ]g &lt;Plug&gt;(coc-diagnostic-next)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 代码跳转</span></span><br><span class=\"line\"><span class=\"string\">\" GoTo code navigation.</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gd &lt;Plug&gt;(coc-definition)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gi &lt;Plug&gt;(coc-implementation)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 使用K键在预览窗口中显示文档</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; K :call &lt;SID&gt;show_documentation()&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"string\">function! s:show_documentation()</span></span><br><span class=\"line\"><span class=\"string\">  if (index(['</span>vim<span class=\"string\">','</span><span class=\"built_in\">help</span><span class=\"string\">'], &amp;filetype) &gt;= 0)</span></span><br><span class=\"line\"><span class=\"string\">    execute '</span>h <span class=\"string\">'.expand('</span>&lt;cword&gt;<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  else</span></span><br><span class=\"line\"><span class=\"string\">    call CocAction('</span>doHover<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  endif</span></span><br><span class=\"line\"><span class=\"string\">endfunction</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 按住光标时高亮符号及其引用</span></span><br><span class=\"line\"><span class=\"string\">autocmd CursorHold * silent call CocActionAsync('</span>highlight<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 符号重命名</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 格式化所选代码</span></span><br><span class=\"line\"><span class=\"string\">xmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span></span><br><span class=\"line\"><span class=\"string\">augroup mygroup</span></span><br><span class=\"line\"><span class=\"string\">  autocmd!</span></span><br><span class=\"line\"><span class=\"string\">  \" Setup formatexpr specified filetype(s).</span></span><br><span class=\"line\"><span class=\"string\">  autocmd FileType typescript,json setl formatexpr=CocAction('</span>formatSelected<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  \" Update signature help on jump placeholder.</span></span><br><span class=\"line\"><span class=\"string\">  autocmd User CocJumpPlaceholder call CocActionAsync('</span>showSignatureHelp<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">augroup end</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 将codeAction应用于所选区域。</span></span><br><span class=\"line\"><span class=\"string\">\" 示例：&lt;leader&gt; aap 表示当前代码段</span></span><br><span class=\"line\"><span class=\"string\">xmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 将codeAction应用于当前行的键的重新映射</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;ac  &lt;Plug&gt;(coc-codeaction)</span></span><br><span class=\"line\"><span class=\"string\">\" 自动修复当前行的代码问题</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;leader&gt;qf  &lt;Plug&gt;(coc-fix-current)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 介绍功能文本对象</span></span><br><span class=\"line\"><span class=\"string\">xmap if &lt;Plug&gt;(coc-funcobj-i)</span></span><br><span class=\"line\"><span class=\"string\">xmap af &lt;Plug&gt;(coc-funcobj-a)</span></span><br><span class=\"line\"><span class=\"string\">omap if &lt;Plug&gt;(coc-funcobj-i)</span></span><br><span class=\"line\"><span class=\"string\">omap af &lt;Plug&gt;(coc-funcobj-a)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 将&lt;TAB&gt;用于选择范围</span></span><br><span class=\"line\"><span class=\"string\">nmap &lt;silent&gt; &lt;TAB&gt; &lt;Plug&gt;(coc-range-select)</span></span><br><span class=\"line\"><span class=\"string\">xmap &lt;silent&gt; &lt;TAB&gt; &lt;Plug&gt;(coc-range-select)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 添加`:Format`命令格式化当前缓冲区</span></span><br><span class=\"line\"><span class=\"string\">command! -nargs=0 Format :call CocAction('</span>format<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 添加`:Fold`命令折叠当前缓冲区</span></span><br><span class=\"line\"><span class=\"string\">command! -nargs=? Fold :call     CocAction('</span>fold<span class=\"string\">', &lt;f-args&gt;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 添加`:OR`命令来组织当前缓冲区的import</span></span><br><span class=\"line\"><span class=\"string\">command! -nargs=0 OR   :call     CocAction('</span>runCommand<span class=\"string\">', '</span>editor.action.organizeImport<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\" 关于CoCList的一些键盘映射</span></span><br><span class=\"line\"><span class=\"string\">\" 显示所有的诊断</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 管理所有的插件</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 显示命令</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;c  :&lt;C-u&gt;CocList commands&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 找出当前文件的符号</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 在当前文件进行搜索</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;s  :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 对下一项执行默认操作</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;j  :&lt;C-u&gt;CocNext&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 对前一项执行默认操作</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;k  :&lt;C-u&gt;CocPrev&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"string\">\" 恢复最新的coc列表</span></span><br><span class=\"line\"><span class=\"string\">nnoremap &lt;silent&gt; &lt;space&gt;p  :&lt;C-u&gt;CocListResume&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Language Server Protocol，<a href=\"https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions\">LSP</a>以及<a href=\"https://github.com/neoclide/coc.nvim/wiki/Language-servers\">链接</a></p>\n<p><strong>配置C/C++环境</strong></p>\n<p>安装clangd，需要<code>cmake&gt;=3.12</code>和<code>gcc&gt;=5.1</code></p>\n<p>首先检测cmake版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>如果其版本小于3.12，则需要升级cmake，下面是编译最新cmake版本的脚本，在终端里新建<code>build_camke.sh</code>脚本，将下面的内容复制到脚本里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash                                                                                                                                                                    </span></span><br><span class=\"line\">yum remove cmake -y &amp;&amp; rm -f /usr/bin/cmake</span><br><span class=\"line\">wget -c https://github.com/Kitware/CMake/releases/download/v3.14.2/cmake-3.14.2.tar.gz</span><br><span class=\"line\">tar xvf cmake-3.14.2.tar.gz </span><br><span class=\"line\"><span class=\"built_in\">cd</span> $(<span class=\"built_in\">pwd</span>)/cmake-3.14.2   </span><br><span class=\"line\">./bootstrap              </span><br><span class=\"line\">gmake                    </span><br><span class=\"line\">gmake install            </span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/bin/cmake /usr/bin/</span><br><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>然后在终端里运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash build_camke.sh</span><br></pre></td></tr></table></figure>\n\n<p>即可，如果出现问题，可以一步一步在终端运行命令。</p>\n<p>接着查看gcc版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<p>如果版本小于5.1，则需要对gcc进行<a href=\"https://tlanyan.me/install-upgrade-gcc-on-centos/\">升级</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-4-gcc devtoolset-4-gcc-c++</span><br><span class=\"line\">scl <span class=\"built_in\">enable</span> devtoolset-4 bash</span><br></pre></td></tr></table></figure>\n\n<p>再查看gcc版本，输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6)</span><br><span class=\"line\">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>\n\n<p>接下来编译<code>clangd</code>，参考<a href=\"https://clangd.llvm.org/installation.html\">链接</a>、<a href=\"![image-20200408000824059](C:\\Users\\Dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200408000824059.png)\">链接</a>、<a href=\"https://gist.github.com/jakob/929ed728c96741a119798647a32618ca\">链接</a></p>\n<ul>\n<li><p>在<strong>Mac OS</strong>下，直接运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install llvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<strong>Windows</strong>下，下载预编译好的<a href=\"https://releases.llvm.org/download.html\">版本</a>，安装即可</p>\n</li>\n<li><p>在<strong>Debian/Ubuntu</strong>系统下，运行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install clangd-9</span><br></pre></td></tr></table></figure>\n\n<p><code>clangd</code>的二进制文件将被安装在<code>/usr/bin/clangd-9</code>，将其设置为默认的连接符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-9 100</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Other systems（CentOS等）</strong></p>\n<p>服务器因为是CentOS7.6版本，所有需要自己编译，通过查阅无数资料，<code>clangd</code>的编译脚本如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir clangd</span><br><span class=\"line\"><span class=\"built_in\">cd</span> clangd/</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> llvm/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> llvm/tools/clang/tools</span><br><span class=\"line\">svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../../../..</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake -G <span class=\"string\">\"Unix Makefiles\"</span> ../llvm</span><br><span class=\"line\">make clangd</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/clangd clangd ./bin/clangd 100</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>将其保存为<code>build-clangd.sh</code>，在终端<strong>根目录</strong>(<code>cd ~</code>进入自己的根目录下)运行<code>bash build-clangd.sh</code>进行编译，我大概花费了<strong>7个小时</strong>左右的时间进行编译</p>\n<p><img src=\"https://pic.downk.cc/item/5e8cab56504f4bcb046002b7.png\" alt=\"build clangd\"></p>\n<p>如图所示，编译完成，二进制文件在<code>~/clangd/build/bin</code>目录下，脚本的<code>Line 22</code>设置默认的<code>clangd</code>链接符，以便系统对<code>clangd</code>进行识别，在终端输入<code>clangd --version</code>，若可以看到版本信息且没有报错，则表明安装成功。若有类似的提示：未知的clangd命令，则可能需要将其二进制文件添加到系统<code>PATH</code>下，打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行，加入<code>export PATH=&quot;~/clangd/build/bin:$PATH&quot;</code>，即添加<code>clangd</code>编译好的二进制文件目录路径到<code>PATH</code>，再运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc    // 更新文件，即时生效</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/clangd clangd ~/clangd/build//clangd 100</span><br></pre></td></tr></table></figure>\n\n<p>安装<code>coc-clangd</code></p>\n<p>打开<code>~/.vim/vimrc</code>文件，运行命令<code>:CocInstall coc-clangd</code>，coc-clangd<a href=\"https://github.com/clangd/coc-clangd#quick-start\">不需要在coc-settings.json里进行设置</a>，至此在nvim里的C/C++智能代码感知功能安装完成。</p>\n<p>你以为到这儿就结束了吗？本来我是这么以为的，直到……</p>\n<p>我创建了一个示例文件试试代码补全的功能，一顿操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/a.cpp</span><br></pre></td></tr></table></figure>\n\n<p>输入内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;        </span><br><span class=\"line\">#include &lt;unordered_map&gt; </span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;list&gt;          </span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;     </span><br><span class=\"line\"></span><br><span class=\"line\">int main()               </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;hello world!&quot; &lt;&lt; endl;                         </span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn 0;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在终端运行<code>g++ a.cpp -o a</code>，然后翻车了</p>\n<p><img src=\"https://pic.downk.cc/item/5e8d4a68504f4bcb04df533a.png\" alt=\"编译error\"></p>\n<p>啥意思呢？就是说<code>a.py</code>用到了<strong>C++11</strong>的新特性（#include <unordered_map> ），而当前g++版本是4.8.5（g++ –version查看），默认支持<strong>C++98</strong>，所以如果要使用C++11的新特性，在编译时加上<code>-std=c++11</code>或<code>-std=gnu++11</code>，即</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 a.cpp -o a</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置Python环境</strong></p>\n<p>参考<a href=\"https://github.com/neoclide/coc-python\">链接</a>，首先需要安装<a href=\"https://github.com/palantir/python-language-server\">python-language-server</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install <span class=\"string\">'python-language-server[all]'</span></span><br></pre></td></tr></table></figure>\n\n<p>接着安装<a href=\"https://jedi.readthedocs.io/en/latest/docs/installation.html\">Jedi</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install jedi</span><br></pre></td></tr></table></figure>\n\n<p>此时语言解析器配置完成。</p>\n<p>在终端输入<code>nvim</code>，运行命令<code>:CocInstall coc-python</code>，显示<code>[coc.nvim]Installed extension: coc-python</code>，表示安装完成。</p>\n<p>在系统里，可能不同的python脚本需要不同的python解释器，系统也允许存在不同的python解释器，所以在打开你想要编辑的python文件后，需要设置你所有需要的python解释器，假设<code>a.py</code>需要python3解释器，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim a.py</span><br></pre></td></tr></table></figure>\n\n<p>然后在<strong>普通模式</strong>下输入命令<code>:CocCommand</code>，接着找到<code>python.setInterpreter</code>，找到你所需要的环境即可，这时安装在此环境下的包才会出发自动补全功能。</p>\n<p><img src=\"https://pic.downk.cc/item/5e8dbdda504f4bcb0443d423.png\" alt=\"coc-python\"></p>\n<p>其它语言请参考<a href=\"https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions\">LSP</a></p>\n<h5 id=\"缩进显示-—-indentLine\"><a href=\"#缩进显示-—-indentLine\" class=\"headerlink\" title=\"缩进显示 — indentLine\"></a>缩进显示 — indentLine</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 显示缩进标注, Python语言必须</span></span><br><span class=\"line\"><span class=\"string\">Plug 'Yggdroot/indentLine'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件操作历史-—-Undotree\"><a href=\"#文件操作历史-—-Undotree\" class=\"headerlink\" title=\"文件操作历史 — Undotree\"></a>文件操作历史 — Undotree</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 列出文件最近的操作历史</span></span><br><span class=\"line\"><span class=\"string\">Plug 'mbbill/undotree'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命令行模糊搜索工具-—-fzf-fzf-vim\"><a href=\"#命令行模糊搜索工具-—-fzf-fzf-vim\" class=\"headerlink\" title=\"命令行模糊搜索工具 — fzf/fzf-vim\"></a>命令行模糊搜索工具 — fzf/fzf-vim</h5><p><a href=\"https://github.com/junegunn/fzf\">fzf</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class=\"line\">~/.fzf/install</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/junegunn/fzf.vim\">fzf-vim</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug <span class=\"string\">'junegunn/fzf'</span>, &#123; <span class=\"string\">'do'</span>: &#123; -&gt; fzf<span class=\"comment\">#install() &#125; &#125;</span></span><br><span class=\"line\">Plug <span class=\"string\">'junegunn/fzf.vim'</span></span><br></pre></td></tr></table></figure>\n\n<p>要想使用文件内搜索命令，需要提前安装<a href=\"https://github.com/ggreer/the_silver_searcher\">ag</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install the_silver_searcher</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"一些要点\"><a href=\"#一些要点\" class=\"headerlink\" title=\"一些要点\"></a>一些要点</h3><h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><ul>\n<li><p>:PluginInstall 不是编辑器命令？</p>\n<p>两个原因</p>\n<ul>\n<li>路径配置出错</li>\n</ul>\n<p>目前来看是路径问题，根据<a href=\"https://github.com/VundleVim/Vundle.vim/\">官网</a>描述，安装命令为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;gmarik&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br></pre></td></tr></table></figure>\n\n<p>可能在~/.vim/vimrc配置文件中把<strong>bundle</strong>写成了<strong>bunlde</strong>，<strong>Vundle</strong>写成<strong>Vumdle</strong>……真的醉了……浪费了两个小时时间……</p>\n<ul>\n<li>实在没有办法，将安装命令调整为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;gmarik&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;plugin&#x2F;Vundle.vim</span><br></pre></td></tr></table></figure>\n\n<p>哔了狗了。</p>\n</li>\n<li><p><strong>Vim卡住，死机？</strong></p>\n<p><strong>原因</strong>：</p>\n<p>使用vim时，会因为不小心按了Ctrl + s后，会发现不能输入任何字符，类似死机；</p>\n<p>这并不是Linux死机，或者vim卡住，而只是按了Ctrl + s后，vim停止向终端输出。</p>\n<p><strong>解决方法</strong>：</p>\n<p>退出这种状态，按下<strong>Ctrl + q</strong> 。</p>\n</li>\n<li><p>升级<strong>Ruby</strong></p>\n<p>打开<code>nvim</code>，输入命令<code>:CheckHealth</code>，如果提示Ruby版本过低，则需要升级</p>\n<ol>\n<li><p>查看当前Ruby版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby --version</span><br></pre></td></tr></table></figure>\n\n<p>显示的是<strong>ruby 2.0.0p648 (2015-12-16) [x86_64-linux]</strong></p>\n</li>\n<li><p>安装yum源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y centos-release-scl-rh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装指定版本的ruby</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y rh-ruby24</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使升级后的ruby版本生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl <span class=\"built_in\">enable</span> rh-ruby24 bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否升级成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby --version</span><br></pre></td></tr></table></figure>\n\n<p>显示<strong>ruby 2.4.6p354 (2019-04-01 revision 67394) [x86_64-linux]</strong></p>\n</li>\n</ol>\n<p><strong>但是</strong>，这种方法，<strong>只会在当前环境下有效</strong>，也就是说，退出当前环境就没有用了，还要执行第5步，所以最好对的方法是重新编译，方法如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cache.ruby-lang.org/pub/ruby/ruby-2.4.10.tar.gz</span><br><span class=\"line\">tar xvfvz ruby-2.4.10.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ruby-2.4.10</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装<a href=\"https://gitlab.com/screenkey/screenkey\">screenkey</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install python-distutils-extra    // optional</span><br><span class=\"line\">wget https://www.thregr.org/~wavexx/software/screenkey/releases/screenkey-0.9.tar.gz</span><br><span class=\"line\">tar -zxvf screenkey-0.9.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">cd</span> screenkey-0.9/</span><br><span class=\"line\">./screenkey</span><br><span class=\"line\">sudo ./setup.py install</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>nvim的外壳<a href=\"https://github.com/onivim/oni\">onivim</a></p>\n<h3 id=\"后续计划\"><a href=\"#后续计划\" class=\"headerlink\" title=\"后续计划\"></a>后续计划</h3><p>插件相关</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Python交互式编程<a href=\"https://github.com/sillybun/vim-repl\">vim-repl</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> git相关插件</li>\n</ul>\n<p>Linux相关</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 在客户端界面下安装<a href=\"https://i3wm.org/\">i3</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用<strong>fish</strong>和<strong>oh my fish</strong></li>\n<li><input disabled=\"\" type=\"checkbox\"> 结合<strong>tmux</strong>工具</li>\n<li><input disabled=\"\" type=\"checkbox\"> 配置<a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh my zsh</a>和<a href=\"https://github.com/bhilburn/powerlevel9k\">主题</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 更换系统字体为<a href=\"http://www.mycode.net.cn/wp-content/uploads/2016/06/Monaco.zip\">Monaco</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 更新<a href=\"https://www.jianshu.com/p/0659d5561502\">zsh版本</a></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://juejin.im/post/5a38c37f6fb9a0450909a151#heading-1\">https://juejin.im/post/5a38c37f6fb9a0450909a151#heading-1</a></p>\n</li>\n<li><p><a href=\"https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source\">编译支持python3的Vim</a></p>\n</li>\n<li><p><a href=\"https://github.com/VundleVim/Vundle.vim\">Vim插件管理Vundle</a></p>\n</li>\n</ul>"},{"title":"“免费”科学上网新姿势（一）基本动作（谷歌云+BBR加速+SSR）","toc":true,"recommend":1,"date":"2020-03-27T16:18:30.000Z","thumbnail":"https://pic.downk.cc/item/5e7f90df504f4bcb04c06b59.png","keywords":"科学上网","_content":"\n这篇文章分为两大部分，[简介](#简介)和[方法](#方法)，即我们在国内“科学上网”的背景，以及“科学上网”的基本方法。想要直接获取方法的朋友请进[传送门](#方法)。\n\n\n\n<!-- more -->\n\n### 目录\n\n- [简介](#简介)\n  - [背景](#背景)\n  - [健康上网行为准则](#健康上网行为准则)\n  - [客观看待“墙”](#客观看待\"墙\")\n  - [互联网是怎么工作的？](#互联网是怎么工作的？)\n  - [入侵检测手段](#入侵检测手段)\n    - [域名解析缓存服务污染（DNS劫持）](#**域名解析缓存服务污染**（DNS劫持）)\n    - [IP地址或传输层端口封锁（IP封锁）](#IP地址或传输层端口封锁（IP封锁）)\n  - [常用的“名词”](#常用的\"名词\")\n    - [VPN](#VPN)\n    - [VPS](#VPS)\n    - [SS与SSR](#SS与SSR)\n    - [V2ray](#V2Ray)\n- [方法](#方法)\n  - [基本原理](#基本原理)\n  - [配置环境](#配置环境)\n    - [硬件环境](#硬件环境)\n    - [软件环境](#软件环境)\n    - [其它环境](#其它环境)\n  - [搭配方案](#搭配方案)\n  - [配置步骤](#配置步骤)\n    - [Step1 - 翻个小墙](#Step1：翻个小墙)\n    - [Step2 - 注册谷歌账号](#Step2：注册谷歌账号)\n    - [Step3 - 注册谷歌云服务](#Step3：注册谷歌云服务)\n    - [Step4 - 创建虚拟机实例](#Step4：创建VPS服务器)\n    - [Step5 - 修改谷歌云控制权限](#Step5：修改谷歌云控制权限)\n    - [step6 - 登录VPS服务器](#step6：登录VPS服务器)\n    - [step7 - 安装BBR加速内核](#step7：安装BBR加速内核)\n    - [Step8 - 在VPS上安装SSR服务](#Step8：在VPS上安装SSR服务)\n    - [Step9 - 关闭谷歌云防火墙](#Step9：关闭谷歌云防火墙)\n    - [Step10 - 连接SSR](#Step10：连接SSR)\n- [结语](#结语)\n- [参考](#参考)\n\n### 简介\n\n#### 背景\n\n国内广大研究群体，使用[Google](https://www.google.com)搜索和[百度](https://www.baidu.com)搜索，都有不同的体验，二者各有利弊，但是因为工作和学习的需要，需要使用境外的一些网站，比如[Google](https://www.google.com)。今天不谈政治，只谈技术。在正常情况下，国内是无法直接访问外网的，包括**Google全家桶**（除了谷歌翻译）、**Facebook**、**Twitter**、**Reddit**、**Youtube**（Google旗下）、**Netflix**、**Ins**等。为了方便研究和学习，在这篇文章，介绍一种健康良好的“科学上网方法”，其实不止在国内需要“科学上网”，世界上需要国家亦是如此。如果您利用下述方法可以“科学上网”，还请遵守以下**行为准则**。\n\n#### 健康上网行为准则\n\n“无规矩不成方圆”，工具可以方便人们生活，也可以破坏人们的生活，所以，如何正确使用我们手中的工具，需要我们自己把握。特此呼吁“科学上网的人们”，遵守以下约定，成就健康良好的上网环境！\n\n- 拥护党的领导，不质疑、不攻击、不诋毁国家的做法；\n- 维护国家利益，不信谣、不传谣；\n- 明辨是非，相信祖国；\n- 科学上网，禁止非法交易；\n\n在阅读以下内容前，您需要首先阅读并认可上述**行为准则**；如果您不认同，还请Ctrl+F4。\n\n#### 客观看待“墙”\n\n为什么有些网站打不开呢？是因为国家建了一所防火墙——**防火长城**。\n\n> **GFW**，Great Firewall，**防火长城**，也称**中国国家防火墙**。 是对我国在其互联网边界审查系统（包括相关行政审查系统）的统称。此系统起步于1998年。国内平时所说的“被墙”即指网站内容被**防火长城**所屏蔽或者指服务器的通讯被封阻，“翻墙”也被引申为[突破网络审查](https://zh.wikipedia.org/wiki/突破网络审查)浏览中国大陆境外被屏蔽的网站或使用服务的行为。 其实在国外，要查看国内的某些内容，比如腾讯、爱奇艺等国内版本，正常情况下在国外是使用不了的，如果要查看也是要从国外翻回来的。\n\n虽然防火长城让我们无法使用Google、Facebook等流行网站，有时候确实显得不太方便。我刚开始对这所墙也是略有不满，但是随着近几年发生的事情，以及自己在国外的一些经历，慢慢发现GFW也不是对自己完全不利。我国正处于高速发展期间，互联网上存在着大量的内容，但很多人很难分辨这些内容的真假，在国内尚且如此，国外这些内容就更多了，西方国家动不动就批判我们的国家，打着民主自由的口号，干一些见不得人的勾当，想想就觉得可笑。我们国家有些人对这些谣言信以为真，一些谣言一旦传播开来，说严重点，就会影响国家的根基，带来社会的不稳定。这才是真正的罪过。**如果你没有一个真正平稳的心态，请不要涉足国外和政治有关的网站**。\n\n![GFW](https://pic.downk.cc/item/5e7c9d84504f4bcb04b956b7.jpg)\n\n技术无罪，人心叵测，在珍惜科技发展带来方便的同时，我们也需要一双明亮的大眼睛。\n\n#### 互联网是怎么工作的？\n\n知其然，知其所以然。我们要知道，在浏览器里，输入`https://www.google.com`，后台到底发生了什么？正常情况下，为什么输入`https://www.google.com`，会返回错误信息，而输入`https://www.baidu.com`，会出现渲染界面。有兴趣的读者可以观察这个[视频]( https://www.kenzhishi.com/1933.html )进行简单的了解。\n\n在正常情况下，浏览器从输入一个域名地址，例如[https://www.baidu.com](https://ww.baidu.com)到页面呈现，[**大概分8步**]( https://segmentfault.com/a/1190000012092552 )：\n\n- 第一步：把冰箱门打开，不是，第一步先进行DNS域名解析：把域名地址解析到对应的IP地址（**非常重要**）；\n- 第二步： 建立TCP连接； \n- 第三步： 发送HTTP请求； \n- 第四步： 服务器处理请求； \n- 第五步： 返回响应结果； \n- 第六步： 关闭TCP连接； \n- 第七步： 浏览器解析HTML； \n- 第八步： 浏览器布局渲染； \n\n那么为什么有些网站打不开呢？请再看一个[视频]( https://www.kenzhishi.com/587.html )。\n\n![GFW](https://source.thankjava.com/view/XDyk9qy)\n\n**GFW**的存在就像疫情期间路口的卡子，夹在用户和服务之间，每当用户获取服务时，不得不经过GFW，它会查验你的“通行证”是否满足要求，不满足就会被阻拦，多次持有不合法的通行证，就会被列入黑名单。\n\n通过查阅资料，猜想中的防火长城GFW至少有两种入侵检测手段是：\n\n- **域名解析缓存服务污染**（DNS污染）\n- **IP地址或传输层端口封锁**（IP封锁）\n\n#### 入侵检测手段\n\n##### **域名解析缓存服务污染**（DNS劫持）\n\nIP地址是互联网世界中的主机设备的独一无二的由数字组成的标记，是用来唯一标识互联网上计算机的逻辑地址。 要将信息发到对应的服务器上时，我们需要知道对方的“地址”，即IP地址，形如aaa.bbb.ccc.ddd。但是IP地址不容易记忆，所以使用一个可读性更强的“域名”来方便记忆，域名与IP地址是一对一或者多对一。我们向服务器发送信息时，解析域名到指定的IP地址是通过**DNS域名服务器**来进行的。当发现一个不和谐网站，然后就把这个网站的域名给加到GFW劫持列表中。DNS客户端会盲目地相信第一个收到的答案，所以你去查询facebook.com的话，GFW只要在正确的答案被返回之前抢答了，然后伪装成你查询的DNS服务器向你发错误的答案就可以了。 \n\n##### IP地址或传输层端口封锁（IP封锁）\n\n通过将需要拦截的IP地址配置为空路由或者黑洞设备上，然后通过[动态路由协议](https://zh.wikipedia.org/wiki/动态路由协议)将相应配置路由扩散到公众互联网网络中，从将条件匹配拦截行为转为路由器的常规转发行为，从而提高拦截效率。多见于自主拥有大量IP地址段的需要审查的企业中。\n\n#### 常用的“名词”\n\n##### VPN\n\n**虚拟专用网络**，Virtual Private Network，简称**VPN**。VPN 在很多人心目中就是用来翻墙的工具，其实不然，VPN 最主要的功能，并不是用来翻墙，只是它可以达到翻墙的目的。VPN的**功能**是：在公用网络上建立专用网络，进行加密通讯，在企业网络和高校的网络中应用很广泛。接入 VPN其实就是接入了一个专有网络，你的网络访问都从这个出口出去，你和 VPN 之间的通信是否加密，取决于你连接 VPN 的方式或者协议。\n\n**VPN是为了保证通信的安全性、私密性，不是专门为“科学上网制定的技术。**\n\n##### VPS\n\n**虚拟专用服务器**，Virtual private server，简称**VPS**。不妨想一个问题：我们平时上网浏览网页，我们访问的那些网页都是哪来的？答案很简单，从另一台电脑上下载下来的。无论是用户平时所使用的个人PC电脑，还是用于搭载网站的服务器，本质上都是电脑。但与个人PC不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。而VPS，就是不会关机的电脑。\n\nVPS虚拟专用服务器是由VPS提供商维护，租用给站长使用的“不会关机的电脑”，也是服务器的一种。VPS不是一台台独立的电脑，而是将一台巨型服务器通过虚拟化技术分割成若干台看似独立的服务器，这台巨型服务器不间断运行，被分割出来的小服务器也跟着不停的运作，站长租用其中一台小服务器，搭载上自己的站点，就可以等着用户访问了。\n\nVPS提供商有：**[Vultr](http://www.vultr.com/?ref=7038906)、[Digital Ocean](https://m.do.co/c/ad240a3367a0)、[Linode](https://www.linode.com/)、[搬瓦工（bandwagonhost）](https://bwh1.net/)**\n\n**实验就用的是[Vultr](http://www.vultr.com/?ref=7038906)，用得人多，特征会明显，容易被GFW识别并拦截，因此故障多一点，需要经常换IP。**Vultr性价比比较高，适合个人使用。\n\n##### SS与SSR\n\n![SS与SSR](https://pic.downk.cc/item/5e7cccbe504f4bcb04d92eac.png)\n\nSS，全称ShadowSocks，SSR，全称ShadowSocks-R，如上图，SS/SSR的图标酷似飞机，又俗称机场，SS/SSR的账号俗称机票。SS/SSR是一种跨域网络加速的开源方案，说白了就是一种穿透GFW的的**代理工具**。\n\n对SS/SSR来说穿透防火墙是第一位，抗干扰性强，而且对流量做了混淆，所有流量在通过防火墙的时候，基本上都被识别为普通流量，也就是说你翻墙了，但是GFW是检测不到你在翻墙的，SS/SSR更注重流量的混淆加密。\n\nSSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。SS和SSR两者原理相同，都是基于socks5代理。客户端与服务端没有建立专有通道，客户端和实际要访问的服务端之间通过代理服务器进行通信，客户端发送请求和接受服务端返回的数据都要通过[代理服务器](https://www.idcbest.com/servernews/11000420.html)。SSR目的是为了能让流量通过防火墙。\n\nSSR和SS有一些区别，如下：\n\n1. SSR可以伪装成自定义的http开头，让监控着认为你是在访问百度，将实际的内容进行加密。SS是纯加密流量；\n2. 如果SS速度用着很快，没什么问题，带宽基本都能跑满，那么就可以继续使用SS。如果SS总是跑着跑着速度就渐渐上不去，或者没有速度的时候，就可能是遇到了[QOS](https://zh.wikipedia.org/zh-hans/%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F)，需要使用SSR。当然，两者直接使用SSR也是没什么问题的；\n\n客户端请求服务端数据流程（**SSR**)：\n\n1、浏览器发送请求（基于socks5协议），通过SSR客户端将sock5协议通过协议插件和混淆插件进行转换加密，使得来自客户端的流量和基于HTTP协议的流量无差别；\n\n2、SSR服务端（代理服务器）收到请求后，通过混淆插件、协议插件将数据解密并还原协议，最后转发到目标服务器。\n\n顺便提一嘴SS和SSR代理工具的故事，大概是酱婶儿的。\n\nSS作者是clowwindy，他自己为了翻墙写了shadowsocks，简称 ss 或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了 GitHub 上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。\n\n这个悲伤的故事还没有结束，在SS作者被喝茶之后，GitHub 上出现了一个叫 breakwa11(破娃)的帐号，声称SS容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容SS，改进后的项目叫ShadowSocks-R，简称SSR，然后SS用户和SSR用户自然分成了两个派别，互撕，后来，破娃被人肉出来，无奈之下删除了SSR的代码，并且解散了所有相关群组……\n\n朋友们，好东西就自己好好用吧……愿天堂没有争吵。\n\n##### V2Ray\n\nV2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。简单地说，V2Ray 是一个与 ShadowSocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。\n\n**那么V2Ray和ShadowSocks有什么区别呢？**\n\nShadowSocks 只是一个简单的代理工具，而 V2Ray 定位为一个平台，任何开发者都可以利用 V2Ray 提供的模块开发出新的代理软件。\n\nShadowSocks 是 clowwindy 开发的自用的软件，开发的初衷只是为了让自己能够简单高效地科学上网，自己使用了很长一段时间后觉得不错才共享出来的。V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的，一开始就致力于让大家更好更快的科学上网。\n\n由于出生时的历史背景不同，导致了它们性格特点的差异。\n\n简单来说，ShadowSocks 功能单一，V2Ray 功能强大，但Shadowsocks 简单好上手，V2Ray 复杂配置多。\n\n事物的优点和缺点总是相生相随的。相对来说，V2Ray 有以下优势：\n\n- **更完善的协议**： V2Ray 使用了新的自行研发的 VMess 协议，改正了 ShadowSocks 一些已有的缺点，更难被GFW检测到；\n\n- **更强大的性能**：网络性能更好，具体数据可以看 [V2Ray 官方博客](https://steemit.com/cn/@v2ray/3cjiux)\n\n- 更丰富的功能：以下是部分 V2Ray 的功能\n\n  - **mKCP**: KCP 协议在 V2Ray 上的实现，不必另行安装 kcptun\n  - **动态端口**：动态改变通信的端口，对抗对长时间大流量端口的限速封锁\n  - **路由功能**：可以随意设定指定数据包的流向，去广告、反跟踪都可以\n  - 传出代理：看名字可能不太好理解，其实差不多可以称之为多重代理。类似于 Tor 的代理\n  - **数据包伪装**：类似于 Shadowsocks-rss 的混淆，另外对于 mKCP 的数据包也可伪装，伪装常见流量，令识别更困难\n  - **WebSocket 协议**：可以 PaaS 平台搭建V2Ray，通过 WebSocket 代理。也可以通过它使用 CDN 中转，抗封锁效果更好\n  - **Mux**：多路复用，进一步提高科学上网的并发性能\n\n  V2Ray虽然优势明显，但配置复杂，产业链不成熟，不适合新手入门。\n\n### 方法\n\n![翻墙原理](https://pic.downk.cc/item/5e7c9dc9504f4bcb04b98b01.png)\n\n#### 基本原理\n\n在上一节[简介](# 简介)里，给大家介绍了科学上网的相关知识，这一节，介绍科学上网的一般方法。\n\n在前面提过，SS和SSR的原理都是一样的，就是 socks5 代理。socks 代理只是简单的传递数据包，而不必关心是何种协议，所以 socks 代理比其他应用层代理要快的多。socks5 代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。\n\n**通俗的说，现在你有一个代理服务器（VPS）在香港，比如你现在想要访问google，你的电脑发出请求，流量通过 socks5 连接发到你在香港的服务器上，然后再由你在香港的服务器去访问 google，再把访问结果传回你的电脑，这样就实现了翻墙。**\n\n#### 配置环境\n\n##### 硬件环境\n\n1. **VPS服务器**\n\n- 免费VPS：不好意思，没有一直免费的，目前网上搜到的免费的VPS服务器，极不稳定，影响体验，适合偶尔使用，不适合长期使用；\n  - 国外的云服务：[谷歌云](https://cloud.google.com/)、[亚马逊云](https://aws.amazon.com/cn/)、[微软云服务Azure](https://azure.microsoft.com/zh-cn/)等，这些云服务，基本上都会提供一年的免费体验期，可以挨个换着用，通过特殊的方法，有些云服务可以使用不止一次……其实国内的阿里云有[国际版](https://link.zhihu.com/?target=https%3A//www.alibabacloud.com/%3Fspm%3D5176.2020520130.1001.d1.1dd16bc4h2cx2M)，但是禁止大陆用户注册……\n  - 学生优惠：包括上述的国外云服务厂商，还有[Digital Ocean](https://m.do.co/c/ad240a3367a0)，一定要记得自己的学校邮箱，可以申请到不少好东西，还可以申请学生优惠；\n\n- VPS提供商有：**[Vultr](http://www.vultr.com/?ref=7038906)、[Linode](https://www.linode.com/)、[搬瓦工（bandwagonhost）](https://bwh1.net/)**，这些都是消费服务，但是有时候优惠很大，Vultr应该是国内用户用得最多的VPS，价格厚道，支持xx宝付款，但是无奈用户太多，且大部分用户都选择在日本的机房，特征明显压力大，最近频频被封号……[Linode](https://link.zhihu.com/?target=https%3A//www.linode.com/%3Fr%3D34ae657f093b6c1f90eb6cba7015e9bd852db128)强推；\n\n2. 一台可以上网的电脑（个人PC）Windows、Mac系统都可以。\n\n##### 软件环境\n\n1. SSH登录终端：[**Xshell**](https://www.netsarang.com/zh/xshell-download/)、[**FinalShell**](http://www.hostbuf.com/t/988.html)等；\n2. Chrome浏览器\n3. 谷歌账号\n4. SSR客户端\n\n##### 其它环境\n\n1. 实体信用卡或者[虚拟信用卡](https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B)\n\n#### 搭配方案\n\n经过我的一番调研，在这个特殊时期，使用**谷歌云 + BBRPlus加速 + SSR**的方案，可完美科学上网，谷歌搜索WiKi百科无压力，Youtube略有压力。\n\n**完美支持Windows、Android、Mac。**\n\n下表是我的配置环境\n\n|   环境    |     版本号     |\n| :-------: | :------------: |\n|   系统    | Windows10 1909 |\n| VPS服务商 |     谷歌云     |\n|  浏览器   | Chrome/Edge等  |\n| 终端登录  |     Xshell     |\n| 代理工具  |      SSR       |\n\n**VPS服务器**：**谷歌云**，新用户注册谷歌云，可获得300美刀的赠金。\n\n#### 配置步骤\n\n实验环境是Windows10，**谷歌云 + BBRPlus加速 + SSR**配置步骤大概分10步。\n\n##### Step1：翻个小墙\n\n没错，第一步就是翻墙，翻个小墙，偷摸摸的出去干点合理合法的小事情，一切为了学习！因为需要一个谷歌账号，如果已经有了谷歌账号，则需要在谷歌云网站注册为新用户，所以我们需要一些方法先翻出去，搞定这些，做好铺垫，再回来利用终端进行配置。\n\n搜集了一些不太稳定，但是可以翻出去的方法。\n\n1. 网站类：https://ac.scmor.com/，这是一个镜像网站，不稳定，但有时可以用；\n\n![Google镜像网站](https://source.thankjava.com/view/XEX0gCk)\n\n2. chrome插件类：请移步[链接](https://pan.baidu.com/s/1Dz47RxD2im1QS_aOLod6uQ)进行下载，提取码是hd2q。里面有三款插件，推荐使用**VeePN**。插件的安装方法：\n\n- 打开Chrome浏览器：输入[chrome://extensions/](chrome://extensions/)，打开后，点击右上角的按钮，进入**开发者模式**；\n\n![Chrome开发者模式](https://pic.downk.cc/item/5e7cdf1a504f4bcb04e33b74.png)\n\n- 插件的格式为crx，将其拖入上述界面，若出现错误，则将插件后缀名.crx更改为.zip后，重新拖入；\n- 若继续出现错误，将.zip文件进行解压，点击`加载已解压的扩展程序`，选中刚刚解压好的文件夹，点击确定；\n- Edge浏览器用户，进入[edge://extensions/](edge://extensions/)，点击`加载解压缩的扩展`，选择上一步解压好的文件夹，确定后进行尝试；\n\n如果上述方法都不可用，请联系管理员。\n\n后续步骤都建立在**Step1**之上，即先翻个小墙。\n\n#####  Step2：注册谷歌账号\n\n这一步无需多言，在翻墙进来之后，打开[Google账户注册](https://support.google.com/accounts/answer/27441?hl=zh-Hans)页面，一步一步进行操作，手机号貌似是可选项，可以不填；整个过程，这一步应该是最好过的一步了。\n\n#####  Step3：注册谷歌云服务\n\n**新用户注册谷歌云，可获得300美刀的赠金。**这些小钱钱是打到你的谷歌云账户里的，不能提现，只能在使用谷歌云服务时，进行抵押。\n\n在注册谷歌云，非常非常关键的一步是，需要一张**信用卡**。如果你的信用卡是实体卡，也就是在国内申请的并没有问题，可以不看这段；但是大部分学生是没有信用卡的，如何薅羊毛呢？利用[Payoneer](https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B)，全中文界面，如果你相信这家公司，就请注册，审核比较快，审核通过后，可以进行谷歌云账号的注册，Payoneer的注册教程请[移步](https://www.jianshu.com/p/5d918a6aec1c)。\n\n拿到信用卡账号后，打开[谷歌云官网](https://cloud.google.com/)进行注册，整个过程不难，需要注意的是：\n\n- 在**国家/地区**的选择列表里，并没有中国，这并不奇怪……隨便选择一个国家即可；\n- 还有在输入你的**地址**时，有一个简单的办法，大家可以在[谷歌地图](https://www.google.com/maps/?hl=zh-CN)搜索你所选择国家的大学地址就好，比如搜索斯坦福大学，地址：450 Serra Mall, Stanford, CA 94305。另外，不需要1美元进行验证。\n\n如果看到可选的项目，可以不填。\n\n至此，你已经注册好了谷歌云，并进入了控制台界面。\n\n![Google结算界面](https://pic.downk.cc/item/5e7ce99a504f4bcb04e9946d.png)\n\n![Google结算界面](https://pic.downk.cc/item/5e7ceb8f504f4bcb04eac66d.png)\n\n如上图，进入到**结算界面**后，我们在右侧可以看到赠送到你账户的300刀以及免费使用的天数365天。因为我之前注册过并使用了一些服务，所以服务的费用从300刀里面扣了一部分，需要注意的是，这部分赠金使用完后，**不自动**从绑定的信用卡里进行扣费。\n\n#####  Step4：创建VPS服务器\n\n在这一步，创建VPS服务器，在谷歌云里，叫虚拟机实例（VM实例）。\n\n![虚拟机实例创建](https://pic.downk.cc/item/5e7cecdf504f4bcb04eb79c5.png)\n\n进入**虚拟机实例**创建界面，点击**新建**或**创建实例**，进行VPS配置。\n\n- **名称**：随便取，比如 scisurfing，只能是小写英文字母；\n- **标签**：省略不填；\n- **区域**：如果在国内，尽可能选择离我们近一点的城市，比如中国台湾、中国香港、东京、大坂、首尔、孟买、新加坡等，要根据自己的为位置和网速进行选择，配置完成后可以试一下哪个速度最快；\n\n![地区选择](https://pic.downk.cc/item/5e7cee56504f4bcb04ec6109.png)\n\n- **地区**：同上，随便选一个即可，到时候可以挨个尝试；\n\n- **机器配置**：\n  - **系列**：N1即可；\n  - **机器类型**：列表里有各种配置，配置越高，收费越贵，根据实际情况来选择，这里我选择`n1-standard-1（1个vCPU，3.75GB内存）`；\n- **启动磁盘**：根据自己的习惯来选择，这里我选择**CentOS系统**，版本号选择**7**。\n\n![启动磁盘](https://pic.downk.cc/item/5e7cf1d5504f4bcb04ee2435.png)\n\n- 防火墙：将`允许HTTP流量`和`允许HTTPS流量`全部勾选上。\n\n我的整体配置如下：\n\n![](https://pic.downk.cc/item/5e7cf3c5504f4bcb04ef0e30.png)\n\n配置完成后，右侧会显示每个月的具体花费，根据消费金额，可适当调整。紧接着点击`创建`按钮，稍等片刻，控制台再完成配置之后，会生成一个外部IP地址，如下图所示：\n\n![](https://pic.downk.cc/item/5e7cf4d5504f4bcb04ef8281.png)\n\n为了测试这个IP可以在国内使用，需要在[站长之家](http://ping.chinaz.com/)对这个IP（aaa.bbb.ccc.ddd）进行检测，ping得通，则认为这个IP还没有被墙，可以正常使用，进行下一步，如下图，一片“绿”就对了。\n\n![Ping检测](https://pic.downk.cc/item/5e7cf5cd504f4bcb04eff81a.png)\n\n如果这个IP在国内ping不通，则显示一片红，需要在控制台删除这个实例，再重新创建，直到一片绿油油的景象。\n\n#####  Step5：修改谷歌云控制权限\n\n这一步的目的是为了我们可以在本地计算机利用ssh管理这个VPS服务器，而不是每次都要登录到谷歌云控制台里面。\n\n![VM-SSH登录](https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png)\n\n点击上图里的`SSH`，加载一段时间会弹出一个终端界面，如下图所示，其服务器系统就是在创建实例的时候选择的系统，比如我选择是CentOS 7版本\n\n![谷歌云终端界面](https://pic.downk.cc/item/5e7cf7f4504f4bcb04f0e614.png)\n\n首先要获取服务器root权限，输入\n\n```bas\nsudo -i\n```\n\n获取root权限后，继续输入\n\n```bas\nvim /etc/ssh/sshd_config\n```\n\n在英文输入法状态下，按下键盘上的`i`键，此时左下角的标记为**INSERT**状态，移动键盘上的上下左右四个键，找到第38行\n\n```bas\nPermitRootLogin no\n```\n\n将`no`改为`yes`；\n\n将第63行`# PasswordAuthentication yes`前面的`#`去掉。\n\n按下键盘的`esc`键推出编辑模式，按下shift+冒号，再输入`wq`保存并退出。\n\n然后再终端重启sshd服务。\n\n```bas\nsystemctl restart sshd.service\n```\n\n修改密码，在终端继续输入\n\n```bas\npasswd\n```\n\n按照提示更改登录密码，温馨提示，尽可能不要用小键盘输入数字，密码请使用数组加字母的组合形式。\n\n##### Step6：登录VPS服务器\n\n在**个人电脑**上，打开xshell或者其它终端，具体使用方法请看我的[另一篇文章（Lab532服务器环境(CentOS 7.6)须知）](https://github.com/kangzhiheng/GitLocalDoc#ssh%E7%99%BB%E5%BD%95)，输入\n\n```bas\nssh root@IPAddr -p 22\n```\n\n读者们仅仅需要将`IPAddr`替换成自己的VPS IP地址就好。第一次登录可能会出现以下界面，输入`yes`即可。\n\n![SSH登录](https://pic.downk.cc/item/5e7cfd04504f4bcb04f2d5ae.png)\n\n#####  Step7：安装BBR加速内核\n\n[BBR](https://github.com/google/bbr) 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。从 4.9 开始，Linux 内核已经用上了该算法。部署最新版内核，开启TCP BBR 加速的 VPS，**网速可以提升几个数量级**。\n\n安装`wget`\n\n```bas\nyum -y install wget\n```\n\n安装BBR加速，允许下列代码\n\n```bas\nwget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh && chmod +x tcp.sh && ./tcp.sh\n```\n\n出现的界面如下：\n\n![BBR加速](https://pic.downk.cc/item/5e7d03ad504f4bcb04f4ec70.png)\n\n输入数字`2`，等待安装`BBRplus版内核`\n\n安装完成后，可能出现以下界面\n\n![安装BBR](https://pic.downk.cc/item/5e7d0575504f4bcb04f570f9.png)\n\n输入`Y`，如果在之间出现了这样的界面\n\n![BBR](https://pic.downk.cc/item/5e7d05b9504f4bcb04f5843b.png)\n\n选择`No`即可。\n\n此时本地客户端连接断开，谷歌云正在重启VPS服务器，回到**谷歌云控制台**里的虚拟机实例页面，点击`SSH`\n\n![VM-SSH登录](https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png)\n\n加载网页上的终端后，输入\n\n```bas\nsudo -i\n```\n\n获取root权限，运行\n\n```bas\n./tcp.sh\n```\n\n出现以下界面\n\n![安装BBR加速](https://pic.downk.cc/item/5e7d0705504f4bcb04f5ef36.png)\n\n现在安装BBR加速，选择`7`。\n\n很快，出现界面\n\n![BBR安装完成](https://pic.downk.cc/item/5e7d075c504f4bcb04f60b46.png)\n\n出现了这个界面，表示BBR加速已经安装完成并启动成功了。\n\n##### Step8：在VPS上安装SSR服务\n\n继续在上一步的网页版的终端里运行代码\n\n```bas\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n\n![服务器端SSR](https://pic.downk.cc/item/5e7d080b504f4bcb04f645fa.png)\n\n输入`1`，进行SSR安装\n\n安装过程中需要对端口、密码、协议插件、混淆插件等进行配置，全部默认即可（一直按Enter键），直至出现\n\n![SSR安装](https://pic.downk.cc/item/5e7d0973504f4bcb04f6b0fb.png)\n\n输入`y`，安装服务端SSR所需要的依赖服务，这可能需要个几分钟时间，然后可能会出现一个啥都不显示的界面，恭喜你，安装完成了，这时候需要用鼠标进行页面向上的滚动，就会看到\n\n![BBR安装完成](https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png)\n\n离成功越来越近了，继续操作。**将上述SSR配置信息保存起来。**\n\n#####  Step9：关闭谷歌云防火墙\n\n![VPS防火墙](https://pic.downk.cc/item/5e7d0b3d504f4bcb04f86edf.png)\n\n如上图，打开`VPC网络`里的`防火墙规则`\n\n![VPS防火墙修改](https://pic.downk.cc/item/5e7d0c11504f4bcb04f8beff.png)\n\n因为在之前的设置中，使用了不同的端口和协议，所以需要修改防火墙规则，上图里用红色框框圈出来的两个过滤表，都需要进行相同的操作，选择第一个为例进行说明。\n\n点击第一个，进入下一个界面，如下图所示，点击修改，将页面滑到最下面。\n\n![](https://pic.downk.cc/item/5e7d0cb4504f4bcb04f8f64b.png)\n\n![](https://pic.downk.cc/item/5e7d0d23504f4bcb04f91c4b.png)\n\n将`协议和端口`改为**全部允许**，`default-allow-https`也是一样的操作。\n\n##### Step10：连接SSR\n\n下载SSR客户端，链接为：[Windows](https://github.com/shadowsocksrr/shadowsocksr-csharp/releases)、[Android](https://github.com/shadowsocksrr/shadowsocksr-android/releases)、[Mac](https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/)\n\n以Win10系统为例，解压文件夹后，运行`ShadowSOcksR-dotnet4.0.exe`。\n\n![SSR客户端](https://pic.downk.cc/item/5e7d0ebe504f4bcb04f9a5c9.png)\n\nSSR正常运行时，桌面右下角出现一个粉色的飞机小图标。\n\n返回到网页终端，或者打开保存好的SSR配置信息。\n\n![BBR安装完成](https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png)\n\n复制上图中的`SSR链接`。紧接着，右键SSR客户端\n\n![](https://pic.downk.cc/item/5e7d1033504f4bcb04fa30ed.png)\n\n选择`剪切板批量导入ssr://链接`，出现界面\n\n![](https://pic.downk.cc/item/5e7d10a5504f4bcb04fa56dd.png)\n\n可以进行备注和群组名填写，然后选择确定，配置完成。\n\n右键SSR客户端，在\n\n- `系统代理模式`里，选择`PAC模式`；\n- `服务器`里，选择刚刚配置好的服务器IP；\n\n一切准备就绪，测试能否[翻墙](https://google.com.hk)，若不能，删除该VPS服务器，重新配置即可。\n\n### 结语\n\n一般来说，刚刚配置的VPS，速度都不错，在[油管](https://www.youtube.com/)看4K基本无压力，速度可达24000Kbps。但是随着时间的推移，就会发现速度逐渐变慢，这个时候看超清视频，可能都有点吃力，但是搜索看新闻影响不大。如果速度很慢，利用[站长工具](http://ping.chinaz.com/)进行IP检测，实在不能忍受的情况下，在谷歌云里删除该VPS服务器，重新配置即可。\n\n另外，这种方法，也可以在手机（安卓）上进行配置，但是运营商会限速，只是用来搜索，基本没啥大问题。\n\n时间仓促，水平有限，有错误，请随时联系我：<kangzhiheng@live.cn>。\n\n希望大家可以正确利用技术。\n\n希望这个方法带给大家帮助。\n\n### 参考\n\n[1] [互联网是如何工作的？VPN、SSR、V2ray翻墙是什么原理？](https://www.youtube.com/watch?v=iidqJ7p7ln4)\n\n[2] http://www.ggfwzs.com/ \n\n[3] [浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别](https://medium.com/@thomas_summon/浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别-b0198f92db1b)\n\n[4] [手把手教你搭建搬瓦工-ss-代理](https://github.com/frank-lam/vps-ss#手把手教你搭建搬瓦工-ss-代理)\n\n[5] [SS和SSR的区别](https://www.idcbest.com/idcnews/11003957.html)\n\n[6] [免费翻墙，谷歌云+SSR](https://www.youtube.com/watch?v=RxbGtkRVUWQ&t=291s)\n\n[7] [V2Ray](https://toutyrater.github.io/)","source":"_posts/科学上网基础款.md","raw":"---\ntitle: “免费”科学上网新姿势（一）基本动作（谷歌云+BBR加速+SSR）\ntoc: true\nrecommend: 1\ndate: 2020-03-28 00:18:30\nthumbnail: https://pic.downk.cc/item/5e7f90df504f4bcb04c06b59.png\ncategories: 科学上网\ntags: \n  - CentOS\n  - 谷歌云\n  - BBR加速\n  - SSR\nkeywords: 科学上网\n---\n\n这篇文章分为两大部分，[简介](#简介)和[方法](#方法)，即我们在国内“科学上网”的背景，以及“科学上网”的基本方法。想要直接获取方法的朋友请进[传送门](#方法)。\n\n\n\n<!-- more -->\n\n### 目录\n\n- [简介](#简介)\n  - [背景](#背景)\n  - [健康上网行为准则](#健康上网行为准则)\n  - [客观看待“墙”](#客观看待\"墙\")\n  - [互联网是怎么工作的？](#互联网是怎么工作的？)\n  - [入侵检测手段](#入侵检测手段)\n    - [域名解析缓存服务污染（DNS劫持）](#**域名解析缓存服务污染**（DNS劫持）)\n    - [IP地址或传输层端口封锁（IP封锁）](#IP地址或传输层端口封锁（IP封锁）)\n  - [常用的“名词”](#常用的\"名词\")\n    - [VPN](#VPN)\n    - [VPS](#VPS)\n    - [SS与SSR](#SS与SSR)\n    - [V2ray](#V2Ray)\n- [方法](#方法)\n  - [基本原理](#基本原理)\n  - [配置环境](#配置环境)\n    - [硬件环境](#硬件环境)\n    - [软件环境](#软件环境)\n    - [其它环境](#其它环境)\n  - [搭配方案](#搭配方案)\n  - [配置步骤](#配置步骤)\n    - [Step1 - 翻个小墙](#Step1：翻个小墙)\n    - [Step2 - 注册谷歌账号](#Step2：注册谷歌账号)\n    - [Step3 - 注册谷歌云服务](#Step3：注册谷歌云服务)\n    - [Step4 - 创建虚拟机实例](#Step4：创建VPS服务器)\n    - [Step5 - 修改谷歌云控制权限](#Step5：修改谷歌云控制权限)\n    - [step6 - 登录VPS服务器](#step6：登录VPS服务器)\n    - [step7 - 安装BBR加速内核](#step7：安装BBR加速内核)\n    - [Step8 - 在VPS上安装SSR服务](#Step8：在VPS上安装SSR服务)\n    - [Step9 - 关闭谷歌云防火墙](#Step9：关闭谷歌云防火墙)\n    - [Step10 - 连接SSR](#Step10：连接SSR)\n- [结语](#结语)\n- [参考](#参考)\n\n### 简介\n\n#### 背景\n\n国内广大研究群体，使用[Google](https://www.google.com)搜索和[百度](https://www.baidu.com)搜索，都有不同的体验，二者各有利弊，但是因为工作和学习的需要，需要使用境外的一些网站，比如[Google](https://www.google.com)。今天不谈政治，只谈技术。在正常情况下，国内是无法直接访问外网的，包括**Google全家桶**（除了谷歌翻译）、**Facebook**、**Twitter**、**Reddit**、**Youtube**（Google旗下）、**Netflix**、**Ins**等。为了方便研究和学习，在这篇文章，介绍一种健康良好的“科学上网方法”，其实不止在国内需要“科学上网”，世界上需要国家亦是如此。如果您利用下述方法可以“科学上网”，还请遵守以下**行为准则**。\n\n#### 健康上网行为准则\n\n“无规矩不成方圆”，工具可以方便人们生活，也可以破坏人们的生活，所以，如何正确使用我们手中的工具，需要我们自己把握。特此呼吁“科学上网的人们”，遵守以下约定，成就健康良好的上网环境！\n\n- 拥护党的领导，不质疑、不攻击、不诋毁国家的做法；\n- 维护国家利益，不信谣、不传谣；\n- 明辨是非，相信祖国；\n- 科学上网，禁止非法交易；\n\n在阅读以下内容前，您需要首先阅读并认可上述**行为准则**；如果您不认同，还请Ctrl+F4。\n\n#### 客观看待“墙”\n\n为什么有些网站打不开呢？是因为国家建了一所防火墙——**防火长城**。\n\n> **GFW**，Great Firewall，**防火长城**，也称**中国国家防火墙**。 是对我国在其互联网边界审查系统（包括相关行政审查系统）的统称。此系统起步于1998年。国内平时所说的“被墙”即指网站内容被**防火长城**所屏蔽或者指服务器的通讯被封阻，“翻墙”也被引申为[突破网络审查](https://zh.wikipedia.org/wiki/突破网络审查)浏览中国大陆境外被屏蔽的网站或使用服务的行为。 其实在国外，要查看国内的某些内容，比如腾讯、爱奇艺等国内版本，正常情况下在国外是使用不了的，如果要查看也是要从国外翻回来的。\n\n虽然防火长城让我们无法使用Google、Facebook等流行网站，有时候确实显得不太方便。我刚开始对这所墙也是略有不满，但是随着近几年发生的事情，以及自己在国外的一些经历，慢慢发现GFW也不是对自己完全不利。我国正处于高速发展期间，互联网上存在着大量的内容，但很多人很难分辨这些内容的真假，在国内尚且如此，国外这些内容就更多了，西方国家动不动就批判我们的国家，打着民主自由的口号，干一些见不得人的勾当，想想就觉得可笑。我们国家有些人对这些谣言信以为真，一些谣言一旦传播开来，说严重点，就会影响国家的根基，带来社会的不稳定。这才是真正的罪过。**如果你没有一个真正平稳的心态，请不要涉足国外和政治有关的网站**。\n\n![GFW](https://pic.downk.cc/item/5e7c9d84504f4bcb04b956b7.jpg)\n\n技术无罪，人心叵测，在珍惜科技发展带来方便的同时，我们也需要一双明亮的大眼睛。\n\n#### 互联网是怎么工作的？\n\n知其然，知其所以然。我们要知道，在浏览器里，输入`https://www.google.com`，后台到底发生了什么？正常情况下，为什么输入`https://www.google.com`，会返回错误信息，而输入`https://www.baidu.com`，会出现渲染界面。有兴趣的读者可以观察这个[视频]( https://www.kenzhishi.com/1933.html )进行简单的了解。\n\n在正常情况下，浏览器从输入一个域名地址，例如[https://www.baidu.com](https://ww.baidu.com)到页面呈现，[**大概分8步**]( https://segmentfault.com/a/1190000012092552 )：\n\n- 第一步：把冰箱门打开，不是，第一步先进行DNS域名解析：把域名地址解析到对应的IP地址（**非常重要**）；\n- 第二步： 建立TCP连接； \n- 第三步： 发送HTTP请求； \n- 第四步： 服务器处理请求； \n- 第五步： 返回响应结果； \n- 第六步： 关闭TCP连接； \n- 第七步： 浏览器解析HTML； \n- 第八步： 浏览器布局渲染； \n\n那么为什么有些网站打不开呢？请再看一个[视频]( https://www.kenzhishi.com/587.html )。\n\n![GFW](https://source.thankjava.com/view/XDyk9qy)\n\n**GFW**的存在就像疫情期间路口的卡子，夹在用户和服务之间，每当用户获取服务时，不得不经过GFW，它会查验你的“通行证”是否满足要求，不满足就会被阻拦，多次持有不合法的通行证，就会被列入黑名单。\n\n通过查阅资料，猜想中的防火长城GFW至少有两种入侵检测手段是：\n\n- **域名解析缓存服务污染**（DNS污染）\n- **IP地址或传输层端口封锁**（IP封锁）\n\n#### 入侵检测手段\n\n##### **域名解析缓存服务污染**（DNS劫持）\n\nIP地址是互联网世界中的主机设备的独一无二的由数字组成的标记，是用来唯一标识互联网上计算机的逻辑地址。 要将信息发到对应的服务器上时，我们需要知道对方的“地址”，即IP地址，形如aaa.bbb.ccc.ddd。但是IP地址不容易记忆，所以使用一个可读性更强的“域名”来方便记忆，域名与IP地址是一对一或者多对一。我们向服务器发送信息时，解析域名到指定的IP地址是通过**DNS域名服务器**来进行的。当发现一个不和谐网站，然后就把这个网站的域名给加到GFW劫持列表中。DNS客户端会盲目地相信第一个收到的答案，所以你去查询facebook.com的话，GFW只要在正确的答案被返回之前抢答了，然后伪装成你查询的DNS服务器向你发错误的答案就可以了。 \n\n##### IP地址或传输层端口封锁（IP封锁）\n\n通过将需要拦截的IP地址配置为空路由或者黑洞设备上，然后通过[动态路由协议](https://zh.wikipedia.org/wiki/动态路由协议)将相应配置路由扩散到公众互联网网络中，从将条件匹配拦截行为转为路由器的常规转发行为，从而提高拦截效率。多见于自主拥有大量IP地址段的需要审查的企业中。\n\n#### 常用的“名词”\n\n##### VPN\n\n**虚拟专用网络**，Virtual Private Network，简称**VPN**。VPN 在很多人心目中就是用来翻墙的工具，其实不然，VPN 最主要的功能，并不是用来翻墙，只是它可以达到翻墙的目的。VPN的**功能**是：在公用网络上建立专用网络，进行加密通讯，在企业网络和高校的网络中应用很广泛。接入 VPN其实就是接入了一个专有网络，你的网络访问都从这个出口出去，你和 VPN 之间的通信是否加密，取决于你连接 VPN 的方式或者协议。\n\n**VPN是为了保证通信的安全性、私密性，不是专门为“科学上网制定的技术。**\n\n##### VPS\n\n**虚拟专用服务器**，Virtual private server，简称**VPS**。不妨想一个问题：我们平时上网浏览网页，我们访问的那些网页都是哪来的？答案很简单，从另一台电脑上下载下来的。无论是用户平时所使用的个人PC电脑，还是用于搭载网站的服务器，本质上都是电脑。但与个人PC不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。而VPS，就是不会关机的电脑。\n\nVPS虚拟专用服务器是由VPS提供商维护，租用给站长使用的“不会关机的电脑”，也是服务器的一种。VPS不是一台台独立的电脑，而是将一台巨型服务器通过虚拟化技术分割成若干台看似独立的服务器，这台巨型服务器不间断运行，被分割出来的小服务器也跟着不停的运作，站长租用其中一台小服务器，搭载上自己的站点，就可以等着用户访问了。\n\nVPS提供商有：**[Vultr](http://www.vultr.com/?ref=7038906)、[Digital Ocean](https://m.do.co/c/ad240a3367a0)、[Linode](https://www.linode.com/)、[搬瓦工（bandwagonhost）](https://bwh1.net/)**\n\n**实验就用的是[Vultr](http://www.vultr.com/?ref=7038906)，用得人多，特征会明显，容易被GFW识别并拦截，因此故障多一点，需要经常换IP。**Vultr性价比比较高，适合个人使用。\n\n##### SS与SSR\n\n![SS与SSR](https://pic.downk.cc/item/5e7cccbe504f4bcb04d92eac.png)\n\nSS，全称ShadowSocks，SSR，全称ShadowSocks-R，如上图，SS/SSR的图标酷似飞机，又俗称机场，SS/SSR的账号俗称机票。SS/SSR是一种跨域网络加速的开源方案，说白了就是一种穿透GFW的的**代理工具**。\n\n对SS/SSR来说穿透防火墙是第一位，抗干扰性强，而且对流量做了混淆，所有流量在通过防火墙的时候，基本上都被识别为普通流量，也就是说你翻墙了，但是GFW是检测不到你在翻墙的，SS/SSR更注重流量的混淆加密。\n\nSSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。SS和SSR两者原理相同，都是基于socks5代理。客户端与服务端没有建立专有通道，客户端和实际要访问的服务端之间通过代理服务器进行通信，客户端发送请求和接受服务端返回的数据都要通过[代理服务器](https://www.idcbest.com/servernews/11000420.html)。SSR目的是为了能让流量通过防火墙。\n\nSSR和SS有一些区别，如下：\n\n1. SSR可以伪装成自定义的http开头，让监控着认为你是在访问百度，将实际的内容进行加密。SS是纯加密流量；\n2. 如果SS速度用着很快，没什么问题，带宽基本都能跑满，那么就可以继续使用SS。如果SS总是跑着跑着速度就渐渐上不去，或者没有速度的时候，就可能是遇到了[QOS](https://zh.wikipedia.org/zh-hans/%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F)，需要使用SSR。当然，两者直接使用SSR也是没什么问题的；\n\n客户端请求服务端数据流程（**SSR**)：\n\n1、浏览器发送请求（基于socks5协议），通过SSR客户端将sock5协议通过协议插件和混淆插件进行转换加密，使得来自客户端的流量和基于HTTP协议的流量无差别；\n\n2、SSR服务端（代理服务器）收到请求后，通过混淆插件、协议插件将数据解密并还原协议，最后转发到目标服务器。\n\n顺便提一嘴SS和SSR代理工具的故事，大概是酱婶儿的。\n\nSS作者是clowwindy，他自己为了翻墙写了shadowsocks，简称 ss 或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了 GitHub 上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。\n\n这个悲伤的故事还没有结束，在SS作者被喝茶之后，GitHub 上出现了一个叫 breakwa11(破娃)的帐号，声称SS容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容SS，改进后的项目叫ShadowSocks-R，简称SSR，然后SS用户和SSR用户自然分成了两个派别，互撕，后来，破娃被人肉出来，无奈之下删除了SSR的代码，并且解散了所有相关群组……\n\n朋友们，好东西就自己好好用吧……愿天堂没有争吵。\n\n##### V2Ray\n\nV2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。简单地说，V2Ray 是一个与 ShadowSocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。\n\n**那么V2Ray和ShadowSocks有什么区别呢？**\n\nShadowSocks 只是一个简单的代理工具，而 V2Ray 定位为一个平台，任何开发者都可以利用 V2Ray 提供的模块开发出新的代理软件。\n\nShadowSocks 是 clowwindy 开发的自用的软件，开发的初衷只是为了让自己能够简单高效地科学上网，自己使用了很长一段时间后觉得不错才共享出来的。V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的，一开始就致力于让大家更好更快的科学上网。\n\n由于出生时的历史背景不同，导致了它们性格特点的差异。\n\n简单来说，ShadowSocks 功能单一，V2Ray 功能强大，但Shadowsocks 简单好上手，V2Ray 复杂配置多。\n\n事物的优点和缺点总是相生相随的。相对来说，V2Ray 有以下优势：\n\n- **更完善的协议**： V2Ray 使用了新的自行研发的 VMess 协议，改正了 ShadowSocks 一些已有的缺点，更难被GFW检测到；\n\n- **更强大的性能**：网络性能更好，具体数据可以看 [V2Ray 官方博客](https://steemit.com/cn/@v2ray/3cjiux)\n\n- 更丰富的功能：以下是部分 V2Ray 的功能\n\n  - **mKCP**: KCP 协议在 V2Ray 上的实现，不必另行安装 kcptun\n  - **动态端口**：动态改变通信的端口，对抗对长时间大流量端口的限速封锁\n  - **路由功能**：可以随意设定指定数据包的流向，去广告、反跟踪都可以\n  - 传出代理：看名字可能不太好理解，其实差不多可以称之为多重代理。类似于 Tor 的代理\n  - **数据包伪装**：类似于 Shadowsocks-rss 的混淆，另外对于 mKCP 的数据包也可伪装，伪装常见流量，令识别更困难\n  - **WebSocket 协议**：可以 PaaS 平台搭建V2Ray，通过 WebSocket 代理。也可以通过它使用 CDN 中转，抗封锁效果更好\n  - **Mux**：多路复用，进一步提高科学上网的并发性能\n\n  V2Ray虽然优势明显，但配置复杂，产业链不成熟，不适合新手入门。\n\n### 方法\n\n![翻墙原理](https://pic.downk.cc/item/5e7c9dc9504f4bcb04b98b01.png)\n\n#### 基本原理\n\n在上一节[简介](# 简介)里，给大家介绍了科学上网的相关知识，这一节，介绍科学上网的一般方法。\n\n在前面提过，SS和SSR的原理都是一样的，就是 socks5 代理。socks 代理只是简单的传递数据包，而不必关心是何种协议，所以 socks 代理比其他应用层代理要快的多。socks5 代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。\n\n**通俗的说，现在你有一个代理服务器（VPS）在香港，比如你现在想要访问google，你的电脑发出请求，流量通过 socks5 连接发到你在香港的服务器上，然后再由你在香港的服务器去访问 google，再把访问结果传回你的电脑，这样就实现了翻墙。**\n\n#### 配置环境\n\n##### 硬件环境\n\n1. **VPS服务器**\n\n- 免费VPS：不好意思，没有一直免费的，目前网上搜到的免费的VPS服务器，极不稳定，影响体验，适合偶尔使用，不适合长期使用；\n  - 国外的云服务：[谷歌云](https://cloud.google.com/)、[亚马逊云](https://aws.amazon.com/cn/)、[微软云服务Azure](https://azure.microsoft.com/zh-cn/)等，这些云服务，基本上都会提供一年的免费体验期，可以挨个换着用，通过特殊的方法，有些云服务可以使用不止一次……其实国内的阿里云有[国际版](https://link.zhihu.com/?target=https%3A//www.alibabacloud.com/%3Fspm%3D5176.2020520130.1001.d1.1dd16bc4h2cx2M)，但是禁止大陆用户注册……\n  - 学生优惠：包括上述的国外云服务厂商，还有[Digital Ocean](https://m.do.co/c/ad240a3367a0)，一定要记得自己的学校邮箱，可以申请到不少好东西，还可以申请学生优惠；\n\n- VPS提供商有：**[Vultr](http://www.vultr.com/?ref=7038906)、[Linode](https://www.linode.com/)、[搬瓦工（bandwagonhost）](https://bwh1.net/)**，这些都是消费服务，但是有时候优惠很大，Vultr应该是国内用户用得最多的VPS，价格厚道，支持xx宝付款，但是无奈用户太多，且大部分用户都选择在日本的机房，特征明显压力大，最近频频被封号……[Linode](https://link.zhihu.com/?target=https%3A//www.linode.com/%3Fr%3D34ae657f093b6c1f90eb6cba7015e9bd852db128)强推；\n\n2. 一台可以上网的电脑（个人PC）Windows、Mac系统都可以。\n\n##### 软件环境\n\n1. SSH登录终端：[**Xshell**](https://www.netsarang.com/zh/xshell-download/)、[**FinalShell**](http://www.hostbuf.com/t/988.html)等；\n2. Chrome浏览器\n3. 谷歌账号\n4. SSR客户端\n\n##### 其它环境\n\n1. 实体信用卡或者[虚拟信用卡](https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B)\n\n#### 搭配方案\n\n经过我的一番调研，在这个特殊时期，使用**谷歌云 + BBRPlus加速 + SSR**的方案，可完美科学上网，谷歌搜索WiKi百科无压力，Youtube略有压力。\n\n**完美支持Windows、Android、Mac。**\n\n下表是我的配置环境\n\n|   环境    |     版本号     |\n| :-------: | :------------: |\n|   系统    | Windows10 1909 |\n| VPS服务商 |     谷歌云     |\n|  浏览器   | Chrome/Edge等  |\n| 终端登录  |     Xshell     |\n| 代理工具  |      SSR       |\n\n**VPS服务器**：**谷歌云**，新用户注册谷歌云，可获得300美刀的赠金。\n\n#### 配置步骤\n\n实验环境是Windows10，**谷歌云 + BBRPlus加速 + SSR**配置步骤大概分10步。\n\n##### Step1：翻个小墙\n\n没错，第一步就是翻墙，翻个小墙，偷摸摸的出去干点合理合法的小事情，一切为了学习！因为需要一个谷歌账号，如果已经有了谷歌账号，则需要在谷歌云网站注册为新用户，所以我们需要一些方法先翻出去，搞定这些，做好铺垫，再回来利用终端进行配置。\n\n搜集了一些不太稳定，但是可以翻出去的方法。\n\n1. 网站类：https://ac.scmor.com/，这是一个镜像网站，不稳定，但有时可以用；\n\n![Google镜像网站](https://source.thankjava.com/view/XEX0gCk)\n\n2. chrome插件类：请移步[链接](https://pan.baidu.com/s/1Dz47RxD2im1QS_aOLod6uQ)进行下载，提取码是hd2q。里面有三款插件，推荐使用**VeePN**。插件的安装方法：\n\n- 打开Chrome浏览器：输入[chrome://extensions/](chrome://extensions/)，打开后，点击右上角的按钮，进入**开发者模式**；\n\n![Chrome开发者模式](https://pic.downk.cc/item/5e7cdf1a504f4bcb04e33b74.png)\n\n- 插件的格式为crx，将其拖入上述界面，若出现错误，则将插件后缀名.crx更改为.zip后，重新拖入；\n- 若继续出现错误，将.zip文件进行解压，点击`加载已解压的扩展程序`，选中刚刚解压好的文件夹，点击确定；\n- Edge浏览器用户，进入[edge://extensions/](edge://extensions/)，点击`加载解压缩的扩展`，选择上一步解压好的文件夹，确定后进行尝试；\n\n如果上述方法都不可用，请联系管理员。\n\n后续步骤都建立在**Step1**之上，即先翻个小墙。\n\n#####  Step2：注册谷歌账号\n\n这一步无需多言，在翻墙进来之后，打开[Google账户注册](https://support.google.com/accounts/answer/27441?hl=zh-Hans)页面，一步一步进行操作，手机号貌似是可选项，可以不填；整个过程，这一步应该是最好过的一步了。\n\n#####  Step3：注册谷歌云服务\n\n**新用户注册谷歌云，可获得300美刀的赠金。**这些小钱钱是打到你的谷歌云账户里的，不能提现，只能在使用谷歌云服务时，进行抵押。\n\n在注册谷歌云，非常非常关键的一步是，需要一张**信用卡**。如果你的信用卡是实体卡，也就是在国内申请的并没有问题，可以不看这段；但是大部分学生是没有信用卡的，如何薅羊毛呢？利用[Payoneer](https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B)，全中文界面，如果你相信这家公司，就请注册，审核比较快，审核通过后，可以进行谷歌云账号的注册，Payoneer的注册教程请[移步](https://www.jianshu.com/p/5d918a6aec1c)。\n\n拿到信用卡账号后，打开[谷歌云官网](https://cloud.google.com/)进行注册，整个过程不难，需要注意的是：\n\n- 在**国家/地区**的选择列表里，并没有中国，这并不奇怪……隨便选择一个国家即可；\n- 还有在输入你的**地址**时，有一个简单的办法，大家可以在[谷歌地图](https://www.google.com/maps/?hl=zh-CN)搜索你所选择国家的大学地址就好，比如搜索斯坦福大学，地址：450 Serra Mall, Stanford, CA 94305。另外，不需要1美元进行验证。\n\n如果看到可选的项目，可以不填。\n\n至此，你已经注册好了谷歌云，并进入了控制台界面。\n\n![Google结算界面](https://pic.downk.cc/item/5e7ce99a504f4bcb04e9946d.png)\n\n![Google结算界面](https://pic.downk.cc/item/5e7ceb8f504f4bcb04eac66d.png)\n\n如上图，进入到**结算界面**后，我们在右侧可以看到赠送到你账户的300刀以及免费使用的天数365天。因为我之前注册过并使用了一些服务，所以服务的费用从300刀里面扣了一部分，需要注意的是，这部分赠金使用完后，**不自动**从绑定的信用卡里进行扣费。\n\n#####  Step4：创建VPS服务器\n\n在这一步，创建VPS服务器，在谷歌云里，叫虚拟机实例（VM实例）。\n\n![虚拟机实例创建](https://pic.downk.cc/item/5e7cecdf504f4bcb04eb79c5.png)\n\n进入**虚拟机实例**创建界面，点击**新建**或**创建实例**，进行VPS配置。\n\n- **名称**：随便取，比如 scisurfing，只能是小写英文字母；\n- **标签**：省略不填；\n- **区域**：如果在国内，尽可能选择离我们近一点的城市，比如中国台湾、中国香港、东京、大坂、首尔、孟买、新加坡等，要根据自己的为位置和网速进行选择，配置完成后可以试一下哪个速度最快；\n\n![地区选择](https://pic.downk.cc/item/5e7cee56504f4bcb04ec6109.png)\n\n- **地区**：同上，随便选一个即可，到时候可以挨个尝试；\n\n- **机器配置**：\n  - **系列**：N1即可；\n  - **机器类型**：列表里有各种配置，配置越高，收费越贵，根据实际情况来选择，这里我选择`n1-standard-1（1个vCPU，3.75GB内存）`；\n- **启动磁盘**：根据自己的习惯来选择，这里我选择**CentOS系统**，版本号选择**7**。\n\n![启动磁盘](https://pic.downk.cc/item/5e7cf1d5504f4bcb04ee2435.png)\n\n- 防火墙：将`允许HTTP流量`和`允许HTTPS流量`全部勾选上。\n\n我的整体配置如下：\n\n![](https://pic.downk.cc/item/5e7cf3c5504f4bcb04ef0e30.png)\n\n配置完成后，右侧会显示每个月的具体花费，根据消费金额，可适当调整。紧接着点击`创建`按钮，稍等片刻，控制台再完成配置之后，会生成一个外部IP地址，如下图所示：\n\n![](https://pic.downk.cc/item/5e7cf4d5504f4bcb04ef8281.png)\n\n为了测试这个IP可以在国内使用，需要在[站长之家](http://ping.chinaz.com/)对这个IP（aaa.bbb.ccc.ddd）进行检测，ping得通，则认为这个IP还没有被墙，可以正常使用，进行下一步，如下图，一片“绿”就对了。\n\n![Ping检测](https://pic.downk.cc/item/5e7cf5cd504f4bcb04eff81a.png)\n\n如果这个IP在国内ping不通，则显示一片红，需要在控制台删除这个实例，再重新创建，直到一片绿油油的景象。\n\n#####  Step5：修改谷歌云控制权限\n\n这一步的目的是为了我们可以在本地计算机利用ssh管理这个VPS服务器，而不是每次都要登录到谷歌云控制台里面。\n\n![VM-SSH登录](https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png)\n\n点击上图里的`SSH`，加载一段时间会弹出一个终端界面，如下图所示，其服务器系统就是在创建实例的时候选择的系统，比如我选择是CentOS 7版本\n\n![谷歌云终端界面](https://pic.downk.cc/item/5e7cf7f4504f4bcb04f0e614.png)\n\n首先要获取服务器root权限，输入\n\n```bas\nsudo -i\n```\n\n获取root权限后，继续输入\n\n```bas\nvim /etc/ssh/sshd_config\n```\n\n在英文输入法状态下，按下键盘上的`i`键，此时左下角的标记为**INSERT**状态，移动键盘上的上下左右四个键，找到第38行\n\n```bas\nPermitRootLogin no\n```\n\n将`no`改为`yes`；\n\n将第63行`# PasswordAuthentication yes`前面的`#`去掉。\n\n按下键盘的`esc`键推出编辑模式，按下shift+冒号，再输入`wq`保存并退出。\n\n然后再终端重启sshd服务。\n\n```bas\nsystemctl restart sshd.service\n```\n\n修改密码，在终端继续输入\n\n```bas\npasswd\n```\n\n按照提示更改登录密码，温馨提示，尽可能不要用小键盘输入数字，密码请使用数组加字母的组合形式。\n\n##### Step6：登录VPS服务器\n\n在**个人电脑**上，打开xshell或者其它终端，具体使用方法请看我的[另一篇文章（Lab532服务器环境(CentOS 7.6)须知）](https://github.com/kangzhiheng/GitLocalDoc#ssh%E7%99%BB%E5%BD%95)，输入\n\n```bas\nssh root@IPAddr -p 22\n```\n\n读者们仅仅需要将`IPAddr`替换成自己的VPS IP地址就好。第一次登录可能会出现以下界面，输入`yes`即可。\n\n![SSH登录](https://pic.downk.cc/item/5e7cfd04504f4bcb04f2d5ae.png)\n\n#####  Step7：安装BBR加速内核\n\n[BBR](https://github.com/google/bbr) 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。从 4.9 开始，Linux 内核已经用上了该算法。部署最新版内核，开启TCP BBR 加速的 VPS，**网速可以提升几个数量级**。\n\n安装`wget`\n\n```bas\nyum -y install wget\n```\n\n安装BBR加速，允许下列代码\n\n```bas\nwget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh && chmod +x tcp.sh && ./tcp.sh\n```\n\n出现的界面如下：\n\n![BBR加速](https://pic.downk.cc/item/5e7d03ad504f4bcb04f4ec70.png)\n\n输入数字`2`，等待安装`BBRplus版内核`\n\n安装完成后，可能出现以下界面\n\n![安装BBR](https://pic.downk.cc/item/5e7d0575504f4bcb04f570f9.png)\n\n输入`Y`，如果在之间出现了这样的界面\n\n![BBR](https://pic.downk.cc/item/5e7d05b9504f4bcb04f5843b.png)\n\n选择`No`即可。\n\n此时本地客户端连接断开，谷歌云正在重启VPS服务器，回到**谷歌云控制台**里的虚拟机实例页面，点击`SSH`\n\n![VM-SSH登录](https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png)\n\n加载网页上的终端后，输入\n\n```bas\nsudo -i\n```\n\n获取root权限，运行\n\n```bas\n./tcp.sh\n```\n\n出现以下界面\n\n![安装BBR加速](https://pic.downk.cc/item/5e7d0705504f4bcb04f5ef36.png)\n\n现在安装BBR加速，选择`7`。\n\n很快，出现界面\n\n![BBR安装完成](https://pic.downk.cc/item/5e7d075c504f4bcb04f60b46.png)\n\n出现了这个界面，表示BBR加速已经安装完成并启动成功了。\n\n##### Step8：在VPS上安装SSR服务\n\n继续在上一步的网页版的终端里运行代码\n\n```bas\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n\n![服务器端SSR](https://pic.downk.cc/item/5e7d080b504f4bcb04f645fa.png)\n\n输入`1`，进行SSR安装\n\n安装过程中需要对端口、密码、协议插件、混淆插件等进行配置，全部默认即可（一直按Enter键），直至出现\n\n![SSR安装](https://pic.downk.cc/item/5e7d0973504f4bcb04f6b0fb.png)\n\n输入`y`，安装服务端SSR所需要的依赖服务，这可能需要个几分钟时间，然后可能会出现一个啥都不显示的界面，恭喜你，安装完成了，这时候需要用鼠标进行页面向上的滚动，就会看到\n\n![BBR安装完成](https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png)\n\n离成功越来越近了，继续操作。**将上述SSR配置信息保存起来。**\n\n#####  Step9：关闭谷歌云防火墙\n\n![VPS防火墙](https://pic.downk.cc/item/5e7d0b3d504f4bcb04f86edf.png)\n\n如上图，打开`VPC网络`里的`防火墙规则`\n\n![VPS防火墙修改](https://pic.downk.cc/item/5e7d0c11504f4bcb04f8beff.png)\n\n因为在之前的设置中，使用了不同的端口和协议，所以需要修改防火墙规则，上图里用红色框框圈出来的两个过滤表，都需要进行相同的操作，选择第一个为例进行说明。\n\n点击第一个，进入下一个界面，如下图所示，点击修改，将页面滑到最下面。\n\n![](https://pic.downk.cc/item/5e7d0cb4504f4bcb04f8f64b.png)\n\n![](https://pic.downk.cc/item/5e7d0d23504f4bcb04f91c4b.png)\n\n将`协议和端口`改为**全部允许**，`default-allow-https`也是一样的操作。\n\n##### Step10：连接SSR\n\n下载SSR客户端，链接为：[Windows](https://github.com/shadowsocksrr/shadowsocksr-csharp/releases)、[Android](https://github.com/shadowsocksrr/shadowsocksr-android/releases)、[Mac](https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/)\n\n以Win10系统为例，解压文件夹后，运行`ShadowSOcksR-dotnet4.0.exe`。\n\n![SSR客户端](https://pic.downk.cc/item/5e7d0ebe504f4bcb04f9a5c9.png)\n\nSSR正常运行时，桌面右下角出现一个粉色的飞机小图标。\n\n返回到网页终端，或者打开保存好的SSR配置信息。\n\n![BBR安装完成](https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png)\n\n复制上图中的`SSR链接`。紧接着，右键SSR客户端\n\n![](https://pic.downk.cc/item/5e7d1033504f4bcb04fa30ed.png)\n\n选择`剪切板批量导入ssr://链接`，出现界面\n\n![](https://pic.downk.cc/item/5e7d10a5504f4bcb04fa56dd.png)\n\n可以进行备注和群组名填写，然后选择确定，配置完成。\n\n右键SSR客户端，在\n\n- `系统代理模式`里，选择`PAC模式`；\n- `服务器`里，选择刚刚配置好的服务器IP；\n\n一切准备就绪，测试能否[翻墙](https://google.com.hk)，若不能，删除该VPS服务器，重新配置即可。\n\n### 结语\n\n一般来说，刚刚配置的VPS，速度都不错，在[油管](https://www.youtube.com/)看4K基本无压力，速度可达24000Kbps。但是随着时间的推移，就会发现速度逐渐变慢，这个时候看超清视频，可能都有点吃力，但是搜索看新闻影响不大。如果速度很慢，利用[站长工具](http://ping.chinaz.com/)进行IP检测，实在不能忍受的情况下，在谷歌云里删除该VPS服务器，重新配置即可。\n\n另外，这种方法，也可以在手机（安卓）上进行配置，但是运营商会限速，只是用来搜索，基本没啥大问题。\n\n时间仓促，水平有限，有错误，请随时联系我：<kangzhiheng@live.cn>。\n\n希望大家可以正确利用技术。\n\n希望这个方法带给大家帮助。\n\n### 参考\n\n[1] [互联网是如何工作的？VPN、SSR、V2ray翻墙是什么原理？](https://www.youtube.com/watch?v=iidqJ7p7ln4)\n\n[2] http://www.ggfwzs.com/ \n\n[3] [浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别](https://medium.com/@thomas_summon/浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别-b0198f92db1b)\n\n[4] [手把手教你搭建搬瓦工-ss-代理](https://github.com/frank-lam/vps-ss#手把手教你搭建搬瓦工-ss-代理)\n\n[5] [SS和SSR的区别](https://www.idcbest.com/idcnews/11003957.html)\n\n[6] [免费翻墙，谷歌云+SSR](https://www.youtube.com/watch?v=RxbGtkRVUWQ&t=291s)\n\n[7] [V2Ray](https://toutyrater.github.io/)","slug":"科学上网基础款","published":1,"updated":"2020-03-29T04:15:50.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgv7001umgvzewx5g0yj","content":"<p>这篇文章分为两大部分，<a href=\"#简介\">简介</a>和<a href=\"#方法\">方法</a>，即我们在国内“科学上网”的背景，以及“科学上网”的基本方法。想要直接获取方法的朋友请进<a href=\"#方法\">传送门</a>。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#简介\">简介</a><ul>\n<li><a href=\"#背景\">背景</a></li>\n<li><a href=\"#健康上网行为准则\">健康上网行为准则</a></li>\n<li><a href=\"#客观看待\"墙\"\">客观看待“墙”</a></li>\n<li><a href=\"#互联网是怎么工作的？\">互联网是怎么工作的？</a></li>\n<li><a href=\"#入侵检测手段\">入侵检测手段</a><ul>\n<li><a href=\"#**域名解析缓存服务污染**（DNS劫持）\">域名解析缓存服务污染（DNS劫持）</a></li>\n<li><a href=\"#IP地址或传输层端口封锁（IP封锁）\">IP地址或传输层端口封锁（IP封锁）</a></li>\n</ul>\n</li>\n<li><a href=\"#常用的\"名词\"\">常用的“名词”</a><ul>\n<li><a href=\"#VPN\">VPN</a></li>\n<li><a href=\"#VPS\">VPS</a></li>\n<li><a href=\"#SS与SSR\">SS与SSR</a></li>\n<li><a href=\"#V2Ray\">V2ray</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#方法\">方法</a><ul>\n<li><a href=\"#基本原理\">基本原理</a></li>\n<li><a href=\"#配置环境\">配置环境</a><ul>\n<li><a href=\"#硬件环境\">硬件环境</a></li>\n<li><a href=\"#软件环境\">软件环境</a></li>\n<li><a href=\"#其它环境\">其它环境</a></li>\n</ul>\n</li>\n<li><a href=\"#搭配方案\">搭配方案</a></li>\n<li><a href=\"#配置步骤\">配置步骤</a><ul>\n<li><a href=\"#Step1：翻个小墙\">Step1 - 翻个小墙</a></li>\n<li><a href=\"#Step2：注册谷歌账号\">Step2 - 注册谷歌账号</a></li>\n<li><a href=\"#Step3：注册谷歌云服务\">Step3 - 注册谷歌云服务</a></li>\n<li><a href=\"#Step4：创建VPS服务器\">Step4 - 创建虚拟机实例</a></li>\n<li><a href=\"#Step5：修改谷歌云控制权限\">Step5 - 修改谷歌云控制权限</a></li>\n<li><a href=\"#step6：登录VPS服务器\">step6 - 登录VPS服务器</a></li>\n<li><a href=\"#step7：安装BBR加速内核\">step7 - 安装BBR加速内核</a></li>\n<li><a href=\"#Step8：在VPS上安装SSR服务\">Step8 - 在VPS上安装SSR服务</a></li>\n<li><a href=\"#Step9：关闭谷歌云防火墙\">Step9 - 关闭谷歌云防火墙</a></li>\n<li><a href=\"#Step10：连接SSR\">Step10 - 连接SSR</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#结语\">结语</a></li>\n<li><a href=\"#参考\">参考</a></li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>国内广大研究群体，使用<a href=\"https://www.google.com\">Google</a>搜索和<a href=\"https://www.baidu.com\">百度</a>搜索，都有不同的体验，二者各有利弊，但是因为工作和学习的需要，需要使用境外的一些网站，比如<a href=\"https://www.google.com\">Google</a>。今天不谈政治，只谈技术。在正常情况下，国内是无法直接访问外网的，包括<strong>Google全家桶</strong>（除了谷歌翻译）、<strong>Facebook</strong>、<strong>Twitter</strong>、<strong>Reddit</strong>、<strong>Youtube</strong>（Google旗下）、<strong>Netflix</strong>、<strong>Ins</strong>等。为了方便研究和学习，在这篇文章，介绍一种健康良好的“科学上网方法”，其实不止在国内需要“科学上网”，世界上需要国家亦是如此。如果您利用下述方法可以“科学上网”，还请遵守以下<strong>行为准则</strong>。</p>\n<h4 id=\"健康上网行为准则\"><a href=\"#健康上网行为准则\" class=\"headerlink\" title=\"健康上网行为准则\"></a>健康上网行为准则</h4><p>“无规矩不成方圆”，工具可以方便人们生活，也可以破坏人们的生活，所以，如何正确使用我们手中的工具，需要我们自己把握。特此呼吁“科学上网的人们”，遵守以下约定，成就健康良好的上网环境！</p>\n<ul>\n<li>拥护党的领导，不质疑、不攻击、不诋毁国家的做法；</li>\n<li>维护国家利益，不信谣、不传谣；</li>\n<li>明辨是非，相信祖国；</li>\n<li>科学上网，禁止非法交易；</li>\n</ul>\n<p>在阅读以下内容前，您需要首先阅读并认可上述<strong>行为准则</strong>；如果您不认同，还请Ctrl+F4。</p>\n<h4 id=\"客观看待“墙”\"><a href=\"#客观看待“墙”\" class=\"headerlink\" title=\"客观看待“墙”\"></a>客观看待“墙”</h4><p>为什么有些网站打不开呢？是因为国家建了一所防火墙——<strong>防火长城</strong>。</p>\n<blockquote>\n<p><strong>GFW</strong>，Great Firewall，<strong>防火长城</strong>，也称<strong>中国国家防火墙</strong>。 是对我国在其互联网边界审查系统（包括相关行政审查系统）的统称。此系统起步于1998年。国内平时所说的“被墙”即指网站内容被<strong>防火长城</strong>所屏蔽或者指服务器的通讯被封阻，“翻墙”也被引申为<a href=\"https://zh.wikipedia.org/wiki/突破网络审查\">突破网络审查</a>浏览中国大陆境外被屏蔽的网站或使用服务的行为。 其实在国外，要查看国内的某些内容，比如腾讯、爱奇艺等国内版本，正常情况下在国外是使用不了的，如果要查看也是要从国外翻回来的。</p>\n</blockquote>\n<p>虽然防火长城让我们无法使用Google、Facebook等流行网站，有时候确实显得不太方便。我刚开始对这所墙也是略有不满，但是随着近几年发生的事情，以及自己在国外的一些经历，慢慢发现GFW也不是对自己完全不利。我国正处于高速发展期间，互联网上存在着大量的内容，但很多人很难分辨这些内容的真假，在国内尚且如此，国外这些内容就更多了，西方国家动不动就批判我们的国家，打着民主自由的口号，干一些见不得人的勾当，想想就觉得可笑。我们国家有些人对这些谣言信以为真，一些谣言一旦传播开来，说严重点，就会影响国家的根基，带来社会的不稳定。这才是真正的罪过。<strong>如果你没有一个真正平稳的心态，请不要涉足国外和政治有关的网站</strong>。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7c9d84504f4bcb04b956b7.jpg\" alt=\"GFW\"></p>\n<p>技术无罪，人心叵测，在珍惜科技发展带来方便的同时，我们也需要一双明亮的大眼睛。</p>\n<h4 id=\"互联网是怎么工作的？\"><a href=\"#互联网是怎么工作的？\" class=\"headerlink\" title=\"互联网是怎么工作的？\"></a>互联网是怎么工作的？</h4><p>知其然，知其所以然。我们要知道，在浏览器里，输入<code>https://www.google.com</code>，后台到底发生了什么？正常情况下，为什么输入<code>https://www.google.com</code>，会返回错误信息，而输入<code>https://www.baidu.com</code>，会出现渲染界面。有兴趣的读者可以观察这个<a href=\"https://www.kenzhishi.com/1933.html\">视频</a>进行简单的了解。</p>\n<p>在正常情况下，浏览器从输入一个域名地址，例如<a href=\"https://ww.baidu.com\">https://www.baidu.com</a>到页面呈现，<a href=\"https://segmentfault.com/a/1190000012092552\"><strong>大概分8步</strong></a>：</p>\n<ul>\n<li>第一步：把冰箱门打开，不是，第一步先进行DNS域名解析：把域名地址解析到对应的IP地址（<strong>非常重要</strong>）；</li>\n<li>第二步： 建立TCP连接； </li>\n<li>第三步： 发送HTTP请求； </li>\n<li>第四步： 服务器处理请求； </li>\n<li>第五步： 返回响应结果； </li>\n<li>第六步： 关闭TCP连接； </li>\n<li>第七步： 浏览器解析HTML； </li>\n<li>第八步： 浏览器布局渲染； </li>\n</ul>\n<p>那么为什么有些网站打不开呢？请再看一个<a href=\"https://www.kenzhishi.com/587.html\">视频</a>。</p>\n<p><img src=\"https://source.thankjava.com/view/XDyk9qy\" alt=\"GFW\"></p>\n<p><strong>GFW</strong>的存在就像疫情期间路口的卡子，夹在用户和服务之间，每当用户获取服务时，不得不经过GFW，它会查验你的“通行证”是否满足要求，不满足就会被阻拦，多次持有不合法的通行证，就会被列入黑名单。</p>\n<p>通过查阅资料，猜想中的防火长城GFW至少有两种入侵检测手段是：</p>\n<ul>\n<li><strong>域名解析缓存服务污染</strong>（DNS污染）</li>\n<li><strong>IP地址或传输层端口封锁</strong>（IP封锁）</li>\n</ul>\n<h4 id=\"入侵检测手段\"><a href=\"#入侵检测手段\" class=\"headerlink\" title=\"入侵检测手段\"></a>入侵检测手段</h4><h5 id=\"域名解析缓存服务污染（DNS劫持）\"><a href=\"#域名解析缓存服务污染（DNS劫持）\" class=\"headerlink\" title=\"域名解析缓存服务污染（DNS劫持）\"></a><strong>域名解析缓存服务污染</strong>（DNS劫持）</h5><p>IP地址是互联网世界中的主机设备的独一无二的由数字组成的标记，是用来唯一标识互联网上计算机的逻辑地址。 要将信息发到对应的服务器上时，我们需要知道对方的“地址”，即IP地址，形如aaa.bbb.ccc.ddd。但是IP地址不容易记忆，所以使用一个可读性更强的“域名”来方便记忆，域名与IP地址是一对一或者多对一。我们向服务器发送信息时，解析域名到指定的IP地址是通过<strong>DNS域名服务器</strong>来进行的。当发现一个不和谐网站，然后就把这个网站的域名给加到GFW劫持列表中。DNS客户端会盲目地相信第一个收到的答案，所以你去查询facebook.com的话，GFW只要在正确的答案被返回之前抢答了，然后伪装成你查询的DNS服务器向你发错误的答案就可以了。 </p>\n<h5 id=\"IP地址或传输层端口封锁（IP封锁）\"><a href=\"#IP地址或传输层端口封锁（IP封锁）\" class=\"headerlink\" title=\"IP地址或传输层端口封锁（IP封锁）\"></a>IP地址或传输层端口封锁（IP封锁）</h5><p>通过将需要拦截的IP地址配置为空路由或者黑洞设备上，然后通过<a href=\"https://zh.wikipedia.org/wiki/动态路由协议\">动态路由协议</a>将相应配置路由扩散到公众互联网网络中，从将条件匹配拦截行为转为路由器的常规转发行为，从而提高拦截效率。多见于自主拥有大量IP地址段的需要审查的企业中。</p>\n<h4 id=\"常用的“名词”\"><a href=\"#常用的“名词”\" class=\"headerlink\" title=\"常用的“名词”\"></a>常用的“名词”</h4><h5 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h5><p><strong>虚拟专用网络</strong>，Virtual Private Network，简称<strong>VPN</strong>。VPN 在很多人心目中就是用来翻墙的工具，其实不然，VPN 最主要的功能，并不是用来翻墙，只是它可以达到翻墙的目的。VPN的<strong>功能</strong>是：在公用网络上建立专用网络，进行加密通讯，在企业网络和高校的网络中应用很广泛。接入 VPN其实就是接入了一个专有网络，你的网络访问都从这个出口出去，你和 VPN 之间的通信是否加密，取决于你连接 VPN 的方式或者协议。</p>\n<p><strong>VPN是为了保证通信的安全性、私密性，不是专门为“科学上网制定的技术。</strong></p>\n<h5 id=\"VPS\"><a href=\"#VPS\" class=\"headerlink\" title=\"VPS\"></a>VPS</h5><p><strong>虚拟专用服务器</strong>，Virtual private server，简称<strong>VPS</strong>。不妨想一个问题：我们平时上网浏览网页，我们访问的那些网页都是哪来的？答案很简单，从另一台电脑上下载下来的。无论是用户平时所使用的个人PC电脑，还是用于搭载网站的服务器，本质上都是电脑。但与个人PC不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。而VPS，就是不会关机的电脑。</p>\n<p>VPS虚拟专用服务器是由VPS提供商维护，租用给站长使用的“不会关机的电脑”，也是服务器的一种。VPS不是一台台独立的电脑，而是将一台巨型服务器通过虚拟化技术分割成若干台看似独立的服务器，这台巨型服务器不间断运行，被分割出来的小服务器也跟着不停的运作，站长租用其中一台小服务器，搭载上自己的站点，就可以等着用户访问了。</p>\n<p>VPS提供商有：<strong><a href=\"http://www.vultr.com/?ref=7038906\">Vultr</a>、<a href=\"https://m.do.co/c/ad240a3367a0\">Digital Ocean</a>、<a href=\"https://www.linode.com/\">Linode</a>、<a href=\"https://bwh1.net/\">搬瓦工（bandwagonhost）</a></strong></p>\n<p><strong>实验就用的是<a href=\"http://www.vultr.com/?ref=7038906\">Vultr</a>，用得人多，特征会明显，容易被GFW识别并拦截，因此故障多一点，需要经常换IP。</strong>Vultr性价比比较高，适合个人使用。</p>\n<h5 id=\"SS与SSR\"><a href=\"#SS与SSR\" class=\"headerlink\" title=\"SS与SSR\"></a>SS与SSR</h5><p><img src=\"https://pic.downk.cc/item/5e7cccbe504f4bcb04d92eac.png\" alt=\"SS与SSR\"></p>\n<p>SS，全称ShadowSocks，SSR，全称ShadowSocks-R，如上图，SS/SSR的图标酷似飞机，又俗称机场，SS/SSR的账号俗称机票。SS/SSR是一种跨域网络加速的开源方案，说白了就是一种穿透GFW的的<strong>代理工具</strong>。</p>\n<p>对SS/SSR来说穿透防火墙是第一位，抗干扰性强，而且对流量做了混淆，所有流量在通过防火墙的时候，基本上都被识别为普通流量，也就是说你翻墙了，但是GFW是检测不到你在翻墙的，SS/SSR更注重流量的混淆加密。</p>\n<p>SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。SS和SSR两者原理相同，都是基于socks5代理。客户端与服务端没有建立专有通道，客户端和实际要访问的服务端之间通过代理服务器进行通信，客户端发送请求和接受服务端返回的数据都要通过<a href=\"https://www.idcbest.com/servernews/11000420.html\">代理服务器</a>。SSR目的是为了能让流量通过防火墙。</p>\n<p>SSR和SS有一些区别，如下：</p>\n<ol>\n<li>SSR可以伪装成自定义的http开头，让监控着认为你是在访问百度，将实际的内容进行加密。SS是纯加密流量；</li>\n<li>如果SS速度用着很快，没什么问题，带宽基本都能跑满，那么就可以继续使用SS。如果SS总是跑着跑着速度就渐渐上不去，或者没有速度的时候，就可能是遇到了<a href=\"https://zh.wikipedia.org/zh-hans/%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F\">QOS</a>，需要使用SSR。当然，两者直接使用SSR也是没什么问题的；</li>\n</ol>\n<p>客户端请求服务端数据流程（<strong>SSR</strong>)：</p>\n<p>1、浏览器发送请求（基于socks5协议），通过SSR客户端将sock5协议通过协议插件和混淆插件进行转换加密，使得来自客户端的流量和基于HTTP协议的流量无差别；</p>\n<p>2、SSR服务端（代理服务器）收到请求后，通过混淆插件、协议插件将数据解密并还原协议，最后转发到目标服务器。</p>\n<p>顺便提一嘴SS和SSR代理工具的故事，大概是酱婶儿的。</p>\n<p>SS作者是clowwindy，他自己为了翻墙写了shadowsocks，简称 ss 或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了 GitHub 上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。</p>\n<p>这个悲伤的故事还没有结束，在SS作者被喝茶之后，GitHub 上出现了一个叫 breakwa11(破娃)的帐号，声称SS容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容SS，改进后的项目叫ShadowSocks-R，简称SSR，然后SS用户和SSR用户自然分成了两个派别，互撕，后来，破娃被人肉出来，无奈之下删除了SSR的代码，并且解散了所有相关群组……</p>\n<p>朋友们，好东西就自己好好用吧……愿天堂没有争吵。</p>\n<h5 id=\"V2Ray\"><a href=\"#V2Ray\" class=\"headerlink\" title=\"V2Ray\"></a>V2Ray</h5><p>V2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。简单地说，V2Ray 是一个与 ShadowSocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。</p>\n<p><strong>那么V2Ray和ShadowSocks有什么区别呢？</strong></p>\n<p>ShadowSocks 只是一个简单的代理工具，而 V2Ray 定位为一个平台，任何开发者都可以利用 V2Ray 提供的模块开发出新的代理软件。</p>\n<p>ShadowSocks 是 clowwindy 开发的自用的软件，开发的初衷只是为了让自己能够简单高效地科学上网，自己使用了很长一段时间后觉得不错才共享出来的。V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的，一开始就致力于让大家更好更快的科学上网。</p>\n<p>由于出生时的历史背景不同，导致了它们性格特点的差异。</p>\n<p>简单来说，ShadowSocks 功能单一，V2Ray 功能强大，但Shadowsocks 简单好上手，V2Ray 复杂配置多。</p>\n<p>事物的优点和缺点总是相生相随的。相对来说，V2Ray 有以下优势：</p>\n<ul>\n<li><p><strong>更完善的协议</strong>： V2Ray 使用了新的自行研发的 VMess 协议，改正了 ShadowSocks 一些已有的缺点，更难被GFW检测到；</p>\n</li>\n<li><p><strong>更强大的性能</strong>：网络性能更好，具体数据可以看 <a href=\"https://steemit.com/cn/@v2ray/3cjiux\">V2Ray 官方博客</a></p>\n</li>\n<li><p>更丰富的功能：以下是部分 V2Ray 的功能</p>\n<ul>\n<li><strong>mKCP</strong>: KCP 协议在 V2Ray 上的实现，不必另行安装 kcptun</li>\n<li><strong>动态端口</strong>：动态改变通信的端口，对抗对长时间大流量端口的限速封锁</li>\n<li><strong>路由功能</strong>：可以随意设定指定数据包的流向，去广告、反跟踪都可以</li>\n<li>传出代理：看名字可能不太好理解，其实差不多可以称之为多重代理。类似于 Tor 的代理</li>\n<li><strong>数据包伪装</strong>：类似于 Shadowsocks-rss 的混淆，另外对于 mKCP 的数据包也可伪装，伪装常见流量，令识别更困难</li>\n<li><strong>WebSocket 协议</strong>：可以 PaaS 平台搭建V2Ray，通过 WebSocket 代理。也可以通过它使用 CDN 中转，抗封锁效果更好</li>\n<li><strong>Mux</strong>：多路复用，进一步提高科学上网的并发性能</li>\n</ul>\n<p>V2Ray虽然优势明显，但配置复杂，产业链不成熟，不适合新手入门。</p>\n</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p><img src=\"https://pic.downk.cc/item/5e7c9dc9504f4bcb04b98b01.png\" alt=\"翻墙原理\"></p>\n<h4 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h4><p>在上一节[简介](# 简介)里，给大家介绍了科学上网的相关知识，这一节，介绍科学上网的一般方法。</p>\n<p>在前面提过，SS和SSR的原理都是一样的，就是 socks5 代理。socks 代理只是简单的传递数据包，而不必关心是何种协议，所以 socks 代理比其他应用层代理要快的多。socks5 代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。</p>\n<p><strong>通俗的说，现在你有一个代理服务器（VPS）在香港，比如你现在想要访问google，你的电脑发出请求，流量通过 socks5 连接发到你在香港的服务器上，然后再由你在香港的服务器去访问 google，再把访问结果传回你的电脑，这样就实现了翻墙。</strong></p>\n<h4 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h4><h5 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h5><ol>\n<li><strong>VPS服务器</strong></li>\n</ol>\n<ul>\n<li><p>免费VPS：不好意思，没有一直免费的，目前网上搜到的免费的VPS服务器，极不稳定，影响体验，适合偶尔使用，不适合长期使用；</p>\n<ul>\n<li>国外的云服务：<a href=\"https://cloud.google.com/\">谷歌云</a>、<a href=\"https://aws.amazon.com/cn/\">亚马逊云</a>、<a href=\"https://azure.microsoft.com/zh-cn/\">微软云服务Azure</a>等，这些云服务，基本上都会提供一年的免费体验期，可以挨个换着用，通过特殊的方法，有些云服务可以使用不止一次……其实国内的阿里云有<a href=\"https://link.zhihu.com/?target=https%3A//www.alibabacloud.com/%3Fspm%3D5176.2020520130.1001.d1.1dd16bc4h2cx2M\">国际版</a>，但是禁止大陆用户注册……</li>\n<li>学生优惠：包括上述的国外云服务厂商，还有<a href=\"https://m.do.co/c/ad240a3367a0\">Digital Ocean</a>，一定要记得自己的学校邮箱，可以申请到不少好东西，还可以申请学生优惠；</li>\n</ul>\n</li>\n<li><p>VPS提供商有：<strong><a href=\"http://www.vultr.com/?ref=7038906\">Vultr</a>、<a href=\"https://www.linode.com/\">Linode</a>、<a href=\"https://bwh1.net/\">搬瓦工（bandwagonhost）</a></strong>，这些都是消费服务，但是有时候优惠很大，Vultr应该是国内用户用得最多的VPS，价格厚道，支持xx宝付款，但是无奈用户太多，且大部分用户都选择在日本的机房，特征明显压力大，最近频频被封号……<a href=\"https://link.zhihu.com/?target=https%3A//www.linode.com/%3Fr%3D34ae657f093b6c1f90eb6cba7015e9bd852db128\">Linode</a>强推；</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>一台可以上网的电脑（个人PC）Windows、Mac系统都可以。</li>\n</ol>\n<h5 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h5><ol>\n<li>SSH登录终端：<a href=\"https://www.netsarang.com/zh/xshell-download/\"><strong>Xshell</strong></a>、<a href=\"http://www.hostbuf.com/t/988.html\"><strong>FinalShell</strong></a>等；</li>\n<li>Chrome浏览器</li>\n<li>谷歌账号</li>\n<li>SSR客户端</li>\n</ol>\n<h5 id=\"其它环境\"><a href=\"#其它环境\" class=\"headerlink\" title=\"其它环境\"></a>其它环境</h5><ol>\n<li>实体信用卡或者<a href=\"https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B\">虚拟信用卡</a></li>\n</ol>\n<h4 id=\"搭配方案\"><a href=\"#搭配方案\" class=\"headerlink\" title=\"搭配方案\"></a>搭配方案</h4><p>经过我的一番调研，在这个特殊时期，使用<strong>谷歌云 + BBRPlus加速 + SSR</strong>的方案，可完美科学上网，谷歌搜索WiKi百科无压力，Youtube略有压力。</p>\n<p><strong>完美支持Windows、Android、Mac。</strong></p>\n<p>下表是我的配置环境</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"center\">版本号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">系统</td>\n<td align=\"center\">Windows10 1909</td>\n</tr>\n<tr>\n<td align=\"center\">VPS服务商</td>\n<td align=\"center\">谷歌云</td>\n</tr>\n<tr>\n<td align=\"center\">浏览器</td>\n<td align=\"center\">Chrome/Edge等</td>\n</tr>\n<tr>\n<td align=\"center\">终端登录</td>\n<td align=\"center\">Xshell</td>\n</tr>\n<tr>\n<td align=\"center\">代理工具</td>\n<td align=\"center\">SSR</td>\n</tr>\n</tbody></table>\n<p><strong>VPS服务器</strong>：<strong>谷歌云</strong>，新用户注册谷歌云，可获得300美刀的赠金。</p>\n<h4 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h4><p>实验环境是Windows10，<strong>谷歌云 + BBRPlus加速 + SSR</strong>配置步骤大概分10步。</p>\n<h5 id=\"Step1：翻个小墙\"><a href=\"#Step1：翻个小墙\" class=\"headerlink\" title=\"Step1：翻个小墙\"></a>Step1：翻个小墙</h5><p>没错，第一步就是翻墙，翻个小墙，偷摸摸的出去干点合理合法的小事情，一切为了学习！因为需要一个谷歌账号，如果已经有了谷歌账号，则需要在谷歌云网站注册为新用户，所以我们需要一些方法先翻出去，搞定这些，做好铺垫，再回来利用终端进行配置。</p>\n<p>搜集了一些不太稳定，但是可以翻出去的方法。</p>\n<ol>\n<li>网站类：<a href=\"https://ac.scmor.com/，这是一个镜像网站，不稳定，但有时可以用；\">https://ac.scmor.com/，这是一个镜像网站，不稳定，但有时可以用；</a></li>\n</ol>\n<p><img src=\"https://source.thankjava.com/view/XEX0gCk\" alt=\"Google镜像网站\"></p>\n<ol start=\"2\">\n<li>chrome插件类：请移步<a href=\"https://pan.baidu.com/s/1Dz47RxD2im1QS_aOLod6uQ\">链接</a>进行下载，提取码是hd2q。里面有三款插件，推荐使用<strong>VeePN</strong>。插件的安装方法：</li>\n</ol>\n<ul>\n<li>打开Chrome浏览器：输入<a href=\"chrome://extensions/\">chrome://extensions/</a>，打开后，点击右上角的按钮，进入<strong>开发者模式</strong>；</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e7cdf1a504f4bcb04e33b74.png\" alt=\"Chrome开发者模式\"></p>\n<ul>\n<li>插件的格式为crx，将其拖入上述界面，若出现错误，则将插件后缀名.crx更改为.zip后，重新拖入；</li>\n<li>若继续出现错误，将.zip文件进行解压，点击<code>加载已解压的扩展程序</code>，选中刚刚解压好的文件夹，点击确定；</li>\n<li>Edge浏览器用户，进入<a href=\"edge://extensions/\">edge://extensions/</a>，点击<code>加载解压缩的扩展</code>，选择上一步解压好的文件夹，确定后进行尝试；</li>\n</ul>\n<p>如果上述方法都不可用，请联系管理员。</p>\n<p>后续步骤都建立在<strong>Step1</strong>之上，即先翻个小墙。</p>\n<h5 id=\"Step2：注册谷歌账号\"><a href=\"#Step2：注册谷歌账号\" class=\"headerlink\" title=\"Step2：注册谷歌账号\"></a>Step2：注册谷歌账号</h5><p>这一步无需多言，在翻墙进来之后，打开<a href=\"https://support.google.com/accounts/answer/27441?hl=zh-Hans\">Google账户注册</a>页面，一步一步进行操作，手机号貌似是可选项，可以不填；整个过程，这一步应该是最好过的一步了。</p>\n<h5 id=\"Step3：注册谷歌云服务\"><a href=\"#Step3：注册谷歌云服务\" class=\"headerlink\" title=\"Step3：注册谷歌云服务\"></a>Step3：注册谷歌云服务</h5><p><strong>新用户注册谷歌云，可获得300美刀的赠金。</strong>这些小钱钱是打到你的谷歌云账户里的，不能提现，只能在使用谷歌云服务时，进行抵押。</p>\n<p>在注册谷歌云，非常非常关键的一步是，需要一张<strong>信用卡</strong>。如果你的信用卡是实体卡，也就是在国内申请的并没有问题，可以不看这段；但是大部分学生是没有信用卡的，如何薅羊毛呢？利用<a href=\"https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B\">Payoneer</a>，全中文界面，如果你相信这家公司，就请注册，审核比较快，审核通过后，可以进行谷歌云账号的注册，Payoneer的注册教程请<a href=\"https://www.jianshu.com/p/5d918a6aec1c\">移步</a>。</p>\n<p>拿到信用卡账号后，打开<a href=\"https://cloud.google.com/\">谷歌云官网</a>进行注册，整个过程不难，需要注意的是：</p>\n<ul>\n<li>在<strong>国家/地区</strong>的选择列表里，并没有中国，这并不奇怪……隨便选择一个国家即可；</li>\n<li>还有在输入你的<strong>地址</strong>时，有一个简单的办法，大家可以在<a href=\"https://www.google.com/maps/?hl=zh-CN\">谷歌地图</a>搜索你所选择国家的大学地址就好，比如搜索斯坦福大学，地址：450 Serra Mall, Stanford, CA 94305。另外，不需要1美元进行验证。</li>\n</ul>\n<p>如果看到可选的项目，可以不填。</p>\n<p>至此，你已经注册好了谷歌云，并进入了控制台界面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7ce99a504f4bcb04e9946d.png\" alt=\"Google结算界面\"></p>\n<p><img src=\"https://pic.downk.cc/item/5e7ceb8f504f4bcb04eac66d.png\" alt=\"Google结算界面\"></p>\n<p>如上图，进入到<strong>结算界面</strong>后，我们在右侧可以看到赠送到你账户的300刀以及免费使用的天数365天。因为我之前注册过并使用了一些服务，所以服务的费用从300刀里面扣了一部分，需要注意的是，这部分赠金使用完后，<strong>不自动</strong>从绑定的信用卡里进行扣费。</p>\n<h5 id=\"Step4：创建VPS服务器\"><a href=\"#Step4：创建VPS服务器\" class=\"headerlink\" title=\"Step4：创建VPS服务器\"></a>Step4：创建VPS服务器</h5><p>在这一步，创建VPS服务器，在谷歌云里，叫虚拟机实例（VM实例）。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cecdf504f4bcb04eb79c5.png\" alt=\"虚拟机实例创建\"></p>\n<p>进入<strong>虚拟机实例</strong>创建界面，点击<strong>新建</strong>或<strong>创建实例</strong>，进行VPS配置。</p>\n<ul>\n<li><strong>名称</strong>：随便取，比如 scisurfing，只能是小写英文字母；</li>\n<li><strong>标签</strong>：省略不填；</li>\n<li><strong>区域</strong>：如果在国内，尽可能选择离我们近一点的城市，比如中国台湾、中国香港、东京、大坂、首尔、孟买、新加坡等，要根据自己的为位置和网速进行选择，配置完成后可以试一下哪个速度最快；</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e7cee56504f4bcb04ec6109.png\" alt=\"地区选择\"></p>\n<ul>\n<li><p><strong>地区</strong>：同上，随便选一个即可，到时候可以挨个尝试；</p>\n</li>\n<li><p><strong>机器配置</strong>：</p>\n<ul>\n<li><strong>系列</strong>：N1即可；</li>\n<li><strong>机器类型</strong>：列表里有各种配置，配置越高，收费越贵，根据实际情况来选择，这里我选择<code>n1-standard-1（1个vCPU，3.75GB内存）</code>；</li>\n</ul>\n</li>\n<li><p><strong>启动磁盘</strong>：根据自己的习惯来选择，这里我选择<strong>CentOS系统</strong>，版本号选择<strong>7</strong>。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e7cf1d5504f4bcb04ee2435.png\" alt=\"启动磁盘\"></p>\n<ul>\n<li>防火墙：将<code>允许HTTP流量</code>和<code>允许HTTPS流量</code>全部勾选上。</li>\n</ul>\n<p>我的整体配置如下：</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf3c5504f4bcb04ef0e30.png\" alt=\"\"></p>\n<p>配置完成后，右侧会显示每个月的具体花费，根据消费金额，可适当调整。紧接着点击<code>创建</code>按钮，稍等片刻，控制台再完成配置之后，会生成一个外部IP地址，如下图所示：</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf4d5504f4bcb04ef8281.png\" alt=\"\"></p>\n<p>为了测试这个IP可以在国内使用，需要在<a href=\"http://ping.chinaz.com/\">站长之家</a>对这个IP（aaa.bbb.ccc.ddd）进行检测，ping得通，则认为这个IP还没有被墙，可以正常使用，进行下一步，如下图，一片“绿”就对了。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf5cd504f4bcb04eff81a.png\" alt=\"Ping检测\"></p>\n<p>如果这个IP在国内ping不通，则显示一片红，需要在控制台删除这个实例，再重新创建，直到一片绿油油的景象。</p>\n<h5 id=\"Step5：修改谷歌云控制权限\"><a href=\"#Step5：修改谷歌云控制权限\" class=\"headerlink\" title=\"Step5：修改谷歌云控制权限\"></a>Step5：修改谷歌云控制权限</h5><p>这一步的目的是为了我们可以在本地计算机利用ssh管理这个VPS服务器，而不是每次都要登录到谷歌云控制台里面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png\" alt=\"VM-SSH登录\"></p>\n<p>点击上图里的<code>SSH</code>，加载一段时间会弹出一个终端界面，如下图所示，其服务器系统就是在创建实例的时候选择的系统，比如我选择是CentOS 7版本</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf7f4504f4bcb04f0e614.png\" alt=\"谷歌云终端界面\"></p>\n<p>首先要获取服务器root权限，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n\n<p>获取root权限后，继续输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>在英文输入法状态下，按下键盘上的<code>i</code>键，此时左下角的标记为<strong>INSERT</strong>状态，移动键盘上的上下左右四个键，找到第38行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin no</span><br></pre></td></tr></table></figure>\n\n<p>将<code>no</code>改为<code>yes</code>；</p>\n<p>将第63行<code># PasswordAuthentication yes</code>前面的<code>#</code>去掉。</p>\n<p>按下键盘的<code>esc</code>键推出编辑模式，按下shift+冒号，再输入<code>wq</code>保存并退出。</p>\n<p>然后再终端重启sshd服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>\n\n<p>修改密码，在终端继续输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p>按照提示更改登录密码，温馨提示，尽可能不要用小键盘输入数字，密码请使用数组加字母的组合形式。</p>\n<h5 id=\"Step6：登录VPS服务器\"><a href=\"#Step6：登录VPS服务器\" class=\"headerlink\" title=\"Step6：登录VPS服务器\"></a>Step6：登录VPS服务器</h5><p>在<strong>个人电脑</strong>上，打开xshell或者其它终端，具体使用方法请看我的<a href=\"https://github.com/kangzhiheng/GitLocalDoc#ssh%E7%99%BB%E5%BD%95\">另一篇文章（Lab532服务器环境(CentOS 7.6)须知）</a>，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@IPAddr -p 22</span><br></pre></td></tr></table></figure>\n\n<p>读者们仅仅需要将<code>IPAddr</code>替换成自己的VPS IP地址就好。第一次登录可能会出现以下界面，输入<code>yes</code>即可。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cfd04504f4bcb04f2d5ae.png\" alt=\"SSH登录\"></p>\n<h5 id=\"Step7：安装BBR加速内核\"><a href=\"#Step7：安装BBR加速内核\" class=\"headerlink\" title=\"Step7：安装BBR加速内核\"></a>Step7：安装BBR加速内核</h5><p><a href=\"https://github.com/google/bbr\">BBR</a> 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。从 4.9 开始，Linux 内核已经用上了该算法。部署最新版内核，开启TCP BBR 加速的 VPS，<strong>网速可以提升几个数量级</strong>。</p>\n<p>安装<code>wget</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<p>安装BBR加速，允许下列代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cx9208&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>\n\n<p>出现的界面如下：</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d03ad504f4bcb04f4ec70.png\" alt=\"BBR加速\"></p>\n<p>输入数字<code>2</code>，等待安装<code>BBRplus版内核</code></p>\n<p>安装完成后，可能出现以下界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0575504f4bcb04f570f9.png\" alt=\"安装BBR\"></p>\n<p>输入<code>Y</code>，如果在之间出现了这样的界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d05b9504f4bcb04f5843b.png\" alt=\"BBR\"></p>\n<p>选择<code>No</code>即可。</p>\n<p>此时本地客户端连接断开，谷歌云正在重启VPS服务器，回到<strong>谷歌云控制台</strong>里的虚拟机实例页面，点击<code>SSH</code></p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png\" alt=\"VM-SSH登录\"></p>\n<p>加载网页上的终端后，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n\n<p>获取root权限，运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>\n\n<p>出现以下界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0705504f4bcb04f5ef36.png\" alt=\"安装BBR加速\"></p>\n<p>现在安装BBR加速，选择<code>7</code>。</p>\n<p>很快，出现界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d075c504f4bcb04f60b46.png\" alt=\"BBR安装完成\"></p>\n<p>出现了这个界面，表示BBR加速已经安装完成并启动成功了。</p>\n<h5 id=\"Step8：在VPS上安装SSR服务\"><a href=\"#Step8：在VPS上安装SSR服务\" class=\"headerlink\" title=\"Step8：在VPS上安装SSR服务\"></a>Step8：在VPS上安装SSR服务</h5><p>继续在上一步的网页版的终端里运行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e7d080b504f4bcb04f645fa.png\" alt=\"服务器端SSR\"></p>\n<p>输入<code>1</code>，进行SSR安装</p>\n<p>安装过程中需要对端口、密码、协议插件、混淆插件等进行配置，全部默认即可（一直按Enter键），直至出现</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0973504f4bcb04f6b0fb.png\" alt=\"SSR安装\"></p>\n<p>输入<code>y</code>，安装服务端SSR所需要的依赖服务，这可能需要个几分钟时间，然后可能会出现一个啥都不显示的界面，恭喜你，安装完成了，这时候需要用鼠标进行页面向上的滚动，就会看到</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png\" alt=\"BBR安装完成\"></p>\n<p>离成功越来越近了，继续操作。<strong>将上述SSR配置信息保存起来。</strong></p>\n<h5 id=\"Step9：关闭谷歌云防火墙\"><a href=\"#Step9：关闭谷歌云防火墙\" class=\"headerlink\" title=\"Step9：关闭谷歌云防火墙\"></a>Step9：关闭谷歌云防火墙</h5><p><img src=\"https://pic.downk.cc/item/5e7d0b3d504f4bcb04f86edf.png\" alt=\"VPS防火墙\"></p>\n<p>如上图，打开<code>VPC网络</code>里的<code>防火墙规则</code></p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0c11504f4bcb04f8beff.png\" alt=\"VPS防火墙修改\"></p>\n<p>因为在之前的设置中，使用了不同的端口和协议，所以需要修改防火墙规则，上图里用红色框框圈出来的两个过滤表，都需要进行相同的操作，选择第一个为例进行说明。</p>\n<p>点击第一个，进入下一个界面，如下图所示，点击修改，将页面滑到最下面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0cb4504f4bcb04f8f64b.png\" alt=\"\"></p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0d23504f4bcb04f91c4b.png\" alt=\"\"></p>\n<p>将<code>协议和端口</code>改为<strong>全部允许</strong>，<code>default-allow-https</code>也是一样的操作。</p>\n<h5 id=\"Step10：连接SSR\"><a href=\"#Step10：连接SSR\" class=\"headerlink\" title=\"Step10：连接SSR\"></a>Step10：连接SSR</h5><p>下载SSR客户端，链接为：<a href=\"https://github.com/shadowsocksrr/shadowsocksr-csharp/releases\">Windows</a>、<a href=\"https://github.com/shadowsocksrr/shadowsocksr-android/releases\">Android</a>、<a href=\"https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/\">Mac</a></p>\n<p>以Win10系统为例，解压文件夹后，运行<code>ShadowSOcksR-dotnet4.0.exe</code>。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0ebe504f4bcb04f9a5c9.png\" alt=\"SSR客户端\"></p>\n<p>SSR正常运行时，桌面右下角出现一个粉色的飞机小图标。</p>\n<p>返回到网页终端，或者打开保存好的SSR配置信息。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png\" alt=\"BBR安装完成\"></p>\n<p>复制上图中的<code>SSR链接</code>。紧接着，右键SSR客户端</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d1033504f4bcb04fa30ed.png\" alt=\"\"></p>\n<p>选择<code>剪切板批量导入ssr://链接</code>，出现界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d10a5504f4bcb04fa56dd.png\" alt=\"\"></p>\n<p>可以进行备注和群组名填写，然后选择确定，配置完成。</p>\n<p>右键SSR客户端，在</p>\n<ul>\n<li><code>系统代理模式</code>里，选择<code>PAC模式</code>；</li>\n<li><code>服务器</code>里，选择刚刚配置好的服务器IP；</li>\n</ul>\n<p>一切准备就绪，测试能否<a href=\"https://google.com.hk\">翻墙</a>，若不能，删除该VPS服务器，重新配置即可。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>一般来说，刚刚配置的VPS，速度都不错，在<a href=\"https://www.youtube.com/\">油管</a>看4K基本无压力，速度可达24000Kbps。但是随着时间的推移，就会发现速度逐渐变慢，这个时候看超清视频，可能都有点吃力，但是搜索看新闻影响不大。如果速度很慢，利用<a href=\"http://ping.chinaz.com/\">站长工具</a>进行IP检测，实在不能忍受的情况下，在谷歌云里删除该VPS服务器，重新配置即可。</p>\n<p>另外，这种方法，也可以在手机（安卓）上进行配置，但是运营商会限速，只是用来搜索，基本没啥大问题。</p>\n<p>时间仓促，水平有限，有错误，请随时联系我：<a href=\"mailto:&#x6b;&#97;&#x6e;&#x67;&#122;&#x68;&#105;&#104;&#101;&#110;&#x67;&#64;&#108;&#x69;&#x76;&#101;&#x2e;&#99;&#110;\">&#x6b;&#97;&#x6e;&#x67;&#122;&#x68;&#105;&#104;&#101;&#110;&#x67;&#64;&#108;&#x69;&#x76;&#101;&#x2e;&#99;&#110;</a>。</p>\n<p>希望大家可以正确利用技术。</p>\n<p>希望这个方法带给大家帮助。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>[1] <a href=\"https://www.youtube.com/watch?v=iidqJ7p7ln4\">互联网是如何工作的？VPN、SSR、V2ray翻墙是什么原理？</a></p>\n<p>[2] <a href=\"http://www.ggfwzs.com/\">http://www.ggfwzs.com/</a> </p>\n<p>[3] <a href=\"https://medium.com/@thomas_summon/浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别-b0198f92db1b\">浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别</a></p>\n<p>[4] <a href=\"https://github.com/frank-lam/vps-ss#手把手教你搭建搬瓦工-ss-代理\">手把手教你搭建搬瓦工-ss-代理</a></p>\n<p>[5] <a href=\"https://www.idcbest.com/idcnews/11003957.html\">SS和SSR的区别</a></p>\n<p>[6] <a href=\"https://www.youtube.com/watch?v=RxbGtkRVUWQ&t=291s\">免费翻墙，谷歌云+SSR</a></p>\n<p>[7] <a href=\"https://toutyrater.github.io/\">V2Ray</a></p>\n","site":{"data":{}},"excerpt":"<p>这篇文章分为两大部分，<a href=\"#简介\">简介</a>和<a href=\"#方法\">方法</a>，即我们在国内“科学上网”的背景，以及“科学上网”的基本方法。想要直接获取方法的朋友请进<a href=\"#方法\">传送门</a>。</p>","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#简介\">简介</a><ul>\n<li><a href=\"#背景\">背景</a></li>\n<li><a href=\"#健康上网行为准则\">健康上网行为准则</a></li>\n<li><a href=\"#客观看待\"墙\"\">客观看待“墙”</a></li>\n<li><a href=\"#互联网是怎么工作的？\">互联网是怎么工作的？</a></li>\n<li><a href=\"#入侵检测手段\">入侵检测手段</a><ul>\n<li><a href=\"#**域名解析缓存服务污染**（DNS劫持）\">域名解析缓存服务污染（DNS劫持）</a></li>\n<li><a href=\"#IP地址或传输层端口封锁（IP封锁）\">IP地址或传输层端口封锁（IP封锁）</a></li>\n</ul>\n</li>\n<li><a href=\"#常用的\"名词\"\">常用的“名词”</a><ul>\n<li><a href=\"#VPN\">VPN</a></li>\n<li><a href=\"#VPS\">VPS</a></li>\n<li><a href=\"#SS与SSR\">SS与SSR</a></li>\n<li><a href=\"#V2Ray\">V2ray</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#方法\">方法</a><ul>\n<li><a href=\"#基本原理\">基本原理</a></li>\n<li><a href=\"#配置环境\">配置环境</a><ul>\n<li><a href=\"#硬件环境\">硬件环境</a></li>\n<li><a href=\"#软件环境\">软件环境</a></li>\n<li><a href=\"#其它环境\">其它环境</a></li>\n</ul>\n</li>\n<li><a href=\"#搭配方案\">搭配方案</a></li>\n<li><a href=\"#配置步骤\">配置步骤</a><ul>\n<li><a href=\"#Step1：翻个小墙\">Step1 - 翻个小墙</a></li>\n<li><a href=\"#Step2：注册谷歌账号\">Step2 - 注册谷歌账号</a></li>\n<li><a href=\"#Step3：注册谷歌云服务\">Step3 - 注册谷歌云服务</a></li>\n<li><a href=\"#Step4：创建VPS服务器\">Step4 - 创建虚拟机实例</a></li>\n<li><a href=\"#Step5：修改谷歌云控制权限\">Step5 - 修改谷歌云控制权限</a></li>\n<li><a href=\"#step6：登录VPS服务器\">step6 - 登录VPS服务器</a></li>\n<li><a href=\"#step7：安装BBR加速内核\">step7 - 安装BBR加速内核</a></li>\n<li><a href=\"#Step8：在VPS上安装SSR服务\">Step8 - 在VPS上安装SSR服务</a></li>\n<li><a href=\"#Step9：关闭谷歌云防火墙\">Step9 - 关闭谷歌云防火墙</a></li>\n<li><a href=\"#Step10：连接SSR\">Step10 - 连接SSR</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#结语\">结语</a></li>\n<li><a href=\"#参考\">参考</a></li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>国内广大研究群体，使用<a href=\"https://www.google.com\">Google</a>搜索和<a href=\"https://www.baidu.com\">百度</a>搜索，都有不同的体验，二者各有利弊，但是因为工作和学习的需要，需要使用境外的一些网站，比如<a href=\"https://www.google.com\">Google</a>。今天不谈政治，只谈技术。在正常情况下，国内是无法直接访问外网的，包括<strong>Google全家桶</strong>（除了谷歌翻译）、<strong>Facebook</strong>、<strong>Twitter</strong>、<strong>Reddit</strong>、<strong>Youtube</strong>（Google旗下）、<strong>Netflix</strong>、<strong>Ins</strong>等。为了方便研究和学习，在这篇文章，介绍一种健康良好的“科学上网方法”，其实不止在国内需要“科学上网”，世界上需要国家亦是如此。如果您利用下述方法可以“科学上网”，还请遵守以下<strong>行为准则</strong>。</p>\n<h4 id=\"健康上网行为准则\"><a href=\"#健康上网行为准则\" class=\"headerlink\" title=\"健康上网行为准则\"></a>健康上网行为准则</h4><p>“无规矩不成方圆”，工具可以方便人们生活，也可以破坏人们的生活，所以，如何正确使用我们手中的工具，需要我们自己把握。特此呼吁“科学上网的人们”，遵守以下约定，成就健康良好的上网环境！</p>\n<ul>\n<li>拥护党的领导，不质疑、不攻击、不诋毁国家的做法；</li>\n<li>维护国家利益，不信谣、不传谣；</li>\n<li>明辨是非，相信祖国；</li>\n<li>科学上网，禁止非法交易；</li>\n</ul>\n<p>在阅读以下内容前，您需要首先阅读并认可上述<strong>行为准则</strong>；如果您不认同，还请Ctrl+F4。</p>\n<h4 id=\"客观看待“墙”\"><a href=\"#客观看待“墙”\" class=\"headerlink\" title=\"客观看待“墙”\"></a>客观看待“墙”</h4><p>为什么有些网站打不开呢？是因为国家建了一所防火墙——<strong>防火长城</strong>。</p>\n<blockquote>\n<p><strong>GFW</strong>，Great Firewall，<strong>防火长城</strong>，也称<strong>中国国家防火墙</strong>。 是对我国在其互联网边界审查系统（包括相关行政审查系统）的统称。此系统起步于1998年。国内平时所说的“被墙”即指网站内容被<strong>防火长城</strong>所屏蔽或者指服务器的通讯被封阻，“翻墙”也被引申为<a href=\"https://zh.wikipedia.org/wiki/突破网络审查\">突破网络审查</a>浏览中国大陆境外被屏蔽的网站或使用服务的行为。 其实在国外，要查看国内的某些内容，比如腾讯、爱奇艺等国内版本，正常情况下在国外是使用不了的，如果要查看也是要从国外翻回来的。</p>\n</blockquote>\n<p>虽然防火长城让我们无法使用Google、Facebook等流行网站，有时候确实显得不太方便。我刚开始对这所墙也是略有不满，但是随着近几年发生的事情，以及自己在国外的一些经历，慢慢发现GFW也不是对自己完全不利。我国正处于高速发展期间，互联网上存在着大量的内容，但很多人很难分辨这些内容的真假，在国内尚且如此，国外这些内容就更多了，西方国家动不动就批判我们的国家，打着民主自由的口号，干一些见不得人的勾当，想想就觉得可笑。我们国家有些人对这些谣言信以为真，一些谣言一旦传播开来，说严重点，就会影响国家的根基，带来社会的不稳定。这才是真正的罪过。<strong>如果你没有一个真正平稳的心态，请不要涉足国外和政治有关的网站</strong>。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7c9d84504f4bcb04b956b7.jpg\" alt=\"GFW\"></p>\n<p>技术无罪，人心叵测，在珍惜科技发展带来方便的同时，我们也需要一双明亮的大眼睛。</p>\n<h4 id=\"互联网是怎么工作的？\"><a href=\"#互联网是怎么工作的？\" class=\"headerlink\" title=\"互联网是怎么工作的？\"></a>互联网是怎么工作的？</h4><p>知其然，知其所以然。我们要知道，在浏览器里，输入<code>https://www.google.com</code>，后台到底发生了什么？正常情况下，为什么输入<code>https://www.google.com</code>，会返回错误信息，而输入<code>https://www.baidu.com</code>，会出现渲染界面。有兴趣的读者可以观察这个<a href=\"https://www.kenzhishi.com/1933.html\">视频</a>进行简单的了解。</p>\n<p>在正常情况下，浏览器从输入一个域名地址，例如<a href=\"https://ww.baidu.com\">https://www.baidu.com</a>到页面呈现，<a href=\"https://segmentfault.com/a/1190000012092552\"><strong>大概分8步</strong></a>：</p>\n<ul>\n<li>第一步：把冰箱门打开，不是，第一步先进行DNS域名解析：把域名地址解析到对应的IP地址（<strong>非常重要</strong>）；</li>\n<li>第二步： 建立TCP连接； </li>\n<li>第三步： 发送HTTP请求； </li>\n<li>第四步： 服务器处理请求； </li>\n<li>第五步： 返回响应结果； </li>\n<li>第六步： 关闭TCP连接； </li>\n<li>第七步： 浏览器解析HTML； </li>\n<li>第八步： 浏览器布局渲染； </li>\n</ul>\n<p>那么为什么有些网站打不开呢？请再看一个<a href=\"https://www.kenzhishi.com/587.html\">视频</a>。</p>\n<p><img src=\"https://source.thankjava.com/view/XDyk9qy\" alt=\"GFW\"></p>\n<p><strong>GFW</strong>的存在就像疫情期间路口的卡子，夹在用户和服务之间，每当用户获取服务时，不得不经过GFW，它会查验你的“通行证”是否满足要求，不满足就会被阻拦，多次持有不合法的通行证，就会被列入黑名单。</p>\n<p>通过查阅资料，猜想中的防火长城GFW至少有两种入侵检测手段是：</p>\n<ul>\n<li><strong>域名解析缓存服务污染</strong>（DNS污染）</li>\n<li><strong>IP地址或传输层端口封锁</strong>（IP封锁）</li>\n</ul>\n<h4 id=\"入侵检测手段\"><a href=\"#入侵检测手段\" class=\"headerlink\" title=\"入侵检测手段\"></a>入侵检测手段</h4><h5 id=\"域名解析缓存服务污染（DNS劫持）\"><a href=\"#域名解析缓存服务污染（DNS劫持）\" class=\"headerlink\" title=\"域名解析缓存服务污染（DNS劫持）\"></a><strong>域名解析缓存服务污染</strong>（DNS劫持）</h5><p>IP地址是互联网世界中的主机设备的独一无二的由数字组成的标记，是用来唯一标识互联网上计算机的逻辑地址。 要将信息发到对应的服务器上时，我们需要知道对方的“地址”，即IP地址，形如aaa.bbb.ccc.ddd。但是IP地址不容易记忆，所以使用一个可读性更强的“域名”来方便记忆，域名与IP地址是一对一或者多对一。我们向服务器发送信息时，解析域名到指定的IP地址是通过<strong>DNS域名服务器</strong>来进行的。当发现一个不和谐网站，然后就把这个网站的域名给加到GFW劫持列表中。DNS客户端会盲目地相信第一个收到的答案，所以你去查询facebook.com的话，GFW只要在正确的答案被返回之前抢答了，然后伪装成你查询的DNS服务器向你发错误的答案就可以了。 </p>\n<h5 id=\"IP地址或传输层端口封锁（IP封锁）\"><a href=\"#IP地址或传输层端口封锁（IP封锁）\" class=\"headerlink\" title=\"IP地址或传输层端口封锁（IP封锁）\"></a>IP地址或传输层端口封锁（IP封锁）</h5><p>通过将需要拦截的IP地址配置为空路由或者黑洞设备上，然后通过<a href=\"https://zh.wikipedia.org/wiki/动态路由协议\">动态路由协议</a>将相应配置路由扩散到公众互联网网络中，从将条件匹配拦截行为转为路由器的常规转发行为，从而提高拦截效率。多见于自主拥有大量IP地址段的需要审查的企业中。</p>\n<h4 id=\"常用的“名词”\"><a href=\"#常用的“名词”\" class=\"headerlink\" title=\"常用的“名词”\"></a>常用的“名词”</h4><h5 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h5><p><strong>虚拟专用网络</strong>，Virtual Private Network，简称<strong>VPN</strong>。VPN 在很多人心目中就是用来翻墙的工具，其实不然，VPN 最主要的功能，并不是用来翻墙，只是它可以达到翻墙的目的。VPN的<strong>功能</strong>是：在公用网络上建立专用网络，进行加密通讯，在企业网络和高校的网络中应用很广泛。接入 VPN其实就是接入了一个专有网络，你的网络访问都从这个出口出去，你和 VPN 之间的通信是否加密，取决于你连接 VPN 的方式或者协议。</p>\n<p><strong>VPN是为了保证通信的安全性、私密性，不是专门为“科学上网制定的技术。</strong></p>\n<h5 id=\"VPS\"><a href=\"#VPS\" class=\"headerlink\" title=\"VPS\"></a>VPS</h5><p><strong>虚拟专用服务器</strong>，Virtual private server，简称<strong>VPS</strong>。不妨想一个问题：我们平时上网浏览网页，我们访问的那些网页都是哪来的？答案很简单，从另一台电脑上下载下来的。无论是用户平时所使用的个人PC电脑，还是用于搭载网站的服务器，本质上都是电脑。但与个人PC不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。而VPS，就是不会关机的电脑。</p>\n<p>VPS虚拟专用服务器是由VPS提供商维护，租用给站长使用的“不会关机的电脑”，也是服务器的一种。VPS不是一台台独立的电脑，而是将一台巨型服务器通过虚拟化技术分割成若干台看似独立的服务器，这台巨型服务器不间断运行，被分割出来的小服务器也跟着不停的运作，站长租用其中一台小服务器，搭载上自己的站点，就可以等着用户访问了。</p>\n<p>VPS提供商有：<strong><a href=\"http://www.vultr.com/?ref=7038906\">Vultr</a>、<a href=\"https://m.do.co/c/ad240a3367a0\">Digital Ocean</a>、<a href=\"https://www.linode.com/\">Linode</a>、<a href=\"https://bwh1.net/\">搬瓦工（bandwagonhost）</a></strong></p>\n<p><strong>实验就用的是<a href=\"http://www.vultr.com/?ref=7038906\">Vultr</a>，用得人多，特征会明显，容易被GFW识别并拦截，因此故障多一点，需要经常换IP。</strong>Vultr性价比比较高，适合个人使用。</p>\n<h5 id=\"SS与SSR\"><a href=\"#SS与SSR\" class=\"headerlink\" title=\"SS与SSR\"></a>SS与SSR</h5><p><img src=\"https://pic.downk.cc/item/5e7cccbe504f4bcb04d92eac.png\" alt=\"SS与SSR\"></p>\n<p>SS，全称ShadowSocks，SSR，全称ShadowSocks-R，如上图，SS/SSR的图标酷似飞机，又俗称机场，SS/SSR的账号俗称机票。SS/SSR是一种跨域网络加速的开源方案，说白了就是一种穿透GFW的的<strong>代理工具</strong>。</p>\n<p>对SS/SSR来说穿透防火墙是第一位，抗干扰性强，而且对流量做了混淆，所有流量在通过防火墙的时候，基本上都被识别为普通流量，也就是说你翻墙了，但是GFW是检测不到你在翻墙的，SS/SSR更注重流量的混淆加密。</p>\n<p>SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。SS和SSR两者原理相同，都是基于socks5代理。客户端与服务端没有建立专有通道，客户端和实际要访问的服务端之间通过代理服务器进行通信，客户端发送请求和接受服务端返回的数据都要通过<a href=\"https://www.idcbest.com/servernews/11000420.html\">代理服务器</a>。SSR目的是为了能让流量通过防火墙。</p>\n<p>SSR和SS有一些区别，如下：</p>\n<ol>\n<li>SSR可以伪装成自定义的http开头，让监控着认为你是在访问百度，将实际的内容进行加密。SS是纯加密流量；</li>\n<li>如果SS速度用着很快，没什么问题，带宽基本都能跑满，那么就可以继续使用SS。如果SS总是跑着跑着速度就渐渐上不去，或者没有速度的时候，就可能是遇到了<a href=\"https://zh.wikipedia.org/zh-hans/%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F\">QOS</a>，需要使用SSR。当然，两者直接使用SSR也是没什么问题的；</li>\n</ol>\n<p>客户端请求服务端数据流程（<strong>SSR</strong>)：</p>\n<p>1、浏览器发送请求（基于socks5协议），通过SSR客户端将sock5协议通过协议插件和混淆插件进行转换加密，使得来自客户端的流量和基于HTTP协议的流量无差别；</p>\n<p>2、SSR服务端（代理服务器）收到请求后，通过混淆插件、协议插件将数据解密并还原协议，最后转发到目标服务器。</p>\n<p>顺便提一嘴SS和SSR代理工具的故事，大概是酱婶儿的。</p>\n<p>SS作者是clowwindy，他自己为了翻墙写了shadowsocks，简称 ss 或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了 GitHub 上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。</p>\n<p>这个悲伤的故事还没有结束，在SS作者被喝茶之后，GitHub 上出现了一个叫 breakwa11(破娃)的帐号，声称SS容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容SS，改进后的项目叫ShadowSocks-R，简称SSR，然后SS用户和SSR用户自然分成了两个派别，互撕，后来，破娃被人肉出来，无奈之下删除了SSR的代码，并且解散了所有相关群组……</p>\n<p>朋友们，好东西就自己好好用吧……愿天堂没有争吵。</p>\n<h5 id=\"V2Ray\"><a href=\"#V2Ray\" class=\"headerlink\" title=\"V2Ray\"></a>V2Ray</h5><p>V2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。简单地说，V2Ray 是一个与 ShadowSocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。</p>\n<p><strong>那么V2Ray和ShadowSocks有什么区别呢？</strong></p>\n<p>ShadowSocks 只是一个简单的代理工具，而 V2Ray 定位为一个平台，任何开发者都可以利用 V2Ray 提供的模块开发出新的代理软件。</p>\n<p>ShadowSocks 是 clowwindy 开发的自用的软件，开发的初衷只是为了让自己能够简单高效地科学上网，自己使用了很长一段时间后觉得不错才共享出来的。V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的，一开始就致力于让大家更好更快的科学上网。</p>\n<p>由于出生时的历史背景不同，导致了它们性格特点的差异。</p>\n<p>简单来说，ShadowSocks 功能单一，V2Ray 功能强大，但Shadowsocks 简单好上手，V2Ray 复杂配置多。</p>\n<p>事物的优点和缺点总是相生相随的。相对来说，V2Ray 有以下优势：</p>\n<ul>\n<li><p><strong>更完善的协议</strong>： V2Ray 使用了新的自行研发的 VMess 协议，改正了 ShadowSocks 一些已有的缺点，更难被GFW检测到；</p>\n</li>\n<li><p><strong>更强大的性能</strong>：网络性能更好，具体数据可以看 <a href=\"https://steemit.com/cn/@v2ray/3cjiux\">V2Ray 官方博客</a></p>\n</li>\n<li><p>更丰富的功能：以下是部分 V2Ray 的功能</p>\n<ul>\n<li><strong>mKCP</strong>: KCP 协议在 V2Ray 上的实现，不必另行安装 kcptun</li>\n<li><strong>动态端口</strong>：动态改变通信的端口，对抗对长时间大流量端口的限速封锁</li>\n<li><strong>路由功能</strong>：可以随意设定指定数据包的流向，去广告、反跟踪都可以</li>\n<li>传出代理：看名字可能不太好理解，其实差不多可以称之为多重代理。类似于 Tor 的代理</li>\n<li><strong>数据包伪装</strong>：类似于 Shadowsocks-rss 的混淆，另外对于 mKCP 的数据包也可伪装，伪装常见流量，令识别更困难</li>\n<li><strong>WebSocket 协议</strong>：可以 PaaS 平台搭建V2Ray，通过 WebSocket 代理。也可以通过它使用 CDN 中转，抗封锁效果更好</li>\n<li><strong>Mux</strong>：多路复用，进一步提高科学上网的并发性能</li>\n</ul>\n<p>V2Ray虽然优势明显，但配置复杂，产业链不成熟，不适合新手入门。</p>\n</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p><img src=\"https://pic.downk.cc/item/5e7c9dc9504f4bcb04b98b01.png\" alt=\"翻墙原理\"></p>\n<h4 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h4><p>在上一节[简介](# 简介)里，给大家介绍了科学上网的相关知识，这一节，介绍科学上网的一般方法。</p>\n<p>在前面提过，SS和SSR的原理都是一样的，就是 socks5 代理。socks 代理只是简单的传递数据包，而不必关心是何种协议，所以 socks 代理比其他应用层代理要快的多。socks5 代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。</p>\n<p><strong>通俗的说，现在你有一个代理服务器（VPS）在香港，比如你现在想要访问google，你的电脑发出请求，流量通过 socks5 连接发到你在香港的服务器上，然后再由你在香港的服务器去访问 google，再把访问结果传回你的电脑，这样就实现了翻墙。</strong></p>\n<h4 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h4><h5 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h5><ol>\n<li><strong>VPS服务器</strong></li>\n</ol>\n<ul>\n<li><p>免费VPS：不好意思，没有一直免费的，目前网上搜到的免费的VPS服务器，极不稳定，影响体验，适合偶尔使用，不适合长期使用；</p>\n<ul>\n<li>国外的云服务：<a href=\"https://cloud.google.com/\">谷歌云</a>、<a href=\"https://aws.amazon.com/cn/\">亚马逊云</a>、<a href=\"https://azure.microsoft.com/zh-cn/\">微软云服务Azure</a>等，这些云服务，基本上都会提供一年的免费体验期，可以挨个换着用，通过特殊的方法，有些云服务可以使用不止一次……其实国内的阿里云有<a href=\"https://link.zhihu.com/?target=https%3A//www.alibabacloud.com/%3Fspm%3D5176.2020520130.1001.d1.1dd16bc4h2cx2M\">国际版</a>，但是禁止大陆用户注册……</li>\n<li>学生优惠：包括上述的国外云服务厂商，还有<a href=\"https://m.do.co/c/ad240a3367a0\">Digital Ocean</a>，一定要记得自己的学校邮箱，可以申请到不少好东西，还可以申请学生优惠；</li>\n</ul>\n</li>\n<li><p>VPS提供商有：<strong><a href=\"http://www.vultr.com/?ref=7038906\">Vultr</a>、<a href=\"https://www.linode.com/\">Linode</a>、<a href=\"https://bwh1.net/\">搬瓦工（bandwagonhost）</a></strong>，这些都是消费服务，但是有时候优惠很大，Vultr应该是国内用户用得最多的VPS，价格厚道，支持xx宝付款，但是无奈用户太多，且大部分用户都选择在日本的机房，特征明显压力大，最近频频被封号……<a href=\"https://link.zhihu.com/?target=https%3A//www.linode.com/%3Fr%3D34ae657f093b6c1f90eb6cba7015e9bd852db128\">Linode</a>强推；</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>一台可以上网的电脑（个人PC）Windows、Mac系统都可以。</li>\n</ol>\n<h5 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h5><ol>\n<li>SSH登录终端：<a href=\"https://www.netsarang.com/zh/xshell-download/\"><strong>Xshell</strong></a>、<a href=\"http://www.hostbuf.com/t/988.html\"><strong>FinalShell</strong></a>等；</li>\n<li>Chrome浏览器</li>\n<li>谷歌账号</li>\n<li>SSR客户端</li>\n</ol>\n<h5 id=\"其它环境\"><a href=\"#其它环境\" class=\"headerlink\" title=\"其它环境\"></a>其它环境</h5><ol>\n<li>实体信用卡或者<a href=\"https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B\">虚拟信用卡</a></li>\n</ol>\n<h4 id=\"搭配方案\"><a href=\"#搭配方案\" class=\"headerlink\" title=\"搭配方案\"></a>搭配方案</h4><p>经过我的一番调研，在这个特殊时期，使用<strong>谷歌云 + BBRPlus加速 + SSR</strong>的方案，可完美科学上网，谷歌搜索WiKi百科无压力，Youtube略有压力。</p>\n<p><strong>完美支持Windows、Android、Mac。</strong></p>\n<p>下表是我的配置环境</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"center\">版本号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">系统</td>\n<td align=\"center\">Windows10 1909</td>\n</tr>\n<tr>\n<td align=\"center\">VPS服务商</td>\n<td align=\"center\">谷歌云</td>\n</tr>\n<tr>\n<td align=\"center\">浏览器</td>\n<td align=\"center\">Chrome/Edge等</td>\n</tr>\n<tr>\n<td align=\"center\">终端登录</td>\n<td align=\"center\">Xshell</td>\n</tr>\n<tr>\n<td align=\"center\">代理工具</td>\n<td align=\"center\">SSR</td>\n</tr>\n</tbody></table>\n<p><strong>VPS服务器</strong>：<strong>谷歌云</strong>，新用户注册谷歌云，可获得300美刀的赠金。</p>\n<h4 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h4><p>实验环境是Windows10，<strong>谷歌云 + BBRPlus加速 + SSR</strong>配置步骤大概分10步。</p>\n<h5 id=\"Step1：翻个小墙\"><a href=\"#Step1：翻个小墙\" class=\"headerlink\" title=\"Step1：翻个小墙\"></a>Step1：翻个小墙</h5><p>没错，第一步就是翻墙，翻个小墙，偷摸摸的出去干点合理合法的小事情，一切为了学习！因为需要一个谷歌账号，如果已经有了谷歌账号，则需要在谷歌云网站注册为新用户，所以我们需要一些方法先翻出去，搞定这些，做好铺垫，再回来利用终端进行配置。</p>\n<p>搜集了一些不太稳定，但是可以翻出去的方法。</p>\n<ol>\n<li>网站类：<a href=\"https://ac.scmor.com/，这是一个镜像网站，不稳定，但有时可以用；\">https://ac.scmor.com/，这是一个镜像网站，不稳定，但有时可以用；</a></li>\n</ol>\n<p><img src=\"https://source.thankjava.com/view/XEX0gCk\" alt=\"Google镜像网站\"></p>\n<ol start=\"2\">\n<li>chrome插件类：请移步<a href=\"https://pan.baidu.com/s/1Dz47RxD2im1QS_aOLod6uQ\">链接</a>进行下载，提取码是hd2q。里面有三款插件，推荐使用<strong>VeePN</strong>。插件的安装方法：</li>\n</ol>\n<ul>\n<li>打开Chrome浏览器：输入<a href=\"chrome://extensions/\">chrome://extensions/</a>，打开后，点击右上角的按钮，进入<strong>开发者模式</strong>；</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e7cdf1a504f4bcb04e33b74.png\" alt=\"Chrome开发者模式\"></p>\n<ul>\n<li>插件的格式为crx，将其拖入上述界面，若出现错误，则将插件后缀名.crx更改为.zip后，重新拖入；</li>\n<li>若继续出现错误，将.zip文件进行解压，点击<code>加载已解压的扩展程序</code>，选中刚刚解压好的文件夹，点击确定；</li>\n<li>Edge浏览器用户，进入<a href=\"edge://extensions/\">edge://extensions/</a>，点击<code>加载解压缩的扩展</code>，选择上一步解压好的文件夹，确定后进行尝试；</li>\n</ul>\n<p>如果上述方法都不可用，请联系管理员。</p>\n<p>后续步骤都建立在<strong>Step1</strong>之上，即先翻个小墙。</p>\n<h5 id=\"Step2：注册谷歌账号\"><a href=\"#Step2：注册谷歌账号\" class=\"headerlink\" title=\"Step2：注册谷歌账号\"></a>Step2：注册谷歌账号</h5><p>这一步无需多言，在翻墙进来之后，打开<a href=\"https://support.google.com/accounts/answer/27441?hl=zh-Hans\">Google账户注册</a>页面，一步一步进行操作，手机号貌似是可选项，可以不填；整个过程，这一步应该是最好过的一步了。</p>\n<h5 id=\"Step3：注册谷歌云服务\"><a href=\"#Step3：注册谷歌云服务\" class=\"headerlink\" title=\"Step3：注册谷歌云服务\"></a>Step3：注册谷歌云服务</h5><p><strong>新用户注册谷歌云，可获得300美刀的赠金。</strong>这些小钱钱是打到你的谷歌云账户里的，不能提现，只能在使用谷歌云服务时，进行抵押。</p>\n<p>在注册谷歌云，非常非常关键的一步是，需要一张<strong>信用卡</strong>。如果你的信用卡是实体卡，也就是在国内申请的并没有问题，可以不看这段；但是大部分学生是没有信用卡的，如何薅羊毛呢？利用<a href=\"https://www.payoneer.com/raf/zh/?rid=C9D47D6B-361F-47BA-B49B-0EE3C054786B\">Payoneer</a>，全中文界面，如果你相信这家公司，就请注册，审核比较快，审核通过后，可以进行谷歌云账号的注册，Payoneer的注册教程请<a href=\"https://www.jianshu.com/p/5d918a6aec1c\">移步</a>。</p>\n<p>拿到信用卡账号后，打开<a href=\"https://cloud.google.com/\">谷歌云官网</a>进行注册，整个过程不难，需要注意的是：</p>\n<ul>\n<li>在<strong>国家/地区</strong>的选择列表里，并没有中国，这并不奇怪……隨便选择一个国家即可；</li>\n<li>还有在输入你的<strong>地址</strong>时，有一个简单的办法，大家可以在<a href=\"https://www.google.com/maps/?hl=zh-CN\">谷歌地图</a>搜索你所选择国家的大学地址就好，比如搜索斯坦福大学，地址：450 Serra Mall, Stanford, CA 94305。另外，不需要1美元进行验证。</li>\n</ul>\n<p>如果看到可选的项目，可以不填。</p>\n<p>至此，你已经注册好了谷歌云，并进入了控制台界面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7ce99a504f4bcb04e9946d.png\" alt=\"Google结算界面\"></p>\n<p><img src=\"https://pic.downk.cc/item/5e7ceb8f504f4bcb04eac66d.png\" alt=\"Google结算界面\"></p>\n<p>如上图，进入到<strong>结算界面</strong>后，我们在右侧可以看到赠送到你账户的300刀以及免费使用的天数365天。因为我之前注册过并使用了一些服务，所以服务的费用从300刀里面扣了一部分，需要注意的是，这部分赠金使用完后，<strong>不自动</strong>从绑定的信用卡里进行扣费。</p>\n<h5 id=\"Step4：创建VPS服务器\"><a href=\"#Step4：创建VPS服务器\" class=\"headerlink\" title=\"Step4：创建VPS服务器\"></a>Step4：创建VPS服务器</h5><p>在这一步，创建VPS服务器，在谷歌云里，叫虚拟机实例（VM实例）。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cecdf504f4bcb04eb79c5.png\" alt=\"虚拟机实例创建\"></p>\n<p>进入<strong>虚拟机实例</strong>创建界面，点击<strong>新建</strong>或<strong>创建实例</strong>，进行VPS配置。</p>\n<ul>\n<li><strong>名称</strong>：随便取，比如 scisurfing，只能是小写英文字母；</li>\n<li><strong>标签</strong>：省略不填；</li>\n<li><strong>区域</strong>：如果在国内，尽可能选择离我们近一点的城市，比如中国台湾、中国香港、东京、大坂、首尔、孟买、新加坡等，要根据自己的为位置和网速进行选择，配置完成后可以试一下哪个速度最快；</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e7cee56504f4bcb04ec6109.png\" alt=\"地区选择\"></p>\n<ul>\n<li><p><strong>地区</strong>：同上，随便选一个即可，到时候可以挨个尝试；</p>\n</li>\n<li><p><strong>机器配置</strong>：</p>\n<ul>\n<li><strong>系列</strong>：N1即可；</li>\n<li><strong>机器类型</strong>：列表里有各种配置，配置越高，收费越贵，根据实际情况来选择，这里我选择<code>n1-standard-1（1个vCPU，3.75GB内存）</code>；</li>\n</ul>\n</li>\n<li><p><strong>启动磁盘</strong>：根据自己的习惯来选择，这里我选择<strong>CentOS系统</strong>，版本号选择<strong>7</strong>。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e7cf1d5504f4bcb04ee2435.png\" alt=\"启动磁盘\"></p>\n<ul>\n<li>防火墙：将<code>允许HTTP流量</code>和<code>允许HTTPS流量</code>全部勾选上。</li>\n</ul>\n<p>我的整体配置如下：</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf3c5504f4bcb04ef0e30.png\" alt=\"\"></p>\n<p>配置完成后，右侧会显示每个月的具体花费，根据消费金额，可适当调整。紧接着点击<code>创建</code>按钮，稍等片刻，控制台再完成配置之后，会生成一个外部IP地址，如下图所示：</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf4d5504f4bcb04ef8281.png\" alt=\"\"></p>\n<p>为了测试这个IP可以在国内使用，需要在<a href=\"http://ping.chinaz.com/\">站长之家</a>对这个IP（aaa.bbb.ccc.ddd）进行检测，ping得通，则认为这个IP还没有被墙，可以正常使用，进行下一步，如下图，一片“绿”就对了。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf5cd504f4bcb04eff81a.png\" alt=\"Ping检测\"></p>\n<p>如果这个IP在国内ping不通，则显示一片红，需要在控制台删除这个实例，再重新创建，直到一片绿油油的景象。</p>\n<h5 id=\"Step5：修改谷歌云控制权限\"><a href=\"#Step5：修改谷歌云控制权限\" class=\"headerlink\" title=\"Step5：修改谷歌云控制权限\"></a>Step5：修改谷歌云控制权限</h5><p>这一步的目的是为了我们可以在本地计算机利用ssh管理这个VPS服务器，而不是每次都要登录到谷歌云控制台里面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png\" alt=\"VM-SSH登录\"></p>\n<p>点击上图里的<code>SSH</code>，加载一段时间会弹出一个终端界面，如下图所示，其服务器系统就是在创建实例的时候选择的系统，比如我选择是CentOS 7版本</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf7f4504f4bcb04f0e614.png\" alt=\"谷歌云终端界面\"></p>\n<p>首先要获取服务器root权限，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n\n<p>获取root权限后，继续输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>在英文输入法状态下，按下键盘上的<code>i</code>键，此时左下角的标记为<strong>INSERT</strong>状态，移动键盘上的上下左右四个键，找到第38行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin no</span><br></pre></td></tr></table></figure>\n\n<p>将<code>no</code>改为<code>yes</code>；</p>\n<p>将第63行<code># PasswordAuthentication yes</code>前面的<code>#</code>去掉。</p>\n<p>按下键盘的<code>esc</code>键推出编辑模式，按下shift+冒号，再输入<code>wq</code>保存并退出。</p>\n<p>然后再终端重启sshd服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>\n\n<p>修改密码，在终端继续输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p>按照提示更改登录密码，温馨提示，尽可能不要用小键盘输入数字，密码请使用数组加字母的组合形式。</p>\n<h5 id=\"Step6：登录VPS服务器\"><a href=\"#Step6：登录VPS服务器\" class=\"headerlink\" title=\"Step6：登录VPS服务器\"></a>Step6：登录VPS服务器</h5><p>在<strong>个人电脑</strong>上，打开xshell或者其它终端，具体使用方法请看我的<a href=\"https://github.com/kangzhiheng/GitLocalDoc#ssh%E7%99%BB%E5%BD%95\">另一篇文章（Lab532服务器环境(CentOS 7.6)须知）</a>，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@IPAddr -p 22</span><br></pre></td></tr></table></figure>\n\n<p>读者们仅仅需要将<code>IPAddr</code>替换成自己的VPS IP地址就好。第一次登录可能会出现以下界面，输入<code>yes</code>即可。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7cfd04504f4bcb04f2d5ae.png\" alt=\"SSH登录\"></p>\n<h5 id=\"Step7：安装BBR加速内核\"><a href=\"#Step7：安装BBR加速内核\" class=\"headerlink\" title=\"Step7：安装BBR加速内核\"></a>Step7：安装BBR加速内核</h5><p><a href=\"https://github.com/google/bbr\">BBR</a> 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。从 4.9 开始，Linux 内核已经用上了该算法。部署最新版内核，开启TCP BBR 加速的 VPS，<strong>网速可以提升几个数量级</strong>。</p>\n<p>安装<code>wget</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<p>安装BBR加速，允许下列代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cx9208&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>\n\n<p>出现的界面如下：</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d03ad504f4bcb04f4ec70.png\" alt=\"BBR加速\"></p>\n<p>输入数字<code>2</code>，等待安装<code>BBRplus版内核</code></p>\n<p>安装完成后，可能出现以下界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0575504f4bcb04f570f9.png\" alt=\"安装BBR\"></p>\n<p>输入<code>Y</code>，如果在之间出现了这样的界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d05b9504f4bcb04f5843b.png\" alt=\"BBR\"></p>\n<p>选择<code>No</code>即可。</p>\n<p>此时本地客户端连接断开，谷歌云正在重启VPS服务器，回到<strong>谷歌云控制台</strong>里的虚拟机实例页面，点击<code>SSH</code></p>\n<p><img src=\"https://pic.downk.cc/item/5e7cf703504f4bcb04f07c4d.png\" alt=\"VM-SSH登录\"></p>\n<p>加载网页上的终端后，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n\n<p>获取root权限，运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>\n\n<p>出现以下界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0705504f4bcb04f5ef36.png\" alt=\"安装BBR加速\"></p>\n<p>现在安装BBR加速，选择<code>7</code>。</p>\n<p>很快，出现界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d075c504f4bcb04f60b46.png\" alt=\"BBR安装完成\"></p>\n<p>出现了这个界面，表示BBR加速已经安装完成并启动成功了。</p>\n<h5 id=\"Step8：在VPS上安装SSR服务\"><a href=\"#Step8：在VPS上安装SSR服务\" class=\"headerlink\" title=\"Step8：在VPS上安装SSR服务\"></a>Step8：在VPS上安装SSR服务</h5><p>继续在上一步的网页版的终端里运行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e7d080b504f4bcb04f645fa.png\" alt=\"服务器端SSR\"></p>\n<p>输入<code>1</code>，进行SSR安装</p>\n<p>安装过程中需要对端口、密码、协议插件、混淆插件等进行配置，全部默认即可（一直按Enter键），直至出现</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0973504f4bcb04f6b0fb.png\" alt=\"SSR安装\"></p>\n<p>输入<code>y</code>，安装服务端SSR所需要的依赖服务，这可能需要个几分钟时间，然后可能会出现一个啥都不显示的界面，恭喜你，安装完成了，这时候需要用鼠标进行页面向上的滚动，就会看到</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png\" alt=\"BBR安装完成\"></p>\n<p>离成功越来越近了，继续操作。<strong>将上述SSR配置信息保存起来。</strong></p>\n<h5 id=\"Step9：关闭谷歌云防火墙\"><a href=\"#Step9：关闭谷歌云防火墙\" class=\"headerlink\" title=\"Step9：关闭谷歌云防火墙\"></a>Step9：关闭谷歌云防火墙</h5><p><img src=\"https://pic.downk.cc/item/5e7d0b3d504f4bcb04f86edf.png\" alt=\"VPS防火墙\"></p>\n<p>如上图，打开<code>VPC网络</code>里的<code>防火墙规则</code></p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0c11504f4bcb04f8beff.png\" alt=\"VPS防火墙修改\"></p>\n<p>因为在之前的设置中，使用了不同的端口和协议，所以需要修改防火墙规则，上图里用红色框框圈出来的两个过滤表，都需要进行相同的操作，选择第一个为例进行说明。</p>\n<p>点击第一个，进入下一个界面，如下图所示，点击修改，将页面滑到最下面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0cb4504f4bcb04f8f64b.png\" alt=\"\"></p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0d23504f4bcb04f91c4b.png\" alt=\"\"></p>\n<p>将<code>协议和端口</code>改为<strong>全部允许</strong>，<code>default-allow-https</code>也是一样的操作。</p>\n<h5 id=\"Step10：连接SSR\"><a href=\"#Step10：连接SSR\" class=\"headerlink\" title=\"Step10：连接SSR\"></a>Step10：连接SSR</h5><p>下载SSR客户端，链接为：<a href=\"https://github.com/shadowsocksrr/shadowsocksr-csharp/releases\">Windows</a>、<a href=\"https://github.com/shadowsocksrr/shadowsocksr-android/releases\">Android</a>、<a href=\"https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/\">Mac</a></p>\n<p>以Win10系统为例，解压文件夹后，运行<code>ShadowSOcksR-dotnet4.0.exe</code>。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0ebe504f4bcb04f9a5c9.png\" alt=\"SSR客户端\"></p>\n<p>SSR正常运行时，桌面右下角出现一个粉色的飞机小图标。</p>\n<p>返回到网页终端，或者打开保存好的SSR配置信息。</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d0a80504f4bcb04f81ead.png\" alt=\"BBR安装完成\"></p>\n<p>复制上图中的<code>SSR链接</code>。紧接着，右键SSR客户端</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d1033504f4bcb04fa30ed.png\" alt=\"\"></p>\n<p>选择<code>剪切板批量导入ssr://链接</code>，出现界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e7d10a5504f4bcb04fa56dd.png\" alt=\"\"></p>\n<p>可以进行备注和群组名填写，然后选择确定，配置完成。</p>\n<p>右键SSR客户端，在</p>\n<ul>\n<li><code>系统代理模式</code>里，选择<code>PAC模式</code>；</li>\n<li><code>服务器</code>里，选择刚刚配置好的服务器IP；</li>\n</ul>\n<p>一切准备就绪，测试能否<a href=\"https://google.com.hk\">翻墙</a>，若不能，删除该VPS服务器，重新配置即可。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>一般来说，刚刚配置的VPS，速度都不错，在<a href=\"https://www.youtube.com/\">油管</a>看4K基本无压力，速度可达24000Kbps。但是随着时间的推移，就会发现速度逐渐变慢，这个时候看超清视频，可能都有点吃力，但是搜索看新闻影响不大。如果速度很慢，利用<a href=\"http://ping.chinaz.com/\">站长工具</a>进行IP检测，实在不能忍受的情况下，在谷歌云里删除该VPS服务器，重新配置即可。</p>\n<p>另外，这种方法，也可以在手机（安卓）上进行配置，但是运营商会限速，只是用来搜索，基本没啥大问题。</p>\n<p>时间仓促，水平有限，有错误，请随时联系我：<a href=\"mailto:&#x6b;&#97;&#x6e;&#x67;&#122;&#x68;&#105;&#104;&#101;&#110;&#x67;&#64;&#108;&#x69;&#x76;&#101;&#x2e;&#99;&#110;\">&#x6b;&#97;&#x6e;&#x67;&#122;&#x68;&#105;&#104;&#101;&#110;&#x67;&#64;&#108;&#x69;&#x76;&#101;&#x2e;&#99;&#110;</a>。</p>\n<p>希望大家可以正确利用技术。</p>\n<p>希望这个方法带给大家帮助。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>[1] <a href=\"https://www.youtube.com/watch?v=iidqJ7p7ln4\">互联网是如何工作的？VPN、SSR、V2ray翻墙是什么原理？</a></p>\n<p>[2] <a href=\"http://www.ggfwzs.com/\">http://www.ggfwzs.com/</a> </p>\n<p>[3] <a href=\"https://medium.com/@thomas_summon/浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别-b0198f92db1b\">浅谈vpn-vps-proxy以及shadowsocks之间的联系和区别</a></p>\n<p>[4] <a href=\"https://github.com/frank-lam/vps-ss#手把手教你搭建搬瓦工-ss-代理\">手把手教你搭建搬瓦工-ss-代理</a></p>\n<p>[5] <a href=\"https://www.idcbest.com/idcnews/11003957.html\">SS和SSR的区别</a></p>\n<p>[6] <a href=\"https://www.youtube.com/watch?v=RxbGtkRVUWQ&t=291s\">免费翻墙，谷歌云+SSR</a></p>\n<p>[7] <a href=\"https://toutyrater.github.io/\">V2Ray</a></p>"},{"title":"服务器环境搭建、配置及使用","toc":true,"recommend":1,"date":"2020-03-30T06:30:43.000Z","thumbnail":"https://pic.downk.cc/item/5e887c1d504f4bcb04ee9d03.png","keywords":"Vim","_content":"\n\n\n搭建和配置**深度学习环境**、**Matlab环境**，普通用户可以自由切换多版本CUDA、cuDNN版本，自由组合创建不同版本的Tensorflow、PyTorch等深度学习环境。\n\n注意：标题右上角带有\"*****\"标记的，意为这一部分内容需要**管理员**操作。\n\n <!-- more --> \n\n## 目录\n\n[toc]\n\n## 安装计划\n\n- [ ] 服务器系统\n- [x] NVIDIA驱动安装\n- [x] CUDA安装：9.0、9.1、9.2、10.0、10.1、10.2\n- [x] cuDNN安装：7.0.5、7.4、7.6\n- [x] SSH远程登录及文件传输\n- [x] Aanconda安装\n- [x] OpenCV安装（pip）\n- [ ] Opencv源码编译\n- [ ] GCC安装：4.8.5、7.3.1\n- [ ] MatLab安装\n- [x] Anaconda安装\n- [x] Tensorflow各个版本的安装\n- [x] PyTorch各个版本的安装\n- [ ] Torch各个版本的安装\n- [ ] Caffe安装\n- [ ] 使用 **Environment Module** 管理不同版本的软件\n\n## 第一章：服务器情况简介\n\n### 查看系统硬件设备信息\n\n运行\n\n```bash\nsudo dmidecode | more\n```\n\n查看服务器硬件设备信息，包括**BIOS信息（BIOS Information）**、**服务器信息（System Information）**、**CPU信息（Processor Information）**、**缓存信息（Cache Information）**、**内存信息（Physical Memory Array）**、**电源信息（System Power Supply）**、**内存设备（Memory Device）**等。\n\n服务器型号为[Dell R730](https://www.dell.com/zh-cn/work/shop/povw/poweredge-r730)，有两个显卡插槽，原机无显卡。2018年7月，在服务器上安装了一块GPU，型号为GTX 1080（`lspci | grep -i nvidia`），显存8G。\n\n### 查看系统CPU\n\n**查看CPU的统计信息**\n\n```bash\nlscpu\n```\n\n输出\n\n```\nArchitecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                6\nOn-line CPU(s) list:   0-5\nThread(s) per core:    1\nCore(s) per socket:    6\n座：                 1\nNUMA 节点：         1\n厂商 ID：           GenuineIntel\nCPU 系列：          6\n型号：              79\n型号名称：        Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz\n步进：              1\nCPU MHz：             1200.085\nCPU max MHz:           1700.0000\nCPU min MHz:           1200.0000\nBogoMIPS：            3400.03\n虚拟化：           VT-x\nL1d 缓存：          32K\nL1i 缓存：          32K\nL2 缓存：           256K\nL3 缓存：           15360K\nNUMA 节点0 CPU：    0-5\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm arat pln pts\n```\n\n查看每个CPU信息，如每个CPU的型号，主频等。\n\n```\ncat /proc/cpuinfo\n```\n\n运行命令查看CPU型号，为**Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz**。\n\n### 查看内存\n\n查看内存使用量和交换区使用量\n\n```bash\nfree -m\n```\n\n查看内存详细情况\n\n```bash\ncat /proc/meminfo    // 或者vmstat -s\n```\n\n输出\n\n```bash\nMemTotal:       40779120 kB\nMemFree:          323944 kB\nMemAvailable:   38162436 kB\nBuffers:         1284976 kB\nCached:         36028884 kB\nSwapCached:            0 kB\nActive:         19560888 kB\nInactive:       18538364 kB\nActive(anon):    1214532 kB\nInactive(anon):   270932 kB\nActive(file):   18346356 kB\nInactive(file): 18267432 kB\nUnevictable:           0 kB\nMlocked:               0 kB\nSwapTotal:             0 kB\nSwapFree:              0 kB\nDirty:                 0 kB\nWriteback:             0 kB\nAnonPages:        785432 kB\nMapped:           139012 kB\nShmem:            700072 kB\nSlab:            1861424 kB\nSReclaimable:    1663764 kB\nSUnreclaim:       197660 kB\nKernelStack:        9504 kB\nPageTables:        17908 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:    20389560 kB\nCommitted_AS:    3160860 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      443080 kB\nVmallocChunk:   34358900732 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:     36864 kB\nCmaTotal:              0 kB\nCmaFree:               0 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:    38408912 kB\nDirectMap2M:     3305472 kB\nDirectMap1G:     2097152 kB\n```\n\n原机内存大小为8G，在2018年7月，扩展到40G，实际上不到40G，为38.8G左右。\n\n### 磁盘信息\n\n**查看硬盘和分区分布**\n\n```bash\nlsblk\n```\n\n输出\n\n```bash\nNAME                   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nsda                      8:0    0   5.5T  0 disk \n├─sda1                   8:1    0   476M  0 part /boot\n├─sda2                   8:2    0    61M  0 part \n├─sda3                   8:3    0    64M  0 part /boot/efi\n├─sda4                   8:4    0   1.4T  0 part /home\n├─sda5                   8:5    0   3.6T  0 part \n│ ├─VolGroup0-datavol0 253:2    0     1T  0 lvm  /mnt/vdisk0\n│ ├─VolGroup0-datavol1 253:3    0     1T  0 lvm  /mnt/vdisk1\n│ ├─VolGroup0-datavol2 253:4    0     1T  0 lvm  /mnt/vdisk2\n│ └─VolGroup0-datavol3 253:5    0   540G  0 lvm  /mnt/vdisk3\n└─sda6                   8:6    0 474.5G  0 part \n  ├─centos-root        253:0    0   400G  0 lvm  /\n  └─centos-swap        253:1    0  74.5G  0 lvm  \nsr0                     11:0    1  1024M  0 rom  \nloop0                    7:0    0  14.4G  0 loop /mnt/iso\n```\n\n可以看到目前服务器上的磁盘结构。**如果重装系统，`/home`（sda4）可以保留，新系统在安装时，不必要再分/home区。直接将旧系统的/home挂载到新系统上即可。**\n\n**目前磁盘已采用LVM技术**。\n\n> LVM是（Logical Volume Manager) 逻辑卷管理的简写，它是Linux环境下对磁盘分区进行管理的一种机制。LVM是建立在硬盘和分区之上的一个逻辑层，屏蔽了底层磁盘布局，便于动态调整磁盘容量来提高磁盘分区管理的灵活性。它可以将一个或多个底层块设备组织成一个逻辑设备的卷组，管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统，管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配 。\n\n**查看更详细的信息**\n\n```bash\nsudo fdisk -l\n```\n\n**查看各分区使用情况**\n\n```bash\ndf -h \n```\n\n### 查看服务器系统信息\n\n```bash\ncat /etc/*releasebash\n```\n\n输出\n\n```bash\nCentOS Linux release 7.7.1908 (Core)\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:centos:centos:7\"\nHOME_URL=\"https://www.centos.org/\"\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\n\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\nREDHAT_SUPPORT_PRODUCT=\"centos\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n\nCentOS Linux release 7.7.1908 (Core)\nCentOS Linux release 7.7.1908 (Core)\n```\n\n系统为CentOS 7.7。\n\n**查看系统主机名**\n\n```bash\nhostname\n```\n\n### 查看网卡\n\n**查看网卡硬件信息**\n\n```bash\nlspci | grep -i 'eth'\n```\n\n输出\n\n```\n01:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n01:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n02:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n02:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n\n```\n\n**查查看系统的所有网络接口**\n\n```bash\nifconfig -a\n```\n\n可以看到连接网络的那个端口，假设是em2，可以查看该端口的IPV4、IPV6、子网掩码等信息。如果要详细查看如果某个网络接口的详细信息，比如em2的详细参数和指标\n\n```bash\nethtool em2\n```\n\n输出\n\n```bash\nSettings for em2:\n    Supported ports: [ TP MII ]\n    Supported link modes:   10baseT/Half 10baseT/Full \n                            100baseT/Half 100baseT/Full \n                            1000baseT/Half 1000baseT/Full # 支持千兆半双工，全双工模式\n    Supported pause frame use: No \n    Supports auto-negotiation: Yes # 支持自适应模式，一般都支持\n    Advertised link modes:  10baseT/Half 10baseT/Full \n                            100baseT/Half 100baseT/Full \n                            1000baseT/Half 1000baseT/Full\n    Advertised pause frame use: Symmetric\n    Advertised auto-negotiation: Yes # 默认使用自适应模式\n    Advertised FEC modes: Not reported\n    Link partner advertised link modes:  10baseT/Half 10baseT/Full \n                                         100baseT/Half 100baseT/Full \n                                         1000baseT/Full\n    Link partner advertised pause frame use: No\n\tLink partner advertised auto-negotiation: Yes\n\tLink partner advertised FEC modes: Not reported\n    Speed: 1000Mb/s # 现在网卡的速度是1000Mb\n    Duplex: Full   # 全双工\n    .....\n    Link detected: yes    # 表示有网线连接，和路由是通的\n```\n\n**查看显示去往192.168.1.102的所有HTTP会话信息**\n\n```bash\nsudo tcpdump -ni em1 'dst 192.168.1.102 and tcp and port 8080'\n```\n\n**显示来源IP或者目的IP为192.168.1.102的网络通信**\n\n```bash\nsudo tcpdump -i eth0 host 192.168.1.102\n```\n\n**查看路由器列表**\n\n```bash\nroute -n\n```\n\n**查看所有监听端口**\n\n```bash\nnetstat -lntp\n```\n\n**查看所有已经建立的连接**。\n\n```bash\nnetstat -antp\n```\n\n**查看网络统计信息**\n\n```bash\nnetstat -s\n```\n\n### 进程\n\n**查看系统所有进程**\n\n```bash\nps -ef\n```\n\n**显示所有进程的详细信息**\n\n```bash\nps aux\n```\n\n**显示某一用户的进程列表**\n\n```bash\n ps -f -u username\n```\n\n**实时显示进程状态**\n\n```bash\ntop\n```\n\n按`q`退出\n\n**列出当前的进程，以及它们的树状结构**\n\n```bash\npstree\n```\n\n**结束进程**，PID为Process ID\n\n```bash\nkill PID\n```\n\n**查看系统信号变量**\n\n```bash\nkill -l\n```\n\n事实上，还有一个比较酷炫的命令是`htop`，安装方法是`sudo yum install htop`，在终端输入：\n\n```bash\nhtop\n```\n\n**遇到顽固的进程，使出必杀技**\n\n```bash\nkill -9 PID\n```\n\n![](https://s4.aconvert.com/convert/p3r68-cdx67/a6yfe-e7t35.png)\n\n### 资源统计\n\n**查看当前目录大小**\n\n```bash\ndu -sh\n```\n\n**查看系统运行时间、用户数、负载**\n\n```bash\nuptime                 \n```\n\n### 系统常用指令集合\n\n#### cpu.sh — CPU统计信息指令\n\n```bash\n#/bin/bash\n\n# 限制某个线程的cpu使用率\nsudo cpulimit -p pid -l 50\nps -eo %cpu,args | grep -m1 PROCESS | awk '{print $1}'\n\n# 将当前进程按照memory和cpu排序\nps aux --sort=%mem,%cpu\n\n# 按照cpu使用率排序\nps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed \"/^ 0.0 /d\"\n\n# 查看当前系统的物理cpu个数\ngrep \"processor\" /proc/cpuinfo | wc -l\t\ngrep -c -e '^cpu[0-9]\\+' /proc/stat\n\n# 查看当前cpu型号\ngrep \"model name\" /proc/cpuinfo\n\n# 查看当前cpu信息\ncat /proc/cpuinfo\n\n# 查看当前系统的位数\ngrep -q '\\<lm\\>' /proc/cpuinfo && echo 64 bits || echo 32 bits\ngetconf LONG_BIT | grep '64'\njava -version\n\n# 查看当前系统的cpu频率\nawk -F\": \" '/cpu MHz\\ */ { print \"Processor (or core) running speed is: \" $2 }' /proc/cpuinfo ; dmidecode | awk -F\": \" '/Current Speed/ { print \"Processor real speed is: \" $2 }'\n\n# 查看每个cpu每个进程的cpu使用率\nps ax -L -o pid,tid,psr,pcpu,args | sort -nr -k4| head -15 | cut -c 1-90\n\n# 查看当前中断\ncat /proc/interrupts\n\n# 查看多个处理器的使用率相关信息\nmpstat –P ALL 1\n\n# 每个物理CPU中Core的个数：\ncat /proc/cpuinfo | grep \"cpu cores\" | uniq | awk -F: '{print $2}'\n\n# 是否为超线程？\n# 如果有两个逻辑CPU具有相同的”core id”，那么超线程是打开的。\n# 每个物理CPU中逻辑CPU(可能是core, threads或both)的个数：\ncat /proc/cpuinfo | grep \"siblings\"\n\n# /proc/stat 文件中有一行记录的机器从启动依赖，各个中断序号发生中断的次数。\n# 这一行以intr开头，接下来的第一个数字是总的中断数目，之后就是分别的中断数目，从0开始。\ncat /proc/stat  | grep intr\n```\n\n#### disk.sh — 磁盘相关统计指令\n\n```bash\n#/bin/bash\n\n# 按照目录大小排序战士最前面15个目录或者文件\ndu -xB M --max-depth=2 /var | sort -rn | head -n 15\n\n# 列出当前所有子目录的文件大小\ndu -h --max-depth=1\n\n# 列出当前文件或者目录最大的10个\ndu -s * | sort -n | tail\n\n# 按照目录大小从大到小排序\ndu -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf \"%.1f%s\", 1>=2∗∗30?(1/2**30, \"G\"): 1>=2∗∗20?(1/2**20, \"M\"): 1>=2∗∗10?(1/2**10, \"K\"): ($1, \"\")}e'\n\n# 列出path这个目录的文件树\ndu -h /path | sort -h\n\n# 每隔60s监控对应目录的文件大小变化\nwatch -n60 du /var/log/messages\n\n\n# 递归删除当前目录下所有子目录中的.svn目录\nfind . -type d -name '.svn' -print0 | xargs -0 rm -rdf\n\n# 列出当前磁盘的使用情况\ndf -P | column -t\n\n# 监控磁盘的使用情况\nwatch -d -n 5 df\n\n# 列出当前inode的使用情况\ndf -i  <partition>\n\n# 按照每个磁盘使用量从高到低排序\ndf -h | grep -v ^none | ( read header ; echo \"$header\" ; sort -rn -k 5)\n\n\n# 查看物理磁盘的使用情况\ndf -x tmpfs | grep -vE \"(gvfs|procbususb|rootfs)\"\n\n# 查看当前所有磁盘的大小和使用量\ndf -H\n\n# 查看所有分区使用情况\nfdisk -l /dev/sda\n\n# 显示系统所有的分区或给定的分区\nfdisk -l       \n# 显示时，显示的是扇区数不是柱面数           \nfdisk -u           \n# 显示指定partition的block数       \nfdisk -s partition       \n\n# 查看磁盘的读写容量\niostat -m -d /dev/sda1\n\n# 测试磁盘的读写速度\nhdparm -t /dev/sda\n\n# 查看某个文件的所有链接\nfind -L / -samefile /path/to/file -exec ls -ld {} +\n\n# 查看最大的5个文件\nfind . -type f -exec ls -s {} \\; | sort -n -r | head -5\n\n# 查看365天前的文件并删除\nfind ./ -type f -mtime +365 -exec rm -f {} \\;\n\n# 查看大于100M的文件\nfind . -type f -size +100M\n```\n\n#### net.sh  — 网络信息统计指令\n\n```bash\n#/bin/bash\n\n# 查看http请求的header\ntcpdump -s 1024 -l -A -n host 192.168.9.56\ntcpdump -s 1024 -l -A src 192.168.9.56 or dst 192.168.9.56\nsudo tcpdump -A -s 1492 dst port 80\n\n# 本地网络中IP地址为192.168.0.5的主机现在与外界通信的情况\nsudo tcpdump -i eth0 src host 192.168.0.5\n\n# 查看网卡eth0的http请求的tcp包\ntcpdump -i eth0 port http\ntcpdump -i eth0 port http or port smtp or port imap or port pop3 -l -A | egrep -i 'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|userna me:|password:|login:|pass |user '\n\n# 查看tcp，upd，icmp非ssh的包\ntcpdump -n -v tcp or udp or icmp and not port 22\n\n# 查看http请求的request 包\nsudo tcpdump -i eth0 port 80 -w -\n\n\n# 过滤http响应的get host头信息\nsudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"GET \\/.*|Host\\: .*\"\n\n# DNS查询请求响应包\nsudo tcpdump -i en0 'udp port 53'\n\n# nmap -sP指定使用Ping echo 进行扫描 /24查看目的网络有多少主机处于运行状态\nnmap -sP 192.168.0.1\nnmap -sP 192.168.0.0/24\nnmap -O www.baidu.com\n\n# Netstat主要用于Linux/Unix主机察看自身的网络状况，如开启的端口、在为哪些用户服务以及服务的状态\nnetstat -a\nnetstat -nlp\n\n# netcat扫描机器开放的端口\nnc -z -v -n 172.31.100.7 21-25\n\n# netcat 命令会连接开放端口21并且打印运行在这个端口上服务的banner信息。\nnc -v 172.31.100.7 21\n\n# 输出网络的路由表\nroute -n\n\n# 显示结果包括服务器已经运行了多长时间，有多少登陆用户和对服务器性能的总体评估（load average）。\nuptime\n\n# 监控 eth1 的网卡的流量 \niftop -i eth1 \n# 以位元组(bytes 即字节)为单位显示流量(预设是位元 bits): \niftop -B \n# 直接显示 IP, 不进行DNS 反解: \niftop -n \n# 直接显示连接埠编号, 不显示服务名称: \niftop -N \n# 显示某个网段进出封包流量 \niftop -F 192.168.1.0/24 or 192.168.1.0/255.255.255.0 \n\n# 网络流量实时监控工具之nload,查看网卡eth0的流量\nnload -n eth0\n\n# 查看各个网卡的流量\nnload -h\n\n# IPTraf是一个网络监控工具,功能比nload更强大,可以监控所有的流量,IP流量,按协议分的流量,还可以设置过滤器\niptraf\n\n# 查看网络接口当前配置与接口命名：\nifconfig\n# 打开（up）或关闭（down）适配器\nifconfig <网络名> <up|down>\n# 为适配器分配IP地址：\nifconfig <网络名> <ip地址>\n# 为适配器分配第二个IP地址：\nifconfig <网络名:实例数> <ip地址>\n\n# 显示某个网络适配器的驱动信息，适用于查询软件兼容性的情况：\nethtool -i eth0\n# 显示网络数据：\nethtool -S\n# 设置适配器连接速度（Mbps）\nethtool speed <10|100|1000>\n\n# wget\nwget -S --spider http://osswin.sourceforge.net/ 2>&1 | grep Mod\n\n# 查看mac地址\ncat /sys/class/net/*/address\n\n# 查看eth0的ip\nifconfig eth0 | awk '/inet addr/ {split ($2,A,\":\"); print A[2]}'\n\n# curl 查看页面对应的domail name\ncurl -s http://en.m.wikipedia.org/wiki/List_of_Internet_top-level_domains | sed -n '/<tr valign=\"top\">/{s/<[^>]*>//g;p}'\n\n# talnet\ntelnet localhost 6666\n\n# 查看所有的网络接口\nawk '{print $1}' /proc/net/dev|grep :|sed \"s/:.*//g\"\n\n# 查看DNS server版本好\nnslookup -q=txt -class=CHAOS version.bind NS.PHX5.NEARLYFREESPEECH.NET\n```\n\n#### system.sh — 系统信息相关指令\n\n```bash\n#/bin/bash\n\n# 查看当前系统load\nuptime\n\n# 查看系统状态和每个进程的系统资源使用状况\ntop\n\n# 可视化显示CPU的使用状况\nhtop\n\n# 查看每个CPU的负载信息\nmpstat -P ALL 1\n\n# 每隔1秒查看磁盘IO的统计信息\niostat -xkdz 1\n\n# 每隔一秒查看虚拟内存的使用信息\nvmstat 1\n\n# 查看内存使用统计信息\nfree\n\n# 查看网络使用信息\nnicstat -z 1\n\n# 类似vmstat的显示优化的工具\ndstat 1\n\n# 查看系统活动状态，比如系统分页统计，块设备IO统计等\nsar\n\n# 网络连接状态查看\nnetstat -s\n\n# 进程资源使用信息查看\npidstat 1\npidstat -d 1\n\n# 查看某个进程的系统调用信息 -p后面是进程id，-tttT 进程系统后的系统调用时间\nstrace -tttT -p 12670\n# 统计IO设备输入输出的系统调用信息\nstrace -c dd if=/dev/zero of=/dev/null bs=512 count=1024k\n\n\n# tcpdump 查看网络数据包\ntcpdump -nr /tmp/out.tcpdump\n\n# 块设备的读写事件信息统计\nbtrace /dev/sdb \n\n# iotop查看某个进程的IO操作统计信息\niotop -bod5\n\n# slabtop 查看内核 slab内存分配器的使用信息\nslabtop -sc\n\n# 系统参数设置\nsysctl -a\n\n# 系统性能指标统计信息\nperf stat gzip file1\n# 系统cpu活动状态查看\nperf record -a -g -F 997 sleep 10\n```\n\n#### process.sh — 进程统计相关指令\n\n```bash\n## ps查看当前系统执行的线程列表，进行瞬间状态，不是连续状态，连续状态需要使用top名称查看  更多常用参数请使用 man ps查看\nps\n\n## 显示所有进程详细信息\nps aux\n\n## -u 显示某个用户的进程列表\nps -f -u www-data \n\n## -C 通过名字或者命令搜索进程\nps -C apache2\n\n## --sort  根据进程cpu使用率降序排列，查看前5个进程  -pcpu表示降序  pcpu升序\nps aux --sort=-pcpu | head -5 \n\n## -f 用树结构显示进程的层次关系，父子进程情况下\nps -f --forest -C apache2 \n\n## 显示一个父进程的所有子进程\nps -o pid,uname,comm -C apache2\nps --ppid 2359 \n\n## 显示一个进程的所有线程  -L 参数\nps -p 3150 -L \n\n##显示进程的执行时间 -o参数\nps -e -o pid,comm,etime \n\n## 查看系统的线程数\nnproc\n\n## watch命令可以用来实时捕捉ps显示进程\nwatch -n 1 'ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15' \n\n## jobs 查看后台运行的进程  jobs命令执行的结果，＋表示是一个当前的作业，减号表是是一个当前作业之后的一个作业，jobs -l选项可显示所有任务的PID,jobs的状态可以是running, stopped, Terminated,但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识；也就是说，jobs命令显示的是当前shell环境中所起的后台正在运行或者被挂起的任务信息\njobs\n\n## 查看后台运营的进程号\njobs -p\n\n## 查看现在被终止或者退出的进程号\njobs -n\n\n## kill命令 终止一个前台进程可以使用Ctrl+C键   kill  通过top或者ps获取进程id号  kill [-s 信号 | -p ] [ -a ] 进程号 ...\n## 发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。 关闭进程号12的进程\nkill 12\n\n## 等同于在前台运行PID为123的进程时按下Ctrl+C键\nkill -2 123\n\n## 如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程  \nkill -9 123\n\n## 列出所有信号名称\n## HUP    1    终端断线\n## INT     2    中断（同 Ctrl + C）\n## QUIT    3    退出（同 Ctrl + \\）\n## TERM   15    终止\n## KILL    9    强制终止\n## CONT   18    继续（与STOP相反， fg/bg命令）\n## STOP    19    暂停（同 Ctrl + Z）\nkill -l\n\n## 得到指定信号的数值\nkill -l KILL\n\n## 杀死指定用户所有进程\nkill -u peidalinux\nkill -9 $(ps -ef | grep peidalinux) \n\n## 将后台中的命令调至前台继续运行  将进程123调至前台执行\nfg 123\n\n## 将一个在后台暂停的命令，变成继续执行\nbg  123\n\n## 该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思  下面输出被重定向到myout.file文件中\nnohup command > myout.file 2>&1 &\n\n## at：计划任务，在特定的时间执行某项工作，在特定的时间执行一次。\n## 格式：at HH:MM YYYY-MM-DD //HH（小时）:MM（分钟） YYYY（年）-MM（月份）-DD（日）\n## HH[am pm]+D(天) days //HH（小时）[am（上午）pm（下午）]+days（天）\nat 12:00（时间） //at命令设定12:00执行一项操作\n# at>useradd aaa //在at命令里设定添加用户aaa\n# ctrl+d //退出at命令\n# tail -f /etc/passwd //查看/etc/passwd文件后十行是否增加了一个用户aaa\n\n## 计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务。\natq\n\n## 启动计划任务后，如果不想启动设定好的计划任务可以使用atrm命令删除。\natrm 1 //删除计划任务1\n\n## pstree命令：列出当前的进程，以及它们的树状结构  格式：pstree [选项] [pid|user]\npstree\n\n## nice命令：改变程序执行的优先权等级 应用程序优先权值的范围从-20～19，数字越小，优先权就越高。一般情况下，普通应用程序的优先权值（CPU使用权值）都是0，如果让常用程序拥有较高的优先权等级，自然启动和运行速度都会快些。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。\nnice [-n <优先等级>][--help][--version][命令]\nnice -n 5 ls\n\n## sleep命令：使进程暂停执行一段时间\ndate;sleep 1m;date\n\n\n## renice命令 renice命令允许用户修改一个正在运行进程的优先权。 利用renice命令可以在命令执行时调整其优先权。\n## 其中，参数number与nice命令的number意义相同。（1） 用户只能对自己所有的进程使用renice命令。（2） root用户可以在任何进程上使用renice命令。（3） 只有root用户才能提高进程的优先权\nrenice -5 -p 5200  #PID为5200的进程nice设为-5 \n\n## pmap命令用于显示一个或多个进程的内存状态。其报告进程的地址空间和内存状态信息 #pmap PID \npmap 20367\n\n## top 动态查看进程的变化。\ntop\n```\n\n### 服务器存在的问题\n\n1. **电源供电不足**\n\n   目前服务器运行良好，需要注意的是，服务器目前的电源功率是495W（`sudo dmidecode | grep Power`），GPU显卡额定功率是500W，服务器供电不足导致电源灯一闪一闪，为了保险起见，尽快补一块[750W服务器电源](https://item.jd.com/28405788107.html)。\n\n## 第二章：服务器系统安装*\n\n\n\n## 第三章：深度学习必备基础环境安装\n\n**NVIDIA驱动、CUDA、cuDNN三部分尽可能在现场安装**，因为涉及到重启，服务器不能远程重启。\n\n另外，本部分所有指令，建议在`bash`环境下运行，使用`zsh`的shell请切换为`bash`，避免不必要的麻烦。\n\n### 显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\n\n不同版本的Tensorflow和PyTorch环境对NVIDIA驱动、CUDA和cuDNN的有着不一样的需求。\n\n系统能否检测到GPU：\n\n```bash\nlspci | grep -i nvidia\n```\n\n输出\n\n```bash\n04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)\n04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)\n```\n\n**GTX 1080为Tensorflow、PyTorch等框架提供GPU支持。**\n\n#### GTX 1080信息\n\n**服务器上GTX 1080信息如下：**\n\n|      规格      |        核心参数        |\n| :------------: | :--------------------: |\n|    显卡核心    | NVIDIA GeForce GTX1080 |\n|    显存频率    |        10010MHz        |\n|    显存大小    |           8G           |\n|    显存类型    |         GDDR5X         |\n|    显存位宽    |         256位          |\n|    总线类型    |     PCI-E 3.0 x 16     |\n| 数字最高分辨率 |      7680 x 4320       |\n|      SLI       |          支持          |\n|   散热器类型   |          风冷          |\n|    额定电源    |          500W          |\n|  供电外接需求  |        8pin x 1        |\n| OpneGL支持版本 |       OpenGL 4.5       |\n\n#### Tensorflow建议[配置](https://www.tensorflow.org/install/source#linux)\n\n数据来源于[官网](https://www.tensorflow.org/install/source#linux)，截止2020年4月11号，`tensorflow-2.1.0`版本需要配合`CUDA 10.1`和`cuDNN 7.6`配合使用。\n\n![Tensorflow版本](https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png)\n\n#### PyTorch建议[配置](https://pytorch.org/get-started/previous-versions/)\n\n数据来源于[官网](https://pytorch.org/get-started/previous-versions/)，截止2020年4月11号，`PyTorch 1.4`版本需要配合`CUDA 10.1`或`CUDA9.2`配合使用。\n\n![PyTorch](https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png)\n\n#### NVIDIA驱动选型\n\n在Linux系统下，[NVIDIA驱动型号](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html)根据需求来安装，`CUDA10.2`需求`NVIDIA >= 440.33`，所以NVIDIA驱动型号至少是`440.33`。\n\n![CUDA版本与NVIDIA驱动之间的关系](https://pic.downk.cc/item/5e913b69504f4bcb04574a5e.png)\n\n### NVIDIA驱动安装（CentOS、Ubuntu）*\n\n通过前面的分析，目前Tensorflow 最新版本2.1.0需求CUDA 10.1，索性安装CUDA 10.2所需求的最低要求的NVIDIA版本`440.33`。\n\n另外NVIDIA驱动不要轻易更新，在CentOS下，尤其是不到万不得已的地步，千万千万不要运行`sudo yum update`指令！Ubuntu对应的指令是`sudo apt-get update`。\n\n**本小节主要介绍在CentOS 7.7系统下的驱动安装**，顺便介绍在Ubuntu系统的驱动检索及安装方法。\n\nNVIDIA驱动安装完成后，需要到现场重启服务器。\n\n#### 关闭桌面服务\n\n如果在现场安装NVIDIA驱动，首先要按住`Alt + Ctrl + F1`进入终端（F1到F6都行），输入账户密码获取root权限\n\n```bash\nsudo su\n```\n\n然后关闭桌面模式\n\n```bash\nsudo service lightdm stop\n```\n\n然后通过`Ctrl + Alt + F7`发现已无法成功返回图形化模式，说明桌面服务已成功关闭，注意此步对接下来的 NVIDIA 显卡驱动安装尤为重要，必需确保桌面服务已关闭。\n\n驱动安装完成后，按住`Alt + Ctrl + F7`可开启桌面模式。\n\n#### 系统检查\n\n查看支持CUDA的GPU列表：https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements，根据[官网](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions)建议，**安装NVIDIA驱动和CUDA之前需要查看系统是否满足要求**：\n\n1. 验证系统是否具有支持CUDA的GPU\n\n2. 确认系统是受支持的Linux发行版本\n3. 验证系统是否有GCC编译环境\n\n4. 验证系统是否安装了正确的内核头文件和开发包\n\n一步一步检测\n\n1. **验证系统是否具有支持CUDA的GPU**\n\n   ```bash\n   lspci | grep -i nvidia\n   ```\n\n   输出\n\n   ```bash\n   04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)\n   04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)\n   ```\n\n   服务器上的显卡是GTX 1080，支持CUDA\n\n2. **确认系统是受支持的Linux发行版本**\n\n   CUDA开发工具仅在某些特定的Linux发行版上受支持，运行命令\n\n   ```bash\n   uname -m && cat /etc/*release\n   ```\n\n   输出信息\n\n   ```bash\n   x86_64\n   CentOS Linux release 7.7.1908 (Core)\n   NAME=\"CentOS Linux\"\n   VERSION=\"7 (Core)\"\n   ID=\"centos\"\n   ID_LIKE=\"rhel fedora\"\n   VERSION_ID=\"7\"\n   PRETTY_NAME=\"CentOS Linux 7 (Core)\"\n   ANSI_COLOR=\"0;31\"\n   CPE_NAME=\"cpe:/o:centos:centos:7\"\n   HOME_URL=\"https://www.centos.org/\"\n   BUG_REPORT_URL=\"https://bugs.centos.org/\"\n   \n   CENTOS_MANTISBT_PROJECT=\"CentOS-7\"\n   CENTOS_MANTISBT_PROJECT_VERSION=\"7\"\n   REDHAT_SUPPORT_PRODUCT=\"centos\"\n   REDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n   \n   CentOS Linux release 7.7.1908 (Core)\n   CentOS Linux release 7.7.1908 (Core)\n   ```\n\n   `x86_64`表示当前系统是64位系统，运行的Linux发行版是CentOS7.7版本。\n\n3. **验证系统是否有GCC编译环境**\n\n   ```bash\n   gcc --version\n   ```\n\n   一般情况下都会有。\n\n4. **验证系统是否安装了正确的内核头文件和开发包**\n\n   运行以下命令找到系统正在运行的内核版本：\n\n   ```bash\n   uname -r\n   ```\n\n   当前运行的内核的头文件和开发包可以通过以下方式安装：\n\n   ```bash\n   sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n   ```\n\n#### 禁用第三方开源驱动nouveau\n\nNouveau是由第三方为NVIDIA显卡开发的一个开源3D驱动，不过没有得到NVIDIA的认可与支持。Nouveau让Linux更容易的应对各种复杂的NVIDIA显卡环境，让用户安装完系统即可进入桌面并且有不错的显示效果，所以，很多Linux发行版默认集成了Nouveau驱动，在遇到NVIDIA显卡时默认安装。企业版的Linux更是如此，几乎所有支持图形界面的企业Linux发行版都将Nouveau收入其中。不过对于个人桌面用户来说，处于成长阶段的Nouveau并不完美，与企业版不一样，个人用户除了想让正常显示图形界面外很多时候还需要一些3D特效，Nouveau多数时候并不能完成，而用户在安装NVIDIA官方私有驱动的时候Nouveau又成为了阻碍，如果不干掉Nouveau，NVIDIA驱动安装时总是报错。\n\n![](https://pic.downk.cc/item/5e93446cc2a9a83be5684112.jpg)\n\n**NVIDIA驱动和nouveau驱动最好二选一**，一般情况下，**深度学习环境配置需禁用nouveau驱动**，查看nouveau驱动信息：\n\n```bash\nlsmod |grep nouveau\n```\n\n若有输出，需要禁止该nvidia第三方驱动，若无，OK，**Linux哲学之一：没有消息就是最好的消息。**可忽略该步骤。\n\n**禁用nouveau驱动，需要配置相关文件**\n\n```bash\nsudo nvim /etc/modprobe.d/blacklist-nouveau.conf\n```\n\n[nvim](https://github.com/neovim/neovim)，即NeoVIm，在生态和功能上比`vim`要领先一些，在CentOS系统下的[nvim的安装](https://github.com/neovim/neovim/wiki/Installing-Neovim#centos-7--rhel-7)命令为：\n\n```bash\nsudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install -y neovim python3-neovim\n```\n\n没有安装[nvim](https://github.com/neovim/neovim)可以用`vim`来代替（`sudo yum install vim`）。\n\n文件可能没有任何内容，在打开的文件中，进入Vim的**插入模式**（`i`键），**写入命令：**\n\n```bash\nblacklist nouveau  \noptions nouveau modeset=0\n```\n\n按下`Eac`键进入普通模式，输入命令`:wq`保存并退出文件。\n\n更新initramfs映像使禁用 `nouveau` 生效：\n\n```bash\nsudo update-initramfs -u\n```\n\n输入\n\n```bash\nlsmod |grep nouveau\n```\n\n若无输出，则表示禁用nouveau生效了。\n\n当然也可以重启系统使禁用 `nouveau` 真正生效，但**重启系统有可能会出现黑屏，原因是禁用了集成显卡，系统没有显卡驱动。**\n\n#### 卸载原有驱动\n\n查看当前系统驱动：\n\n```bash\nnvidia-smi\n```\n\n或者\n\n```\nls /usr/src\n```\n\n或者\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\n或者\n\n```bash\nlsmod | grep nvidia\n```\n\n总之，可以得知当前NVIDIA版本信息（就算使用了`sudo yum update`），使用上述四条命令之一也可以查到，如果真的真的忘记了，跳过这一步吧……\n\n假设知道了目前的NVIDIA驱动型号，假设为390.77，去[该网站](https://download.nvidia.com/XFree86/Linux-x86_64/)上下载对应的驱动文件\n\n![](https://pic.downk.cc/item/5e9340d4c2a9a83be565cc63.png)\n\n类似于`NVIDIA-Linux-x86_64-390.77.run`这种文件，右键**复制链接**，使用**wget**工具下载\n\n```bash\ncd ~    // 回到主目录\nwget -c https://download.nvidia.com/XFree86/Linux-x86_64/390.77/NVIDIA-Linux-x86_64-390.77.run\n```\n\n然后运行命令进行卸载\n\n```bash\nsudo sh NVIDIA-Linux-x86_64-390.77.run --uninstall\n```\n\n#### NVIDIA官方驱动安装\n\n**确保已经关闭桌面服务。**\n\nNVIDIA驱动分离线安装和在线安装，离线安装就是在[官网](https://www.nvidia.com/Download/index.aspx?lang=cn)下载对应的驱动，再进行安装，为了方便起见，采用**在线**的方法在**CentOS 7.7**系统进行安装。\n\n**添加 ELRepo 源：**\n\n```bash\nsudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nsudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n```\n\n**查看显卡检测程序：**\n\n```bash\nyum info nvidia-detect    \n```\n\n如果安装，跳过下一步，否则\n\n```bash\nsudo yum install nvidia-detect\n```\n\n**检测显卡型号，查看对应的驱动**\n\n```bash\nnvidia-detect -v\n```\n\n输出\n\n```bash\nProbing for supported NVIDIA devices...\n[102b:0534] Matrox Electronics Systems Ltd. G200eR2\n[10de:1b80] NVIDIA Corporation GP104 [GeForce GTX 1080]\nThis device requires the current 440.64 NVIDIA driver kmod-nvidia\n```\n\n系统告诉我们，显示型号是GTX 1080，对应的NVIDIA驱动型号应为`440.64`，大于`440.33`，满足要求，继续安装，否则去[官网](https://www.nvidia.com/Download/index.aspx?lang=cn)下载对应的驱动手动离线安装。\n\n输入命令进行安装：\n\n```bash\nsudo -i    // 获取root权限\nyum install kmod-nvidia    // 或者这条命令yum install nvidia-x11-drv\n```\n\n安装完成后，或者输出下面的信息，可能要重启系统……\n\n```bash\n软件包 nvidia-x11-drv-440.82-1.el7_8.elrepo.x86_64 已安装并且是最新版本\n```\n\n重启系统\n\n```bash\nsudo reboot\n```\n\n安装完成，输入\n\n```bash\nnvidia-smi\n```\n\n看看显卡信息。\n\n- 如果是**Ubuntu系统**，可使用下列方法进行安装\n\n  ```bash\n  sudo apt-get purge nvidia*\t\t\t\t\t// 卸载之前的NVIDIA驱动\n  sudo add-apt-repository ppa:graphics-drivers/ppa\t// 添加源\n  sudo apt-get update\n  sudo apt-get install nvidia-440\t\t\t\t// 安装NVIDIA-440系列驱动\n  ```\n\n  或者\n\n  ```bash\n  sudo apt-get update\n  sudo ubuntu-drivers devices    // 或者运行apt-cache search nvidia*\n  // 出现建议的NVIDIA驱动型号xxx\n  sudo apt-get install nvidia-xxx\n  ```\n\n**重启服务器**。\n\n#### 查看当前NVIDIA驱动版本\n\n使用命令\n\n```bash\nnvidia-smi\n```\n\n或者\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\n安装过程中可能会遇到比较多的问题，**请耐心解决**。\n\n#### 开启桌面服务\n\nNVIDIA驱动安装完成后，可开启桌面服务\n\n```bash\nsudo service lightdm stop\n```\n\n然后通过`Ctrl + Alt + F7`可返回图形化模式。\n\n### CUDA安装*\n\n在此介绍CUDA-9.0、CUDA-9.1、CUDA-9.2、CUDA-10.0、CUDA-10.1、CUDA-10.2共6种CUDA文件的安装（截止2020年4月11号），基本涵盖了当前流行深度学习框架的需求。\n\n需要注意的是，如果你是个人用户，就是自己在电脑上装了Linux系统进行深度学习环境的设置，可以详细阅读这一小节的内容，这一小节主要介绍的是一般情况下的CUDA配置，因为如果是自己的系统，可以随意更改CUDA的**符号链接**，但是在服务器上，大部分用户都是普通用户，**无root权限**，切换CUDA时很麻烦，不切换CUDA，深度学习环境的配置就比较受限，所以在服务器环境下，**普通用户如何灵活切换CUDA和cuDNN版本呢？有两种方法：**\n\n- 使用[Environment Modules](https://modules.readthedocs.io/en/latest/)来管理CUDA；\n- 使用[Anaconda](https://anaconda.org/)来独立管理[CUDA和cuDNN](#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN)；\n\n我建议采用Anaconda来管理，理由很简单：操作方便上手快。具体请[跳转](#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN)。下面介绍正常情况下的CUDA和cuDNN安装方法。\n\n**推荐下载.run的CUDA文件格式。**\n\n在`~/NVIDIA/CUDA`目录下依次建立`cuda-9.0`、`cuda-9.1、`、`cuda-9.2`、`cuda-10.0`、`cuda-10.1`、`cuda-10.2`6个目录，目录下是对应CUDA版本的安装文件，文件的后缀名为`.run`，不管是基础版本还是补丁，安装方法都是一模一样的。\n\n**CUDA的安装，建议[关闭桌面服务](#关闭桌面服务)，通过`Alt + Ctrl + F1 `进入终端。**\n\n#### CUDA文件下载\n\nCUDA的官网下载链接为https://developer.nvidia.com/cuda-toolkit-archive，CUDA的下载不需要注册，cuDNN需要。以CUDA9.2下载为例，依次按图红色框框进行选择，需要注意的是图中的**黑色框框**，那个是当前CUDA版本的补丁，也要下载，安装方法与**基础版本一致**。\n\n![cuda9.2](https://pic.downk.cc/item/5e9144da504f4bcb045fe855.png)\n\n正常方法是点击Download下载，下载后还要拖入到服务器种比较麻烦，在这里给出直接将文件下载到服务器的方法。\n\n创建不同CUDA版本的目录\n\n```bash\ncd ~\nmkdir NVIDIA\ncd NVIDIA\nmkdir CUDA\ncd CUDA\nmkdir cuda-9.{0..2}     // 批量建立文件夹 cuda-9.0、cuda-9.1、cuda-9.2\nmkdir cuda-10.{0..2}    // 批量建立文件夹 cuda-10.0、cuda-10.1、cuda-10.2\n```\n\n然后依次在对应目录下下载各个版本的**CUDA基础安装包及其补丁**（时间截止到2020.04.11）\n\n为了直观起见，使用比较基础的命令\n\n##### 下载[CUDA 9.0](https://developer.nvidia.com/cuda-90-download-archive)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-9.0\n\n// 下载基础cuda9.0安装包\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run -O cuda_9.0.176_384.81_linux.run\n\n// 下载cuda9.0的4个补丁\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run -O cuda_9.0.176.1_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run -O cuda_9.0.176.2_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda_9.0.176.3_linux-run -O cuda_9.0.176.3_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/4/cuda_9.0.176.4_linux-run -O cuda_9.0.176.4_linux.run\n```\n\n##### 下载[CUDA 9.1](https://developer.nvidia.com/cuda-91-download-archive-new)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-9.1\n\n// 下载基础cuda9.1安装包\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux -O cuda_9.1.85_387.26_linux.run\n\n// 下载cuda9.1的3个补丁\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/1/cuda_9.1.85.1_linux -O cuda_9.1.85.1_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/2/cuda_9.1.85.2_linux -O cuda_9.1.85.2_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/3/cuda_9.1.85.3_linux -O cuda_9.1.85.3_linux.run\n```\n\n##### 下载[CUDA 9.2](https://developer.nvidia.com/cuda-92-download-archive)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-9.2\n\n// 下载基础cuda9.2安装包\nwget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/local_installers/cuda_9.2.148_396.37_linux -O cuda_9.2.148_396.37_linux.run\n\n// 下载cuda9.2的1个补丁\nwget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/patches/1/cuda_9.2.148.1_linux -O cuda_9.2.148.1_linux.run\n```\n\n##### 下载[CUDA 10.0](https://developer.nvidia.com/cuda-10.0-download-archive)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-10.0\n\n// 下载基础cuda10.0安装包\nwget -c https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux -O cuda_10.0.130_410.48_linux.run\n\n// 下载cuda10.0的1个补丁\nwget -c http://developer.download.nvidia.com/compute/cuda/10.0/Prod/patches/1/cuda_10.0.130.1_linux.run\n```\n\n##### 下载[CUDA 10.1 update2](https://developer.nvidia.com/cuda-10.1-download-archive-base)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-10.1\n\n// 下载基础cuda10.1安装包，无补丁\nwget -c http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run\n```\n\n##### 下载[CUDA 10.2](https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&target_distro=CentOS&target_version=7&target_type=runfilelocal)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-10.2\n\n// 下载基础cuda10.2安装包，无补丁\nwget -c http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run\n```\n\n#### 安装CUDA\n\n以`cuda_9.1.85_387.26_linux.run`文件为例说明怎么安装的，所有的文件都是一样的安装方法（**CUDA 10.1以及后续版本，安装界面有所不一样，请仔细阅读**）。\n\n##### CUDA 10.0及其之前的版本的安装方法\n\nCUDA默认安装位置：`/usr/local`\n\n先建立一个名为**CUDAInstall**的[tmux](https://github.com/tmux/tmux)窗口，这是为了在安装的时候，防止终端出现紧急情况，影响安装，这个习惯可以让你减少不必要的损失，运行\n\n```bash\ntmux new -s CUDAInstall     \nsudo sh cuda_9.1.85_387.26_linux.run\n```\n\n如果遇到文件权限问题，可以赋予CUDA文件可执行权限：\n\n```bash\nsudo chmod a+x cuda_9.1.85_387.26_linux.run\n```\n\n运行CUDA安装文件后，紧接着在屏幕上出现了很长的说明，按住**空格**键至进度100%，然后按照下面的提示操作即可，需要注意的是，在提示\n\n```bash\nInstall NVIDIA Accelerated Graphics Driver for Linux-x86_64 387.26?\n(y)es/(n)o/(q)uit: \n```\n\n意思是：**安装NVIDIA驱动吗？**选择`n`，NVIDIA驱动我们单独安装。\n\n安装过程中每一步的提示如下，请仔细阅读**翻译**，尤其是符号链接那部分：\n\n```bash\n-----------------\n// 接受之前阅读的说明吗？必须接受啊\nDo you accept the previously read EULA?\naccept/decline/quit: accept\n\n// 安装NVIDIA驱动吗？NVIDIA驱动我们单独安装\nInstall NVIDIA Accelerated Graphics Driver for Linux-x86_64 387.26?\n(y)es/(n)o/(q)uit: n\n\n// 安装CUDA9.1的工具集吗？安装\nInstall the CUDA 9.1 Toolkit?\n(y)es/(n)o/(q)uit: y\n\n// CUDA的默认路径，按Enter键继续\nEnter Toolkit Location\n [ default is /usr/local/cuda-9.1 ]: \n \n// 要为CUDA9.1建立符号链接吗？如果该CUDA是你想默认的，输入y；\n// 如果不是但是以后想调用，输入n\n// 这个可以在安装之后修改\nDo you want to install a symbolic link at /usr/local/cuda?\n(y)es/(n)o/(q)uit:y\n\n// CUDA 9.1的示例，可以安装，方便测试\nInstall the CUDA 9.1 Samples?\n(y)es/(n)o/(q)uit: y\n\n// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认\nEnter CUDA Samples Location\n [ default is /home/unix ]: \n```\n\n然后开始安装，终端上会显示\n\n```\nInstalling the CUDA Toolkit in /usr/local/cuda-9.1 ...\n```\n\n表示`CUDA 9.1`会被安装到目录`/usr/local/cuda-9.1`文件夹下，大约1分钟左右，终端显示\n\n```bash\nInstalling the CUDA Samples in /home/unix ...\nCopying samples to /home/unix/NVIDIA_CUDA-9.1_Samples now...\nFinished copying samples.\n\n===========\n= Summary =\n===========\n\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-9.1\nSamples:  Installed in /home/unix\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-9.1/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-9.1/lib64, or, add /usr/local/cuda-9.1/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.1/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.1/doc/pdf for detailed information on setting up CUDA.\n\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required for CUDA 9.1 functionality to work.\nTo install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:\n    sudo <CudaInstaller>.run -silent -driver\n\nLogfile is /tmp/cuda_install_89370.log\n```\n\n终端输出的内容非常清楚，包含了这么几个意思：\n\n- 关于NVIDIA驱动：NVIDIA驱动已经安装但是没有被检测出来，重启系统就好了，因为服务器在学校，必须到现场才能重启成功；\n\n- 关于路径：CUDA 9.1被安装在`/usr/local/cuda-9.1`目录下\n\n- 关于卸载CUDA：CUDA的卸载脚本在/usr/local/cuda-9.1/bin里\n\n  ```bash\n  cd /usr/local/\n  sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl\n  ```\n\n- 安装CUDA的补丁包\n\n大部分CUDA版本都有补丁包，补丁的安装比较容易，以CUDA 9.1的补丁1`cuda_9.1.85.1_linux.run`为例说明\n\n```bash\nsudo sh cuda_9.1.85.1_linux.run\n```\n\n屏幕上也会出现很长的说明，按住**空格**键至进度100%，出现了一些选项\n\n```\n-----------------\nDo you accept the previously read EULA?\naccept/decline/quit:  accept\n\nEnter CUDA Toolkit installation directory\n [ default is /usr/local/cuda-9.1 ]: \n```\n\n安装位置默认就行，按住Enter后，秒安装\n\n```bash\nInstallation complete!\nInstallation directory: /usr/local/cuda-9.1\n```\n\n按照该方法，安装CUDA 9.1其它两个补丁包。\n\n至此CUDA基础安装包及其补丁包的方法介绍完了，**按照此方法，依次安装其它CUDA 9.0 ~ CUDA10.0版本的基础安装包及其补丁。**\n\n##### CUDA 10.1及其之后的版本的安装方法\n\n从CUDA 10.1起，安装界面有所不同，比如安装**CUDA 10.1**版本`cuda_10.1.243_418.87.00_linux.run`\n\n```bash\nsudo sh cuda_10.1.243_418.87.00_linux.run\n```\n\n终端会出现一个框框\n\n![](https://pic.downk.cc/item/5e919104504f4bcb04a646b2.png)\n\n输入**accept**后，出现\n\n![CUDA 10.1](https://pic.downk.cc/item/5e918ea5504f4bcb04a3d678.png)\n\n注意，不要选择**Driver**！**如图所选**，移动**下键**至**Install**处，Enter一下立即安装，出现界面\n\n![](https://pic.downk.cc/item/5e918f1e504f4bcb04a443d9.png)\n\n选择**No**，安装过程中没有什么反应，耐心等待一会儿，终端打印出信息\n\n```bash\n===========\n= Summary =\n===========\n\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-10.1/\nSamples:  Installed in /home/unix/\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-10.1/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-10.1/lib64, or, add /usr/local/cuda-10.1/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.1/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.1/doc/pdf for detailed information on setting up CUDA.\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 418.00 is required for CUDA 10.1 functionality to work.\nTo install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:\n    sudo <CudaInstaller>.run --silent --driver\n\nLogfile is /var/log/cuda-installer.log\n```\n\n与之前的信息差不多，具体请看之前的描述。CUDA 10.2安装方法与CUDA 10.1类似。\n\n#### 卸载CUDA\n\n- CUDA 10.0及其之前版本\n\n  以CUDA 9.1为例，CUDA 9.1的卸载脚本在/usr/local/cuda-9.1/bin里\n\n  ```bash\n  cd /usr/local/\n  sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl\n  ```\n\n- CUDA 10.1及其之后的版本\n\n  卸载CUDA 10.1和10.2有所不同，需要运行\n\n  ```bash\n  cd /usr/local/\n  sudo ./cuda-10.1/bin/cuda-uninstaller\n  ```\n\n#### 查看当前CUDA版本的符号链接\n\n查看当前cuda对应的版本（符号链接）\n\n```bash\ncd /usr/local\nstat cuda\n```\n\n输出\n\n```bash\n  文件：\"cuda\" -> \"/usr/local/cuda-9.0\"\n  大小：19        \t块：0          IO 块：4096   符号链接\n设备：fd00h/64768d\tInode：20341519    硬链接：1\n权限：(0777/lrwxrwxrwx)  Uid：(    0/    root)   Gid：(    0/    root)\n环境：unconfined_u:object_r:usr_t:s0\n最近访问：2020-04-10 14:43:19.316455577 +0800\n最近更改：2019-09-26 22:20:21.054175738 +0800\n最近改动：2019-09-26 22:20:21.054175738 +0800\n创建时间：-\n\n```\n\n之前为cuda-9.0建立了**符号链接**，所以cuda指向cuda-9.0，因为系统是根据这个**符号链接**来识别当前cuda版本，所以更改其指向即可切换cuda版本。\n\n#### CUDA环境变量配置\n\n建议在bash环境下运行，运行\n\n```bash\nbash\n```\n\n进入bash shell。\n\n为了管理方便，管理员可以在文件`/etc/profile`里全局配置CUDA环境变量，如果是个人Linux系统或者普通用户，在文件`~/.bashrc`下配置CUDA环境变量。\n\n- **全局添加CUDA环境变量（管理员操作）**\n\n  这种修改方式使CUDA配置应用到每位普通用户的shell里\n\n  打开全局环境变量\n\n  ```bash\n  sudo nvim /etc/profile    // 为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. \n  ```\n\n  然后在打开的文件里的末尾新增四条命令，具体操作是：按住大写`G`键跳转到文本的最后一行行首，再按住`$`，也就是‘shift + 4’键跳转到最后一行的最后一个字符，按住`i`键进入插入模式，使光标右移一个字符，再回车换行后，添加以下变量\n\n  ```bash\n  # CUDA\n  \n  # cuda -> cuda9.1\n  export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}\n  # include -> targets/x86_64-linux/include\n  export CPATH=/usr/local/cuda/include:$CPATH \n  # lib64 -> targets/x86_64-linux/lib\n  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda/lib64 \n  # lib64 -> targets/x86_64-linux/lib\n  # export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \n  export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n  ```\n\n  更新配置，使配置文件生效：\n\n  ```bash\n  source /etc/profile\n  ```\n\n- **普通用户添加CUDA环境变量**\n\n  只对当前shell有效\n\n  ```\n  nvim ~/.bashrc\n  ```\n\n  同样的操作，在文件末尾新增四条命令\n\n  ```bash\n  # CUDA\n  \n  # cuda -> cuda9.1\n  export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}\n  # include -> targets/x86_64-linux/include\n  export CPATH=/usr/local/cuda/include:$CPATH \n  # lib64 -> targets/x86_64-linux/lib\n  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda/lib64 \n  # lib64 -> targets/x86_64-linux/lib\n  # export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \n  export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n  ```\n\n  更新文件\n\n  ```bash\n  source ~/.bashrc\n  ```\n\n#### 验证CUDA安装\n\n在安装CUDA时，比如在安装CUDA 9.1时，有这么一句提示\n\n```bash\n// CUDA 9.1的示例，可以安装，方便测试\nInstall the CUDA 9.1 Samples?\n(y)es/(n)o/(q)uit: y\n\n// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认\nEnter CUDA Samples Location\n [ default is /home/unix ]: \n```\n\n为了验证CUDA 9.1是否被安装完成，选择安装示例，默认的安装位置是**根目录**，进入根目录\n\n```bash\ncd ~\ncd NVIDIA_CUDA-9.1_Samples/1_Utilities/deviceQuery    // 选择其中一个示例进行测试\nmake\n./deviceQuery\n```\n\n如果成功，会显示`Result = PASS`，否则根据错误提示解决问题。\n\n#### 查看CUDA当前版本\n\n```bash\nnvcc --version\n```\n\n或者\n\n```bash\ncat /usr/local/cuda/version.txt\n```\n\n如果是在终端命令行下安装的CUDA，则需要安装成功后开启桌面服务：\n\n```\nsudo service lightdm start\n```\n\n然后再按通过`Ctrl + Alt + F7`可返回桌面模式。\n\n### cuDNN安装*\n\n首先登录[官网](https://developer.nvidia.com/rdp/cuDNN-archive)进行注册，然后才能选择对应版本的cuDNN进行下载。以cuDNN7.0.5为例进行说明，其它版本与此类似。\n\n按照[官方指导教程](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux)进行cuDNN配置。\n\n#### cuDNN文件下载\n\n首先要确定要下载的cuDNN版本，**仔细看清楚其对应的CUDA版本**，以cuDNN对应的CUDA 9.0为例，推荐下载**cuDNN v7.0.5 Library for Linux**类似的压缩包。\n\n![](https://pic.downk.cc/item/5e9518fcc2a9a83be5720e10.png)\n\n下载完成后，文件为cudnn-9.0-linux-x64-v7.solitairetheme8，这其实是一个压缩包，解压方法与`.tgz`格式的文件一致。建立cuDNN文件夹，\n\n```bash\nmkdir ~/NVIDIA/cuDNN\n```\n\n将其拖入到服务器中（使用FileZilla、Xftp进行文件传输）里的NVIDIA文件下的cuDNN文件夹下。\n\n#### cuDNN文件解压\n\n解压cudnn-9.0-linux-x64-v7.solitairetheme8\n\n```bash\ntar -xzvf cudnn-9.0-linux-x64-v7.solitairetheme8\n```\n\n解压后的文件都在名为`cuda`的文件夹下，如图\n\n![](https://pic.downk.cc/item/5e958245c2a9a83be5b9b2a0.png)\n\n`cudnn-9.0-linux-x64-v7.solitairetheme8`的文件组成如下\n\n![](https://pic.downk.cc/item/5e958783c2a9a83be5bd2a6a.jpg)\n\n查看`linudnn.so`、`libcudnn.so.7`、`libcudnn.so.7.0.5`的关系\n\n```bash\nll ~/NVIDIA/cuDNN/lib64\n```\n\n输出\n\n![](https://pic.downk.cc/item/5e95ada0c2a9a83be5d76131.png)\n\n说明`linudnn.so`、`libcudnn.so.7`、`libcudnn.so.7.0.5`其实是同一个文件的不同扩展名。\n\n#### cuDNN配置\n\n解压文件在`~/NVIDIA/cuDNN/cuda`\n\n```bash\n# 复制头文件\ncd ~/NVIDIA/cuDNN/\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include \n\n# 复制动态链接库\ncd ~/NVIDIA/cuDNN/\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n\n配置权限，使所有用户具有可读权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h\nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n\n#### 查看cuDNN版本\n\n```bash\ncat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2\n```\n\n### Anaconda3安装\n\n####  安装Anaconda3\n\n在[官方repo](https://repo.anaconda.com/archive/)下载***Anaconda***安装包（`.sh`后缀名），如果下载速度过慢，访问[国内镜像源](https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/)下载，右键复制对应Anaconda包的链接，使用`wget`指令下载，注意下载时注意该Anaconda包是基于Python 3.6还是Python 3.7的，**推荐Python 3.6**，下载*Anaconda3-5.2.0-Linux-x86_64.sh*文件\n\n```bash\ncd ~\nwget -c https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh\n```\n\n*Anaconda3-5.2.0-Linux-x86_64.sh*这是 **_python3.6_** 版本的Anaconda安装包，继续运行\n\n```bash\nbash Anaconda3-5.2.0-Linux-x86_64.sh\n```\n\n按`Enter`键继续，出现Anaconda版本的一些说明，此时按一下`space`(空格)键，有如下提示，在`[no] >>>` 后面输入`yes`，如下所示：\n\n```bash\nDo you accept the license terms? [yes|no]\n[no] >>> yes\n```\n\n紧接着有提示\n\n```bash\nAnaconda3 will now be installed into this location:\n/home/test/anaconda3\n\n  - Press ENTER to confirm the location\n  - Press CTRL-C to abort the installation\n  - Or specify a different location below\n\n[/home/test/anaconda3] >>>\n```\n\n按下`Enter`键即可开始安装，安装完成后，提示如下\n\n```bash\ninstallation finished.\nDo you wish the installer to prepend the Anaconda3 install location\nto PATH in your /home/test/.bashrc ? [yes|no]\n[no] >>> yes\n```\n\n在`[no] >>>` 后面输入`yes`后出现Anaconda安装成功的消息，此时出现*是否安装Microsoft VSCode*的消息，输入`no`即可。\n\npython3.6版本的Anaconda安装完成，此时在终端输入`conda`，会提示`conda:未找到命令`，不要慌，反手输入\n\n```bash\nsource ~/.bashrc\n```\n\n刷新环境，再输入`conda`即有消息提示，表明conda安装成功。\n\n#### 配置Anaconda国内开源镜像\n\n显示有关当前conda安装的信息：\n\n```bash\nconda info\n```\n\n输出\n\n```bash\n     active environment : None\n       user config file : /home/adoredee/.condarc\n populated config files : \n          conda version : 4.8.3\n    conda-build version : not installed\n         python version : 3.7.0.final.0\n       virtual packages : __glibc=2.17\n       base environment : /home/adoredee/anaconda3  (writable)\n           channel URLs : https://repo.anaconda.com/pkgs/main/linux-64\n                          https://repo.anaconda.com/pkgs/main/noarch\n                          https://repo.anaconda.com/pkgs/r/linux-64\n                          https://repo.anaconda.com/pkgs/r/noarch\n          package cache : /home/adoredee/anaconda3/pkgs\n                          /home/adoredee/.conda/pkgs\n       envs directories : /home/adoredee/anaconda3/envs\n                          /home/adoredee/.conda/envs\n               platform : linux-64\n             user-agent : conda/4.8.3 requests/2.23.0 CPython/3.7.0 Linux/3.10.0-957.el7.x86_64 centos/7.7.1908 glibc/2.17\n                UID:GID : 1000:1000\n             netrc file : None\n           offline mode : False\n```\n\n可以看到在conda安装好之后，默认的镜像是官方的（**channel URLs**），由于官网的镜像在境外，国内访问较慢，配置国内的镜像能够加快访问的速度。\n\n上海交通大学镜像源：https://mirrors.sjtug.sjtu.edu.cn/anaconda/\n\n清华大学镜像源：https://mirrors.tuna.tsinghua.edu.cn/anaconda/\n\n**创建配置文件：**\n\n```bash\nnvim ~/.condarc\n```\n\n如果使用[上海交通大学镜像源](https://mirrors.sjtug.sjtu.edu.cn/#/)，将以下配置写入`~/.condarc`：\n\n```bash\nchannels:\n  - defaults\nshow_channel_urls: true\nchannel_alias: https://anaconda.mirrors.sjtug.sjtu.edu.cn\ndefault_channels:\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/free\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/mro\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/msys2\ncustom_channels:\n  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  bioconda: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  menpo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  soumith: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  viscid-hub: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  atztogo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n```\n\n如果使用[清华大学镜像源](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)，将以下配置写入`~/.bashrc`：\n\n```bash\nchannels:\n  - defaults\nshow_channel_urls: true\nchannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n```\n\n**清除索引缓存**，保证用的是镜像站提供的索引：\n\n```\nconda clean -i \n```\n\n#### 卸载Anaconda3\n\n按照[官方卸载指导](https://docs.anaconda.com/anaconda/install/uninstall/)，Anaconda3安装在`~/anaconda3`文件夹下，首先删除目录\n\n```bash\ncd ~\nrm -rf anaconda3\n```\n\n清理`.bashrc`里的Anaconda环境变量\n\n```bash\nnvim ~/.bashrc\nsource ~/.bashrc\n```\n\n清理隐藏文件夹\n\n```bash\ncd ~\nrm .condarc\nrm -rf ~/.condarc ~/.conda ~/.continuum \n```\n\n#### conda常用命令\n\n##### 关于环境\n\n**创建一个名为myenv的环境**\n\n```bash\nconda create -n myenv pip python=3.6\n```\n\n**激活myenv环境**\n\n```bash\nsource activate myenv\n```\n\n**退出环境**\n\n```bash\nsource deactivate myenv\n```\n\n**删除一个已有的环境**\n\n```bash\nconda deactivate myenv    # for Windows\nsource deactivate myenv    # for Linux & Mac\n```\n\n**查看Anaconda环境**\n\n```bash\nconda info\n```\n\n**查看已安装的虚拟环境**\n\n```bash\nconda info -e\n```\n\n或者\n\n```bash\nconda envs\n```\n\n**删除虚拟环境**\n\n输出虚拟环境myenv\n\n```bash\nconda remove -n myenv --all\n```\n\n##### 包管理\n\n**安装**\n\n对于Python的包，尽可能使用`pip`安装\n\n```bash\npip install packages\n```\n\n`pip`安装不了的，使用conda\n\n```bash\nconda install packages\t\t\t# 安装最新版本\nconda install packsges==xxx\t\t# 安装指定版本\n```\n\n**查看当前环境下已安装的包**\n\npython环境下的包\n\n```bash\npip list\n```\n\nconda环境下的包\n\n```bash\nconda list\n```\n\n查看某一conda环境下的包，比如查看myenv环境下的安装的包：\n\n```bash\nconda list -n myenv\n```\n\n**查找package信息**\n\n**不同镜像源的包的信息不一样，尽量使用`pkgs/main`channels的包**\n\n```bash\nconda search packages\n```\n\n**升级conda**\n\n```bash\nconda update conda\n```\n\n**卸载某一个环境下的包**\n\n在myenv虚拟环境下卸载某一packsges\n\n```bash\nconda remove -n myenv packages\n```\n\n### pip安装\n\npip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。目前如果在 [python.org](https://www.python.org/) 下载最新版本的安装包，则是已经自带了该工具。\n\nPython 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。\n\npip 官网：https://pypi.org/project/pip/\n\n#### 安装\n\n在终端利用SSH登录到服务器系统(CentOS 7.6)，由于**普通用户**无法使用`sudo`，如果没有安装python，则需**手动安装pip**，在终端中运行\n\n```bash\nwget https://bootstrap.pypa.io/get-pip.py\npython3 get-pip.py --user\n```\n\n**注意**:参数`--user`一定要记得使用，否则会提示权限不足。\n\n安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量\n\n```bash\nexport PATH=~/.local/bin:$PATH\n```\n\n此时已在非root用户环境中安装好通用的Python包管理工具`pip`。\n\n如果系统安装了Python且Python 2.7.9 + 或 Python 3.4+ 以上版本，**自带 pip 工具**。\n\n#### 更换国内镜像源\n\n为了加快下载速度，更换到[国内的镜像源](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/)：\n\n```bash\npip install pip -U\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n#### 常用命令\n\n**显示版本和路径**\n\n```bash\npip --version\n```\n\n**获取帮助**\n\n```bash\npip --help\n```\n\n**升级 pip**\n\n```bash\npip install -U pip\n```\n\n> 如果这个升级命令出现问题 ，可以使用以下命令：\n>\n> ```\n> sudo easy_install --upgrade pip\n> ```\n\n**安装包**\n\n```\npip install SomePackage              # 最新版本\npip install SomePackage==1.0.4       # 指定版本\npip install 'SomePackage>=1.0.4'     # 最小版本\n```\n\n比如要安装 Django。用以下的一条命令就可以，方便快捷。\n\n```bash\npip install Django==1.7\n```\n\n**升级包**\n\n```bash\npip install --upgrade SomePackage\n```\n\n升级指定的包，通过使用==, >=, <=, >, < 来指定一个版本号。\n\n**卸载包**\n\n```bash\npip uninstall SomePackage\n```\n\n**搜索包**\n\n```bash\npip search SomePackage\n```\n\n**显示安装包信息**\n\n```bash\npip show \n```\n\n**查看指定包的详细信息**\n\n```bash\npip show -f SomePackage\n```\n\n**列出已安装的包**\n\n```bash\npip list\n```\n\n**查看可升级的包**\n\n```bash\npip list -o\n```\n\n**注意事项**\n\n如果 Python2 和 Python3 同时有 pip，则使用方法如下：\n\nPython2：\n\n```\npython2 -m pip install XXX\n```\n\nPython3:\n\n```bash\npython3 -m pip install XXX\n```\n\n### OpenCV安装\n\n#### Opencv for Python\n\n首先确保Linux系统安装了Python 3.x，推荐[Anaconda](#Anaconda3安装)，激活不同的虚拟环境后，配置基于Python 3.x的Opencv 4.2。\n\n激活对应的虚拟环境，比如我使用了Anaconda创建了一个虚拟环境`tensorflow-gpu`，激活：\n\n```bash\nsource activate tensorflow-gpu\n```\n\n此时终端会变成如下模样\n\n```bash\n(tensorflow-gpu) username@devices:~$\n```\n\n即为正常。\n\n上述命令解释\n\n|       name       |      意义      |\n| :--------------: | :------------: |\n|     username     |     用户名     |\n|     devices      |     主机名     |\n|        ~         | 当前用户主目录 |\n|        $         |    普通用户    |\n| (tensorflow-gpu) |  系统指定环境  |\n\n然后使用`pip`命令进行安装，查找[opencv的不同版本](https://pypi.org/project/opencv-python/3.4.9.33/#history)，使用下面的命令，替换版本号即可：\n\n```bash\npip install opencv-python==3.4.9.33\n```\n\n**验证**，在虚拟环境中输入\n\n```bash\npython\n```\n\n输出\n\n```bash\nPython 3.6.8 |Anaconda, Inc.| (default, Dec 30 2018, 01:22:34) \n[GCC 7.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n接着输入\n\n```bash\n>>> import cv2\n>>> cv2.__version__\n'3.4.9'\n```\n\n结果显示Opencv3.4.9，安装正确。\n\n**~~源码编译安装~~**\n\n参考Opencv 4.2.0的官网提示](https://docs.opencv.org/4.2.0/d2/de6/tutorial_py_setup_in_ubuntu.html)，其教程是在Ubuntu系统进行的，服务器系统为CentOS，编译安装中注意区别。\n\n- **下载**\n\n  进入官网 : http://opencv.org/releases.html 或者 https://github.com/opencv/opencv/releases, 选择需要的 `x.x.x.zip`版本，以载`opencv-4.2.0.zip` 为例：\n\n  ```bash\n  cd\n  wget -c https://github.com/opencv/opencv/archive/4.2.0.zip\n  unzip\n  ```\n\n  文件被解压到名为`opencv-4.2.0`的文件夹内\n\n- **安装依赖**\n\n  确保系统安装了`cmake`、`gcc`、`g++`、`python 3.x`以及以及对应的`numpy`包。\n\n  Opencv 4.2.0支持相机、媒体（ffmpeg、gstreamer）等特征\n\n  **安装多媒体框架ffmpeg**\n\n  centos服务器系统是非常稳定的，所以官方的RPM repository提供的RPM包往往是很滞后的，毕竟是服务器版本，安全稳定是重点，如果是个人用户，推荐Ubuntu，环境搭建起来毕竟方便。CentOS提供的RPM包不够丰富，很多时候需要自己编译，而**EPEL**恰恰可以解决这两方面的问题。**EPEL的全称叫 Extra Packages for Enterprise Linux** 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。\n\n  **EPEL则为服务器版本提供大量的RPM包，而且大多数RPM包在官方 repository 中是找不到的**。**绝大多数rpm包要比官方repository 的RPM包版本要来得新，EPEL会有很多源地址**\n\n  ##### 1. FFMPEG安装\n\n  **利用EPEL安装FFMPEG**，[参考教程](https://linoxide.com/linux-how-to/install-ffmpeg-centos-7/)。\n\n  - **安装EPEL repo**\n\n    ```bash\n    sudo yum -y install epel-release\n    ```\n\n  - **添加可用的epel repo**\n\n    ```bash\n    rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n    rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\n    ```\n\n  - **安装FFMPEG及其开发包**\n\n    ```bash\n    sudo yum -y install ffmpeg ffmpeg-devel\n    ```\n\n  - **查看FFMPEG版本**\n\n    ```bash\n    ffmpeg\n    ```\n\n    输出\n\n    ```bash\n    ffmpeg version 2.8.15 Copyright (c) 2000-2018 the FFmpeg developers\n      built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-36)\n      configuration: --prefix=/usr --bindir=/usr/bin --datadir=/usr/share/ffmpeg --incdir=/usr/include/ffmpeg --libdir=/usr/lib64 --mandir=/usr/share/man --arch=x86_64 --optflags='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic' --extra-ldflags='-Wl,-z,relro ' --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libvo-amrwbenc --enable-version3 --enable-bzlib --disable-crystalhd --enable-gnutls --enable-ladspa --enable-libass --enable-libcdio --enable-libdc1394 --enable-libfdk-aac --enable-nonfree --disable-indev=jack --enable-libfreetype --enable-libgsm --enable-libmp3lame --enable-openal --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-libschroedinger --enable-libsoxr --enable-libspeex --enable-libtheora --enable-libvorbis --enable-libv4l2 --enable-libx264 --enable-libx265 --enable-libxvid --enable-x11grab --enable-avfilter --enable-avresample --enable-postproc --enable-pthreads --disable-static --enable-shared --enable-gpl --disable-debug --disable-stripping --shlibdir=/usr/lib64 --enable-runtime-cpudetect\n      libavutil      54. 31.100 / 54. 31.100\n      libavcodec     56. 60.100 / 56. 60.100\n      libavformat    56. 40.101 / 56. 40.101\n      libavdevice    56.  4.100 / 56.  4.100\n      libavfilter     5. 40.101 /  5. 40.101\n      libavresample   2.  1.  0 /  2.  1.  0\n      libswscale      3.  1.101 /  3.  1.101\n      libswresample   1.  2.101 /  1.  2.101\n      libpostproc    53.  3.100 / 53.  3.100\n    Hyper fast Audio and Video encoder\n    usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\n    \n    Use -h to get full help or, even better, run 'man ffmpeg'\n    ```\n\n    **FFMPEG安装成功。**\n\n  ##### 3. gtk3\n\n  ```bash\n  sudo yum install gtk3 gtk3-devel gtk3-devel-docs\n  ```\n\n  ##### 4. v4l（Video for Linux）\n\n  [参考链接](http://www.linuxfromscratch.org/blfs/view/svn/multimedia/v4l-utils.html)，可选。\n\n  ##### 5. gstreamer\n\n  ```bash\n  yum install gstreamer*\n  ```\n\n- 编译\n\n  如果对 `CMakeLists` 文件不进行修改，那么 `Opencv` 默认的安装位置\n\n  ```bash\n  /usr/local/include/opencv2/         -- 新版Opencv核心头文件\n  /usr/local/include/opencv/          -- 旧Opencv核心头文件\n  /usr/local/share/OpenCV/            -- 一些Opencv其他安装信息\n  /usr/local/lib/                     -- Opencv中的动态链接库存放位置\n  ```\n\n  开始编译：\n\n  ```bash\n  cd opencv-4.2.0\n  mkdir build # 创建编译的文件目录\n  cd build\n  \n  # 安装目录: /usr/local\n  cmake -D CMAKE_BUILD_TYPE=Release \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\    \n        -DBUILD_JPEG=ON -DBUILD_TIFF=ON \\\n        -DBUILD_PNG=ON ..\n  \n  # 编译\n  make\n  ```\n\n- **安装**\n\n  ```bsah\n  sudo make install \n  ```\n\n\n### GCC多版本切换*\n\n在CentOS 7下，使用\n\n```bash\nsudo yum install gcc\n```\n\nCentOS官方的gcc或者g++版本最多到4.8.5，如果要安装Tensorflow 2.0以上的版本，就需要GCC 7.3.1，由于CentOS源没有提供高版本的GCC安装包，这时就不能通过安装包安装，通常的解决方案就是通过编译安装高版本的GCC。在这里介绍如何利用CentOS的新特性**SCL**进行高版本GCC的安装。\n\n[SCL软件集](https://www.softwarecollections.org/en/scls/user/rhscl/)（Software Collections）是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。\n\n**devtoolset和GCC对应关系如下表**：\n\n|  devtoolset  | GCC版本 |\n| :----------: | :-----: |\n| devtoolset-3 |  4.9.2  |\n| devtoolset-4 |  5.3.1  |\n| devtoolset-6 |  6.3.1  |\n| devtoolset-7 |  7.3.1  |\n| devtoolset-8 |  8.3.1  |\n\n#### 添加centos-release-scl包\n\n```bash\nsudo yum install centos-release-scl\n```\n\n#### 启用RHSCL库\n\n```bash\nsudo yum-config-manager --enable rhel-server-rhscl-7-rpms\n```\n\n#### 安装GCC\n\nDevtoolset 默认安装到 `/opt/rh` 目录下\n\n##### GCC 4.9.2\n\n```bash\nsudo yum install devtoolset-3\n```\n\n##### GCC 5.3.1\n\n```bash\nsudo yum install devtoolset-4\n```\n\n##### GCC 6.3.1\n\n[参考官方链接](https://www.softwarecollections.org/en/scls/rhscl/devtoolset-6/)\n\n```bash\nsudo yum install devtoolset-6\n```\n\n##### GCC 7.3.1\n\n[参考官方链接](https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/)\n\n```bash\nsudo yum install devtoolset-7\n```\n\n##### GCC 8.3.1\n\n[参考官方链接](https://www.softwarecollections.org/en/scls/rhscl/devtoolset-8/)\n\n```bash\nsudo yum install devtoolset-8\n```\n\nscl-utils 只是方便 Software Collections 使用，比如要查看当前安装了哪些Software Collections，可以使用命令\n\n```bash\nscl --list\n```\n\n#### 临时生效\n\n假设使`GCC 7.3.1`生效，其对应`devtoolset-7`，执行命令\n\n```bash\nscl enable devtoolset-7 bash\n```\n\n这种方法只对当前的shell环境有效，退出后GCC回退到系统指定的版本。\n\n#### 全局生效\n\n[执行下列命令](http://kuanghy.github.io/2016/03/22/devtoolset)可使对应的GCC全局有效：\n\n```bash\nln -s /opt/rh/devtoolset-7/root/usr/bin/* /usr/local/bin/\nhash -r\n```\n\n测试 gcc 版本\n\n```bash\ngcc --version\n```\n\n### MatLab R2020a安装*\n\nNO GUI安装会产生比较多莫名其妙的错误，现场安装吧……\n\n## 第四章：深度学习环境搭建\n\n### SSH远程登录和文件传输\n\n- **SSH**是用来**登录**远程服务器的安全协议；\n- **FileZilla**是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的**文件传输**)\n\nSSH和FileZilla都安装在**本地计算机系统**中\n\n#### SSH安装 \n\n> [SSH](https://en.wikipedia.org/wiki/Secure_Shell)(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。\n\n在**本地计算机系统**中，`UNIX`、`Window`以及`Mac`系统都可运行SSH,安装方法如下：\n\n - **_CentOS 7_**\n\n需要普通管理员权限(sudo)，用快捷键`ctrl`+`alt`+`t`打开终端Terminal窗口，运行：\n\n```python\nsudo yum install openssh-server\n```\n\n然后回车,输入`y`，即可安装完成。\n\n- **_Windows10_**\n\n下载[openssh for windows](https://www.mls-software.com/files/setupssh-7.9p1-1.exe)，进行默认安装即可。\n\n- **_Mac_**\n\n由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动`sshd服务`：\n\n```bash\nsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist\n```\n\n输入Mac密码后即可开启。\n\n#### SSH登录\n\n在任一平台上打开终端(Windows上推荐[**Xshell**]( https://www.netsarang.com/zh/xshell-download/ )、[**FinalShell**]( http://www.hostbuf.com/t/988.html )，Linux系统和Mac直接打开终端即可)，输入命令\n\n```bash\nssh username@IPaddress -p PORT\n```\n\n其中，\n`username`为服务器的用户名\n`IPaddress`为服务器的IP地址\n`PORT`为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员\n\n输入密码后即可进入自己账户的主目录（普通用户，无root权限）\n\n#### 修改账户密码\n\n登录到服务器之后，修改原始密码保证账户安全，直接输入\n\n```bash\npasswd\n```\n\n`username`为您在服务器上的用户名，根据提示修改新的密码。\n\n至此，您已经安全登录到服务器上。\n\n#### FileZilla在Windows和Linux下互传文件\n\n> FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。\n\n以windows 10为例，下载[FileZilla](https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe)，选择安装位置，正常安装即可。\n\n![](https://pic.downk.cc/item/5e95d3bac2a9a83be5f30b2e.png)\n\n#### FileZilla连接服务器\n\n打开FileZilla软件，\n\n* 1. 点击\"**文件**\"——\"**站点管理器**\"\n\n* 2. 点击\"**新站点**\"，在\"**我的站点**\"下重命名，此处设为“Lab532”\n\n* 3. 继停留在\"**站点管理器**\"界面，在\"**常规**\"选项卡中，设置如下：\n\n  * 主机：**服务器IP地址**\n  * 端口：**默认是 22，已禁用，详细端口请联系管理员**\n  * 协议：**SFTP - SSH File transfer Protocol**\n  * 登录类型：\n    - 1）若选\"**正常**\"\n      - 用户名：username\n      - 密码：password\n    - 2）若选\"**询问密码**\"，只能填写用户名：username，然后点击右下角的\"**连接**\"，再输入密码。\n\n* 4. 之后一直ok即可。\n\n#### 文件传输  \n\n以window 10为例，利用FileZilla登录到服务器后，可以看到左边是**本地站点**，右边是**远程站点**(服务器上的目录)，如下图所示，直接将本地文件`test.py`用鼠标拖拽到服务器上的指定目录即可（**上传过程**），这个过程是可逆的（**下载过程**），非常方便。\n\n![](https://pic.downk.cc/item/5e95d3f9c2a9a83be5f335d0.png)\n\n#### 总结\n\n利用**FileZilla**软件配合**SSH**协议，即可完成文件传输及程序运行等必要工作。\n\n### CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件*\n\n#### CUDA切换\n\n在[安装CUDA](#安装CUDA)这一小节介绍了多种CUDA文件的安装，这些CUDA版本统一被安装到`/usr/local`文件夹下，使用命令\n\n```bash\nll /usr/local\n```\n\n输出\n\n![](https://pic.downk.cc/item/5e95b42ac2a9a83be5dc2927.png)\n\n**系统是通过`/usr/local/`下的`cuda`符号链接来识别CUDA当前指定的CUDA版本**，比如现在符号链接`**cuda**`指向**cuda-9.0**，如果要指向其它CUDA版本，修改符号链接即可，比如切换到**CUDA-10.0**版本：\n\n```bash\ncd /usr/local/\n\n# 删除符号链接\nsudo rm cuda\n\n# 新建符号链接\nsudo ln -s /usr/local/cuda-10.0 /usr/local/cuda\n```\n\n**查看当前`cuda`指向**\n\n```bash\nll\n```\n\n![](https://pic.downk.cc/item/5e95b5b6c2a9a83be5dd2da7.png)\n\n或者\n\n```bash\nstat cuda\n```\n\n![](https://pic.downk.cc/item/5e95b63cc2a9a83be5dd7b59.png)\n\n**查看CUDA版本**\n\n```bash\nnvcc --version\n```\n\n#### cuDNN切换\n\n在Tensorflow不同版本的GPU环境配置中，CUDA的切换，往往伴随着cuDNN的切换，cuDNN是由头文件和动态链接库组成的，所以下载对应的cuDNN，按照[cuDNN的安装方法](#cuDNN安装*)进行文件替换即可。\n\n#### 总结\n\n这种方法的CUDA和cuDNN版本切换，适用于管理员整体切换和个人使用者，不适合服务器环境下的普通用户，有一种好的解决方法是配合[Environment Modules](https://modules.readthedocs.io/en/latest/)来进行环境管理，后续可以进行深入探索，**推荐使用Anaconda来进行CUDA、cuDNN版本的管理。**\n\n ### （推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\n\n虚拟环境的重要性：**无它，唯方便尔。**\n\n> 因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；创建独立的虚拟环境，各个虚拟环境相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。\n\n虚拟环境的创建有很多方法：Anaconda、virtualenv、docker等，但是就深度学习环境来说，Anaconda方便管理和使用，在此推荐**Anaconda**。\n\n考虑到这么一个场景：苦于科研无想法，于是在github上逛gai碰碰运气，终于看到一个不错的项目，一顿操作，clone这个repo之后，从anaconda创建一个虚拟环境来尝试运行，仔细阅读README，**发现要求特定版本的一些依赖库**，其它的库都还好说，如果要求特定版本的CUDN和cuDNN，如果重新下载安装配置就比较麻烦，何况非管理员用户没有安装和配置权限。这时候考虑Anaconda。\n\nAnaconda生态比较完整，只要系统里正确安装了[NVIDIA驱动](#NVIDIA驱动安装（CentOS、Ubuntu）*)，就可以在Anaconda下的虚拟环境中，安装特定版本的cuda和cudnn，而不必全局进行安装。\n\n需要注意的是：\n\n- **Anaconda的 cudatoolkit 不包含完整安装cuda的全部文件，只是包含了用于 tensorflow，PyTorch，xgboost 和 Cupy 等所需要的共享库文件，cuDNN亦是如此。**\n\n- **如果系统已经全局安装了CUDA和cuDNN，在虚拟环境中又安装了其它版本的CUDA和cuDNN，互不影响，且首先调用虚拟环境中的版本。**\n\n#### conda创建虚拟环境\n\n确定系统安装了[Anaconda3](#Anaconda3安装)，假设此时要搭建一个Tensorflow 1.6的GPU环境，[查表](#Tensorflow建议配置)可知，需求CUDA 9、cuDNN 7版本，python版本指定为3.6。\n\n- **创建虚拟环境**\n\n  在终端输入：\n\n  ```bash\n  conda create -n tensorflow16-gpu pip python=3.6\n  ```\n\n  创建完成后，在 **~/anaconda3/env** 文件夹下出现名为为 **_tensorflow16-gpu_** 的虚拟环境\n\n  查看当前系统的Anaconda环境\n\n  ```bash\n  conda env list\n  ```\n\n- **激活虚拟环境**\n\n  不建议使用系统建议的激活方式：`conda activate tensorflow16-gpu`，推荐使用：\n\n  ```bash\n  source activate tensorflow16-gpu\n  ```\n\n  若要退出当前环境，输入\n\n  ```bash\n  source deactivate tensorflow16-gpu\n  ```\n\n  究竟使用哪种激活方式，看Anaconda发展和个人喜好。\n\n#### 示例：安装Tensorflow-GPU 1.6（CUDA 9和cuDNN 7）\n\n- **安装CUDA 9**\n\n  **查询Anaconda库里的CUDA版本：**\n\n  ```bash\n  conda search cuda\n  ```\n\n  截止2020年4月11日，Anaconda官方[CUDA版本](https://anaconda.org/anaconda/cudatoolkit/files)包含：[9.0](https://developer.nvidia.com/cuda-90-download-archive)、[9.2](https://developer.nvidia.com/cuda-92-download-archive)、[10.0](https://developer.nvidia.com/cuda-10.0-download-archive)、10.1（[update1](https://developer.nvidia.com/cuda-10.1-download-archive-update1)和[update2](https://developer.nvidia.com/cuda-10.1-download-archive-update2)）、[10.2](https://developer.nvidia.com/cuda-downloads)，Anaconda [CUDA版本](https://anaconda.org/anaconda/cudatoolkit/files)紧跟NVIDIA官方[CUDA](https://developer.nvidia.com/cuda-toolkit-archive)更新速度，满足绝大部分深度学习环境的要求。\n\n  注意：不同的Anaconda源里的版本不一样，但是channel是`pkgs/main`的比较权威的，推荐使用`pkgs/main`里的版本。\n\n  ![](https://pic.downk.cc/item/5e97d227c2a9a83be532729a.png)\n\n  **Tensorflow 1.6 GPU版本需求CUDA 9.0：**\n  \n  ```bash\nconda install cudatoolkit==9.0\n  ```\n\n  安装完成\n  \n  ![](https://pic.downk.cc/item/5e97d5f0c2a9a83be534c17d.png)\n\n* **安装cuDNN 7**\n\n  **查询Anaconda库里的CUDA版本：**\n\n  ```conda\n  conda search cudnn\n  ```\n\n  截止2020年4月11日，Anaconda官方[cuDNN版本](https://anaconda.org/anaconda/cudnn/files)如下，根据需求进行安装，也满足绝大部分深度学习环境的要求。\n\n  ![](https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png)\n\n  **Tensorflow 1.6 GPU版本需求cuDNN 7**。\n\n  选择cuDNN 7.0.5：\n\n  ```bash\n  conda install cudnn==7.0.5\n  ```\n\n  出现错误\n\n  ```bash\n  Collecting package metadata (current_repodata.json): done\n  Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n  Collecting package metadata (repodata.json): done\n  Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n  Solving environment: - \n  Found conflicts! Looking for incompatible packages.                                       failed                                                                          \n  UnsatisfiableError:\n  ```\n\n  这是怎么回事呢？打开[cuDNN官网](https://developer.nvidia.com/rdp/cudnn-archive)，注意到，同一个版本的cuDNN，可能对应不同的CUDA版本，比如cuDNN 7.0.5可以对应CUDA 8.0、CUDA 9.0和CUDA 9.1，所以查看Anaconda官方里的cuDNN 7.0.5对应哪个CUDA版本。\n\n  ![](https://pic.downk.cc/item/5e97db58c2a9a83be5381c80.png)\n\n  打开cuDNN的[Anaconda仓库](https://anaconda.org/anaconda/cudnn/files)，查询到Anaconda仓库里的cuDNN 7.0.5对应的是CUDA 8.0），因此选择CUDA 9.0对应的**cuDNN 7.1.2**，所以在安装前，使用\n\n  ```bash\n  conda search cudnn\n  ```\n\n  ![](https://pic.downk.cc/item/5e980e14c2a9a83be559cec6.jpg)\n\n  **查询cuDNN与CUDA的对应关系。**\n\n  **安装cuDNN 7.1.2：**\n\n  ```bash\n  conda install cudnn==7.1.2\n  ```\n\n  ![](https://pic.downk.cc/item/5e980693c2a9a83be5556703.png)\n\n  这种方法安装CUDA和cuDNN，没有单独形成文件夹，都是统一存放在虚拟环境中的`lib`、`include`文件夹下，查看`CUDA 9.0`和`cuDNN 7.1.2`是否被安装到虚拟环境`tensorflow16-gpu`中：\n\n  ```bash\n  ls ~/anaconda3/envs/tensorflow16-gpu/lib/\n  ```\n\n  输出\n\n  ![](https://pic.downk.cc/item/5e98076bc2a9a83be555d9a8.png)\n\n  或者使用以下命令**查看CUDA共享库**的安装：\n\n  ``` bash\n  ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cuda\n  ```\n\n  输出\n\n  ```bash\n  libcudart.so\n  libcudart.so.9.0\n  libcudart.so.9.0.176\n  ```\n\n  使用以下命令**查看cuDNN共享库**的安装：\n\n  ```bash\n   ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cudnn\n  ```\n\n  输出\n\n  ```bash\n  libcudnn.so\n  libcudnn.so.7\n  libcudnn.so.7.1.2\n  libcudnn_static.a\n  ```\n\n  使用以下命令**查看cuDNN头文件**的安装：\n\n  ```bash\n  ls ~/anaconda3/envs/tensorflow16-gpu/include/ | grep cudnn\n  ```\n\n  输出\n\n  ```bash\n  cudnn.h\n  ```\n\n  可以看到相关CUDA、cuDNN的共享库，\n\n* **安装tensorflow-gpu 1.6.0**\n\n  安装完CUDA 9.0和cuDNN 7.1.2之后，在激活的环境中输入\n\n```bash\npip install tensorflow-gpu==1.6.0\n```\n\n是否正确安装，请参照章节 **_测试tensorflow-gpu版本的正确性_** 里的方法验证。\n\n#### 测试tensorflow-gpu版本的正确性\n\n在激活的环境中，输入`python`，进入到python3.6环境中，依次输入命令\n\n```python\n>>> import tensorflow as tf\n>>> tf.test.is_gpu_available()\n```\n\n若输出类似的内容，且最后一行为`True`，则表示tensorflow-gpu 1.6 版本安装成功！\n\n```python\n2018-11-10 01:32:45.539907: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n2018-11-10 01:32:46.425789: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:\nname: GeForce GTX 1080 major: 6 minor: 1 memoryClockRate(GHz): 1.7715\npciBusID: 0000:04:00.0\ntotalMemory: 7.93GiB freeMemory: 7.81GiB\n2018-11-10 01:32:46.425831: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\n2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)\nTrue\n```\n\n查看tensorflow的版本的命令为\n\n```python\n>>> import tensorflow as tf\n>>> print(tf.__version__)\n```\n\n注意，`__`为两个`_`组合而成。\n\n### Anaconda下安装Tensorflow的GPU各个版本（从1.6到2.1）\n\n![Tensorflow版本](https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png)\n\n根据Tensorflow[官网](https://www.tensorflow.org/install/source#linux)，在Anaconda环境下安装Tensorflow 1.6.0、1.11.1和2.1.0三个典型的GPU版本。使用`conda search cudnn`命令**查询cuDNN与CUDA的对应关系。**\n\n![](https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png)\n\n#### Tensorflow 1.6.0\n\n系统默认GCC为4.8.5，在正常的终端中输入\n\n```bash\nconda create -n tensorflow16-gpu pip python=3.6\nsource activate tensorflow16-gpu\n```\n\n在激活的环境中输入：\n\n```bash\n## 安装CUDA 9.0和cuDNN 7.1.2\nconda install cudatoolkit==9.0\nconda install cudnn==7.1.2\npip install tensorflow-gpu==1.6.0\n```\n\n#### Tensorflow 1.11.0\n\n系统默认GCC为4.8.5，在正常的终端中输入\n\n```bash\nconda create -n tensorflow111-gpu pip python=3.6\nsource activate tensorflow111-gpu\n```\n\n在激活的环境中输入：\n\n```bash\n## 安装CUDA 9.2和cuDNN 7.2.1\nconda install cudatoolkit==9.2\nconda install cudnn==7.2.1\npip install tensorflow-gpu==1.11.0\n```\n\n#### Tensorflow 2.1.0\n\n**切换GCC版本至7.3.1**\n\n```\nscl enable devtoolset-7 bash\n```\n\n仅本shell本次登录有效，若使全局生效，[查看方法](#全局生效)。\n\n在正常的终端中输入\n\n```bash\nconda create -n tensorflow21-gpu pip python=3.6\nsource activate tensorflow12-gpu\n```\n\n在激活的环境中输入：\n\n```bash\n## 安装CUDA 10.1.243和cuDNN 7.6.5\nconda install cudatoolkit==10.1.243\nconda install cudnn==7.6.5\npip install tensorflow-gpu==2.1.0\n```\n\n### Anaconda下安装PyTorch的GPU各个版本（从0.4到1.4）\n\n数据来源于[官网](https://pytorch.org/get-started/previous-versions/)，截止2020年4月11号，`PyTorch 1.4`版本需要配合`CUDA 10.1`或`CUDA9.2`配合使用。\n\n![PyTorch](https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png)\n\n#### PyTorch 0.4.1\n\n```bash\nconda create -n pytorch041 pip python=3.6\nsource activate pytorch041\n```\n\n在虚拟环境中\n\n```bash\nconda install cudatoolkit==9.0\nconda install pytorch=0.4.1 cuda90 -c pytorch\n```\n\n#### PyTorch 1.1.0\n\n```bash\nconda create -n pytorch110 pip python=3.6\nsource activate pytorch110\n```\n\n在虚拟环境中\n\n```bash\nconda install pytorch==1.1.0 torchvision==0.3.0 cudatoolkit=9.0 -c pytorch\n```\n\n#### PyTorch 1.4\n\n```bash\nconda create -n pytorch14 pip python=3.6\nsource activate pytorch14\n```\n\n在虚拟环境中\n\n```bash\nconda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1 -c pytorch\n```\n\n#### 总结\n\n如果在安装过程中出现类似的错误\n\n```bash\nCondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2>\nElapsed: -\n\nAn HTTP error occurred when trying to retrieve this URL.\nHTTP errors are often intermittent, and a simple retry will get you on your way.\n```\n\n可能因为网络原因导致安装中断，不断尝试安装命令即可。\n\n### NVim/Vim简单使用\n\n本小节内容节选自我的另一篇文章[《Linux之打造vim实用配置方案》](https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/)。\n\n#### 什么是Vim？\n\n**[Vim](https://www.vim.org/)- the ubiquitous text editor**，一种无处不在的文本编辑器，维基百科是这么介绍**vim**的：\n\n> **Vim**是从[vi](https://zh.wikipedia.org/wiki/Vi)发展出来的一个[文本编辑器](https://zh.wikipedia.org/wiki/文本编辑器)。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和[Emacs](https://zh.wikipedia.org/wiki/Emacs)并列成为[类Unix系统](https://zh.wikipedia.org/wiki/类Unix系统)用户最喜欢的编辑器。\n>\n> Vim的第一个版本由[布莱姆·米勒](https://zh.wikipedia.org/wiki/布萊姆·米勒)在1991年发布。最初的简称是**V**i **IM**itation，随着功能的不断增加，正式名称改成了**V**i **IM**proved。现在是在[开放源代码](https://zh.wikipedia.org/wiki/开放源代码)方式下发行的[自由软件](https://zh.wikipedia.org/wiki/自由软件)。\n\n**文件的增删查改**——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。\n\n**配置文件**——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿`git clone repoyoulike`，然后按照配置文档进行修改，什么**tf**要升级啦，**gcc/g++**要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用`gedit`来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用**ssh**连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。\n\n**知其然知其所以然**——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。\n\n**Vim**适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从[官网](https://www.vim.org/download.php)下载。 \n\n#### Vim哲学\n\n简单概括：摆脱鼠标，一键到达。\n\n即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。\n\n#### 升级支持python3的Vim8*\n\n在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是**vi**编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，[Vim8](https://github.com/vim/vim)在[NeoVim](https://github.com/neovim/neovim)的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口**terminal**，尤其是支持**terminal**非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，在升级了支持**Python3**的Vim8后（**在Vim版本中，不能同时支持Python2和Python3**），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。在这一小节，介绍怎么**编译支持Python3的Vim8版本**，**前提是系统了安装Python3**，Python3的安装不做讨论。\n\n1. **编译安装yum源里的vim最新版**\n\n   [参考YouCompleteMe](https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source)里给出的方法，略作调整。\n\n   首先检查系统里的Vim是否已经安装，在终端输入命令\n\n   ```bash\n   rpm -qa | grep vim\n   ```\n\n   如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（**下载Vim最新版源代码**）开始阅读。\n\n   一般情况下，运行下列命令安装Vim\n\n   ```bash\n   sudo yum -y install yum*    // CentOS7.6系统\n   ```\n\n   查看vim版本\n\n   ```bash\n   vim --version\n   ```\n\n   可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。\n\n   如果是Vim版本，查看Vim是否支持Python3\n\n   ```bash\n   vim --version | grep python\n   ```\n\n   如果结果显示python3前面是`+`号，则这一小节可以跳过，如果是`-`号，则需要自己编译Vim，需执行以下步骤。\n\n2. **卸载Vim**\n\n   在编译之前，需要卸载系统上的Vim版本\n\n   - 如果使用`yum install vim*`命令安装的Vim，卸载Vim时执行\n\n     ```bash\n     yum remove vim\n     ```\n\n   - 如果Vim是使用`make`编译过的，在**CentOS7.6系统**下，进入到Vim源代码目录，执行\n\n     ```bash\n     sudo make uninstall\n     ```\n\n   如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone https://github.com/vim/vim.git)，然后`cd vim`，再执行上述语句。\n\n   如果是**Ubuntu系统**，卸载起来就比较方便\n\n   ```bash\n   sudo apt install checkinstall\n   cd ~/vim       // vim是Vim源代码文件夹\n   sudo checkinstall\n   ```\n\n3. **下载Vim最新版源代码**\n\n   ```bash\n   cd ~                                         // 进入到当前用户的根目录下\n   git clone https://github.com/vim/vim.git     // 下载Vim源代码\n   cd vim                                       // 进入到Vim源代码文件\n   ```\n\n4. **配置**\n\n   ```bash\n   ./configure --with-features=huge \\\n               --enable-multibyte \\\n               --enable-rubyinterp=yes \\\n               --enable-python3interp=yes \\\n               --with-python3-config-dir=$(python3-config --configdir) \\\n               --enable-perlinterp=yes \\\n               --enable-luainterp=yes \\\n               --enable-gui=gtk2 \\\n               --enable-cscope \\\n               --prefix=/usr/local\n   ```\n\n   命令[解释](https://www.jianshu.com/p/aac78ff576c5)：\n\n   ` --with-features=huge`：支持最大特性\n\n   `--enable-multibyte`：打开多字节支持，可以在Vim中输入中文\n\n   `--enable-rubyinterp`：打开对ruby编写的插件的支持\n\n   ` --enable-python3interp`：打开对python3编写的插件的支持\n\n   `--with-python-config-dir`：Python3的路径\n\n   `--enable-perlinterp`：打开对perl编写的插件的支持\n\n   ` --enable-luainterp`：打开对lua编写的插件的支持\n\n   `--enable-gui`：打开GUI支持\n\n   `--enable-cscope`：打开对cscope的支持\n\n   `--prefix=/usr/local/`：指定将要安装到的路径\n\n5. **设置VIMRUNTIMEDIR**\n\n   **VIMRUNTIMEDIR**是vim运行时候所需资源的目录，非常重要。\n\n   ```bash\n       make VIMRUNTIMEDIR=/usr/local/share/vim/vim82\n   ```\n\n6. **编译安装**\n\n   ```bash\n   sudo make install\n   ```\n\n7. **设置Vim为默认的编辑器**\n\n   使用`update-alternative`设置vim为默认编辑器：\n\n   ```bash\n   sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim 1\n   sudo update-alternatives --set editor /usr/local/bin/vim\n   sudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim 1\n   sudo update-alternatives --set vi /usr/local/bin/vim\n   ```\n\n按照上述步骤完成后查看Vim**版本\n\n```\nvim --version\n```\n\n![vim版本](https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png)\n\n可以看到Vim版本是8.2版本，已开启**python3支持**，需要进行验证，在终端输入`vim`，接着在**正常模式**下输入`:echo has(\"python3\")`，按一下回车键，若屏幕最下面输出`1`，则配置正确，Vim支持Python3。\n\n编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及**Issues（非常有用）**、[stackoverflow](https://stackoverflow.com/)等，其次再考虑其它出处，尽可能多看**专业的英文文档**，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！\n\n该方法是全局设置方法。\n\n- **安装中文vim帮助文档**\n\n  进入Vim环境，按一下前缀键`esc`，在英文语法环境下，输入`:help`后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：\n\n  - **下载中文安装包**\n\n    ```bash\n    wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz\n    ```\n\n  - **解压**\n\n    ```bash\n    tar zxvf v2.3.0.tar.gz\n    ```\n\n  - **安装**\n\n    ```bash\n    cd vimcdoc-2.3.0/\t\t\t\t# 进入解压后的目录\n    ./vimcdoc.sh -i\t\t\t\t\t# 安装\n    ```\n\n    命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。\n\n#### Vim8 —> NeoVim\n\n完全是偶然。在上回讲到，在Vim下折腾了两三天的[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。\n\n关于Vim的插件介绍，请查阅我的另一篇文章[《Linux之打造vim实用配置方案》](https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/)。\n\n**NeoVim和Vim的用法基本一致**，底层架构有所不同而已，Vim用户可以很方便的操作NeoVim，配置文件可以直接进行迁移。\n\n[NeoVim](https://github.com/neovim/neovim)的安装：\n\n```bash\nsudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install -y neovim python3-neovim\n```\n\n#### 心理准备\n\n- **学习Vim在开始时是痛苦的**，**但是熟悉之后，工作效率会大大提升**\n- 需要时间\n- 需要不断地练习\n- 不要期望你能在3天内把vim练得比别的编辑器更有效率\n\n#### 配置文件\n\n如果使用NVim或Vim编辑文件：\n\n```bash\n# NeoVim\nnvim file\n\n# Vim\nvim file\n```\n\n发现界面黑乎乎的，没有行号，没有语法高亮等，作为一名视觉动物，稍微美化一下NeoVim或者Vim，使其不那么打击我们学习的热情。\n\nNVim的配置文件路径：`~/.config/nvim/init.vim`\n\nVim的配置文件路径：`~/.vim/vimrc`\n\n将下列配置，根据需求，粘贴到配置文件中，然后`:wq`，在终端中输入`source ~/.config/nvim/init.vim`或者`source ~/.vim/vimrc`刷新配置文件。\n\n**请仔细阅读每一行注释。**\n\n```bash\n -----------------\n\"  基本设置\n\" -----------------\n\n\" 语法高亮\nsyntax on\n\n\" 显示行号\nset number\n\n\" 显示当前行号的相关行，比如以此行为标准，向上/向下数第1行、第2行等 \nset relativenumber\n\n\" 设置TAB宽度, ts: tabstop\nset expandtab\nset tabstop=2\nset shiftwidth=2\nset softtabstop=2\n\n\" 光标所在的那一栏上面/下面还显示出6行\nset scrolloff=6\n\n\n\" 显示当前行的下滑线\nset cursorline\n\n\" 保证当前vim环境下的字不会超出屏幕\nset wrap\n\n\" 显示当前的命令\nset showcmd\n\n\" 左下角显示当前的模式名称\nset showmode\n\n\" 按下TAB，自动补全指令\nset wildmenu\n\n\" 是否显示状态栏, 0 : 不显示, 1 : 表示只在多窗口时显示, 2 : 表示显示\nset laststatus=2\n\" 显示当前光标的位置、进度以及时间\nset statusline=%F%m%r%h%w\\ [pos=(%l,%v)]\\ [progress=%p%%]\\ %{strftime(\\\"%d/%m/%y\\ -\\ %H:%M\\\")} \n\n\" 关闭当错误发生的bell提示音\nset noeb\n\" 当错误发生时, 屏幕闪烁\n\" set vb\n\" 当错误发生时, 不要闪烁屏幕\n\" set novisualbell    \n\" ------------------\n\"   关于搜索和高亮\n\" ------------------\n\n\" 高亮搜索到的词\nset hlsearch\n\"为了避免打开新的文件时显示的上一个文件的搜索结果产生的高亮\n\" exec 表示在:后面运行的命令\nexec \"nohlsearch\"\n\n\" 输入时, 边输入, 边高亮\nset incsearch\n\" 忽略大小写\nset ignorecase\n\" 智能大小写\nset smartcase\n\n\" 支持鼠标点击和滚动\n\" set mouse=a\n\n\" -----------------\n\"   map 键盘映射\n\" -----------------\n\n\" 按下小写s, 啥事不干\nmap s <nop>      \n\" 按下大写S, 保存当前文件, <CR>为回车按键\nmap S :w<CR> \n\" 按下大写Q, 退出当前文件\nmap Q :q<CR> \n\" 按下大写R, 更新文件配置\nmap R :source $MYVIMRC<CR>    \n```\n\n`77~81`行解释，假设要编辑一个文件，进行了修改，此时\n\n- 保存文件 — 先按前缀键`Esc`，再按住大写`S`，默认操作：先按前缀键`Esc`，再输入`:w`；\n- 更新配置 — 先按前缀键`Esc`，再按住大写`R`，默认操作：退出文件，再`source files`；\n- 退出文件 — 先按前缀键`Esc`，再按住大写`Q`，默认操作：先按前缀键`Esc`，再输入`:q`；\n\n这三个快捷键非常有用，可以相互搭配使用！\n\n#### 几种模式\n\n- 普通模式（Normal）：启动NVim/Vim后，Vim默认在模式下，进入Normal模式的快捷键：`Esc`；\n- 插入模式（Insert）：快捷键：`i`，会看到vim左下角有一个 **-- 插入 --** 字样，表示可以以插入的方式输入，此时，你可以输入文本了，就像你用“记事本”一样；\n\n#### 常用命令\n\n在终端输入：\n\n```bash\nvimtutor\n```\n\n查看Vim教程（已在[章节](升级支持python3的Vim8*)安装了中文版教程），强烈建议自学一遍。先按前缀键`Esc`，再输入`:q`可退出教程。\n\n- `i `→ Insert 模式，按 ESC 回到 Normal 模式；\n- 退出并保存\n  - 一般操作：先按前缀键`Esc`，再输入`:wq`；\n  - 快捷键：根据上述配置文件，先按前缀键`Esc`，再按住`SQ`；\n- 保存并更新配置：\n  - 一般操作：先按前缀键`Esc`，再输入`:wq`，在终端输入`source files`；\n  - 快捷键：根据上述配置文件，先按前缀键`Esc`，再按住`SR`；\n- 退出不保存：先按前缀键`Esc`，再输入`:q!`\n\n- 关于删除：**在普通模式（Normal）下**，\n  - `x` → 删除光标所指向的字符；\n  - `dd` → 删除光标所在的那一行；\n- 关于插入：**在普通模式（Normal）下，**除了`i`可以进入插入模式外，还有\n  - `a `→ 在光标后插入；\n  - `o `→ 在当前行后插入一个新行；\n  - `O` → 在当前行前插入一个新行；\n  - `cw` → 替换从光标所在位置后到一个单词结尾的字符；\n- 关于撤销/恢复：**在普通模式（Normal）下**，\n  - `u` → 撤销；\n  - <C-r>，意为`Ctrl + r` → 恢复；\n- 关于跳转：**在普通模式（Normal）下**，\n  - `gg` → 跳转到当前文件的第一行行首；\n  - `G` →  跳转到当前文件的最后一行行首；\n  - `0 `→ 跳转到当前行的行首；\n  - `$` → 跳转到当前行的最后一个字符处；\n  - `50gg` → 跳转到第50行；\n  - `50j` → 从当前行向后跳转50行；\n- 关于搜索：**在普通模式（Normal）下**，输入`/`，就可以进行文件内搜索，按`n`查找下一个，`N`查找上一个\n\n这只是些非常基础的命令，不过足以应付一般情况，NVim/Vim下有很多实用的插件，请关注我的另一篇文章：[《Linux之打造vim实用配置方案》](https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/)。\n\n### Tmux简单使用\n\nTmux 是一个终端复用器（terminal multiplexer），非常有用，**建议所有重要的操作，都在Tmux里进行，只要服务器不宕机，操作一直在进行。**\n\n#### 简介\n\n命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称\"窗口\"），在里面输入命令。**用户与计算机的这种临时的交互，称为一次\"会话\"（session）** 。\n\n会话的一个重要特点是，窗口与其中启动的进程是[连在一起](http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html)的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。\n\n一个典型的例子就是，[SSH 登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。\n\n**为了解决这个问题，会话与窗口可以\"解绑\"：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话\"绑定\"其他窗口。**\n\n#### 作用\n\n**Tmux 就是会话与窗口的\"解绑\"工具，将它们彻底分离。**\n\n> - 它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。\n> - 它可以让新窗口\"接入\"已经存在的会话。\n> - 它允许每个会话有多个连接窗口，因此可以多人实时共享会话。\n> - 它还支持窗口任意的垂直和水平拆分。\n\n#### 几个概念\n\n- 会话(session): 建立一个 tmux 工作区会话，会话可以长期驻留，重新连接服务器不会丢失，我们只需重新 tmux attach 到之前的工作区就可以恢复会话\n- 窗口(window): 容纳多个窗格\n- 窗格(pane): 可以在窗口中分成多个窗格\n\n![](https://pic.downk.cc/item/5e986635c2a9a83be5a21e27.jpg)\n\n#### 安装\n\n- **CentOS/Fedora**\n\n  ```bash\n  sudo yum install tmux\n  ```\n\n- **Ubuntu/Debian**\n\n  ```bash\n  sudo apt-get install tmux\n  ```\n\n- Mac\n\n  ```bsah\n  brew install tmux\n  ```\n\n#### 启动和退出\n\n在终端输入\n\n```bash\ntmux\n```\n\n![](https://pic.downk.cc/item/5e982247c2a9a83be5672750.png)\n\n启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。\n\n按下`Ctrl+d`或者显式输入`exit`命令，就可以退出 Tmux 窗口。\n\n#### 前缀键\n\n与`vim`、`nvim`类似，都存在一个**前缀键**，Tmux 窗口有大量的快捷键，**所有快捷键都要通过前缀键唤起**。默认的前缀键是`Ctrl+b`，即先按下`Ctrl+b`，快捷键才会生效。\n\n举例来说，帮助命令的快捷键是`Ctrl+b ?`。它的用法是，在 Tmux 窗口中，先按下`Ctrl+b`，再按下`?`，就会显示帮助信息。\n\n然后，按下 ESC 键或`q`键，就可以退出帮助。\n\n当然如果觉得前缀键`Ctrl+b`不太方便，可以更换前缀键。\n\n#### 会话管理\n\n##### 新建会话\n\n第一个启动的 Tmux 窗口，编号是`0`，第二个窗口的编号是`1`，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。\n\n使用编号区分会话，不太直观，更好的方法是为会话起名。\n\n```bash\ntmux new -s YourSeeName\n```\n\n新建了一个名为**YourSeeName**的Tmux窗口。\n\n##### 分离会话\n\n在 Tmux 窗口中，按下`Ctrl+b d`或者输入`tmux detach`命令，就会将当前会话与窗口分离，进入普通的终端界面，**但是会话和里面的进程仍然在后台运行**，`tmux ls`命令可以查看当前所有的 Tmux 会话。\n\n##### 会话查看\n\n在Tmux会话内，列出所有会话的快捷键是`Ctrl+b s`\n\n登录到终端以后，使用命令\n\n```bash\ntmux ls\n```\n\n可以查看当前所有的 Tmux 会话。\n\n##### 进入会话\n\n进入到Tmux最后一次退出的窗口\n\n```bash\ntmux attach\n```\n\n使用`tmux ls`查看可用的窗口，然后选择想进入的窗口：\n\n```bash\n# 进入名为Seesion-Name的会话窗口\ntmux a -t Seesion-Name\n\n# 进入编号为SessionNum的会话窗口\ntmux a -t Session-Num\t# SessionNum为0、1、2...3\n```\n\n##### 杀死会话\n\n```bash\n# 使用会话名称\ntmux kill-session -t Seesion-Name\n\n# 使用会话编号\ntmux kill-session -t Session-Num\n```\n\n##### 切换会话\n\n```bash\n# 使用会话名称\ntmux switch -t Seesion-Name\n\n# 使用会话编号\ntmux switch -t Session-Num\n```\n\n##### 重命名会话\n\n在Tmux会话内，重命名的快捷键是`Ctrl+b $`\n\n在终端界面\n\n```bash\n# 使用会话名称\ntmux rename-session -t Seesion-Name New-Name\n\n# 使用会话编号\ntmux rename-session -t Session-Num New-Name\n```\n\n#### 窗格操作\n\n`Ctrl+b %`：划分左右两个窗格\n\n``Ctrl+b \"``：划分上下两个窗格\n\n`Ctrl+b q`：显示窗格编号\n\n## 第五章：在服务器上利用GPU跑程序的简化步骤\n\n1. 利用FileZilla软件登录远程服务器上传所需程序文件\n2. 在终端利用SSH登录远程服务器\n3. 按照下面的命令进行操作，建议使用**tmux终端复用神器**，第2、3、4步不是必须的，但是强烈推荐使用！\n\n```bash\nssh username@IPaddress -p 22      # 登录服务器\ntmux ls                           # 查看终端会话列表，若没有，新建一个\n                                  # 会话窗口 tmux new -s Seesion-Name，保证程序在后台运行\ntmux a -t Seesion-Name             # 进入你指定的会话窗口\nsource activate tensorflow-gpu    # 在会话窗口中激活tensorflow-gpu环境\ncd xxx/yyy                        # 程序文件所在路径\nls                                # 查看文件\npython abc.py                     # 运行程序\n```\n\n## 第六章：服务器管理*\n\n### 添加/删除账户\n\n#### 添加用户\n\n```bash\n# 1、创建hadoop用户并修改密码\nsudo useradd -m username -s /bin/bash -g lab532 \nsudo passwd username  \n```\n\n使用`useradd`命令创建用户，其中\n\n- `-m`：创建用户的主目录\n- `-s`：新账户的登录 shell\n- `-g`：新账户所属的用户组的名称或 ID，实验室用户都在组`lab532`中\n\n#### 删除用户\n\n```bash\n# 2、删除用户\nsudo deluser username --remove\n```\n\n### 用户组\n\n#### 查看用户的UID和GID\n\n以用户`adoredee`为例，查看用户`adoredee`的的UID和GID\n\n```bash\nid adoredee\n```\n\n- UID为UserId，即用户ID，用来标识每个用户的唯一标示符\n- GID为GroupId，即组ID，用来标识用户组的唯一标识符\n\n#### 修改用户的用户组\n\n```bash\nsudo usermod -g lab532 adoredee\n```\n\n强制用户`adoredee`的基本组为`lab532`\n\n#### 查看某一用户组下的所有成员\n\n查看用户组`lab532`下的所属成员\n\n```bash\ncat /etc/group | grep 'lab532'\n```\n\n输出\n\n```bash\nlab532:x:1002:\n```\n\n得知用户组`lab532`的组ID是**1002**，\n\n```bash\nawk -F\":\" '{print $1\"\\t\\t\"$4}' /etc/passwd | grep '1002'\n```\n\n显示组`lab532`下的所有用户。\n\n#### 修改用户组名称\n\n```bash\ngroupmod -n newname oldname\n```\n\n用户组名从 `oldname`修改为 `newname`。\n\n### 将普通用户赋予管理员权限\n\n使用`useradd`命令创建的用户没有管理员权限，不能使用`sudo`命令，假设要将用户`adoredee`提拔为系统管理员，首先打开文件\n\n```bash\n# 给予/etc/sudoers文件 写 的权限\nsudo +w /etc/sudoers\nsudo nvim /etc/sudoers\n```\n\n然后找到如下界面\n\n```bash\n## Next comes the main part: which users can run what software on \n## which machines (the sudoers file can be shared between multiple\n## systems).\n## Syntax:\n##\n##      user    MACHINE=COMMANDS\n##\n## The COMMANDS section may have other options added to it.\n##\n## Allow root to run any commands anywhere\nroot     ALL=(ALL)       ALL\n```\n\n在root下面一行新增命令：\n\n```bash\nadoredee ALL=(ALL)       ALL\n```\n\n退出并保存文件，取消`/etc/sudoers`文件 **写** 的权限\n\n```bash\nsudo -w /etc/sudoers\n```\n\n此时用户`adoredee`从普通用户晋升为系统管理员。\n\n**系统管理员请尊重其他用户的隐私。**\n\n### 修改登录界面显示\n\n![](https://pic.downk.cc/item/5e989362c2a9a83be5ccd569.png)\n\n远程连接服务器时，可以在登录成功后，显示欢迎界面，如上图，设置方法如下：\n\n```bash\n# CentOS\nsudo nvim /etc/motd\n \n# Ubuntu \nsudo nvim /etc/update-motd.d\n```\n\n下面是几种不同的风格，直接复制到文件中即可。\n\n#### SJTU\n\n```\n            ____     _____  ______  __  __\n           /\\  _`\\  /\\___ \\/\\__  _\\/\\ \\/\\ \\\n           \\ \\,\\L\\_\\\\/__/\\ \\/_/\\ \\/\\ \\ \\ \\ \\\n            \\/_\\__ \\   _\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\n              /\\ \\L\\ \\/\\ \\_\\ \\ \\ \\ \\ \\ \\ \\_\\ \\\n              \\ `\\____\\ \\____/  \\ \\_\\ \\ \\_____\\\n               \\/_____/\\/___/    \\/_/  \\/_____/\n```\n\n#### Lab532\n\n```\n          /\\       /_/__/_\\  /\\ ___`\\ \n           \\ \\      \\ \\   \\ \\ \\/\\_____\\ \n            \\ \\      \\ \\___\\ \\ \\ \\____/_  \n             \\ \\      \\ \\___\\ \\ \\ \\___\\ \\ \n              \\ \\_____ \\ \\   \\ \\ \\ \\___\\_\\ \n               \\/______/\\_\\   \\_\\ \\/___/_/\n```\n\n#### 佛祖保佑\n\n```bash\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *                             _ooOoo_\n *                            o8888888o\n *                            88\" . \"88\n *                            (| -_- |)\n *                            O\\  =  /O\n *                         ____/`---'\\____\n *                       .'  \\\\|     |//  `.\n *                      /  \\\\|||  :  |||//  \\\n *                     /  _||||| -:- |||||-  \\\n *                     |   | \\\\\\  -  /// |   |\n *                     | \\_|  ''\\---/''  |   |\n *                     \\  .-\\__  `-`  ___/-. /\n *                   ___`. .'  /--.--\\  `. . __\n *                .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n *               | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n *               \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n *          ======`-.____`-.___\\_____/___.-`____.-'======\n *                             `=---='\n *\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        \n *              佛祖镇楼         永无BUG        永不修改\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n```\n\n#### 佛祖瘫痪\n\n```\n/**\n * _ooOoo_\n * o8888888o\n * 88\" . \"88\n * (| -_- |)\n *  O\\ = /O\n * ___/`---'\\____\n * .   ' \\\\| |// `.\n * / \\\\||| : |||// \\\n * / _||||| -:- |||||- \\\n * | | \\\\\\ - /// | |\n * | \\_| ''\\---/'' | |\n * \\ .-\\__ `-` ___/-. /\n * ___`. .' /--.--\\ `. . __\n * .\"\" '< `.___\\_<|>_/___.' >'\"\".\n * | | : `- \\`.;`\\ _ /`;.`/ - ` : | |\n * \\ \\ `-. \\_ __\\ /__ _/ .-` / /\n * ======`-.____`-.___\\_____/___.-`____.-'======\n * `=---='\n *          .............................................\n *           佛曰：bug泛滥，我已瘫痪！\n */\n```\n\n#### 神兽草泥马\n\n```bash\n             ┏┓　　　┏┓+ +\n        ┏┛┻━━━┛┻┓ + +\n        ┃　　　　　　　┃ 　\n        ┃　　　━　　　┃ ++ + + +\n        ████━████ ┃+\n        ┃　　　　　　　┃ +\n        ┃　　　┻　　　┃\n        ┃　　　　　　　┃ + +\n        ┗━┓　　　┏━┛\n          ┃　　　┃　　　　　　　　　　　\n          ┃　　　┃ + + + +\n          ┃　　　┃　　　　Codes are far away from bugs with the animal protecting　　　\n          ┃　　　┃ + 　　　　神兽保佑,代码无bug　　\n          ┃　　　┃\n          ┃　　　┃　　+　　　　　　　　　\n          ┃　 　　┗━━━┓ + +\n          ┃ 　　　　　　　┣┓\n          ┃ 　　　　　　　┏┛\n          ┗┓┓┏━┳┓┏┛ + + + +\n           ┃┫┫　┃┫┫\n           ┗┻┛　┗┻┛+ + + +\n```\n\n#### 兔子\n\n```\n/**********/**********/**********//**********//**********//**********//**********/\n  .--,       .--,\n ( (  \\.---./  ) )\n  '.__/o   o\\__.'\n     {=  ^  =}\n      >  -  <\n     /       \\\n    //       \\\\\n   //|   .   |\\\\\n   \"'\\       /'\"_.-~^`'-.\n      \\  _  /--'         `\n    ___)( )(___\n   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。\n \n \n \n/**********/**********/**********//**********//**********//**********//**********/\n```\n\n#### 顶\n\n```\n/**\n * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂\n * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂　　　　　　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　　　　　頂頂頂　\n * 　　　頂頂　　　　　　頂頂　頂頂　頂頂\n * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂\n * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂\n */\n```\n\n#### 妹子\n\n```\n//                       .::::.\n//                     .::::::::.\n//                    :::::::::::\n//                 ..:::::::::::'\n//              '::::::::::::'\n//                .::::::::::\n//           '::::::::::::::..\n//                ..::::::::::::.\n//              ``::::::::::::::::\n//               ::::``:::::::::'        .:::.\n//              ::::'   ':::::'       .::::::::.\n//            .::::'      ::::     .:::::::'::::.\n//           .:::'       :::::  .:::::::::' ':::::.\n//          .::'        :::::.:::::::::'      ':::::.\n//         .::'         ::::::::::::::'         ``::::.\n//     ...:::           ::::::::::::'              ``::.\n//    ````':.          ':::::::::'                  ::::..\n//                       '.:::::'                    ':'````..\n//\n\n```\n\n#### 神兽小龙\n\n```bash\n                                                   __----~~~~~~~~~~~------___\n                                  .  .   ~~//====......          __--~ ~~\n                   -.            \\_|//     |||\\\\  ~~~~~~::::... /~\n                ___-==_       _-~o~  \\/    |||  \\\\            _/~~-\n        __---~~~.==~||\\=_    -_--~/_-~|-   |\\\\   \\\\        _/~\n    _-~~     .=~    |  \\\\-_    '-~7  /-   /  ||    \\      /\n  .~       .~       |   \\\\ -_    /  /-   /   ||      \\   /\n /  ____  /         |     \\\\ ~-_/  /|- _/   .||       \\ /\n |~~    ~~|--~~~~--_ \\     ~==-/   | \\~--===~~        .\\\n           '         ~-|      /|    |-~\\~~       __--~~\n                       |-~~-_/ |    |   ~\\_   _-~            /\\\n                            /  \\     \\__   \\/~                \\__\n                        _--~ _/ | .-~~____--~-/                  ~~==.\n                       ((->/~   '.|||' -_|    ~~-/ ,              . _||\n                                  -_     ~\\      ~~---l__i__i__i--~~_/\n                                  _-~-__   ~)  \\--______________--~~\n                                //.-~~~-~_--~- |-------~~~~~~~~\n                                       //.-~~~--\\\n \n                                 神兽保佑   代码无BUG!\n```\n\n#### 电脑\n\n```\n       ,----------------,              ,---------,\n          ,-----------------------,          ,\"        ,\"|\n        ,\"                      ,\"|        ,\"        ,\"  |\n       +-----------------------+  |      ,\"        ,\"    |\n       |  .-----------------.  |  |     +---------+      |\n       |  |                 |  |  |     | -==----'|      |\n       |  |  I LOVE DOS!    |  |  |     |         |      |\n       |  |  Bad command or |  |  |/----|`---=    |      |\n       |  |  C:\\>_          |  |  |   ,/|==== ooo |      ;\n       |  |                 |  |  |  // |(((( [33]|    ,\"\n       |  `-----------------'  |,\" .;'| |((((     |  ,\"\n       +-----------------------+  ;;  | |         |,\"\n          /_)______________(_/  //'   | +---------+\n     ___________________________/___  `,\n    /  oooooooooooooooo  .o.  oooo /,   \\,\"-----------\n   / ==ooooooooooooooo==.o.  ooo= //   ,`\\--{)B     ,\"\n  /_==__==========__==_ooo__ooo=_/'   /___________,\"\n  \n```\n\n#### 书\n\n```\n                  .-~~~~~~~~~-._       _.-~~~~~~~~~-.\n              __.'              ~.   .~              `.__\n            .'//                  \\./                  \\\\`.\n          .'//                     |                     \\\\`.\n        .'// .-~\"\"\"\"\"\"\"~~~~-._     |     _,-~~~~\"\"\"\"\"\"\"~-. \\\\`.\n      .'//.-\"                 `-.  |  .-'                 \"-.\\\\`.\n    .'//______.============-..   \\ | /   ..-============.______\\\\`.\n  .'______________________________\\|/______________________________`.\n\n```\n\n#### 键盘\n\n宽度有点窄，变形了……\n\n```\n/**\n * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐\n * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘\n * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\n * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│& 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │\n * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\n * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │\n * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │\n * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│\" '│ Enter  │               │ 4 │ 5 │ 6 │   │\n * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\n * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │< ,│> .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │\n * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││\n * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│\n * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\n */\n```\n\n#### 剪刀手\n\n```bash\n                      d*##$.\n zP\"\"\"\"\"$e.           $\"    $o\n4$       '$          $\"      $\n'$        '$        J$       $F\n 'b        $k       $>       $\n  $k        $r     J$       d$\n  '$         $     $\"       $~\n   '$        \"$   '$E       $\n    $         $L   $\"      $F ...\n     $.       4B   $      $$$*\"\"\"*b\n    '$        $.  $$     $$      $F\n      \"$       R$  $F     $\"      $\n       $k      ?$ u*     dF      .$\n       ^$.      $$\"     z$      u$$$$e\n       #$b             $E.dW@e$\"    ?$\n         #$           .o$$# d$$$$c    ?F\n         $      .d$$#\" . zo$>   #$r .uF\n          $L .u$*\"      $&$$$k   .$$d$$F\n           $$\"            \"\"^\"$$$P\"$P9$\n          JP              .o$$$$u:$P $$\n          $          ..ue$\"      \"\"  $\"\n         d$          $F              $\n         $$     ....udE             4B\n          #$    \"\"\"\"` $r            @$\n           ^$L        '$            $F\n             RN        4N           $\n              *$b                  d$\n               $$k                 $F\n               $$b                $F\n                 $\"\"               $F\n                 '$                $\n                  $L               $\n                  '$               $\n                   $               $\n\n\n```\n\n#### 龙图腾\n\n```\n......................................&&.........................\n....................................&&&..........................\n.................................&&&&............................\n...............................&&&&..............................\n.............................&&&&&&..............................\n...........................&&&&&&....&&&..&&&&&&&&&&&&&&&........\n..................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............\n................&...&&&&&&&&&&&&&&&&&&&&&&&&&&&&.................\n.......................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........\n...................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...............\n..................&&&   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\n...............&&&&&@  &&&&&&&&&&..&&&&&&&&&&&&&&&&&&&...........\n..............&&&&&&&&&&&&&&&.&&....&&&&&&&&&&&&&..&&&&&.........\n..........&&&&&&&&&&&&&&&&&&...&.....&&&&&&&&&&&&&...&&&&........\n........&&&&&&&&&&&&&&&&&&&.........&&&&&&&&&&&&&&&....&&&.......\n.......&&&&&&&&.....................&&&&&&&&&&&&&&&&.....&&......\n........&&&&&.....................&&&&&&&&&&&&&&&&&&.............\n..........&...................&&&&&&&&&&&&&&&&&&&&&&&............\n................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\n..................&&&&&&&&&&&&&&&&&&&&&&&&&&&&..&&&&&............\n..............&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&....&&&&&............\n...........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&......&&&&............\n.........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........&&&&............\n.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...........&&&&............\n......&&&&&&&&&&&&&&&&&&&...&&&&&&...............&&&.............\n.....&&&&&&&&&&&&&&&&............................&&..............\n....&&&&&&&&&&&&&&&.................&&...........................\n...&&&&&&&&&&&&&&&.....................&&&&......................\n...&&&&&&&&&&.&&&........................&&&&&...................\n..&&&&&&&&&&&..&&..........................&&&&&&&...............\n..&&&&&&&&&&&&...&............&&&.....&&&&...&&&&&&&.............\n..&&&&&&&&&&&&&.................&&&.....&&&&&&&&&&&&&&...........\n..&&&&&&&&&&&&&&&&..............&&&&&&&&&&&&&&&&&&&&&&&&.........\n..&&.&&&&&&&&&&&&&&&&&.........&&&&&&&&&&&&&&&&&&&&&&&&&&&.......\n...&&..&&&&&&&&&&&&.........&&&&&&&&&&&&&&&&...&&&&&&&&&&&&......\n....&..&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...........&&&&&&&&.....\n.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............&&&&&&&....\n.......&&&&&.&&&&&&&&&&&&&&&&&&..&&&&&&&&...&..........&&&&&&....\n........&&&.....&&&&&&&&&&&&&.....&&&&&&&&&&...........&..&&&&...\n.......&&&........&&&.&&&&&&&&&.....&&&&&.................&&&&...\n.......&&&...............&&&&&&&.......&&&&&&&&............&&&...\n........&&...................&&&&&&.........................&&&..\n.........&.....................&&&&........................&&....\n...............................&&&.......................&&......\n................................&&......................&&.......\n.................................&&..............................\n..................................&..............................\n\n```\n\n## 第七章：问题汇总\n\n### 1. 禁止使用sudo yum update\n\n起因是服务器更新了内核，CentOS从7.6升级到了7.7，输入`nvidia-smi`提示\n\n> NVIDIA NVML Driver/library version mismatch\n\n在终端输入以下命令查看nvidia的kernel模式\n\n```bash\nlsmod | grep nvidia\n```\n\n什么都没有。\n\n接着查看显卡驱动所使用的内核版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nNothing！\n\n再查看nvcc编译器的版本\n\n```bash\nnvcc --version\n```\n\n提示：**bash: nvcc: 未找到命令...**\n\nNothing is everywhere！可能只能去现场启动**重启大法**了。\n\n- **Notice：**\n\n  如果运行`lsmod | grep nvidia`出现了类似\n\n  ```bash\n  nvidia_uvm 634880 8\n  nvidia_drm 53248 0\n  nvidia_modeset 790528 1 nvidia_drm\n  nvidia 12312576 86 nvidia_modeset,nvidia_uvm\n  ```\n\n  这样的输出，则先**关闭相关的进程**\n\n  ```bash\n  sudo rmmod nvidia_uvm\n  sudo rmmod nvidia_modeset\n  ```\n\n  然后\n\n  ```bash\n  sudo rmmod nvidia\n  nvidia-smi\n  ```\n\n  此时可能会出现\n\n  ```bash\n  NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver\n  ```\n\n  再看看**NVIDIA显卡状态**\n\n  ```bash\n  lspci | grep -i nvidia\n  ```\n\n  输出（查看集成显卡的命令是`lspci | grep -i VGA`）\n\n  ```bash\n  04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)\n  04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)\n  ```\n\n  正常。\n\n  **查看系统依赖**\n\n  ```\n  yum info dkms\n  yum info libvdpau \n  yum info kernel-devel\n  ```\n\n  都已安装，若没有安装，执行`sudo yum install packages`，`packages`指的是缺省的包。\n\n  **为内核安装NVIDIA模块**\n\n  ```bash\n  dkms status\n  ```\n\n  是否有输出\n\n  ```bash\n  cd /usr/src/\n  ```\n\n  看看NVIDIA有哪些版本，选择其中一个进行安装\n\n  ```bash\n  dkms install -m nvidia -v xxx.xx     // xxx.xx为/usr/src/下的NVIDIA的版本号\n  ```\n\n  如果有多个版本，则挨个试试……\n\n  非必要情况下，不要重启。\n\n  继续尝试`nvidia-smi`命令，如果依旧不正常，继续探索。\n\n### 2. ImportError: libcublas.so.9.0\n\n- **错误**——激活环境后，导入`import tensorflow as tf`包后，出现错误\n\n  > ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量`LD_LIBRARY_PATH`未能配置正确\n\n- **解决**——`libcublas.so.9.0`文件在`/usr/local/cuda/lib64`路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行\n\n  ```bash\n  sudo ldconfig /usr/local/cuda/lib64\n  ```\n\n  问题可能会被解决，如果出现了**情况2**，请看解答。\n\n### 3. libcublas.so.9.0: cannot open shared object file\n\n- **错误**——运行**情况1**里的`sudo ldconfig /usr/local/cuda/lib64`后，出现错误\n\n  > libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——符号链接出错\n\n- **解决**——创建软链接，将`libcudnn.so.7.0.5`软连接到`libcudnn.so.7`，如果`libcudnn.so.7.0.5`丢失，`libcudnn.so.7`将失效，`-s`表示建立软连接，`-f`表示强制执行。\n\n  ```bash\n  sudo ln -sf /usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/local/cuda-9.0/lib64/libcudnn.so.7\n  ```\n\n### 4. 安装PyTorch时中断安装\n\n- **错误**——在安装PyTorch过程中出现类似的错误\n\n  > CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2>\n  > Elapsed: -\n  >\n  > An HTTP error occurred when trying to retrieve this URL.\n  > HTTP errors are often intermittent, and a simple retry will get you on your way.\n\n- **原因**——网络原因\n- **解决**——[更换Anaconda源](#配置Anaconda国内开源镜像)或者继续尝试安装命令。\n\n（未完待续，随时更新）\n\n### 参考\n\n1. [stat cuda](https://blog.csdn.net/ksws0292756/article/details/80120561?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)\n2. [NVIDIA NVML Driver/library version mismatch](https://blog.csdn.net/Hungryof/article/details/99233087?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2)\n3. [NVIDIA driver](https://gist.github.com/fxrcode/0afa3c8db13f0ae0b427bb6ddc44adf4)\n4. [NVIDIA驱动安装](https://blog.csdn.net/weixin_42451919/article/details/89400365)\n5. https://qinqianshan.com/unix/linux/nvidia/\n6. [CUDA和cuDNN版本切换](https://dinghow.site/2019/05/19/cuda-cuDNN-version/)\n7. [切换GCC](https://oldpan.me/archives/cuda-cuDNN-multiple-edition)\n8. [CUDA切换](https://zhuanlan.zhihu.com/p/35834028)","source":"_posts/服务器环境搭建、配置及使用.md","raw":"---\ntitle: 服务器环境搭建、配置及使用\ntoc: true\nrecommend: 1\ndate: 2020-03-30 14:30:43\nthumbnail: https://pic.downk.cc/item/5e887c1d504f4bcb04ee9d03.png\ntags: Vim\ncategories: Linux\nkeywords: Vim\n---\n\n\n\n搭建和配置**深度学习环境**、**Matlab环境**，普通用户可以自由切换多版本CUDA、cuDNN版本，自由组合创建不同版本的Tensorflow、PyTorch等深度学习环境。\n\n注意：标题右上角带有\"*****\"标记的，意为这一部分内容需要**管理员**操作。\n\n <!-- more --> \n\n## 目录\n\n[toc]\n\n## 安装计划\n\n- [ ] 服务器系统\n- [x] NVIDIA驱动安装\n- [x] CUDA安装：9.0、9.1、9.2、10.0、10.1、10.2\n- [x] cuDNN安装：7.0.5、7.4、7.6\n- [x] SSH远程登录及文件传输\n- [x] Aanconda安装\n- [x] OpenCV安装（pip）\n- [ ] Opencv源码编译\n- [ ] GCC安装：4.8.5、7.3.1\n- [ ] MatLab安装\n- [x] Anaconda安装\n- [x] Tensorflow各个版本的安装\n- [x] PyTorch各个版本的安装\n- [ ] Torch各个版本的安装\n- [ ] Caffe安装\n- [ ] 使用 **Environment Module** 管理不同版本的软件\n\n## 第一章：服务器情况简介\n\n### 查看系统硬件设备信息\n\n运行\n\n```bash\nsudo dmidecode | more\n```\n\n查看服务器硬件设备信息，包括**BIOS信息（BIOS Information）**、**服务器信息（System Information）**、**CPU信息（Processor Information）**、**缓存信息（Cache Information）**、**内存信息（Physical Memory Array）**、**电源信息（System Power Supply）**、**内存设备（Memory Device）**等。\n\n服务器型号为[Dell R730](https://www.dell.com/zh-cn/work/shop/povw/poweredge-r730)，有两个显卡插槽，原机无显卡。2018年7月，在服务器上安装了一块GPU，型号为GTX 1080（`lspci | grep -i nvidia`），显存8G。\n\n### 查看系统CPU\n\n**查看CPU的统计信息**\n\n```bash\nlscpu\n```\n\n输出\n\n```\nArchitecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                6\nOn-line CPU(s) list:   0-5\nThread(s) per core:    1\nCore(s) per socket:    6\n座：                 1\nNUMA 节点：         1\n厂商 ID：           GenuineIntel\nCPU 系列：          6\n型号：              79\n型号名称：        Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz\n步进：              1\nCPU MHz：             1200.085\nCPU max MHz:           1700.0000\nCPU min MHz:           1200.0000\nBogoMIPS：            3400.03\n虚拟化：           VT-x\nL1d 缓存：          32K\nL1i 缓存：          32K\nL2 缓存：           256K\nL3 缓存：           15360K\nNUMA 节点0 CPU：    0-5\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm arat pln pts\n```\n\n查看每个CPU信息，如每个CPU的型号，主频等。\n\n```\ncat /proc/cpuinfo\n```\n\n运行命令查看CPU型号，为**Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz**。\n\n### 查看内存\n\n查看内存使用量和交换区使用量\n\n```bash\nfree -m\n```\n\n查看内存详细情况\n\n```bash\ncat /proc/meminfo    // 或者vmstat -s\n```\n\n输出\n\n```bash\nMemTotal:       40779120 kB\nMemFree:          323944 kB\nMemAvailable:   38162436 kB\nBuffers:         1284976 kB\nCached:         36028884 kB\nSwapCached:            0 kB\nActive:         19560888 kB\nInactive:       18538364 kB\nActive(anon):    1214532 kB\nInactive(anon):   270932 kB\nActive(file):   18346356 kB\nInactive(file): 18267432 kB\nUnevictable:           0 kB\nMlocked:               0 kB\nSwapTotal:             0 kB\nSwapFree:              0 kB\nDirty:                 0 kB\nWriteback:             0 kB\nAnonPages:        785432 kB\nMapped:           139012 kB\nShmem:            700072 kB\nSlab:            1861424 kB\nSReclaimable:    1663764 kB\nSUnreclaim:       197660 kB\nKernelStack:        9504 kB\nPageTables:        17908 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:    20389560 kB\nCommitted_AS:    3160860 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      443080 kB\nVmallocChunk:   34358900732 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:     36864 kB\nCmaTotal:              0 kB\nCmaFree:               0 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:    38408912 kB\nDirectMap2M:     3305472 kB\nDirectMap1G:     2097152 kB\n```\n\n原机内存大小为8G，在2018年7月，扩展到40G，实际上不到40G，为38.8G左右。\n\n### 磁盘信息\n\n**查看硬盘和分区分布**\n\n```bash\nlsblk\n```\n\n输出\n\n```bash\nNAME                   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nsda                      8:0    0   5.5T  0 disk \n├─sda1                   8:1    0   476M  0 part /boot\n├─sda2                   8:2    0    61M  0 part \n├─sda3                   8:3    0    64M  0 part /boot/efi\n├─sda4                   8:4    0   1.4T  0 part /home\n├─sda5                   8:5    0   3.6T  0 part \n│ ├─VolGroup0-datavol0 253:2    0     1T  0 lvm  /mnt/vdisk0\n│ ├─VolGroup0-datavol1 253:3    0     1T  0 lvm  /mnt/vdisk1\n│ ├─VolGroup0-datavol2 253:4    0     1T  0 lvm  /mnt/vdisk2\n│ └─VolGroup0-datavol3 253:5    0   540G  0 lvm  /mnt/vdisk3\n└─sda6                   8:6    0 474.5G  0 part \n  ├─centos-root        253:0    0   400G  0 lvm  /\n  └─centos-swap        253:1    0  74.5G  0 lvm  \nsr0                     11:0    1  1024M  0 rom  \nloop0                    7:0    0  14.4G  0 loop /mnt/iso\n```\n\n可以看到目前服务器上的磁盘结构。**如果重装系统，`/home`（sda4）可以保留，新系统在安装时，不必要再分/home区。直接将旧系统的/home挂载到新系统上即可。**\n\n**目前磁盘已采用LVM技术**。\n\n> LVM是（Logical Volume Manager) 逻辑卷管理的简写，它是Linux环境下对磁盘分区进行管理的一种机制。LVM是建立在硬盘和分区之上的一个逻辑层，屏蔽了底层磁盘布局，便于动态调整磁盘容量来提高磁盘分区管理的灵活性。它可以将一个或多个底层块设备组织成一个逻辑设备的卷组，管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统，管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配 。\n\n**查看更详细的信息**\n\n```bash\nsudo fdisk -l\n```\n\n**查看各分区使用情况**\n\n```bash\ndf -h \n```\n\n### 查看服务器系统信息\n\n```bash\ncat /etc/*releasebash\n```\n\n输出\n\n```bash\nCentOS Linux release 7.7.1908 (Core)\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:centos:centos:7\"\nHOME_URL=\"https://www.centos.org/\"\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\n\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\nREDHAT_SUPPORT_PRODUCT=\"centos\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n\nCentOS Linux release 7.7.1908 (Core)\nCentOS Linux release 7.7.1908 (Core)\n```\n\n系统为CentOS 7.7。\n\n**查看系统主机名**\n\n```bash\nhostname\n```\n\n### 查看网卡\n\n**查看网卡硬件信息**\n\n```bash\nlspci | grep -i 'eth'\n```\n\n输出\n\n```\n01:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n01:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n02:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n02:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe\n\n```\n\n**查查看系统的所有网络接口**\n\n```bash\nifconfig -a\n```\n\n可以看到连接网络的那个端口，假设是em2，可以查看该端口的IPV4、IPV6、子网掩码等信息。如果要详细查看如果某个网络接口的详细信息，比如em2的详细参数和指标\n\n```bash\nethtool em2\n```\n\n输出\n\n```bash\nSettings for em2:\n    Supported ports: [ TP MII ]\n    Supported link modes:   10baseT/Half 10baseT/Full \n                            100baseT/Half 100baseT/Full \n                            1000baseT/Half 1000baseT/Full # 支持千兆半双工，全双工模式\n    Supported pause frame use: No \n    Supports auto-negotiation: Yes # 支持自适应模式，一般都支持\n    Advertised link modes:  10baseT/Half 10baseT/Full \n                            100baseT/Half 100baseT/Full \n                            1000baseT/Half 1000baseT/Full\n    Advertised pause frame use: Symmetric\n    Advertised auto-negotiation: Yes # 默认使用自适应模式\n    Advertised FEC modes: Not reported\n    Link partner advertised link modes:  10baseT/Half 10baseT/Full \n                                         100baseT/Half 100baseT/Full \n                                         1000baseT/Full\n    Link partner advertised pause frame use: No\n\tLink partner advertised auto-negotiation: Yes\n\tLink partner advertised FEC modes: Not reported\n    Speed: 1000Mb/s # 现在网卡的速度是1000Mb\n    Duplex: Full   # 全双工\n    .....\n    Link detected: yes    # 表示有网线连接，和路由是通的\n```\n\n**查看显示去往192.168.1.102的所有HTTP会话信息**\n\n```bash\nsudo tcpdump -ni em1 'dst 192.168.1.102 and tcp and port 8080'\n```\n\n**显示来源IP或者目的IP为192.168.1.102的网络通信**\n\n```bash\nsudo tcpdump -i eth0 host 192.168.1.102\n```\n\n**查看路由器列表**\n\n```bash\nroute -n\n```\n\n**查看所有监听端口**\n\n```bash\nnetstat -lntp\n```\n\n**查看所有已经建立的连接**。\n\n```bash\nnetstat -antp\n```\n\n**查看网络统计信息**\n\n```bash\nnetstat -s\n```\n\n### 进程\n\n**查看系统所有进程**\n\n```bash\nps -ef\n```\n\n**显示所有进程的详细信息**\n\n```bash\nps aux\n```\n\n**显示某一用户的进程列表**\n\n```bash\n ps -f -u username\n```\n\n**实时显示进程状态**\n\n```bash\ntop\n```\n\n按`q`退出\n\n**列出当前的进程，以及它们的树状结构**\n\n```bash\npstree\n```\n\n**结束进程**，PID为Process ID\n\n```bash\nkill PID\n```\n\n**查看系统信号变量**\n\n```bash\nkill -l\n```\n\n事实上，还有一个比较酷炫的命令是`htop`，安装方法是`sudo yum install htop`，在终端输入：\n\n```bash\nhtop\n```\n\n**遇到顽固的进程，使出必杀技**\n\n```bash\nkill -9 PID\n```\n\n![](https://s4.aconvert.com/convert/p3r68-cdx67/a6yfe-e7t35.png)\n\n### 资源统计\n\n**查看当前目录大小**\n\n```bash\ndu -sh\n```\n\n**查看系统运行时间、用户数、负载**\n\n```bash\nuptime                 \n```\n\n### 系统常用指令集合\n\n#### cpu.sh — CPU统计信息指令\n\n```bash\n#/bin/bash\n\n# 限制某个线程的cpu使用率\nsudo cpulimit -p pid -l 50\nps -eo %cpu,args | grep -m1 PROCESS | awk '{print $1}'\n\n# 将当前进程按照memory和cpu排序\nps aux --sort=%mem,%cpu\n\n# 按照cpu使用率排序\nps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed \"/^ 0.0 /d\"\n\n# 查看当前系统的物理cpu个数\ngrep \"processor\" /proc/cpuinfo | wc -l\t\ngrep -c -e '^cpu[0-9]\\+' /proc/stat\n\n# 查看当前cpu型号\ngrep \"model name\" /proc/cpuinfo\n\n# 查看当前cpu信息\ncat /proc/cpuinfo\n\n# 查看当前系统的位数\ngrep -q '\\<lm\\>' /proc/cpuinfo && echo 64 bits || echo 32 bits\ngetconf LONG_BIT | grep '64'\njava -version\n\n# 查看当前系统的cpu频率\nawk -F\": \" '/cpu MHz\\ */ { print \"Processor (or core) running speed is: \" $2 }' /proc/cpuinfo ; dmidecode | awk -F\": \" '/Current Speed/ { print \"Processor real speed is: \" $2 }'\n\n# 查看每个cpu每个进程的cpu使用率\nps ax -L -o pid,tid,psr,pcpu,args | sort -nr -k4| head -15 | cut -c 1-90\n\n# 查看当前中断\ncat /proc/interrupts\n\n# 查看多个处理器的使用率相关信息\nmpstat –P ALL 1\n\n# 每个物理CPU中Core的个数：\ncat /proc/cpuinfo | grep \"cpu cores\" | uniq | awk -F: '{print $2}'\n\n# 是否为超线程？\n# 如果有两个逻辑CPU具有相同的”core id”，那么超线程是打开的。\n# 每个物理CPU中逻辑CPU(可能是core, threads或both)的个数：\ncat /proc/cpuinfo | grep \"siblings\"\n\n# /proc/stat 文件中有一行记录的机器从启动依赖，各个中断序号发生中断的次数。\n# 这一行以intr开头，接下来的第一个数字是总的中断数目，之后就是分别的中断数目，从0开始。\ncat /proc/stat  | grep intr\n```\n\n#### disk.sh — 磁盘相关统计指令\n\n```bash\n#/bin/bash\n\n# 按照目录大小排序战士最前面15个目录或者文件\ndu -xB M --max-depth=2 /var | sort -rn | head -n 15\n\n# 列出当前所有子目录的文件大小\ndu -h --max-depth=1\n\n# 列出当前文件或者目录最大的10个\ndu -s * | sort -n | tail\n\n# 按照目录大小从大到小排序\ndu -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf \"%.1f%s\", 1>=2∗∗30?(1/2**30, \"G\"): 1>=2∗∗20?(1/2**20, \"M\"): 1>=2∗∗10?(1/2**10, \"K\"): ($1, \"\")}e'\n\n# 列出path这个目录的文件树\ndu -h /path | sort -h\n\n# 每隔60s监控对应目录的文件大小变化\nwatch -n60 du /var/log/messages\n\n\n# 递归删除当前目录下所有子目录中的.svn目录\nfind . -type d -name '.svn' -print0 | xargs -0 rm -rdf\n\n# 列出当前磁盘的使用情况\ndf -P | column -t\n\n# 监控磁盘的使用情况\nwatch -d -n 5 df\n\n# 列出当前inode的使用情况\ndf -i  <partition>\n\n# 按照每个磁盘使用量从高到低排序\ndf -h | grep -v ^none | ( read header ; echo \"$header\" ; sort -rn -k 5)\n\n\n# 查看物理磁盘的使用情况\ndf -x tmpfs | grep -vE \"(gvfs|procbususb|rootfs)\"\n\n# 查看当前所有磁盘的大小和使用量\ndf -H\n\n# 查看所有分区使用情况\nfdisk -l /dev/sda\n\n# 显示系统所有的分区或给定的分区\nfdisk -l       \n# 显示时，显示的是扇区数不是柱面数           \nfdisk -u           \n# 显示指定partition的block数       \nfdisk -s partition       \n\n# 查看磁盘的读写容量\niostat -m -d /dev/sda1\n\n# 测试磁盘的读写速度\nhdparm -t /dev/sda\n\n# 查看某个文件的所有链接\nfind -L / -samefile /path/to/file -exec ls -ld {} +\n\n# 查看最大的5个文件\nfind . -type f -exec ls -s {} \\; | sort -n -r | head -5\n\n# 查看365天前的文件并删除\nfind ./ -type f -mtime +365 -exec rm -f {} \\;\n\n# 查看大于100M的文件\nfind . -type f -size +100M\n```\n\n#### net.sh  — 网络信息统计指令\n\n```bash\n#/bin/bash\n\n# 查看http请求的header\ntcpdump -s 1024 -l -A -n host 192.168.9.56\ntcpdump -s 1024 -l -A src 192.168.9.56 or dst 192.168.9.56\nsudo tcpdump -A -s 1492 dst port 80\n\n# 本地网络中IP地址为192.168.0.5的主机现在与外界通信的情况\nsudo tcpdump -i eth0 src host 192.168.0.5\n\n# 查看网卡eth0的http请求的tcp包\ntcpdump -i eth0 port http\ntcpdump -i eth0 port http or port smtp or port imap or port pop3 -l -A | egrep -i 'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|userna me:|password:|login:|pass |user '\n\n# 查看tcp，upd，icmp非ssh的包\ntcpdump -n -v tcp or udp or icmp and not port 22\n\n# 查看http请求的request 包\nsudo tcpdump -i eth0 port 80 -w -\n\n\n# 过滤http响应的get host头信息\nsudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"GET \\/.*|Host\\: .*\"\n\n# DNS查询请求响应包\nsudo tcpdump -i en0 'udp port 53'\n\n# nmap -sP指定使用Ping echo 进行扫描 /24查看目的网络有多少主机处于运行状态\nnmap -sP 192.168.0.1\nnmap -sP 192.168.0.0/24\nnmap -O www.baidu.com\n\n# Netstat主要用于Linux/Unix主机察看自身的网络状况，如开启的端口、在为哪些用户服务以及服务的状态\nnetstat -a\nnetstat -nlp\n\n# netcat扫描机器开放的端口\nnc -z -v -n 172.31.100.7 21-25\n\n# netcat 命令会连接开放端口21并且打印运行在这个端口上服务的banner信息。\nnc -v 172.31.100.7 21\n\n# 输出网络的路由表\nroute -n\n\n# 显示结果包括服务器已经运行了多长时间，有多少登陆用户和对服务器性能的总体评估（load average）。\nuptime\n\n# 监控 eth1 的网卡的流量 \niftop -i eth1 \n# 以位元组(bytes 即字节)为单位显示流量(预设是位元 bits): \niftop -B \n# 直接显示 IP, 不进行DNS 反解: \niftop -n \n# 直接显示连接埠编号, 不显示服务名称: \niftop -N \n# 显示某个网段进出封包流量 \niftop -F 192.168.1.0/24 or 192.168.1.0/255.255.255.0 \n\n# 网络流量实时监控工具之nload,查看网卡eth0的流量\nnload -n eth0\n\n# 查看各个网卡的流量\nnload -h\n\n# IPTraf是一个网络监控工具,功能比nload更强大,可以监控所有的流量,IP流量,按协议分的流量,还可以设置过滤器\niptraf\n\n# 查看网络接口当前配置与接口命名：\nifconfig\n# 打开（up）或关闭（down）适配器\nifconfig <网络名> <up|down>\n# 为适配器分配IP地址：\nifconfig <网络名> <ip地址>\n# 为适配器分配第二个IP地址：\nifconfig <网络名:实例数> <ip地址>\n\n# 显示某个网络适配器的驱动信息，适用于查询软件兼容性的情况：\nethtool -i eth0\n# 显示网络数据：\nethtool -S\n# 设置适配器连接速度（Mbps）\nethtool speed <10|100|1000>\n\n# wget\nwget -S --spider http://osswin.sourceforge.net/ 2>&1 | grep Mod\n\n# 查看mac地址\ncat /sys/class/net/*/address\n\n# 查看eth0的ip\nifconfig eth0 | awk '/inet addr/ {split ($2,A,\":\"); print A[2]}'\n\n# curl 查看页面对应的domail name\ncurl -s http://en.m.wikipedia.org/wiki/List_of_Internet_top-level_domains | sed -n '/<tr valign=\"top\">/{s/<[^>]*>//g;p}'\n\n# talnet\ntelnet localhost 6666\n\n# 查看所有的网络接口\nawk '{print $1}' /proc/net/dev|grep :|sed \"s/:.*//g\"\n\n# 查看DNS server版本好\nnslookup -q=txt -class=CHAOS version.bind NS.PHX5.NEARLYFREESPEECH.NET\n```\n\n#### system.sh — 系统信息相关指令\n\n```bash\n#/bin/bash\n\n# 查看当前系统load\nuptime\n\n# 查看系统状态和每个进程的系统资源使用状况\ntop\n\n# 可视化显示CPU的使用状况\nhtop\n\n# 查看每个CPU的负载信息\nmpstat -P ALL 1\n\n# 每隔1秒查看磁盘IO的统计信息\niostat -xkdz 1\n\n# 每隔一秒查看虚拟内存的使用信息\nvmstat 1\n\n# 查看内存使用统计信息\nfree\n\n# 查看网络使用信息\nnicstat -z 1\n\n# 类似vmstat的显示优化的工具\ndstat 1\n\n# 查看系统活动状态，比如系统分页统计，块设备IO统计等\nsar\n\n# 网络连接状态查看\nnetstat -s\n\n# 进程资源使用信息查看\npidstat 1\npidstat -d 1\n\n# 查看某个进程的系统调用信息 -p后面是进程id，-tttT 进程系统后的系统调用时间\nstrace -tttT -p 12670\n# 统计IO设备输入输出的系统调用信息\nstrace -c dd if=/dev/zero of=/dev/null bs=512 count=1024k\n\n\n# tcpdump 查看网络数据包\ntcpdump -nr /tmp/out.tcpdump\n\n# 块设备的读写事件信息统计\nbtrace /dev/sdb \n\n# iotop查看某个进程的IO操作统计信息\niotop -bod5\n\n# slabtop 查看内核 slab内存分配器的使用信息\nslabtop -sc\n\n# 系统参数设置\nsysctl -a\n\n# 系统性能指标统计信息\nperf stat gzip file1\n# 系统cpu活动状态查看\nperf record -a -g -F 997 sleep 10\n```\n\n#### process.sh — 进程统计相关指令\n\n```bash\n## ps查看当前系统执行的线程列表，进行瞬间状态，不是连续状态，连续状态需要使用top名称查看  更多常用参数请使用 man ps查看\nps\n\n## 显示所有进程详细信息\nps aux\n\n## -u 显示某个用户的进程列表\nps -f -u www-data \n\n## -C 通过名字或者命令搜索进程\nps -C apache2\n\n## --sort  根据进程cpu使用率降序排列，查看前5个进程  -pcpu表示降序  pcpu升序\nps aux --sort=-pcpu | head -5 \n\n## -f 用树结构显示进程的层次关系，父子进程情况下\nps -f --forest -C apache2 \n\n## 显示一个父进程的所有子进程\nps -o pid,uname,comm -C apache2\nps --ppid 2359 \n\n## 显示一个进程的所有线程  -L 参数\nps -p 3150 -L \n\n##显示进程的执行时间 -o参数\nps -e -o pid,comm,etime \n\n## 查看系统的线程数\nnproc\n\n## watch命令可以用来实时捕捉ps显示进程\nwatch -n 1 'ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15' \n\n## jobs 查看后台运行的进程  jobs命令执行的结果，＋表示是一个当前的作业，减号表是是一个当前作业之后的一个作业，jobs -l选项可显示所有任务的PID,jobs的状态可以是running, stopped, Terminated,但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识；也就是说，jobs命令显示的是当前shell环境中所起的后台正在运行或者被挂起的任务信息\njobs\n\n## 查看后台运营的进程号\njobs -p\n\n## 查看现在被终止或者退出的进程号\njobs -n\n\n## kill命令 终止一个前台进程可以使用Ctrl+C键   kill  通过top或者ps获取进程id号  kill [-s 信号 | -p ] [ -a ] 进程号 ...\n## 发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。 关闭进程号12的进程\nkill 12\n\n## 等同于在前台运行PID为123的进程时按下Ctrl+C键\nkill -2 123\n\n## 如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程  \nkill -9 123\n\n## 列出所有信号名称\n## HUP    1    终端断线\n## INT     2    中断（同 Ctrl + C）\n## QUIT    3    退出（同 Ctrl + \\）\n## TERM   15    终止\n## KILL    9    强制终止\n## CONT   18    继续（与STOP相反， fg/bg命令）\n## STOP    19    暂停（同 Ctrl + Z）\nkill -l\n\n## 得到指定信号的数值\nkill -l KILL\n\n## 杀死指定用户所有进程\nkill -u peidalinux\nkill -9 $(ps -ef | grep peidalinux) \n\n## 将后台中的命令调至前台继续运行  将进程123调至前台执行\nfg 123\n\n## 将一个在后台暂停的命令，变成继续执行\nbg  123\n\n## 该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思  下面输出被重定向到myout.file文件中\nnohup command > myout.file 2>&1 &\n\n## at：计划任务，在特定的时间执行某项工作，在特定的时间执行一次。\n## 格式：at HH:MM YYYY-MM-DD //HH（小时）:MM（分钟） YYYY（年）-MM（月份）-DD（日）\n## HH[am pm]+D(天) days //HH（小时）[am（上午）pm（下午）]+days（天）\nat 12:00（时间） //at命令设定12:00执行一项操作\n# at>useradd aaa //在at命令里设定添加用户aaa\n# ctrl+d //退出at命令\n# tail -f /etc/passwd //查看/etc/passwd文件后十行是否增加了一个用户aaa\n\n## 计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务。\natq\n\n## 启动计划任务后，如果不想启动设定好的计划任务可以使用atrm命令删除。\natrm 1 //删除计划任务1\n\n## pstree命令：列出当前的进程，以及它们的树状结构  格式：pstree [选项] [pid|user]\npstree\n\n## nice命令：改变程序执行的优先权等级 应用程序优先权值的范围从-20～19，数字越小，优先权就越高。一般情况下，普通应用程序的优先权值（CPU使用权值）都是0，如果让常用程序拥有较高的优先权等级，自然启动和运行速度都会快些。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。\nnice [-n <优先等级>][--help][--version][命令]\nnice -n 5 ls\n\n## sleep命令：使进程暂停执行一段时间\ndate;sleep 1m;date\n\n\n## renice命令 renice命令允许用户修改一个正在运行进程的优先权。 利用renice命令可以在命令执行时调整其优先权。\n## 其中，参数number与nice命令的number意义相同。（1） 用户只能对自己所有的进程使用renice命令。（2） root用户可以在任何进程上使用renice命令。（3） 只有root用户才能提高进程的优先权\nrenice -5 -p 5200  #PID为5200的进程nice设为-5 \n\n## pmap命令用于显示一个或多个进程的内存状态。其报告进程的地址空间和内存状态信息 #pmap PID \npmap 20367\n\n## top 动态查看进程的变化。\ntop\n```\n\n### 服务器存在的问题\n\n1. **电源供电不足**\n\n   目前服务器运行良好，需要注意的是，服务器目前的电源功率是495W（`sudo dmidecode | grep Power`），GPU显卡额定功率是500W，服务器供电不足导致电源灯一闪一闪，为了保险起见，尽快补一块[750W服务器电源](https://item.jd.com/28405788107.html)。\n\n## 第二章：服务器系统安装*\n\n\n\n## 第三章：深度学习必备基础环境安装\n\n**NVIDIA驱动、CUDA、cuDNN三部分尽可能在现场安装**，因为涉及到重启，服务器不能远程重启。\n\n另外，本部分所有指令，建议在`bash`环境下运行，使用`zsh`的shell请切换为`bash`，避免不必要的麻烦。\n\n### 显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\n\n不同版本的Tensorflow和PyTorch环境对NVIDIA驱动、CUDA和cuDNN的有着不一样的需求。\n\n系统能否检测到GPU：\n\n```bash\nlspci | grep -i nvidia\n```\n\n输出\n\n```bash\n04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)\n04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)\n```\n\n**GTX 1080为Tensorflow、PyTorch等框架提供GPU支持。**\n\n#### GTX 1080信息\n\n**服务器上GTX 1080信息如下：**\n\n|      规格      |        核心参数        |\n| :------------: | :--------------------: |\n|    显卡核心    | NVIDIA GeForce GTX1080 |\n|    显存频率    |        10010MHz        |\n|    显存大小    |           8G           |\n|    显存类型    |         GDDR5X         |\n|    显存位宽    |         256位          |\n|    总线类型    |     PCI-E 3.0 x 16     |\n| 数字最高分辨率 |      7680 x 4320       |\n|      SLI       |          支持          |\n|   散热器类型   |          风冷          |\n|    额定电源    |          500W          |\n|  供电外接需求  |        8pin x 1        |\n| OpneGL支持版本 |       OpenGL 4.5       |\n\n#### Tensorflow建议[配置](https://www.tensorflow.org/install/source#linux)\n\n数据来源于[官网](https://www.tensorflow.org/install/source#linux)，截止2020年4月11号，`tensorflow-2.1.0`版本需要配合`CUDA 10.1`和`cuDNN 7.6`配合使用。\n\n![Tensorflow版本](https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png)\n\n#### PyTorch建议[配置](https://pytorch.org/get-started/previous-versions/)\n\n数据来源于[官网](https://pytorch.org/get-started/previous-versions/)，截止2020年4月11号，`PyTorch 1.4`版本需要配合`CUDA 10.1`或`CUDA9.2`配合使用。\n\n![PyTorch](https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png)\n\n#### NVIDIA驱动选型\n\n在Linux系统下，[NVIDIA驱动型号](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html)根据需求来安装，`CUDA10.2`需求`NVIDIA >= 440.33`，所以NVIDIA驱动型号至少是`440.33`。\n\n![CUDA版本与NVIDIA驱动之间的关系](https://pic.downk.cc/item/5e913b69504f4bcb04574a5e.png)\n\n### NVIDIA驱动安装（CentOS、Ubuntu）*\n\n通过前面的分析，目前Tensorflow 最新版本2.1.0需求CUDA 10.1，索性安装CUDA 10.2所需求的最低要求的NVIDIA版本`440.33`。\n\n另外NVIDIA驱动不要轻易更新，在CentOS下，尤其是不到万不得已的地步，千万千万不要运行`sudo yum update`指令！Ubuntu对应的指令是`sudo apt-get update`。\n\n**本小节主要介绍在CentOS 7.7系统下的驱动安装**，顺便介绍在Ubuntu系统的驱动检索及安装方法。\n\nNVIDIA驱动安装完成后，需要到现场重启服务器。\n\n#### 关闭桌面服务\n\n如果在现场安装NVIDIA驱动，首先要按住`Alt + Ctrl + F1`进入终端（F1到F6都行），输入账户密码获取root权限\n\n```bash\nsudo su\n```\n\n然后关闭桌面模式\n\n```bash\nsudo service lightdm stop\n```\n\n然后通过`Ctrl + Alt + F7`发现已无法成功返回图形化模式，说明桌面服务已成功关闭，注意此步对接下来的 NVIDIA 显卡驱动安装尤为重要，必需确保桌面服务已关闭。\n\n驱动安装完成后，按住`Alt + Ctrl + F7`可开启桌面模式。\n\n#### 系统检查\n\n查看支持CUDA的GPU列表：https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements，根据[官网](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions)建议，**安装NVIDIA驱动和CUDA之前需要查看系统是否满足要求**：\n\n1. 验证系统是否具有支持CUDA的GPU\n\n2. 确认系统是受支持的Linux发行版本\n3. 验证系统是否有GCC编译环境\n\n4. 验证系统是否安装了正确的内核头文件和开发包\n\n一步一步检测\n\n1. **验证系统是否具有支持CUDA的GPU**\n\n   ```bash\n   lspci | grep -i nvidia\n   ```\n\n   输出\n\n   ```bash\n   04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)\n   04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)\n   ```\n\n   服务器上的显卡是GTX 1080，支持CUDA\n\n2. **确认系统是受支持的Linux发行版本**\n\n   CUDA开发工具仅在某些特定的Linux发行版上受支持，运行命令\n\n   ```bash\n   uname -m && cat /etc/*release\n   ```\n\n   输出信息\n\n   ```bash\n   x86_64\n   CentOS Linux release 7.7.1908 (Core)\n   NAME=\"CentOS Linux\"\n   VERSION=\"7 (Core)\"\n   ID=\"centos\"\n   ID_LIKE=\"rhel fedora\"\n   VERSION_ID=\"7\"\n   PRETTY_NAME=\"CentOS Linux 7 (Core)\"\n   ANSI_COLOR=\"0;31\"\n   CPE_NAME=\"cpe:/o:centos:centos:7\"\n   HOME_URL=\"https://www.centos.org/\"\n   BUG_REPORT_URL=\"https://bugs.centos.org/\"\n   \n   CENTOS_MANTISBT_PROJECT=\"CentOS-7\"\n   CENTOS_MANTISBT_PROJECT_VERSION=\"7\"\n   REDHAT_SUPPORT_PRODUCT=\"centos\"\n   REDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n   \n   CentOS Linux release 7.7.1908 (Core)\n   CentOS Linux release 7.7.1908 (Core)\n   ```\n\n   `x86_64`表示当前系统是64位系统，运行的Linux发行版是CentOS7.7版本。\n\n3. **验证系统是否有GCC编译环境**\n\n   ```bash\n   gcc --version\n   ```\n\n   一般情况下都会有。\n\n4. **验证系统是否安装了正确的内核头文件和开发包**\n\n   运行以下命令找到系统正在运行的内核版本：\n\n   ```bash\n   uname -r\n   ```\n\n   当前运行的内核的头文件和开发包可以通过以下方式安装：\n\n   ```bash\n   sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n   ```\n\n#### 禁用第三方开源驱动nouveau\n\nNouveau是由第三方为NVIDIA显卡开发的一个开源3D驱动，不过没有得到NVIDIA的认可与支持。Nouveau让Linux更容易的应对各种复杂的NVIDIA显卡环境，让用户安装完系统即可进入桌面并且有不错的显示效果，所以，很多Linux发行版默认集成了Nouveau驱动，在遇到NVIDIA显卡时默认安装。企业版的Linux更是如此，几乎所有支持图形界面的企业Linux发行版都将Nouveau收入其中。不过对于个人桌面用户来说，处于成长阶段的Nouveau并不完美，与企业版不一样，个人用户除了想让正常显示图形界面外很多时候还需要一些3D特效，Nouveau多数时候并不能完成，而用户在安装NVIDIA官方私有驱动的时候Nouveau又成为了阻碍，如果不干掉Nouveau，NVIDIA驱动安装时总是报错。\n\n![](https://pic.downk.cc/item/5e93446cc2a9a83be5684112.jpg)\n\n**NVIDIA驱动和nouveau驱动最好二选一**，一般情况下，**深度学习环境配置需禁用nouveau驱动**，查看nouveau驱动信息：\n\n```bash\nlsmod |grep nouveau\n```\n\n若有输出，需要禁止该nvidia第三方驱动，若无，OK，**Linux哲学之一：没有消息就是最好的消息。**可忽略该步骤。\n\n**禁用nouveau驱动，需要配置相关文件**\n\n```bash\nsudo nvim /etc/modprobe.d/blacklist-nouveau.conf\n```\n\n[nvim](https://github.com/neovim/neovim)，即NeoVIm，在生态和功能上比`vim`要领先一些，在CentOS系统下的[nvim的安装](https://github.com/neovim/neovim/wiki/Installing-Neovim#centos-7--rhel-7)命令为：\n\n```bash\nsudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install -y neovim python3-neovim\n```\n\n没有安装[nvim](https://github.com/neovim/neovim)可以用`vim`来代替（`sudo yum install vim`）。\n\n文件可能没有任何内容，在打开的文件中，进入Vim的**插入模式**（`i`键），**写入命令：**\n\n```bash\nblacklist nouveau  \noptions nouveau modeset=0\n```\n\n按下`Eac`键进入普通模式，输入命令`:wq`保存并退出文件。\n\n更新initramfs映像使禁用 `nouveau` 生效：\n\n```bash\nsudo update-initramfs -u\n```\n\n输入\n\n```bash\nlsmod |grep nouveau\n```\n\n若无输出，则表示禁用nouveau生效了。\n\n当然也可以重启系统使禁用 `nouveau` 真正生效，但**重启系统有可能会出现黑屏，原因是禁用了集成显卡，系统没有显卡驱动。**\n\n#### 卸载原有驱动\n\n查看当前系统驱动：\n\n```bash\nnvidia-smi\n```\n\n或者\n\n```\nls /usr/src\n```\n\n或者\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\n或者\n\n```bash\nlsmod | grep nvidia\n```\n\n总之，可以得知当前NVIDIA版本信息（就算使用了`sudo yum update`），使用上述四条命令之一也可以查到，如果真的真的忘记了，跳过这一步吧……\n\n假设知道了目前的NVIDIA驱动型号，假设为390.77，去[该网站](https://download.nvidia.com/XFree86/Linux-x86_64/)上下载对应的驱动文件\n\n![](https://pic.downk.cc/item/5e9340d4c2a9a83be565cc63.png)\n\n类似于`NVIDIA-Linux-x86_64-390.77.run`这种文件，右键**复制链接**，使用**wget**工具下载\n\n```bash\ncd ~    // 回到主目录\nwget -c https://download.nvidia.com/XFree86/Linux-x86_64/390.77/NVIDIA-Linux-x86_64-390.77.run\n```\n\n然后运行命令进行卸载\n\n```bash\nsudo sh NVIDIA-Linux-x86_64-390.77.run --uninstall\n```\n\n#### NVIDIA官方驱动安装\n\n**确保已经关闭桌面服务。**\n\nNVIDIA驱动分离线安装和在线安装，离线安装就是在[官网](https://www.nvidia.com/Download/index.aspx?lang=cn)下载对应的驱动，再进行安装，为了方便起见，采用**在线**的方法在**CentOS 7.7**系统进行安装。\n\n**添加 ELRepo 源：**\n\n```bash\nsudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nsudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n```\n\n**查看显卡检测程序：**\n\n```bash\nyum info nvidia-detect    \n```\n\n如果安装，跳过下一步，否则\n\n```bash\nsudo yum install nvidia-detect\n```\n\n**检测显卡型号，查看对应的驱动**\n\n```bash\nnvidia-detect -v\n```\n\n输出\n\n```bash\nProbing for supported NVIDIA devices...\n[102b:0534] Matrox Electronics Systems Ltd. G200eR2\n[10de:1b80] NVIDIA Corporation GP104 [GeForce GTX 1080]\nThis device requires the current 440.64 NVIDIA driver kmod-nvidia\n```\n\n系统告诉我们，显示型号是GTX 1080，对应的NVIDIA驱动型号应为`440.64`，大于`440.33`，满足要求，继续安装，否则去[官网](https://www.nvidia.com/Download/index.aspx?lang=cn)下载对应的驱动手动离线安装。\n\n输入命令进行安装：\n\n```bash\nsudo -i    // 获取root权限\nyum install kmod-nvidia    // 或者这条命令yum install nvidia-x11-drv\n```\n\n安装完成后，或者输出下面的信息，可能要重启系统……\n\n```bash\n软件包 nvidia-x11-drv-440.82-1.el7_8.elrepo.x86_64 已安装并且是最新版本\n```\n\n重启系统\n\n```bash\nsudo reboot\n```\n\n安装完成，输入\n\n```bash\nnvidia-smi\n```\n\n看看显卡信息。\n\n- 如果是**Ubuntu系统**，可使用下列方法进行安装\n\n  ```bash\n  sudo apt-get purge nvidia*\t\t\t\t\t// 卸载之前的NVIDIA驱动\n  sudo add-apt-repository ppa:graphics-drivers/ppa\t// 添加源\n  sudo apt-get update\n  sudo apt-get install nvidia-440\t\t\t\t// 安装NVIDIA-440系列驱动\n  ```\n\n  或者\n\n  ```bash\n  sudo apt-get update\n  sudo ubuntu-drivers devices    // 或者运行apt-cache search nvidia*\n  // 出现建议的NVIDIA驱动型号xxx\n  sudo apt-get install nvidia-xxx\n  ```\n\n**重启服务器**。\n\n#### 查看当前NVIDIA驱动版本\n\n使用命令\n\n```bash\nnvidia-smi\n```\n\n或者\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\n安装过程中可能会遇到比较多的问题，**请耐心解决**。\n\n#### 开启桌面服务\n\nNVIDIA驱动安装完成后，可开启桌面服务\n\n```bash\nsudo service lightdm stop\n```\n\n然后通过`Ctrl + Alt + F7`可返回图形化模式。\n\n### CUDA安装*\n\n在此介绍CUDA-9.0、CUDA-9.1、CUDA-9.2、CUDA-10.0、CUDA-10.1、CUDA-10.2共6种CUDA文件的安装（截止2020年4月11号），基本涵盖了当前流行深度学习框架的需求。\n\n需要注意的是，如果你是个人用户，就是自己在电脑上装了Linux系统进行深度学习环境的设置，可以详细阅读这一小节的内容，这一小节主要介绍的是一般情况下的CUDA配置，因为如果是自己的系统，可以随意更改CUDA的**符号链接**，但是在服务器上，大部分用户都是普通用户，**无root权限**，切换CUDA时很麻烦，不切换CUDA，深度学习环境的配置就比较受限，所以在服务器环境下，**普通用户如何灵活切换CUDA和cuDNN版本呢？有两种方法：**\n\n- 使用[Environment Modules](https://modules.readthedocs.io/en/latest/)来管理CUDA；\n- 使用[Anaconda](https://anaconda.org/)来独立管理[CUDA和cuDNN](#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN)；\n\n我建议采用Anaconda来管理，理由很简单：操作方便上手快。具体请[跳转](#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN)。下面介绍正常情况下的CUDA和cuDNN安装方法。\n\n**推荐下载.run的CUDA文件格式。**\n\n在`~/NVIDIA/CUDA`目录下依次建立`cuda-9.0`、`cuda-9.1、`、`cuda-9.2`、`cuda-10.0`、`cuda-10.1`、`cuda-10.2`6个目录，目录下是对应CUDA版本的安装文件，文件的后缀名为`.run`，不管是基础版本还是补丁，安装方法都是一模一样的。\n\n**CUDA的安装，建议[关闭桌面服务](#关闭桌面服务)，通过`Alt + Ctrl + F1 `进入终端。**\n\n#### CUDA文件下载\n\nCUDA的官网下载链接为https://developer.nvidia.com/cuda-toolkit-archive，CUDA的下载不需要注册，cuDNN需要。以CUDA9.2下载为例，依次按图红色框框进行选择，需要注意的是图中的**黑色框框**，那个是当前CUDA版本的补丁，也要下载，安装方法与**基础版本一致**。\n\n![cuda9.2](https://pic.downk.cc/item/5e9144da504f4bcb045fe855.png)\n\n正常方法是点击Download下载，下载后还要拖入到服务器种比较麻烦，在这里给出直接将文件下载到服务器的方法。\n\n创建不同CUDA版本的目录\n\n```bash\ncd ~\nmkdir NVIDIA\ncd NVIDIA\nmkdir CUDA\ncd CUDA\nmkdir cuda-9.{0..2}     // 批量建立文件夹 cuda-9.0、cuda-9.1、cuda-9.2\nmkdir cuda-10.{0..2}    // 批量建立文件夹 cuda-10.0、cuda-10.1、cuda-10.2\n```\n\n然后依次在对应目录下下载各个版本的**CUDA基础安装包及其补丁**（时间截止到2020.04.11）\n\n为了直观起见，使用比较基础的命令\n\n##### 下载[CUDA 9.0](https://developer.nvidia.com/cuda-90-download-archive)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-9.0\n\n// 下载基础cuda9.0安装包\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run -O cuda_9.0.176_384.81_linux.run\n\n// 下载cuda9.0的4个补丁\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run -O cuda_9.0.176.1_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run -O cuda_9.0.176.2_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda_9.0.176.3_linux-run -O cuda_9.0.176.3_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/4/cuda_9.0.176.4_linux-run -O cuda_9.0.176.4_linux.run\n```\n\n##### 下载[CUDA 9.1](https://developer.nvidia.com/cuda-91-download-archive-new)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-9.1\n\n// 下载基础cuda9.1安装包\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux -O cuda_9.1.85_387.26_linux.run\n\n// 下载cuda9.1的3个补丁\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/1/cuda_9.1.85.1_linux -O cuda_9.1.85.1_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/2/cuda_9.1.85.2_linux -O cuda_9.1.85.2_linux.run\nwget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/3/cuda_9.1.85.3_linux -O cuda_9.1.85.3_linux.run\n```\n\n##### 下载[CUDA 9.2](https://developer.nvidia.com/cuda-92-download-archive)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-9.2\n\n// 下载基础cuda9.2安装包\nwget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/local_installers/cuda_9.2.148_396.37_linux -O cuda_9.2.148_396.37_linux.run\n\n// 下载cuda9.2的1个补丁\nwget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/patches/1/cuda_9.2.148.1_linux -O cuda_9.2.148.1_linux.run\n```\n\n##### 下载[CUDA 10.0](https://developer.nvidia.com/cuda-10.0-download-archive)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-10.0\n\n// 下载基础cuda10.0安装包\nwget -c https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux -O cuda_10.0.130_410.48_linux.run\n\n// 下载cuda10.0的1个补丁\nwget -c http://developer.download.nvidia.com/compute/cuda/10.0/Prod/patches/1/cuda_10.0.130.1_linux.run\n```\n\n##### 下载[CUDA 10.1 update2](https://developer.nvidia.com/cuda-10.1-download-archive-base)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-10.1\n\n// 下载基础cuda10.1安装包，无补丁\nwget -c http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run\n```\n\n##### 下载[CUDA 10.2](https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&target_distro=CentOS&target_version=7&target_type=runfilelocal)\n\n```bash\ncd ~/NVIDIA/CUDA/cuda-10.2\n\n// 下载基础cuda10.2安装包，无补丁\nwget -c http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run\n```\n\n#### 安装CUDA\n\n以`cuda_9.1.85_387.26_linux.run`文件为例说明怎么安装的，所有的文件都是一样的安装方法（**CUDA 10.1以及后续版本，安装界面有所不一样，请仔细阅读**）。\n\n##### CUDA 10.0及其之前的版本的安装方法\n\nCUDA默认安装位置：`/usr/local`\n\n先建立一个名为**CUDAInstall**的[tmux](https://github.com/tmux/tmux)窗口，这是为了在安装的时候，防止终端出现紧急情况，影响安装，这个习惯可以让你减少不必要的损失，运行\n\n```bash\ntmux new -s CUDAInstall     \nsudo sh cuda_9.1.85_387.26_linux.run\n```\n\n如果遇到文件权限问题，可以赋予CUDA文件可执行权限：\n\n```bash\nsudo chmod a+x cuda_9.1.85_387.26_linux.run\n```\n\n运行CUDA安装文件后，紧接着在屏幕上出现了很长的说明，按住**空格**键至进度100%，然后按照下面的提示操作即可，需要注意的是，在提示\n\n```bash\nInstall NVIDIA Accelerated Graphics Driver for Linux-x86_64 387.26?\n(y)es/(n)o/(q)uit: \n```\n\n意思是：**安装NVIDIA驱动吗？**选择`n`，NVIDIA驱动我们单独安装。\n\n安装过程中每一步的提示如下，请仔细阅读**翻译**，尤其是符号链接那部分：\n\n```bash\n-----------------\n// 接受之前阅读的说明吗？必须接受啊\nDo you accept the previously read EULA?\naccept/decline/quit: accept\n\n// 安装NVIDIA驱动吗？NVIDIA驱动我们单独安装\nInstall NVIDIA Accelerated Graphics Driver for Linux-x86_64 387.26?\n(y)es/(n)o/(q)uit: n\n\n// 安装CUDA9.1的工具集吗？安装\nInstall the CUDA 9.1 Toolkit?\n(y)es/(n)o/(q)uit: y\n\n// CUDA的默认路径，按Enter键继续\nEnter Toolkit Location\n [ default is /usr/local/cuda-9.1 ]: \n \n// 要为CUDA9.1建立符号链接吗？如果该CUDA是你想默认的，输入y；\n// 如果不是但是以后想调用，输入n\n// 这个可以在安装之后修改\nDo you want to install a symbolic link at /usr/local/cuda?\n(y)es/(n)o/(q)uit:y\n\n// CUDA 9.1的示例，可以安装，方便测试\nInstall the CUDA 9.1 Samples?\n(y)es/(n)o/(q)uit: y\n\n// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认\nEnter CUDA Samples Location\n [ default is /home/unix ]: \n```\n\n然后开始安装，终端上会显示\n\n```\nInstalling the CUDA Toolkit in /usr/local/cuda-9.1 ...\n```\n\n表示`CUDA 9.1`会被安装到目录`/usr/local/cuda-9.1`文件夹下，大约1分钟左右，终端显示\n\n```bash\nInstalling the CUDA Samples in /home/unix ...\nCopying samples to /home/unix/NVIDIA_CUDA-9.1_Samples now...\nFinished copying samples.\n\n===========\n= Summary =\n===========\n\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-9.1\nSamples:  Installed in /home/unix\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-9.1/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-9.1/lib64, or, add /usr/local/cuda-9.1/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.1/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.1/doc/pdf for detailed information on setting up CUDA.\n\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required for CUDA 9.1 functionality to work.\nTo install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:\n    sudo <CudaInstaller>.run -silent -driver\n\nLogfile is /tmp/cuda_install_89370.log\n```\n\n终端输出的内容非常清楚，包含了这么几个意思：\n\n- 关于NVIDIA驱动：NVIDIA驱动已经安装但是没有被检测出来，重启系统就好了，因为服务器在学校，必须到现场才能重启成功；\n\n- 关于路径：CUDA 9.1被安装在`/usr/local/cuda-9.1`目录下\n\n- 关于卸载CUDA：CUDA的卸载脚本在/usr/local/cuda-9.1/bin里\n\n  ```bash\n  cd /usr/local/\n  sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl\n  ```\n\n- 安装CUDA的补丁包\n\n大部分CUDA版本都有补丁包，补丁的安装比较容易，以CUDA 9.1的补丁1`cuda_9.1.85.1_linux.run`为例说明\n\n```bash\nsudo sh cuda_9.1.85.1_linux.run\n```\n\n屏幕上也会出现很长的说明，按住**空格**键至进度100%，出现了一些选项\n\n```\n-----------------\nDo you accept the previously read EULA?\naccept/decline/quit:  accept\n\nEnter CUDA Toolkit installation directory\n [ default is /usr/local/cuda-9.1 ]: \n```\n\n安装位置默认就行，按住Enter后，秒安装\n\n```bash\nInstallation complete!\nInstallation directory: /usr/local/cuda-9.1\n```\n\n按照该方法，安装CUDA 9.1其它两个补丁包。\n\n至此CUDA基础安装包及其补丁包的方法介绍完了，**按照此方法，依次安装其它CUDA 9.0 ~ CUDA10.0版本的基础安装包及其补丁。**\n\n##### CUDA 10.1及其之后的版本的安装方法\n\n从CUDA 10.1起，安装界面有所不同，比如安装**CUDA 10.1**版本`cuda_10.1.243_418.87.00_linux.run`\n\n```bash\nsudo sh cuda_10.1.243_418.87.00_linux.run\n```\n\n终端会出现一个框框\n\n![](https://pic.downk.cc/item/5e919104504f4bcb04a646b2.png)\n\n输入**accept**后，出现\n\n![CUDA 10.1](https://pic.downk.cc/item/5e918ea5504f4bcb04a3d678.png)\n\n注意，不要选择**Driver**！**如图所选**，移动**下键**至**Install**处，Enter一下立即安装，出现界面\n\n![](https://pic.downk.cc/item/5e918f1e504f4bcb04a443d9.png)\n\n选择**No**，安装过程中没有什么反应，耐心等待一会儿，终端打印出信息\n\n```bash\n===========\n= Summary =\n===========\n\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-10.1/\nSamples:  Installed in /home/unix/\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-10.1/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-10.1/lib64, or, add /usr/local/cuda-10.1/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.1/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.1/doc/pdf for detailed information on setting up CUDA.\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 418.00 is required for CUDA 10.1 functionality to work.\nTo install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:\n    sudo <CudaInstaller>.run --silent --driver\n\nLogfile is /var/log/cuda-installer.log\n```\n\n与之前的信息差不多，具体请看之前的描述。CUDA 10.2安装方法与CUDA 10.1类似。\n\n#### 卸载CUDA\n\n- CUDA 10.0及其之前版本\n\n  以CUDA 9.1为例，CUDA 9.1的卸载脚本在/usr/local/cuda-9.1/bin里\n\n  ```bash\n  cd /usr/local/\n  sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl\n  ```\n\n- CUDA 10.1及其之后的版本\n\n  卸载CUDA 10.1和10.2有所不同，需要运行\n\n  ```bash\n  cd /usr/local/\n  sudo ./cuda-10.1/bin/cuda-uninstaller\n  ```\n\n#### 查看当前CUDA版本的符号链接\n\n查看当前cuda对应的版本（符号链接）\n\n```bash\ncd /usr/local\nstat cuda\n```\n\n输出\n\n```bash\n  文件：\"cuda\" -> \"/usr/local/cuda-9.0\"\n  大小：19        \t块：0          IO 块：4096   符号链接\n设备：fd00h/64768d\tInode：20341519    硬链接：1\n权限：(0777/lrwxrwxrwx)  Uid：(    0/    root)   Gid：(    0/    root)\n环境：unconfined_u:object_r:usr_t:s0\n最近访问：2020-04-10 14:43:19.316455577 +0800\n最近更改：2019-09-26 22:20:21.054175738 +0800\n最近改动：2019-09-26 22:20:21.054175738 +0800\n创建时间：-\n\n```\n\n之前为cuda-9.0建立了**符号链接**，所以cuda指向cuda-9.0，因为系统是根据这个**符号链接**来识别当前cuda版本，所以更改其指向即可切换cuda版本。\n\n#### CUDA环境变量配置\n\n建议在bash环境下运行，运行\n\n```bash\nbash\n```\n\n进入bash shell。\n\n为了管理方便，管理员可以在文件`/etc/profile`里全局配置CUDA环境变量，如果是个人Linux系统或者普通用户，在文件`~/.bashrc`下配置CUDA环境变量。\n\n- **全局添加CUDA环境变量（管理员操作）**\n\n  这种修改方式使CUDA配置应用到每位普通用户的shell里\n\n  打开全局环境变量\n\n  ```bash\n  sudo nvim /etc/profile    // 为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. \n  ```\n\n  然后在打开的文件里的末尾新增四条命令，具体操作是：按住大写`G`键跳转到文本的最后一行行首，再按住`$`，也就是‘shift + 4’键跳转到最后一行的最后一个字符，按住`i`键进入插入模式，使光标右移一个字符，再回车换行后，添加以下变量\n\n  ```bash\n  # CUDA\n  \n  # cuda -> cuda9.1\n  export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}\n  # include -> targets/x86_64-linux/include\n  export CPATH=/usr/local/cuda/include:$CPATH \n  # lib64 -> targets/x86_64-linux/lib\n  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda/lib64 \n  # lib64 -> targets/x86_64-linux/lib\n  # export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \n  export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n  ```\n\n  更新配置，使配置文件生效：\n\n  ```bash\n  source /etc/profile\n  ```\n\n- **普通用户添加CUDA环境变量**\n\n  只对当前shell有效\n\n  ```\n  nvim ~/.bashrc\n  ```\n\n  同样的操作，在文件末尾新增四条命令\n\n  ```bash\n  # CUDA\n  \n  # cuda -> cuda9.1\n  export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}\n  # include -> targets/x86_64-linux/include\n  export CPATH=/usr/local/cuda/include:$CPATH \n  # lib64 -> targets/x86_64-linux/lib\n  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda/lib64 \n  # lib64 -> targets/x86_64-linux/lib\n  # export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \n  export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n  ```\n\n  更新文件\n\n  ```bash\n  source ~/.bashrc\n  ```\n\n#### 验证CUDA安装\n\n在安装CUDA时，比如在安装CUDA 9.1时，有这么一句提示\n\n```bash\n// CUDA 9.1的示例，可以安装，方便测试\nInstall the CUDA 9.1 Samples?\n(y)es/(n)o/(q)uit: y\n\n// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认\nEnter CUDA Samples Location\n [ default is /home/unix ]: \n```\n\n为了验证CUDA 9.1是否被安装完成，选择安装示例，默认的安装位置是**根目录**，进入根目录\n\n```bash\ncd ~\ncd NVIDIA_CUDA-9.1_Samples/1_Utilities/deviceQuery    // 选择其中一个示例进行测试\nmake\n./deviceQuery\n```\n\n如果成功，会显示`Result = PASS`，否则根据错误提示解决问题。\n\n#### 查看CUDA当前版本\n\n```bash\nnvcc --version\n```\n\n或者\n\n```bash\ncat /usr/local/cuda/version.txt\n```\n\n如果是在终端命令行下安装的CUDA，则需要安装成功后开启桌面服务：\n\n```\nsudo service lightdm start\n```\n\n然后再按通过`Ctrl + Alt + F7`可返回桌面模式。\n\n### cuDNN安装*\n\n首先登录[官网](https://developer.nvidia.com/rdp/cuDNN-archive)进行注册，然后才能选择对应版本的cuDNN进行下载。以cuDNN7.0.5为例进行说明，其它版本与此类似。\n\n按照[官方指导教程](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux)进行cuDNN配置。\n\n#### cuDNN文件下载\n\n首先要确定要下载的cuDNN版本，**仔细看清楚其对应的CUDA版本**，以cuDNN对应的CUDA 9.0为例，推荐下载**cuDNN v7.0.5 Library for Linux**类似的压缩包。\n\n![](https://pic.downk.cc/item/5e9518fcc2a9a83be5720e10.png)\n\n下载完成后，文件为cudnn-9.0-linux-x64-v7.solitairetheme8，这其实是一个压缩包，解压方法与`.tgz`格式的文件一致。建立cuDNN文件夹，\n\n```bash\nmkdir ~/NVIDIA/cuDNN\n```\n\n将其拖入到服务器中（使用FileZilla、Xftp进行文件传输）里的NVIDIA文件下的cuDNN文件夹下。\n\n#### cuDNN文件解压\n\n解压cudnn-9.0-linux-x64-v7.solitairetheme8\n\n```bash\ntar -xzvf cudnn-9.0-linux-x64-v7.solitairetheme8\n```\n\n解压后的文件都在名为`cuda`的文件夹下，如图\n\n![](https://pic.downk.cc/item/5e958245c2a9a83be5b9b2a0.png)\n\n`cudnn-9.0-linux-x64-v7.solitairetheme8`的文件组成如下\n\n![](https://pic.downk.cc/item/5e958783c2a9a83be5bd2a6a.jpg)\n\n查看`linudnn.so`、`libcudnn.so.7`、`libcudnn.so.7.0.5`的关系\n\n```bash\nll ~/NVIDIA/cuDNN/lib64\n```\n\n输出\n\n![](https://pic.downk.cc/item/5e95ada0c2a9a83be5d76131.png)\n\n说明`linudnn.so`、`libcudnn.so.7`、`libcudnn.so.7.0.5`其实是同一个文件的不同扩展名。\n\n#### cuDNN配置\n\n解压文件在`~/NVIDIA/cuDNN/cuda`\n\n```bash\n# 复制头文件\ncd ~/NVIDIA/cuDNN/\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include \n\n# 复制动态链接库\ncd ~/NVIDIA/cuDNN/\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n\n配置权限，使所有用户具有可读权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h\nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n\n#### 查看cuDNN版本\n\n```bash\ncat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2\n```\n\n### Anaconda3安装\n\n####  安装Anaconda3\n\n在[官方repo](https://repo.anaconda.com/archive/)下载***Anaconda***安装包（`.sh`后缀名），如果下载速度过慢，访问[国内镜像源](https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/)下载，右键复制对应Anaconda包的链接，使用`wget`指令下载，注意下载时注意该Anaconda包是基于Python 3.6还是Python 3.7的，**推荐Python 3.6**，下载*Anaconda3-5.2.0-Linux-x86_64.sh*文件\n\n```bash\ncd ~\nwget -c https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh\n```\n\n*Anaconda3-5.2.0-Linux-x86_64.sh*这是 **_python3.6_** 版本的Anaconda安装包，继续运行\n\n```bash\nbash Anaconda3-5.2.0-Linux-x86_64.sh\n```\n\n按`Enter`键继续，出现Anaconda版本的一些说明，此时按一下`space`(空格)键，有如下提示，在`[no] >>>` 后面输入`yes`，如下所示：\n\n```bash\nDo you accept the license terms? [yes|no]\n[no] >>> yes\n```\n\n紧接着有提示\n\n```bash\nAnaconda3 will now be installed into this location:\n/home/test/anaconda3\n\n  - Press ENTER to confirm the location\n  - Press CTRL-C to abort the installation\n  - Or specify a different location below\n\n[/home/test/anaconda3] >>>\n```\n\n按下`Enter`键即可开始安装，安装完成后，提示如下\n\n```bash\ninstallation finished.\nDo you wish the installer to prepend the Anaconda3 install location\nto PATH in your /home/test/.bashrc ? [yes|no]\n[no] >>> yes\n```\n\n在`[no] >>>` 后面输入`yes`后出现Anaconda安装成功的消息，此时出现*是否安装Microsoft VSCode*的消息，输入`no`即可。\n\npython3.6版本的Anaconda安装完成，此时在终端输入`conda`，会提示`conda:未找到命令`，不要慌，反手输入\n\n```bash\nsource ~/.bashrc\n```\n\n刷新环境，再输入`conda`即有消息提示，表明conda安装成功。\n\n#### 配置Anaconda国内开源镜像\n\n显示有关当前conda安装的信息：\n\n```bash\nconda info\n```\n\n输出\n\n```bash\n     active environment : None\n       user config file : /home/adoredee/.condarc\n populated config files : \n          conda version : 4.8.3\n    conda-build version : not installed\n         python version : 3.7.0.final.0\n       virtual packages : __glibc=2.17\n       base environment : /home/adoredee/anaconda3  (writable)\n           channel URLs : https://repo.anaconda.com/pkgs/main/linux-64\n                          https://repo.anaconda.com/pkgs/main/noarch\n                          https://repo.anaconda.com/pkgs/r/linux-64\n                          https://repo.anaconda.com/pkgs/r/noarch\n          package cache : /home/adoredee/anaconda3/pkgs\n                          /home/adoredee/.conda/pkgs\n       envs directories : /home/adoredee/anaconda3/envs\n                          /home/adoredee/.conda/envs\n               platform : linux-64\n             user-agent : conda/4.8.3 requests/2.23.0 CPython/3.7.0 Linux/3.10.0-957.el7.x86_64 centos/7.7.1908 glibc/2.17\n                UID:GID : 1000:1000\n             netrc file : None\n           offline mode : False\n```\n\n可以看到在conda安装好之后，默认的镜像是官方的（**channel URLs**），由于官网的镜像在境外，国内访问较慢，配置国内的镜像能够加快访问的速度。\n\n上海交通大学镜像源：https://mirrors.sjtug.sjtu.edu.cn/anaconda/\n\n清华大学镜像源：https://mirrors.tuna.tsinghua.edu.cn/anaconda/\n\n**创建配置文件：**\n\n```bash\nnvim ~/.condarc\n```\n\n如果使用[上海交通大学镜像源](https://mirrors.sjtug.sjtu.edu.cn/#/)，将以下配置写入`~/.condarc`：\n\n```bash\nchannels:\n  - defaults\nshow_channel_urls: true\nchannel_alias: https://anaconda.mirrors.sjtug.sjtu.edu.cn\ndefault_channels:\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/free\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/mro\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r\n  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/msys2\ncustom_channels:\n  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  bioconda: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  menpo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  soumith: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  viscid-hub: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n  atztogo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/\n```\n\n如果使用[清华大学镜像源](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)，将以下配置写入`~/.bashrc`：\n\n```bash\nchannels:\n  - defaults\nshow_channel_urls: true\nchannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n```\n\n**清除索引缓存**，保证用的是镜像站提供的索引：\n\n```\nconda clean -i \n```\n\n#### 卸载Anaconda3\n\n按照[官方卸载指导](https://docs.anaconda.com/anaconda/install/uninstall/)，Anaconda3安装在`~/anaconda3`文件夹下，首先删除目录\n\n```bash\ncd ~\nrm -rf anaconda3\n```\n\n清理`.bashrc`里的Anaconda环境变量\n\n```bash\nnvim ~/.bashrc\nsource ~/.bashrc\n```\n\n清理隐藏文件夹\n\n```bash\ncd ~\nrm .condarc\nrm -rf ~/.condarc ~/.conda ~/.continuum \n```\n\n#### conda常用命令\n\n##### 关于环境\n\n**创建一个名为myenv的环境**\n\n```bash\nconda create -n myenv pip python=3.6\n```\n\n**激活myenv环境**\n\n```bash\nsource activate myenv\n```\n\n**退出环境**\n\n```bash\nsource deactivate myenv\n```\n\n**删除一个已有的环境**\n\n```bash\nconda deactivate myenv    # for Windows\nsource deactivate myenv    # for Linux & Mac\n```\n\n**查看Anaconda环境**\n\n```bash\nconda info\n```\n\n**查看已安装的虚拟环境**\n\n```bash\nconda info -e\n```\n\n或者\n\n```bash\nconda envs\n```\n\n**删除虚拟环境**\n\n输出虚拟环境myenv\n\n```bash\nconda remove -n myenv --all\n```\n\n##### 包管理\n\n**安装**\n\n对于Python的包，尽可能使用`pip`安装\n\n```bash\npip install packages\n```\n\n`pip`安装不了的，使用conda\n\n```bash\nconda install packages\t\t\t# 安装最新版本\nconda install packsges==xxx\t\t# 安装指定版本\n```\n\n**查看当前环境下已安装的包**\n\npython环境下的包\n\n```bash\npip list\n```\n\nconda环境下的包\n\n```bash\nconda list\n```\n\n查看某一conda环境下的包，比如查看myenv环境下的安装的包：\n\n```bash\nconda list -n myenv\n```\n\n**查找package信息**\n\n**不同镜像源的包的信息不一样，尽量使用`pkgs/main`channels的包**\n\n```bash\nconda search packages\n```\n\n**升级conda**\n\n```bash\nconda update conda\n```\n\n**卸载某一个环境下的包**\n\n在myenv虚拟环境下卸载某一packsges\n\n```bash\nconda remove -n myenv packages\n```\n\n### pip安装\n\npip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。目前如果在 [python.org](https://www.python.org/) 下载最新版本的安装包，则是已经自带了该工具。\n\nPython 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。\n\npip 官网：https://pypi.org/project/pip/\n\n#### 安装\n\n在终端利用SSH登录到服务器系统(CentOS 7.6)，由于**普通用户**无法使用`sudo`，如果没有安装python，则需**手动安装pip**，在终端中运行\n\n```bash\nwget https://bootstrap.pypa.io/get-pip.py\npython3 get-pip.py --user\n```\n\n**注意**:参数`--user`一定要记得使用，否则会提示权限不足。\n\n安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量\n\n```bash\nexport PATH=~/.local/bin:$PATH\n```\n\n此时已在非root用户环境中安装好通用的Python包管理工具`pip`。\n\n如果系统安装了Python且Python 2.7.9 + 或 Python 3.4+ 以上版本，**自带 pip 工具**。\n\n#### 更换国内镜像源\n\n为了加快下载速度，更换到[国内的镜像源](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/)：\n\n```bash\npip install pip -U\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n#### 常用命令\n\n**显示版本和路径**\n\n```bash\npip --version\n```\n\n**获取帮助**\n\n```bash\npip --help\n```\n\n**升级 pip**\n\n```bash\npip install -U pip\n```\n\n> 如果这个升级命令出现问题 ，可以使用以下命令：\n>\n> ```\n> sudo easy_install --upgrade pip\n> ```\n\n**安装包**\n\n```\npip install SomePackage              # 最新版本\npip install SomePackage==1.0.4       # 指定版本\npip install 'SomePackage>=1.0.4'     # 最小版本\n```\n\n比如要安装 Django。用以下的一条命令就可以，方便快捷。\n\n```bash\npip install Django==1.7\n```\n\n**升级包**\n\n```bash\npip install --upgrade SomePackage\n```\n\n升级指定的包，通过使用==, >=, <=, >, < 来指定一个版本号。\n\n**卸载包**\n\n```bash\npip uninstall SomePackage\n```\n\n**搜索包**\n\n```bash\npip search SomePackage\n```\n\n**显示安装包信息**\n\n```bash\npip show \n```\n\n**查看指定包的详细信息**\n\n```bash\npip show -f SomePackage\n```\n\n**列出已安装的包**\n\n```bash\npip list\n```\n\n**查看可升级的包**\n\n```bash\npip list -o\n```\n\n**注意事项**\n\n如果 Python2 和 Python3 同时有 pip，则使用方法如下：\n\nPython2：\n\n```\npython2 -m pip install XXX\n```\n\nPython3:\n\n```bash\npython3 -m pip install XXX\n```\n\n### OpenCV安装\n\n#### Opencv for Python\n\n首先确保Linux系统安装了Python 3.x，推荐[Anaconda](#Anaconda3安装)，激活不同的虚拟环境后，配置基于Python 3.x的Opencv 4.2。\n\n激活对应的虚拟环境，比如我使用了Anaconda创建了一个虚拟环境`tensorflow-gpu`，激活：\n\n```bash\nsource activate tensorflow-gpu\n```\n\n此时终端会变成如下模样\n\n```bash\n(tensorflow-gpu) username@devices:~$\n```\n\n即为正常。\n\n上述命令解释\n\n|       name       |      意义      |\n| :--------------: | :------------: |\n|     username     |     用户名     |\n|     devices      |     主机名     |\n|        ~         | 当前用户主目录 |\n|        $         |    普通用户    |\n| (tensorflow-gpu) |  系统指定环境  |\n\n然后使用`pip`命令进行安装，查找[opencv的不同版本](https://pypi.org/project/opencv-python/3.4.9.33/#history)，使用下面的命令，替换版本号即可：\n\n```bash\npip install opencv-python==3.4.9.33\n```\n\n**验证**，在虚拟环境中输入\n\n```bash\npython\n```\n\n输出\n\n```bash\nPython 3.6.8 |Anaconda, Inc.| (default, Dec 30 2018, 01:22:34) \n[GCC 7.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n接着输入\n\n```bash\n>>> import cv2\n>>> cv2.__version__\n'3.4.9'\n```\n\n结果显示Opencv3.4.9，安装正确。\n\n**~~源码编译安装~~**\n\n参考Opencv 4.2.0的官网提示](https://docs.opencv.org/4.2.0/d2/de6/tutorial_py_setup_in_ubuntu.html)，其教程是在Ubuntu系统进行的，服务器系统为CentOS，编译安装中注意区别。\n\n- **下载**\n\n  进入官网 : http://opencv.org/releases.html 或者 https://github.com/opencv/opencv/releases, 选择需要的 `x.x.x.zip`版本，以载`opencv-4.2.0.zip` 为例：\n\n  ```bash\n  cd\n  wget -c https://github.com/opencv/opencv/archive/4.2.0.zip\n  unzip\n  ```\n\n  文件被解压到名为`opencv-4.2.0`的文件夹内\n\n- **安装依赖**\n\n  确保系统安装了`cmake`、`gcc`、`g++`、`python 3.x`以及以及对应的`numpy`包。\n\n  Opencv 4.2.0支持相机、媒体（ffmpeg、gstreamer）等特征\n\n  **安装多媒体框架ffmpeg**\n\n  centos服务器系统是非常稳定的，所以官方的RPM repository提供的RPM包往往是很滞后的，毕竟是服务器版本，安全稳定是重点，如果是个人用户，推荐Ubuntu，环境搭建起来毕竟方便。CentOS提供的RPM包不够丰富，很多时候需要自己编译，而**EPEL**恰恰可以解决这两方面的问题。**EPEL的全称叫 Extra Packages for Enterprise Linux** 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。\n\n  **EPEL则为服务器版本提供大量的RPM包，而且大多数RPM包在官方 repository 中是找不到的**。**绝大多数rpm包要比官方repository 的RPM包版本要来得新，EPEL会有很多源地址**\n\n  ##### 1. FFMPEG安装\n\n  **利用EPEL安装FFMPEG**，[参考教程](https://linoxide.com/linux-how-to/install-ffmpeg-centos-7/)。\n\n  - **安装EPEL repo**\n\n    ```bash\n    sudo yum -y install epel-release\n    ```\n\n  - **添加可用的epel repo**\n\n    ```bash\n    rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n    rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\n    ```\n\n  - **安装FFMPEG及其开发包**\n\n    ```bash\n    sudo yum -y install ffmpeg ffmpeg-devel\n    ```\n\n  - **查看FFMPEG版本**\n\n    ```bash\n    ffmpeg\n    ```\n\n    输出\n\n    ```bash\n    ffmpeg version 2.8.15 Copyright (c) 2000-2018 the FFmpeg developers\n      built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-36)\n      configuration: --prefix=/usr --bindir=/usr/bin --datadir=/usr/share/ffmpeg --incdir=/usr/include/ffmpeg --libdir=/usr/lib64 --mandir=/usr/share/man --arch=x86_64 --optflags='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic' --extra-ldflags='-Wl,-z,relro ' --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libvo-amrwbenc --enable-version3 --enable-bzlib --disable-crystalhd --enable-gnutls --enable-ladspa --enable-libass --enable-libcdio --enable-libdc1394 --enable-libfdk-aac --enable-nonfree --disable-indev=jack --enable-libfreetype --enable-libgsm --enable-libmp3lame --enable-openal --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-libschroedinger --enable-libsoxr --enable-libspeex --enable-libtheora --enable-libvorbis --enable-libv4l2 --enable-libx264 --enable-libx265 --enable-libxvid --enable-x11grab --enable-avfilter --enable-avresample --enable-postproc --enable-pthreads --disable-static --enable-shared --enable-gpl --disable-debug --disable-stripping --shlibdir=/usr/lib64 --enable-runtime-cpudetect\n      libavutil      54. 31.100 / 54. 31.100\n      libavcodec     56. 60.100 / 56. 60.100\n      libavformat    56. 40.101 / 56. 40.101\n      libavdevice    56.  4.100 / 56.  4.100\n      libavfilter     5. 40.101 /  5. 40.101\n      libavresample   2.  1.  0 /  2.  1.  0\n      libswscale      3.  1.101 /  3.  1.101\n      libswresample   1.  2.101 /  1.  2.101\n      libpostproc    53.  3.100 / 53.  3.100\n    Hyper fast Audio and Video encoder\n    usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\n    \n    Use -h to get full help or, even better, run 'man ffmpeg'\n    ```\n\n    **FFMPEG安装成功。**\n\n  ##### 3. gtk3\n\n  ```bash\n  sudo yum install gtk3 gtk3-devel gtk3-devel-docs\n  ```\n\n  ##### 4. v4l（Video for Linux）\n\n  [参考链接](http://www.linuxfromscratch.org/blfs/view/svn/multimedia/v4l-utils.html)，可选。\n\n  ##### 5. gstreamer\n\n  ```bash\n  yum install gstreamer*\n  ```\n\n- 编译\n\n  如果对 `CMakeLists` 文件不进行修改，那么 `Opencv` 默认的安装位置\n\n  ```bash\n  /usr/local/include/opencv2/         -- 新版Opencv核心头文件\n  /usr/local/include/opencv/          -- 旧Opencv核心头文件\n  /usr/local/share/OpenCV/            -- 一些Opencv其他安装信息\n  /usr/local/lib/                     -- Opencv中的动态链接库存放位置\n  ```\n\n  开始编译：\n\n  ```bash\n  cd opencv-4.2.0\n  mkdir build # 创建编译的文件目录\n  cd build\n  \n  # 安装目录: /usr/local\n  cmake -D CMAKE_BUILD_TYPE=Release \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\    \n        -DBUILD_JPEG=ON -DBUILD_TIFF=ON \\\n        -DBUILD_PNG=ON ..\n  \n  # 编译\n  make\n  ```\n\n- **安装**\n\n  ```bsah\n  sudo make install \n  ```\n\n\n### GCC多版本切换*\n\n在CentOS 7下，使用\n\n```bash\nsudo yum install gcc\n```\n\nCentOS官方的gcc或者g++版本最多到4.8.5，如果要安装Tensorflow 2.0以上的版本，就需要GCC 7.3.1，由于CentOS源没有提供高版本的GCC安装包，这时就不能通过安装包安装，通常的解决方案就是通过编译安装高版本的GCC。在这里介绍如何利用CentOS的新特性**SCL**进行高版本GCC的安装。\n\n[SCL软件集](https://www.softwarecollections.org/en/scls/user/rhscl/)（Software Collections）是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。\n\n**devtoolset和GCC对应关系如下表**：\n\n|  devtoolset  | GCC版本 |\n| :----------: | :-----: |\n| devtoolset-3 |  4.9.2  |\n| devtoolset-4 |  5.3.1  |\n| devtoolset-6 |  6.3.1  |\n| devtoolset-7 |  7.3.1  |\n| devtoolset-8 |  8.3.1  |\n\n#### 添加centos-release-scl包\n\n```bash\nsudo yum install centos-release-scl\n```\n\n#### 启用RHSCL库\n\n```bash\nsudo yum-config-manager --enable rhel-server-rhscl-7-rpms\n```\n\n#### 安装GCC\n\nDevtoolset 默认安装到 `/opt/rh` 目录下\n\n##### GCC 4.9.2\n\n```bash\nsudo yum install devtoolset-3\n```\n\n##### GCC 5.3.1\n\n```bash\nsudo yum install devtoolset-4\n```\n\n##### GCC 6.3.1\n\n[参考官方链接](https://www.softwarecollections.org/en/scls/rhscl/devtoolset-6/)\n\n```bash\nsudo yum install devtoolset-6\n```\n\n##### GCC 7.3.1\n\n[参考官方链接](https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/)\n\n```bash\nsudo yum install devtoolset-7\n```\n\n##### GCC 8.3.1\n\n[参考官方链接](https://www.softwarecollections.org/en/scls/rhscl/devtoolset-8/)\n\n```bash\nsudo yum install devtoolset-8\n```\n\nscl-utils 只是方便 Software Collections 使用，比如要查看当前安装了哪些Software Collections，可以使用命令\n\n```bash\nscl --list\n```\n\n#### 临时生效\n\n假设使`GCC 7.3.1`生效，其对应`devtoolset-7`，执行命令\n\n```bash\nscl enable devtoolset-7 bash\n```\n\n这种方法只对当前的shell环境有效，退出后GCC回退到系统指定的版本。\n\n#### 全局生效\n\n[执行下列命令](http://kuanghy.github.io/2016/03/22/devtoolset)可使对应的GCC全局有效：\n\n```bash\nln -s /opt/rh/devtoolset-7/root/usr/bin/* /usr/local/bin/\nhash -r\n```\n\n测试 gcc 版本\n\n```bash\ngcc --version\n```\n\n### MatLab R2020a安装*\n\nNO GUI安装会产生比较多莫名其妙的错误，现场安装吧……\n\n## 第四章：深度学习环境搭建\n\n### SSH远程登录和文件传输\n\n- **SSH**是用来**登录**远程服务器的安全协议；\n- **FileZilla**是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的**文件传输**)\n\nSSH和FileZilla都安装在**本地计算机系统**中\n\n#### SSH安装 \n\n> [SSH](https://en.wikipedia.org/wiki/Secure_Shell)(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。\n\n在**本地计算机系统**中，`UNIX`、`Window`以及`Mac`系统都可运行SSH,安装方法如下：\n\n - **_CentOS 7_**\n\n需要普通管理员权限(sudo)，用快捷键`ctrl`+`alt`+`t`打开终端Terminal窗口，运行：\n\n```python\nsudo yum install openssh-server\n```\n\n然后回车,输入`y`，即可安装完成。\n\n- **_Windows10_**\n\n下载[openssh for windows](https://www.mls-software.com/files/setupssh-7.9p1-1.exe)，进行默认安装即可。\n\n- **_Mac_**\n\n由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动`sshd服务`：\n\n```bash\nsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist\n```\n\n输入Mac密码后即可开启。\n\n#### SSH登录\n\n在任一平台上打开终端(Windows上推荐[**Xshell**]( https://www.netsarang.com/zh/xshell-download/ )、[**FinalShell**]( http://www.hostbuf.com/t/988.html )，Linux系统和Mac直接打开终端即可)，输入命令\n\n```bash\nssh username@IPaddress -p PORT\n```\n\n其中，\n`username`为服务器的用户名\n`IPaddress`为服务器的IP地址\n`PORT`为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员\n\n输入密码后即可进入自己账户的主目录（普通用户，无root权限）\n\n#### 修改账户密码\n\n登录到服务器之后，修改原始密码保证账户安全，直接输入\n\n```bash\npasswd\n```\n\n`username`为您在服务器上的用户名，根据提示修改新的密码。\n\n至此，您已经安全登录到服务器上。\n\n#### FileZilla在Windows和Linux下互传文件\n\n> FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。\n\n以windows 10为例，下载[FileZilla](https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe)，选择安装位置，正常安装即可。\n\n![](https://pic.downk.cc/item/5e95d3bac2a9a83be5f30b2e.png)\n\n#### FileZilla连接服务器\n\n打开FileZilla软件，\n\n* 1. 点击\"**文件**\"——\"**站点管理器**\"\n\n* 2. 点击\"**新站点**\"，在\"**我的站点**\"下重命名，此处设为“Lab532”\n\n* 3. 继停留在\"**站点管理器**\"界面，在\"**常规**\"选项卡中，设置如下：\n\n  * 主机：**服务器IP地址**\n  * 端口：**默认是 22，已禁用，详细端口请联系管理员**\n  * 协议：**SFTP - SSH File transfer Protocol**\n  * 登录类型：\n    - 1）若选\"**正常**\"\n      - 用户名：username\n      - 密码：password\n    - 2）若选\"**询问密码**\"，只能填写用户名：username，然后点击右下角的\"**连接**\"，再输入密码。\n\n* 4. 之后一直ok即可。\n\n#### 文件传输  \n\n以window 10为例，利用FileZilla登录到服务器后，可以看到左边是**本地站点**，右边是**远程站点**(服务器上的目录)，如下图所示，直接将本地文件`test.py`用鼠标拖拽到服务器上的指定目录即可（**上传过程**），这个过程是可逆的（**下载过程**），非常方便。\n\n![](https://pic.downk.cc/item/5e95d3f9c2a9a83be5f335d0.png)\n\n#### 总结\n\n利用**FileZilla**软件配合**SSH**协议，即可完成文件传输及程序运行等必要工作。\n\n### CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件*\n\n#### CUDA切换\n\n在[安装CUDA](#安装CUDA)这一小节介绍了多种CUDA文件的安装，这些CUDA版本统一被安装到`/usr/local`文件夹下，使用命令\n\n```bash\nll /usr/local\n```\n\n输出\n\n![](https://pic.downk.cc/item/5e95b42ac2a9a83be5dc2927.png)\n\n**系统是通过`/usr/local/`下的`cuda`符号链接来识别CUDA当前指定的CUDA版本**，比如现在符号链接`**cuda**`指向**cuda-9.0**，如果要指向其它CUDA版本，修改符号链接即可，比如切换到**CUDA-10.0**版本：\n\n```bash\ncd /usr/local/\n\n# 删除符号链接\nsudo rm cuda\n\n# 新建符号链接\nsudo ln -s /usr/local/cuda-10.0 /usr/local/cuda\n```\n\n**查看当前`cuda`指向**\n\n```bash\nll\n```\n\n![](https://pic.downk.cc/item/5e95b5b6c2a9a83be5dd2da7.png)\n\n或者\n\n```bash\nstat cuda\n```\n\n![](https://pic.downk.cc/item/5e95b63cc2a9a83be5dd7b59.png)\n\n**查看CUDA版本**\n\n```bash\nnvcc --version\n```\n\n#### cuDNN切换\n\n在Tensorflow不同版本的GPU环境配置中，CUDA的切换，往往伴随着cuDNN的切换，cuDNN是由头文件和动态链接库组成的，所以下载对应的cuDNN，按照[cuDNN的安装方法](#cuDNN安装*)进行文件替换即可。\n\n#### 总结\n\n这种方法的CUDA和cuDNN版本切换，适用于管理员整体切换和个人使用者，不适合服务器环境下的普通用户，有一种好的解决方法是配合[Environment Modules](https://modules.readthedocs.io/en/latest/)来进行环境管理，后续可以进行深入探索，**推荐使用Anaconda来进行CUDA、cuDNN版本的管理。**\n\n ### （推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\n\n虚拟环境的重要性：**无它，唯方便尔。**\n\n> 因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；创建独立的虚拟环境，各个虚拟环境相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。\n\n虚拟环境的创建有很多方法：Anaconda、virtualenv、docker等，但是就深度学习环境来说，Anaconda方便管理和使用，在此推荐**Anaconda**。\n\n考虑到这么一个场景：苦于科研无想法，于是在github上逛gai碰碰运气，终于看到一个不错的项目，一顿操作，clone这个repo之后，从anaconda创建一个虚拟环境来尝试运行，仔细阅读README，**发现要求特定版本的一些依赖库**，其它的库都还好说，如果要求特定版本的CUDN和cuDNN，如果重新下载安装配置就比较麻烦，何况非管理员用户没有安装和配置权限。这时候考虑Anaconda。\n\nAnaconda生态比较完整，只要系统里正确安装了[NVIDIA驱动](#NVIDIA驱动安装（CentOS、Ubuntu）*)，就可以在Anaconda下的虚拟环境中，安装特定版本的cuda和cudnn，而不必全局进行安装。\n\n需要注意的是：\n\n- **Anaconda的 cudatoolkit 不包含完整安装cuda的全部文件，只是包含了用于 tensorflow，PyTorch，xgboost 和 Cupy 等所需要的共享库文件，cuDNN亦是如此。**\n\n- **如果系统已经全局安装了CUDA和cuDNN，在虚拟环境中又安装了其它版本的CUDA和cuDNN，互不影响，且首先调用虚拟环境中的版本。**\n\n#### conda创建虚拟环境\n\n确定系统安装了[Anaconda3](#Anaconda3安装)，假设此时要搭建一个Tensorflow 1.6的GPU环境，[查表](#Tensorflow建议配置)可知，需求CUDA 9、cuDNN 7版本，python版本指定为3.6。\n\n- **创建虚拟环境**\n\n  在终端输入：\n\n  ```bash\n  conda create -n tensorflow16-gpu pip python=3.6\n  ```\n\n  创建完成后，在 **~/anaconda3/env** 文件夹下出现名为为 **_tensorflow16-gpu_** 的虚拟环境\n\n  查看当前系统的Anaconda环境\n\n  ```bash\n  conda env list\n  ```\n\n- **激活虚拟环境**\n\n  不建议使用系统建议的激活方式：`conda activate tensorflow16-gpu`，推荐使用：\n\n  ```bash\n  source activate tensorflow16-gpu\n  ```\n\n  若要退出当前环境，输入\n\n  ```bash\n  source deactivate tensorflow16-gpu\n  ```\n\n  究竟使用哪种激活方式，看Anaconda发展和个人喜好。\n\n#### 示例：安装Tensorflow-GPU 1.6（CUDA 9和cuDNN 7）\n\n- **安装CUDA 9**\n\n  **查询Anaconda库里的CUDA版本：**\n\n  ```bash\n  conda search cuda\n  ```\n\n  截止2020年4月11日，Anaconda官方[CUDA版本](https://anaconda.org/anaconda/cudatoolkit/files)包含：[9.0](https://developer.nvidia.com/cuda-90-download-archive)、[9.2](https://developer.nvidia.com/cuda-92-download-archive)、[10.0](https://developer.nvidia.com/cuda-10.0-download-archive)、10.1（[update1](https://developer.nvidia.com/cuda-10.1-download-archive-update1)和[update2](https://developer.nvidia.com/cuda-10.1-download-archive-update2)）、[10.2](https://developer.nvidia.com/cuda-downloads)，Anaconda [CUDA版本](https://anaconda.org/anaconda/cudatoolkit/files)紧跟NVIDIA官方[CUDA](https://developer.nvidia.com/cuda-toolkit-archive)更新速度，满足绝大部分深度学习环境的要求。\n\n  注意：不同的Anaconda源里的版本不一样，但是channel是`pkgs/main`的比较权威的，推荐使用`pkgs/main`里的版本。\n\n  ![](https://pic.downk.cc/item/5e97d227c2a9a83be532729a.png)\n\n  **Tensorflow 1.6 GPU版本需求CUDA 9.0：**\n  \n  ```bash\nconda install cudatoolkit==9.0\n  ```\n\n  安装完成\n  \n  ![](https://pic.downk.cc/item/5e97d5f0c2a9a83be534c17d.png)\n\n* **安装cuDNN 7**\n\n  **查询Anaconda库里的CUDA版本：**\n\n  ```conda\n  conda search cudnn\n  ```\n\n  截止2020年4月11日，Anaconda官方[cuDNN版本](https://anaconda.org/anaconda/cudnn/files)如下，根据需求进行安装，也满足绝大部分深度学习环境的要求。\n\n  ![](https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png)\n\n  **Tensorflow 1.6 GPU版本需求cuDNN 7**。\n\n  选择cuDNN 7.0.5：\n\n  ```bash\n  conda install cudnn==7.0.5\n  ```\n\n  出现错误\n\n  ```bash\n  Collecting package metadata (current_repodata.json): done\n  Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n  Collecting package metadata (repodata.json): done\n  Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n  Solving environment: - \n  Found conflicts! Looking for incompatible packages.                                       failed                                                                          \n  UnsatisfiableError:\n  ```\n\n  这是怎么回事呢？打开[cuDNN官网](https://developer.nvidia.com/rdp/cudnn-archive)，注意到，同一个版本的cuDNN，可能对应不同的CUDA版本，比如cuDNN 7.0.5可以对应CUDA 8.0、CUDA 9.0和CUDA 9.1，所以查看Anaconda官方里的cuDNN 7.0.5对应哪个CUDA版本。\n\n  ![](https://pic.downk.cc/item/5e97db58c2a9a83be5381c80.png)\n\n  打开cuDNN的[Anaconda仓库](https://anaconda.org/anaconda/cudnn/files)，查询到Anaconda仓库里的cuDNN 7.0.5对应的是CUDA 8.0），因此选择CUDA 9.0对应的**cuDNN 7.1.2**，所以在安装前，使用\n\n  ```bash\n  conda search cudnn\n  ```\n\n  ![](https://pic.downk.cc/item/5e980e14c2a9a83be559cec6.jpg)\n\n  **查询cuDNN与CUDA的对应关系。**\n\n  **安装cuDNN 7.1.2：**\n\n  ```bash\n  conda install cudnn==7.1.2\n  ```\n\n  ![](https://pic.downk.cc/item/5e980693c2a9a83be5556703.png)\n\n  这种方法安装CUDA和cuDNN，没有单独形成文件夹，都是统一存放在虚拟环境中的`lib`、`include`文件夹下，查看`CUDA 9.0`和`cuDNN 7.1.2`是否被安装到虚拟环境`tensorflow16-gpu`中：\n\n  ```bash\n  ls ~/anaconda3/envs/tensorflow16-gpu/lib/\n  ```\n\n  输出\n\n  ![](https://pic.downk.cc/item/5e98076bc2a9a83be555d9a8.png)\n\n  或者使用以下命令**查看CUDA共享库**的安装：\n\n  ``` bash\n  ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cuda\n  ```\n\n  输出\n\n  ```bash\n  libcudart.so\n  libcudart.so.9.0\n  libcudart.so.9.0.176\n  ```\n\n  使用以下命令**查看cuDNN共享库**的安装：\n\n  ```bash\n   ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cudnn\n  ```\n\n  输出\n\n  ```bash\n  libcudnn.so\n  libcudnn.so.7\n  libcudnn.so.7.1.2\n  libcudnn_static.a\n  ```\n\n  使用以下命令**查看cuDNN头文件**的安装：\n\n  ```bash\n  ls ~/anaconda3/envs/tensorflow16-gpu/include/ | grep cudnn\n  ```\n\n  输出\n\n  ```bash\n  cudnn.h\n  ```\n\n  可以看到相关CUDA、cuDNN的共享库，\n\n* **安装tensorflow-gpu 1.6.0**\n\n  安装完CUDA 9.0和cuDNN 7.1.2之后，在激活的环境中输入\n\n```bash\npip install tensorflow-gpu==1.6.0\n```\n\n是否正确安装，请参照章节 **_测试tensorflow-gpu版本的正确性_** 里的方法验证。\n\n#### 测试tensorflow-gpu版本的正确性\n\n在激活的环境中，输入`python`，进入到python3.6环境中，依次输入命令\n\n```python\n>>> import tensorflow as tf\n>>> tf.test.is_gpu_available()\n```\n\n若输出类似的内容，且最后一行为`True`，则表示tensorflow-gpu 1.6 版本安装成功！\n\n```python\n2018-11-10 01:32:45.539907: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n2018-11-10 01:32:46.425789: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:\nname: GeForce GTX 1080 major: 6 minor: 1 memoryClockRate(GHz): 1.7715\npciBusID: 0000:04:00.0\ntotalMemory: 7.93GiB freeMemory: 7.81GiB\n2018-11-10 01:32:46.425831: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\n2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)\nTrue\n```\n\n查看tensorflow的版本的命令为\n\n```python\n>>> import tensorflow as tf\n>>> print(tf.__version__)\n```\n\n注意，`__`为两个`_`组合而成。\n\n### Anaconda下安装Tensorflow的GPU各个版本（从1.6到2.1）\n\n![Tensorflow版本](https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png)\n\n根据Tensorflow[官网](https://www.tensorflow.org/install/source#linux)，在Anaconda环境下安装Tensorflow 1.6.0、1.11.1和2.1.0三个典型的GPU版本。使用`conda search cudnn`命令**查询cuDNN与CUDA的对应关系。**\n\n![](https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png)\n\n#### Tensorflow 1.6.0\n\n系统默认GCC为4.8.5，在正常的终端中输入\n\n```bash\nconda create -n tensorflow16-gpu pip python=3.6\nsource activate tensorflow16-gpu\n```\n\n在激活的环境中输入：\n\n```bash\n## 安装CUDA 9.0和cuDNN 7.1.2\nconda install cudatoolkit==9.0\nconda install cudnn==7.1.2\npip install tensorflow-gpu==1.6.0\n```\n\n#### Tensorflow 1.11.0\n\n系统默认GCC为4.8.5，在正常的终端中输入\n\n```bash\nconda create -n tensorflow111-gpu pip python=3.6\nsource activate tensorflow111-gpu\n```\n\n在激活的环境中输入：\n\n```bash\n## 安装CUDA 9.2和cuDNN 7.2.1\nconda install cudatoolkit==9.2\nconda install cudnn==7.2.1\npip install tensorflow-gpu==1.11.0\n```\n\n#### Tensorflow 2.1.0\n\n**切换GCC版本至7.3.1**\n\n```\nscl enable devtoolset-7 bash\n```\n\n仅本shell本次登录有效，若使全局生效，[查看方法](#全局生效)。\n\n在正常的终端中输入\n\n```bash\nconda create -n tensorflow21-gpu pip python=3.6\nsource activate tensorflow12-gpu\n```\n\n在激活的环境中输入：\n\n```bash\n## 安装CUDA 10.1.243和cuDNN 7.6.5\nconda install cudatoolkit==10.1.243\nconda install cudnn==7.6.5\npip install tensorflow-gpu==2.1.0\n```\n\n### Anaconda下安装PyTorch的GPU各个版本（从0.4到1.4）\n\n数据来源于[官网](https://pytorch.org/get-started/previous-versions/)，截止2020年4月11号，`PyTorch 1.4`版本需要配合`CUDA 10.1`或`CUDA9.2`配合使用。\n\n![PyTorch](https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png)\n\n#### PyTorch 0.4.1\n\n```bash\nconda create -n pytorch041 pip python=3.6\nsource activate pytorch041\n```\n\n在虚拟环境中\n\n```bash\nconda install cudatoolkit==9.0\nconda install pytorch=0.4.1 cuda90 -c pytorch\n```\n\n#### PyTorch 1.1.0\n\n```bash\nconda create -n pytorch110 pip python=3.6\nsource activate pytorch110\n```\n\n在虚拟环境中\n\n```bash\nconda install pytorch==1.1.0 torchvision==0.3.0 cudatoolkit=9.0 -c pytorch\n```\n\n#### PyTorch 1.4\n\n```bash\nconda create -n pytorch14 pip python=3.6\nsource activate pytorch14\n```\n\n在虚拟环境中\n\n```bash\nconda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1 -c pytorch\n```\n\n#### 总结\n\n如果在安装过程中出现类似的错误\n\n```bash\nCondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2>\nElapsed: -\n\nAn HTTP error occurred when trying to retrieve this URL.\nHTTP errors are often intermittent, and a simple retry will get you on your way.\n```\n\n可能因为网络原因导致安装中断，不断尝试安装命令即可。\n\n### NVim/Vim简单使用\n\n本小节内容节选自我的另一篇文章[《Linux之打造vim实用配置方案》](https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/)。\n\n#### 什么是Vim？\n\n**[Vim](https://www.vim.org/)- the ubiquitous text editor**，一种无处不在的文本编辑器，维基百科是这么介绍**vim**的：\n\n> **Vim**是从[vi](https://zh.wikipedia.org/wiki/Vi)发展出来的一个[文本编辑器](https://zh.wikipedia.org/wiki/文本编辑器)。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和[Emacs](https://zh.wikipedia.org/wiki/Emacs)并列成为[类Unix系统](https://zh.wikipedia.org/wiki/类Unix系统)用户最喜欢的编辑器。\n>\n> Vim的第一个版本由[布莱姆·米勒](https://zh.wikipedia.org/wiki/布萊姆·米勒)在1991年发布。最初的简称是**V**i **IM**itation，随着功能的不断增加，正式名称改成了**V**i **IM**proved。现在是在[开放源代码](https://zh.wikipedia.org/wiki/开放源代码)方式下发行的[自由软件](https://zh.wikipedia.org/wiki/自由软件)。\n\n**文件的增删查改**——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。\n\n**配置文件**——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿`git clone repoyoulike`，然后按照配置文档进行修改，什么**tf**要升级啦，**gcc/g++**要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用`gedit`来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用**ssh**连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。\n\n**知其然知其所以然**——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。\n\n**Vim**适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从[官网](https://www.vim.org/download.php)下载。 \n\n#### Vim哲学\n\n简单概括：摆脱鼠标，一键到达。\n\n即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。\n\n#### 升级支持python3的Vim8*\n\n在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是**vi**编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，[Vim8](https://github.com/vim/vim)在[NeoVim](https://github.com/neovim/neovim)的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口**terminal**，尤其是支持**terminal**非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，在升级了支持**Python3**的Vim8后（**在Vim版本中，不能同时支持Python2和Python3**），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。在这一小节，介绍怎么**编译支持Python3的Vim8版本**，**前提是系统了安装Python3**，Python3的安装不做讨论。\n\n1. **编译安装yum源里的vim最新版**\n\n   [参考YouCompleteMe](https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source)里给出的方法，略作调整。\n\n   首先检查系统里的Vim是否已经安装，在终端输入命令\n\n   ```bash\n   rpm -qa | grep vim\n   ```\n\n   如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（**下载Vim最新版源代码**）开始阅读。\n\n   一般情况下，运行下列命令安装Vim\n\n   ```bash\n   sudo yum -y install yum*    // CentOS7.6系统\n   ```\n\n   查看vim版本\n\n   ```bash\n   vim --version\n   ```\n\n   可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。\n\n   如果是Vim版本，查看Vim是否支持Python3\n\n   ```bash\n   vim --version | grep python\n   ```\n\n   如果结果显示python3前面是`+`号，则这一小节可以跳过，如果是`-`号，则需要自己编译Vim，需执行以下步骤。\n\n2. **卸载Vim**\n\n   在编译之前，需要卸载系统上的Vim版本\n\n   - 如果使用`yum install vim*`命令安装的Vim，卸载Vim时执行\n\n     ```bash\n     yum remove vim\n     ```\n\n   - 如果Vim是使用`make`编译过的，在**CentOS7.6系统**下，进入到Vim源代码目录，执行\n\n     ```bash\n     sudo make uninstall\n     ```\n\n   如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone https://github.com/vim/vim.git)，然后`cd vim`，再执行上述语句。\n\n   如果是**Ubuntu系统**，卸载起来就比较方便\n\n   ```bash\n   sudo apt install checkinstall\n   cd ~/vim       // vim是Vim源代码文件夹\n   sudo checkinstall\n   ```\n\n3. **下载Vim最新版源代码**\n\n   ```bash\n   cd ~                                         // 进入到当前用户的根目录下\n   git clone https://github.com/vim/vim.git     // 下载Vim源代码\n   cd vim                                       // 进入到Vim源代码文件\n   ```\n\n4. **配置**\n\n   ```bash\n   ./configure --with-features=huge \\\n               --enable-multibyte \\\n               --enable-rubyinterp=yes \\\n               --enable-python3interp=yes \\\n               --with-python3-config-dir=$(python3-config --configdir) \\\n               --enable-perlinterp=yes \\\n               --enable-luainterp=yes \\\n               --enable-gui=gtk2 \\\n               --enable-cscope \\\n               --prefix=/usr/local\n   ```\n\n   命令[解释](https://www.jianshu.com/p/aac78ff576c5)：\n\n   ` --with-features=huge`：支持最大特性\n\n   `--enable-multibyte`：打开多字节支持，可以在Vim中输入中文\n\n   `--enable-rubyinterp`：打开对ruby编写的插件的支持\n\n   ` --enable-python3interp`：打开对python3编写的插件的支持\n\n   `--with-python-config-dir`：Python3的路径\n\n   `--enable-perlinterp`：打开对perl编写的插件的支持\n\n   ` --enable-luainterp`：打开对lua编写的插件的支持\n\n   `--enable-gui`：打开GUI支持\n\n   `--enable-cscope`：打开对cscope的支持\n\n   `--prefix=/usr/local/`：指定将要安装到的路径\n\n5. **设置VIMRUNTIMEDIR**\n\n   **VIMRUNTIMEDIR**是vim运行时候所需资源的目录，非常重要。\n\n   ```bash\n       make VIMRUNTIMEDIR=/usr/local/share/vim/vim82\n   ```\n\n6. **编译安装**\n\n   ```bash\n   sudo make install\n   ```\n\n7. **设置Vim为默认的编辑器**\n\n   使用`update-alternative`设置vim为默认编辑器：\n\n   ```bash\n   sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim 1\n   sudo update-alternatives --set editor /usr/local/bin/vim\n   sudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim 1\n   sudo update-alternatives --set vi /usr/local/bin/vim\n   ```\n\n按照上述步骤完成后查看Vim**版本\n\n```\nvim --version\n```\n\n![vim版本](https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png)\n\n可以看到Vim版本是8.2版本，已开启**python3支持**，需要进行验证，在终端输入`vim`，接着在**正常模式**下输入`:echo has(\"python3\")`，按一下回车键，若屏幕最下面输出`1`，则配置正确，Vim支持Python3。\n\n编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及**Issues（非常有用）**、[stackoverflow](https://stackoverflow.com/)等，其次再考虑其它出处，尽可能多看**专业的英文文档**，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！\n\n该方法是全局设置方法。\n\n- **安装中文vim帮助文档**\n\n  进入Vim环境，按一下前缀键`esc`，在英文语法环境下，输入`:help`后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：\n\n  - **下载中文安装包**\n\n    ```bash\n    wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz\n    ```\n\n  - **解压**\n\n    ```bash\n    tar zxvf v2.3.0.tar.gz\n    ```\n\n  - **安装**\n\n    ```bash\n    cd vimcdoc-2.3.0/\t\t\t\t# 进入解压后的目录\n    ./vimcdoc.sh -i\t\t\t\t\t# 安装\n    ```\n\n    命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。\n\n#### Vim8 —> NeoVim\n\n完全是偶然。在上回讲到，在Vim下折腾了两三天的[代码补全插件YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了[NeoVim](https://github.com/neovim/neovim)，[YouCompleteMe](https://github.com/ycm-core/YouCompleteMe)换了另一个代码补全插件[coc-vim](https://github.com/neoclide/coc.nvim)，香得不行。\n\n关于Vim的插件介绍，请查阅我的另一篇文章[《Linux之打造vim实用配置方案》](https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/)。\n\n**NeoVim和Vim的用法基本一致**，底层架构有所不同而已，Vim用户可以很方便的操作NeoVim，配置文件可以直接进行迁移。\n\n[NeoVim](https://github.com/neovim/neovim)的安装：\n\n```bash\nsudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install -y neovim python3-neovim\n```\n\n#### 心理准备\n\n- **学习Vim在开始时是痛苦的**，**但是熟悉之后，工作效率会大大提升**\n- 需要时间\n- 需要不断地练习\n- 不要期望你能在3天内把vim练得比别的编辑器更有效率\n\n#### 配置文件\n\n如果使用NVim或Vim编辑文件：\n\n```bash\n# NeoVim\nnvim file\n\n# Vim\nvim file\n```\n\n发现界面黑乎乎的，没有行号，没有语法高亮等，作为一名视觉动物，稍微美化一下NeoVim或者Vim，使其不那么打击我们学习的热情。\n\nNVim的配置文件路径：`~/.config/nvim/init.vim`\n\nVim的配置文件路径：`~/.vim/vimrc`\n\n将下列配置，根据需求，粘贴到配置文件中，然后`:wq`，在终端中输入`source ~/.config/nvim/init.vim`或者`source ~/.vim/vimrc`刷新配置文件。\n\n**请仔细阅读每一行注释。**\n\n```bash\n -----------------\n\"  基本设置\n\" -----------------\n\n\" 语法高亮\nsyntax on\n\n\" 显示行号\nset number\n\n\" 显示当前行号的相关行，比如以此行为标准，向上/向下数第1行、第2行等 \nset relativenumber\n\n\" 设置TAB宽度, ts: tabstop\nset expandtab\nset tabstop=2\nset shiftwidth=2\nset softtabstop=2\n\n\" 光标所在的那一栏上面/下面还显示出6行\nset scrolloff=6\n\n\n\" 显示当前行的下滑线\nset cursorline\n\n\" 保证当前vim环境下的字不会超出屏幕\nset wrap\n\n\" 显示当前的命令\nset showcmd\n\n\" 左下角显示当前的模式名称\nset showmode\n\n\" 按下TAB，自动补全指令\nset wildmenu\n\n\" 是否显示状态栏, 0 : 不显示, 1 : 表示只在多窗口时显示, 2 : 表示显示\nset laststatus=2\n\" 显示当前光标的位置、进度以及时间\nset statusline=%F%m%r%h%w\\ [pos=(%l,%v)]\\ [progress=%p%%]\\ %{strftime(\\\"%d/%m/%y\\ -\\ %H:%M\\\")} \n\n\" 关闭当错误发生的bell提示音\nset noeb\n\" 当错误发生时, 屏幕闪烁\n\" set vb\n\" 当错误发生时, 不要闪烁屏幕\n\" set novisualbell    \n\" ------------------\n\"   关于搜索和高亮\n\" ------------------\n\n\" 高亮搜索到的词\nset hlsearch\n\"为了避免打开新的文件时显示的上一个文件的搜索结果产生的高亮\n\" exec 表示在:后面运行的命令\nexec \"nohlsearch\"\n\n\" 输入时, 边输入, 边高亮\nset incsearch\n\" 忽略大小写\nset ignorecase\n\" 智能大小写\nset smartcase\n\n\" 支持鼠标点击和滚动\n\" set mouse=a\n\n\" -----------------\n\"   map 键盘映射\n\" -----------------\n\n\" 按下小写s, 啥事不干\nmap s <nop>      \n\" 按下大写S, 保存当前文件, <CR>为回车按键\nmap S :w<CR> \n\" 按下大写Q, 退出当前文件\nmap Q :q<CR> \n\" 按下大写R, 更新文件配置\nmap R :source $MYVIMRC<CR>    \n```\n\n`77~81`行解释，假设要编辑一个文件，进行了修改，此时\n\n- 保存文件 — 先按前缀键`Esc`，再按住大写`S`，默认操作：先按前缀键`Esc`，再输入`:w`；\n- 更新配置 — 先按前缀键`Esc`，再按住大写`R`，默认操作：退出文件，再`source files`；\n- 退出文件 — 先按前缀键`Esc`，再按住大写`Q`，默认操作：先按前缀键`Esc`，再输入`:q`；\n\n这三个快捷键非常有用，可以相互搭配使用！\n\n#### 几种模式\n\n- 普通模式（Normal）：启动NVim/Vim后，Vim默认在模式下，进入Normal模式的快捷键：`Esc`；\n- 插入模式（Insert）：快捷键：`i`，会看到vim左下角有一个 **-- 插入 --** 字样，表示可以以插入的方式输入，此时，你可以输入文本了，就像你用“记事本”一样；\n\n#### 常用命令\n\n在终端输入：\n\n```bash\nvimtutor\n```\n\n查看Vim教程（已在[章节](升级支持python3的Vim8*)安装了中文版教程），强烈建议自学一遍。先按前缀键`Esc`，再输入`:q`可退出教程。\n\n- `i `→ Insert 模式，按 ESC 回到 Normal 模式；\n- 退出并保存\n  - 一般操作：先按前缀键`Esc`，再输入`:wq`；\n  - 快捷键：根据上述配置文件，先按前缀键`Esc`，再按住`SQ`；\n- 保存并更新配置：\n  - 一般操作：先按前缀键`Esc`，再输入`:wq`，在终端输入`source files`；\n  - 快捷键：根据上述配置文件，先按前缀键`Esc`，再按住`SR`；\n- 退出不保存：先按前缀键`Esc`，再输入`:q!`\n\n- 关于删除：**在普通模式（Normal）下**，\n  - `x` → 删除光标所指向的字符；\n  - `dd` → 删除光标所在的那一行；\n- 关于插入：**在普通模式（Normal）下，**除了`i`可以进入插入模式外，还有\n  - `a `→ 在光标后插入；\n  - `o `→ 在当前行后插入一个新行；\n  - `O` → 在当前行前插入一个新行；\n  - `cw` → 替换从光标所在位置后到一个单词结尾的字符；\n- 关于撤销/恢复：**在普通模式（Normal）下**，\n  - `u` → 撤销；\n  - <C-r>，意为`Ctrl + r` → 恢复；\n- 关于跳转：**在普通模式（Normal）下**，\n  - `gg` → 跳转到当前文件的第一行行首；\n  - `G` →  跳转到当前文件的最后一行行首；\n  - `0 `→ 跳转到当前行的行首；\n  - `$` → 跳转到当前行的最后一个字符处；\n  - `50gg` → 跳转到第50行；\n  - `50j` → 从当前行向后跳转50行；\n- 关于搜索：**在普通模式（Normal）下**，输入`/`，就可以进行文件内搜索，按`n`查找下一个，`N`查找上一个\n\n这只是些非常基础的命令，不过足以应付一般情况，NVim/Vim下有很多实用的插件，请关注我的另一篇文章：[《Linux之打造vim实用配置方案》](https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/)。\n\n### Tmux简单使用\n\nTmux 是一个终端复用器（terminal multiplexer），非常有用，**建议所有重要的操作，都在Tmux里进行，只要服务器不宕机，操作一直在进行。**\n\n#### 简介\n\n命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称\"窗口\"），在里面输入命令。**用户与计算机的这种临时的交互，称为一次\"会话\"（session）** 。\n\n会话的一个重要特点是，窗口与其中启动的进程是[连在一起](http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html)的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。\n\n一个典型的例子就是，[SSH 登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。\n\n**为了解决这个问题，会话与窗口可以\"解绑\"：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话\"绑定\"其他窗口。**\n\n#### 作用\n\n**Tmux 就是会话与窗口的\"解绑\"工具，将它们彻底分离。**\n\n> - 它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。\n> - 它可以让新窗口\"接入\"已经存在的会话。\n> - 它允许每个会话有多个连接窗口，因此可以多人实时共享会话。\n> - 它还支持窗口任意的垂直和水平拆分。\n\n#### 几个概念\n\n- 会话(session): 建立一个 tmux 工作区会话，会话可以长期驻留，重新连接服务器不会丢失，我们只需重新 tmux attach 到之前的工作区就可以恢复会话\n- 窗口(window): 容纳多个窗格\n- 窗格(pane): 可以在窗口中分成多个窗格\n\n![](https://pic.downk.cc/item/5e986635c2a9a83be5a21e27.jpg)\n\n#### 安装\n\n- **CentOS/Fedora**\n\n  ```bash\n  sudo yum install tmux\n  ```\n\n- **Ubuntu/Debian**\n\n  ```bash\n  sudo apt-get install tmux\n  ```\n\n- Mac\n\n  ```bsah\n  brew install tmux\n  ```\n\n#### 启动和退出\n\n在终端输入\n\n```bash\ntmux\n```\n\n![](https://pic.downk.cc/item/5e982247c2a9a83be5672750.png)\n\n启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。\n\n按下`Ctrl+d`或者显式输入`exit`命令，就可以退出 Tmux 窗口。\n\n#### 前缀键\n\n与`vim`、`nvim`类似，都存在一个**前缀键**，Tmux 窗口有大量的快捷键，**所有快捷键都要通过前缀键唤起**。默认的前缀键是`Ctrl+b`，即先按下`Ctrl+b`，快捷键才会生效。\n\n举例来说，帮助命令的快捷键是`Ctrl+b ?`。它的用法是，在 Tmux 窗口中，先按下`Ctrl+b`，再按下`?`，就会显示帮助信息。\n\n然后，按下 ESC 键或`q`键，就可以退出帮助。\n\n当然如果觉得前缀键`Ctrl+b`不太方便，可以更换前缀键。\n\n#### 会话管理\n\n##### 新建会话\n\n第一个启动的 Tmux 窗口，编号是`0`，第二个窗口的编号是`1`，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。\n\n使用编号区分会话，不太直观，更好的方法是为会话起名。\n\n```bash\ntmux new -s YourSeeName\n```\n\n新建了一个名为**YourSeeName**的Tmux窗口。\n\n##### 分离会话\n\n在 Tmux 窗口中，按下`Ctrl+b d`或者输入`tmux detach`命令，就会将当前会话与窗口分离，进入普通的终端界面，**但是会话和里面的进程仍然在后台运行**，`tmux ls`命令可以查看当前所有的 Tmux 会话。\n\n##### 会话查看\n\n在Tmux会话内，列出所有会话的快捷键是`Ctrl+b s`\n\n登录到终端以后，使用命令\n\n```bash\ntmux ls\n```\n\n可以查看当前所有的 Tmux 会话。\n\n##### 进入会话\n\n进入到Tmux最后一次退出的窗口\n\n```bash\ntmux attach\n```\n\n使用`tmux ls`查看可用的窗口，然后选择想进入的窗口：\n\n```bash\n# 进入名为Seesion-Name的会话窗口\ntmux a -t Seesion-Name\n\n# 进入编号为SessionNum的会话窗口\ntmux a -t Session-Num\t# SessionNum为0、1、2...3\n```\n\n##### 杀死会话\n\n```bash\n# 使用会话名称\ntmux kill-session -t Seesion-Name\n\n# 使用会话编号\ntmux kill-session -t Session-Num\n```\n\n##### 切换会话\n\n```bash\n# 使用会话名称\ntmux switch -t Seesion-Name\n\n# 使用会话编号\ntmux switch -t Session-Num\n```\n\n##### 重命名会话\n\n在Tmux会话内，重命名的快捷键是`Ctrl+b $`\n\n在终端界面\n\n```bash\n# 使用会话名称\ntmux rename-session -t Seesion-Name New-Name\n\n# 使用会话编号\ntmux rename-session -t Session-Num New-Name\n```\n\n#### 窗格操作\n\n`Ctrl+b %`：划分左右两个窗格\n\n``Ctrl+b \"``：划分上下两个窗格\n\n`Ctrl+b q`：显示窗格编号\n\n## 第五章：在服务器上利用GPU跑程序的简化步骤\n\n1. 利用FileZilla软件登录远程服务器上传所需程序文件\n2. 在终端利用SSH登录远程服务器\n3. 按照下面的命令进行操作，建议使用**tmux终端复用神器**，第2、3、4步不是必须的，但是强烈推荐使用！\n\n```bash\nssh username@IPaddress -p 22      # 登录服务器\ntmux ls                           # 查看终端会话列表，若没有，新建一个\n                                  # 会话窗口 tmux new -s Seesion-Name，保证程序在后台运行\ntmux a -t Seesion-Name             # 进入你指定的会话窗口\nsource activate tensorflow-gpu    # 在会话窗口中激活tensorflow-gpu环境\ncd xxx/yyy                        # 程序文件所在路径\nls                                # 查看文件\npython abc.py                     # 运行程序\n```\n\n## 第六章：服务器管理*\n\n### 添加/删除账户\n\n#### 添加用户\n\n```bash\n# 1、创建hadoop用户并修改密码\nsudo useradd -m username -s /bin/bash -g lab532 \nsudo passwd username  \n```\n\n使用`useradd`命令创建用户，其中\n\n- `-m`：创建用户的主目录\n- `-s`：新账户的登录 shell\n- `-g`：新账户所属的用户组的名称或 ID，实验室用户都在组`lab532`中\n\n#### 删除用户\n\n```bash\n# 2、删除用户\nsudo deluser username --remove\n```\n\n### 用户组\n\n#### 查看用户的UID和GID\n\n以用户`adoredee`为例，查看用户`adoredee`的的UID和GID\n\n```bash\nid adoredee\n```\n\n- UID为UserId，即用户ID，用来标识每个用户的唯一标示符\n- GID为GroupId，即组ID，用来标识用户组的唯一标识符\n\n#### 修改用户的用户组\n\n```bash\nsudo usermod -g lab532 adoredee\n```\n\n强制用户`adoredee`的基本组为`lab532`\n\n#### 查看某一用户组下的所有成员\n\n查看用户组`lab532`下的所属成员\n\n```bash\ncat /etc/group | grep 'lab532'\n```\n\n输出\n\n```bash\nlab532:x:1002:\n```\n\n得知用户组`lab532`的组ID是**1002**，\n\n```bash\nawk -F\":\" '{print $1\"\\t\\t\"$4}' /etc/passwd | grep '1002'\n```\n\n显示组`lab532`下的所有用户。\n\n#### 修改用户组名称\n\n```bash\ngroupmod -n newname oldname\n```\n\n用户组名从 `oldname`修改为 `newname`。\n\n### 将普通用户赋予管理员权限\n\n使用`useradd`命令创建的用户没有管理员权限，不能使用`sudo`命令，假设要将用户`adoredee`提拔为系统管理员，首先打开文件\n\n```bash\n# 给予/etc/sudoers文件 写 的权限\nsudo +w /etc/sudoers\nsudo nvim /etc/sudoers\n```\n\n然后找到如下界面\n\n```bash\n## Next comes the main part: which users can run what software on \n## which machines (the sudoers file can be shared between multiple\n## systems).\n## Syntax:\n##\n##      user    MACHINE=COMMANDS\n##\n## The COMMANDS section may have other options added to it.\n##\n## Allow root to run any commands anywhere\nroot     ALL=(ALL)       ALL\n```\n\n在root下面一行新增命令：\n\n```bash\nadoredee ALL=(ALL)       ALL\n```\n\n退出并保存文件，取消`/etc/sudoers`文件 **写** 的权限\n\n```bash\nsudo -w /etc/sudoers\n```\n\n此时用户`adoredee`从普通用户晋升为系统管理员。\n\n**系统管理员请尊重其他用户的隐私。**\n\n### 修改登录界面显示\n\n![](https://pic.downk.cc/item/5e989362c2a9a83be5ccd569.png)\n\n远程连接服务器时，可以在登录成功后，显示欢迎界面，如上图，设置方法如下：\n\n```bash\n# CentOS\nsudo nvim /etc/motd\n \n# Ubuntu \nsudo nvim /etc/update-motd.d\n```\n\n下面是几种不同的风格，直接复制到文件中即可。\n\n#### SJTU\n\n```\n            ____     _____  ______  __  __\n           /\\  _`\\  /\\___ \\/\\__  _\\/\\ \\/\\ \\\n           \\ \\,\\L\\_\\\\/__/\\ \\/_/\\ \\/\\ \\ \\ \\ \\\n            \\/_\\__ \\   _\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\n              /\\ \\L\\ \\/\\ \\_\\ \\ \\ \\ \\ \\ \\ \\_\\ \\\n              \\ `\\____\\ \\____/  \\ \\_\\ \\ \\_____\\\n               \\/_____/\\/___/    \\/_/  \\/_____/\n```\n\n#### Lab532\n\n```\n          /\\       /_/__/_\\  /\\ ___`\\ \n           \\ \\      \\ \\   \\ \\ \\/\\_____\\ \n            \\ \\      \\ \\___\\ \\ \\ \\____/_  \n             \\ \\      \\ \\___\\ \\ \\ \\___\\ \\ \n              \\ \\_____ \\ \\   \\ \\ \\ \\___\\_\\ \n               \\/______/\\_\\   \\_\\ \\/___/_/\n```\n\n#### 佛祖保佑\n\n```bash\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *                             _ooOoo_\n *                            o8888888o\n *                            88\" . \"88\n *                            (| -_- |)\n *                            O\\  =  /O\n *                         ____/`---'\\____\n *                       .'  \\\\|     |//  `.\n *                      /  \\\\|||  :  |||//  \\\n *                     /  _||||| -:- |||||-  \\\n *                     |   | \\\\\\  -  /// |   |\n *                     | \\_|  ''\\---/''  |   |\n *                     \\  .-\\__  `-`  ___/-. /\n *                   ___`. .'  /--.--\\  `. . __\n *                .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n *               | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n *               \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n *          ======`-.____`-.___\\_____/___.-`____.-'======\n *                             `=---='\n *\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        \n *              佛祖镇楼         永无BUG        永不修改\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n```\n\n#### 佛祖瘫痪\n\n```\n/**\n * _ooOoo_\n * o8888888o\n * 88\" . \"88\n * (| -_- |)\n *  O\\ = /O\n * ___/`---'\\____\n * .   ' \\\\| |// `.\n * / \\\\||| : |||// \\\n * / _||||| -:- |||||- \\\n * | | \\\\\\ - /// | |\n * | \\_| ''\\---/'' | |\n * \\ .-\\__ `-` ___/-. /\n * ___`. .' /--.--\\ `. . __\n * .\"\" '< `.___\\_<|>_/___.' >'\"\".\n * | | : `- \\`.;`\\ _ /`;.`/ - ` : | |\n * \\ \\ `-. \\_ __\\ /__ _/ .-` / /\n * ======`-.____`-.___\\_____/___.-`____.-'======\n * `=---='\n *          .............................................\n *           佛曰：bug泛滥，我已瘫痪！\n */\n```\n\n#### 神兽草泥马\n\n```bash\n             ┏┓　　　┏┓+ +\n        ┏┛┻━━━┛┻┓ + +\n        ┃　　　　　　　┃ 　\n        ┃　　　━　　　┃ ++ + + +\n        ████━████ ┃+\n        ┃　　　　　　　┃ +\n        ┃　　　┻　　　┃\n        ┃　　　　　　　┃ + +\n        ┗━┓　　　┏━┛\n          ┃　　　┃　　　　　　　　　　　\n          ┃　　　┃ + + + +\n          ┃　　　┃　　　　Codes are far away from bugs with the animal protecting　　　\n          ┃　　　┃ + 　　　　神兽保佑,代码无bug　　\n          ┃　　　┃\n          ┃　　　┃　　+　　　　　　　　　\n          ┃　 　　┗━━━┓ + +\n          ┃ 　　　　　　　┣┓\n          ┃ 　　　　　　　┏┛\n          ┗┓┓┏━┳┓┏┛ + + + +\n           ┃┫┫　┃┫┫\n           ┗┻┛　┗┻┛+ + + +\n```\n\n#### 兔子\n\n```\n/**********/**********/**********//**********//**********//**********//**********/\n  .--,       .--,\n ( (  \\.---./  ) )\n  '.__/o   o\\__.'\n     {=  ^  =}\n      >  -  <\n     /       \\\n    //       \\\\\n   //|   .   |\\\\\n   \"'\\       /'\"_.-~^`'-.\n      \\  _  /--'         `\n    ___)( )(___\n   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。\n \n \n \n/**********/**********/**********//**********//**********//**********//**********/\n```\n\n#### 顶\n\n```\n/**\n * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂\n * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂　　　　　　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　　　　　頂頂頂　\n * 　　　頂頂　　　　　　頂頂　頂頂　頂頂\n * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂\n * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂\n */\n```\n\n#### 妹子\n\n```\n//                       .::::.\n//                     .::::::::.\n//                    :::::::::::\n//                 ..:::::::::::'\n//              '::::::::::::'\n//                .::::::::::\n//           '::::::::::::::..\n//                ..::::::::::::.\n//              ``::::::::::::::::\n//               ::::``:::::::::'        .:::.\n//              ::::'   ':::::'       .::::::::.\n//            .::::'      ::::     .:::::::'::::.\n//           .:::'       :::::  .:::::::::' ':::::.\n//          .::'        :::::.:::::::::'      ':::::.\n//         .::'         ::::::::::::::'         ``::::.\n//     ...:::           ::::::::::::'              ``::.\n//    ````':.          ':::::::::'                  ::::..\n//                       '.:::::'                    ':'````..\n//\n\n```\n\n#### 神兽小龙\n\n```bash\n                                                   __----~~~~~~~~~~~------___\n                                  .  .   ~~//====......          __--~ ~~\n                   -.            \\_|//     |||\\\\  ~~~~~~::::... /~\n                ___-==_       _-~o~  \\/    |||  \\\\            _/~~-\n        __---~~~.==~||\\=_    -_--~/_-~|-   |\\\\   \\\\        _/~\n    _-~~     .=~    |  \\\\-_    '-~7  /-   /  ||    \\      /\n  .~       .~       |   \\\\ -_    /  /-   /   ||      \\   /\n /  ____  /         |     \\\\ ~-_/  /|- _/   .||       \\ /\n |~~    ~~|--~~~~--_ \\     ~==-/   | \\~--===~~        .\\\n           '         ~-|      /|    |-~\\~~       __--~~\n                       |-~~-_/ |    |   ~\\_   _-~            /\\\n                            /  \\     \\__   \\/~                \\__\n                        _--~ _/ | .-~~____--~-/                  ~~==.\n                       ((->/~   '.|||' -_|    ~~-/ ,              . _||\n                                  -_     ~\\      ~~---l__i__i__i--~~_/\n                                  _-~-__   ~)  \\--______________--~~\n                                //.-~~~-~_--~- |-------~~~~~~~~\n                                       //.-~~~--\\\n \n                                 神兽保佑   代码无BUG!\n```\n\n#### 电脑\n\n```\n       ,----------------,              ,---------,\n          ,-----------------------,          ,\"        ,\"|\n        ,\"                      ,\"|        ,\"        ,\"  |\n       +-----------------------+  |      ,\"        ,\"    |\n       |  .-----------------.  |  |     +---------+      |\n       |  |                 |  |  |     | -==----'|      |\n       |  |  I LOVE DOS!    |  |  |     |         |      |\n       |  |  Bad command or |  |  |/----|`---=    |      |\n       |  |  C:\\>_          |  |  |   ,/|==== ooo |      ;\n       |  |                 |  |  |  // |(((( [33]|    ,\"\n       |  `-----------------'  |,\" .;'| |((((     |  ,\"\n       +-----------------------+  ;;  | |         |,\"\n          /_)______________(_/  //'   | +---------+\n     ___________________________/___  `,\n    /  oooooooooooooooo  .o.  oooo /,   \\,\"-----------\n   / ==ooooooooooooooo==.o.  ooo= //   ,`\\--{)B     ,\"\n  /_==__==========__==_ooo__ooo=_/'   /___________,\"\n  \n```\n\n#### 书\n\n```\n                  .-~~~~~~~~~-._       _.-~~~~~~~~~-.\n              __.'              ~.   .~              `.__\n            .'//                  \\./                  \\\\`.\n          .'//                     |                     \\\\`.\n        .'// .-~\"\"\"\"\"\"\"~~~~-._     |     _,-~~~~\"\"\"\"\"\"\"~-. \\\\`.\n      .'//.-\"                 `-.  |  .-'                 \"-.\\\\`.\n    .'//______.============-..   \\ | /   ..-============.______\\\\`.\n  .'______________________________\\|/______________________________`.\n\n```\n\n#### 键盘\n\n宽度有点窄，变形了……\n\n```\n/**\n * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐\n * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘\n * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\n * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│& 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │\n * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\n * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │\n * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │\n * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│\" '│ Enter  │               │ 4 │ 5 │ 6 │   │\n * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\n * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │< ,│> .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │\n * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││\n * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│\n * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\n */\n```\n\n#### 剪刀手\n\n```bash\n                      d*##$.\n zP\"\"\"\"\"$e.           $\"    $o\n4$       '$          $\"      $\n'$        '$        J$       $F\n 'b        $k       $>       $\n  $k        $r     J$       d$\n  '$         $     $\"       $~\n   '$        \"$   '$E       $\n    $         $L   $\"      $F ...\n     $.       4B   $      $$$*\"\"\"*b\n    '$        $.  $$     $$      $F\n      \"$       R$  $F     $\"      $\n       $k      ?$ u*     dF      .$\n       ^$.      $$\"     z$      u$$$$e\n       #$b             $E.dW@e$\"    ?$\n         #$           .o$$# d$$$$c    ?F\n         $      .d$$#\" . zo$>   #$r .uF\n          $L .u$*\"      $&$$$k   .$$d$$F\n           $$\"            \"\"^\"$$$P\"$P9$\n          JP              .o$$$$u:$P $$\n          $          ..ue$\"      \"\"  $\"\n         d$          $F              $\n         $$     ....udE             4B\n          #$    \"\"\"\"` $r            @$\n           ^$L        '$            $F\n             RN        4N           $\n              *$b                  d$\n               $$k                 $F\n               $$b                $F\n                 $\"\"               $F\n                 '$                $\n                  $L               $\n                  '$               $\n                   $               $\n\n\n```\n\n#### 龙图腾\n\n```\n......................................&&.........................\n....................................&&&..........................\n.................................&&&&............................\n...............................&&&&..............................\n.............................&&&&&&..............................\n...........................&&&&&&....&&&..&&&&&&&&&&&&&&&........\n..................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............\n................&...&&&&&&&&&&&&&&&&&&&&&&&&&&&&.................\n.......................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........\n...................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...............\n..................&&&   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\n...............&&&&&@  &&&&&&&&&&..&&&&&&&&&&&&&&&&&&&...........\n..............&&&&&&&&&&&&&&&.&&....&&&&&&&&&&&&&..&&&&&.........\n..........&&&&&&&&&&&&&&&&&&...&.....&&&&&&&&&&&&&...&&&&........\n........&&&&&&&&&&&&&&&&&&&.........&&&&&&&&&&&&&&&....&&&.......\n.......&&&&&&&&.....................&&&&&&&&&&&&&&&&.....&&......\n........&&&&&.....................&&&&&&&&&&&&&&&&&&.............\n..........&...................&&&&&&&&&&&&&&&&&&&&&&&............\n................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\n..................&&&&&&&&&&&&&&&&&&&&&&&&&&&&..&&&&&............\n..............&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&....&&&&&............\n...........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&......&&&&............\n.........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........&&&&............\n.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...........&&&&............\n......&&&&&&&&&&&&&&&&&&&...&&&&&&...............&&&.............\n.....&&&&&&&&&&&&&&&&............................&&..............\n....&&&&&&&&&&&&&&&.................&&...........................\n...&&&&&&&&&&&&&&&.....................&&&&......................\n...&&&&&&&&&&.&&&........................&&&&&...................\n..&&&&&&&&&&&..&&..........................&&&&&&&...............\n..&&&&&&&&&&&&...&............&&&.....&&&&...&&&&&&&.............\n..&&&&&&&&&&&&&.................&&&.....&&&&&&&&&&&&&&...........\n..&&&&&&&&&&&&&&&&..............&&&&&&&&&&&&&&&&&&&&&&&&.........\n..&&.&&&&&&&&&&&&&&&&&.........&&&&&&&&&&&&&&&&&&&&&&&&&&&.......\n...&&..&&&&&&&&&&&&.........&&&&&&&&&&&&&&&&...&&&&&&&&&&&&......\n....&..&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...........&&&&&&&&.....\n.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............&&&&&&&....\n.......&&&&&.&&&&&&&&&&&&&&&&&&..&&&&&&&&...&..........&&&&&&....\n........&&&.....&&&&&&&&&&&&&.....&&&&&&&&&&...........&..&&&&...\n.......&&&........&&&.&&&&&&&&&.....&&&&&.................&&&&...\n.......&&&...............&&&&&&&.......&&&&&&&&............&&&...\n........&&...................&&&&&&.........................&&&..\n.........&.....................&&&&........................&&....\n...............................&&&.......................&&......\n................................&&......................&&.......\n.................................&&..............................\n..................................&..............................\n\n```\n\n## 第七章：问题汇总\n\n### 1. 禁止使用sudo yum update\n\n起因是服务器更新了内核，CentOS从7.6升级到了7.7，输入`nvidia-smi`提示\n\n> NVIDIA NVML Driver/library version mismatch\n\n在终端输入以下命令查看nvidia的kernel模式\n\n```bash\nlsmod | grep nvidia\n```\n\n什么都没有。\n\n接着查看显卡驱动所使用的内核版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nNothing！\n\n再查看nvcc编译器的版本\n\n```bash\nnvcc --version\n```\n\n提示：**bash: nvcc: 未找到命令...**\n\nNothing is everywhere！可能只能去现场启动**重启大法**了。\n\n- **Notice：**\n\n  如果运行`lsmod | grep nvidia`出现了类似\n\n  ```bash\n  nvidia_uvm 634880 8\n  nvidia_drm 53248 0\n  nvidia_modeset 790528 1 nvidia_drm\n  nvidia 12312576 86 nvidia_modeset,nvidia_uvm\n  ```\n\n  这样的输出，则先**关闭相关的进程**\n\n  ```bash\n  sudo rmmod nvidia_uvm\n  sudo rmmod nvidia_modeset\n  ```\n\n  然后\n\n  ```bash\n  sudo rmmod nvidia\n  nvidia-smi\n  ```\n\n  此时可能会出现\n\n  ```bash\n  NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver\n  ```\n\n  再看看**NVIDIA显卡状态**\n\n  ```bash\n  lspci | grep -i nvidia\n  ```\n\n  输出（查看集成显卡的命令是`lspci | grep -i VGA`）\n\n  ```bash\n  04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)\n  04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)\n  ```\n\n  正常。\n\n  **查看系统依赖**\n\n  ```\n  yum info dkms\n  yum info libvdpau \n  yum info kernel-devel\n  ```\n\n  都已安装，若没有安装，执行`sudo yum install packages`，`packages`指的是缺省的包。\n\n  **为内核安装NVIDIA模块**\n\n  ```bash\n  dkms status\n  ```\n\n  是否有输出\n\n  ```bash\n  cd /usr/src/\n  ```\n\n  看看NVIDIA有哪些版本，选择其中一个进行安装\n\n  ```bash\n  dkms install -m nvidia -v xxx.xx     // xxx.xx为/usr/src/下的NVIDIA的版本号\n  ```\n\n  如果有多个版本，则挨个试试……\n\n  非必要情况下，不要重启。\n\n  继续尝试`nvidia-smi`命令，如果依旧不正常，继续探索。\n\n### 2. ImportError: libcublas.so.9.0\n\n- **错误**——激活环境后，导入`import tensorflow as tf`包后，出现错误\n\n  > ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量`LD_LIBRARY_PATH`未能配置正确\n\n- **解决**——`libcublas.so.9.0`文件在`/usr/local/cuda/lib64`路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行\n\n  ```bash\n  sudo ldconfig /usr/local/cuda/lib64\n  ```\n\n  问题可能会被解决，如果出现了**情况2**，请看解答。\n\n### 3. libcublas.so.9.0: cannot open shared object file\n\n- **错误**——运行**情况1**里的`sudo ldconfig /usr/local/cuda/lib64`后，出现错误\n\n  > libcublas.so.9.0: cannot open shared object file: No such file or directory\n\n- **原因**——符号链接出错\n\n- **解决**——创建软链接，将`libcudnn.so.7.0.5`软连接到`libcudnn.so.7`，如果`libcudnn.so.7.0.5`丢失，`libcudnn.so.7`将失效，`-s`表示建立软连接，`-f`表示强制执行。\n\n  ```bash\n  sudo ln -sf /usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/local/cuda-9.0/lib64/libcudnn.so.7\n  ```\n\n### 4. 安装PyTorch时中断安装\n\n- **错误**——在安装PyTorch过程中出现类似的错误\n\n  > CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2>\n  > Elapsed: -\n  >\n  > An HTTP error occurred when trying to retrieve this URL.\n  > HTTP errors are often intermittent, and a simple retry will get you on your way.\n\n- **原因**——网络原因\n- **解决**——[更换Anaconda源](#配置Anaconda国内开源镜像)或者继续尝试安装命令。\n\n（未完待续，随时更新）\n\n### 参考\n\n1. [stat cuda](https://blog.csdn.net/ksws0292756/article/details/80120561?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)\n2. [NVIDIA NVML Driver/library version mismatch](https://blog.csdn.net/Hungryof/article/details/99233087?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2)\n3. [NVIDIA driver](https://gist.github.com/fxrcode/0afa3c8db13f0ae0b427bb6ddc44adf4)\n4. [NVIDIA驱动安装](https://blog.csdn.net/weixin_42451919/article/details/89400365)\n5. https://qinqianshan.com/unix/linux/nvidia/\n6. [CUDA和cuDNN版本切换](https://dinghow.site/2019/05/19/cuda-cuDNN-version/)\n7. [切换GCC](https://oldpan.me/archives/cuda-cuDNN-multiple-edition)\n8. [CUDA切换](https://zhuanlan.zhihu.com/p/35834028)","slug":"服务器环境搭建、配置及使用","published":1,"updated":"2020-04-21T12:20:06.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99vmgvn0026mgvzadgp6840","content":"<p>搭建和配置<strong>深度学习环境</strong>、<strong>Matlab环境</strong>，普通用户可以自由切换多版本CUDA、cuDNN版本，自由组合创建不同版本的Tensorflow、PyTorch等深度学习环境。</p>\n<p>注意：标题右上角带有”<strong>***”标记的，意为这一部分内容需要</strong>管理员**操作。</p>\n <a id=\"more\"></a> \n\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>[toc]</p>\n<h2 id=\"安装计划\"><a href=\"#安装计划\" class=\"headerlink\" title=\"安装计划\"></a>安装计划</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 服务器系统</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> NVIDIA驱动安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> CUDA安装：9.0、9.1、9.2、10.0、10.1、10.2</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> cuDNN安装：7.0.5、7.4、7.6</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> SSH远程登录及文件传输</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Aanconda安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> OpenCV安装（pip）</li>\n<li><input disabled=\"\" type=\"checkbox\"> Opencv源码编译</li>\n<li><input disabled=\"\" type=\"checkbox\"> GCC安装：4.8.5、7.3.1</li>\n<li><input disabled=\"\" type=\"checkbox\"> MatLab安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Anaconda安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Tensorflow各个版本的安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> PyTorch各个版本的安装</li>\n<li><input disabled=\"\" type=\"checkbox\"> Torch各个版本的安装</li>\n<li><input disabled=\"\" type=\"checkbox\"> Caffe安装</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用 <strong>Environment Module</strong> 管理不同版本的软件</li>\n</ul>\n<h2 id=\"第一章：服务器情况简介\"><a href=\"#第一章：服务器情况简介\" class=\"headerlink\" title=\"第一章：服务器情况简介\"></a>第一章：服务器情况简介</h2><h3 id=\"查看系统硬件设备信息\"><a href=\"#查看系统硬件设备信息\" class=\"headerlink\" title=\"查看系统硬件设备信息\"></a>查看系统硬件设备信息</h3><p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dmidecode | more</span><br></pre></td></tr></table></figure>\n\n<p>查看服务器硬件设备信息，包括<strong>BIOS信息（BIOS Information）</strong>、<strong>服务器信息（System Information）</strong>、<strong>CPU信息（Processor Information）</strong>、<strong>缓存信息（Cache Information）</strong>、<strong>内存信息（Physical Memory Array）</strong>、<strong>电源信息（System Power Supply）</strong>、<strong>内存设备（Memory Device）</strong>等。</p>\n<p>服务器型号为<a href=\"https://www.dell.com/zh-cn/work/shop/povw/poweredge-r730\">Dell R730</a>，有两个显卡插槽，原机无显卡。2018年7月，在服务器上安装了一块GPU，型号为GTX 1080（<code>lspci | grep -i nvidia</code>），显存8G。</p>\n<h3 id=\"查看系统CPU\"><a href=\"#查看系统CPU\" class=\"headerlink\" title=\"查看系统CPU\"></a>查看系统CPU</h3><p><strong>查看CPU的统计信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lscpu</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Architecture:          x86_64</span><br><span class=\"line\">CPU op-mode(s):        32-bit, 64-bit</span><br><span class=\"line\">Byte Order:            Little Endian</span><br><span class=\"line\">CPU(s):                6</span><br><span class=\"line\">On-line CPU(s) list:   0-5</span><br><span class=\"line\">Thread(s) per core:    1</span><br><span class=\"line\">Core(s) per socket:    6</span><br><span class=\"line\">座：                 1</span><br><span class=\"line\">NUMA 节点：         1</span><br><span class=\"line\">厂商 ID：           GenuineIntel</span><br><span class=\"line\">CPU 系列：          6</span><br><span class=\"line\">型号：              79</span><br><span class=\"line\">型号名称：        Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz</span><br><span class=\"line\">步进：              1</span><br><span class=\"line\">CPU MHz：             1200.085</span><br><span class=\"line\">CPU max MHz:           1700.0000</span><br><span class=\"line\">CPU min MHz:           1200.0000</span><br><span class=\"line\">BogoMIPS：            3400.03</span><br><span class=\"line\">虚拟化：           VT-x</span><br><span class=\"line\">L1d 缓存：          32K</span><br><span class=\"line\">L1i 缓存：          32K</span><br><span class=\"line\">L2 缓存：           256K</span><br><span class=\"line\">L3 缓存：           15360K</span><br><span class=\"line\">NUMA 节点0 CPU：    0-5</span><br><span class=\"line\">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm arat pln pts</span><br></pre></td></tr></table></figure>\n\n<p>查看每个CPU信息，如每个CPU的型号，主频等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure>\n\n<p>运行命令查看CPU型号，为<strong>Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz</strong>。</p>\n<h3 id=\"查看内存\"><a href=\"#查看内存\" class=\"headerlink\" title=\"查看内存\"></a>查看内存</h3><p>查看内存使用量和交换区使用量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n\n<p>查看内存详细情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/meminfo    // 或者vmstat -s</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MemTotal:       40779120 kB</span><br><span class=\"line\">MemFree:          323944 kB</span><br><span class=\"line\">MemAvailable:   38162436 kB</span><br><span class=\"line\">Buffers:         1284976 kB</span><br><span class=\"line\">Cached:         36028884 kB</span><br><span class=\"line\">SwapCached:            0 kB</span><br><span class=\"line\">Active:         19560888 kB</span><br><span class=\"line\">Inactive:       18538364 kB</span><br><span class=\"line\">Active(anon):    1214532 kB</span><br><span class=\"line\">Inactive(anon):   270932 kB</span><br><span class=\"line\">Active(file):   18346356 kB</span><br><span class=\"line\">Inactive(file): 18267432 kB</span><br><span class=\"line\">Unevictable:           0 kB</span><br><span class=\"line\">Mlocked:               0 kB</span><br><span class=\"line\">SwapTotal:             0 kB</span><br><span class=\"line\">SwapFree:              0 kB</span><br><span class=\"line\">Dirty:                 0 kB</span><br><span class=\"line\">Writeback:             0 kB</span><br><span class=\"line\">AnonPages:        785432 kB</span><br><span class=\"line\">Mapped:           139012 kB</span><br><span class=\"line\">Shmem:            700072 kB</span><br><span class=\"line\">Slab:            1861424 kB</span><br><span class=\"line\">SReclaimable:    1663764 kB</span><br><span class=\"line\">SUnreclaim:       197660 kB</span><br><span class=\"line\">KernelStack:        9504 kB</span><br><span class=\"line\">PageTables:        17908 kB</span><br><span class=\"line\">NFS_Unstable:          0 kB</span><br><span class=\"line\">Bounce:                0 kB</span><br><span class=\"line\">WritebackTmp:          0 kB</span><br><span class=\"line\">CommitLimit:    20389560 kB</span><br><span class=\"line\">Committed_AS:    3160860 kB</span><br><span class=\"line\">VmallocTotal:   34359738367 kB</span><br><span class=\"line\">VmallocUsed:      443080 kB</span><br><span class=\"line\">VmallocChunk:   34358900732 kB</span><br><span class=\"line\">HardwareCorrupted:     0 kB</span><br><span class=\"line\">AnonHugePages:     36864 kB</span><br><span class=\"line\">CmaTotal:              0 kB</span><br><span class=\"line\">CmaFree:               0 kB</span><br><span class=\"line\">HugePages_Total:       0</span><br><span class=\"line\">HugePages_Free:        0</span><br><span class=\"line\">HugePages_Rsvd:        0</span><br><span class=\"line\">HugePages_Surp:        0</span><br><span class=\"line\">Hugepagesize:       2048 kB</span><br><span class=\"line\">DirectMap4k:    38408912 kB</span><br><span class=\"line\">DirectMap2M:     3305472 kB</span><br><span class=\"line\">DirectMap1G:     2097152 kB</span><br></pre></td></tr></table></figure>\n\n<p>原机内存大小为8G，在2018年7月，扩展到40G，实际上不到40G，为38.8G左右。</p>\n<h3 id=\"磁盘信息\"><a href=\"#磁盘信息\" class=\"headerlink\" title=\"磁盘信息\"></a>磁盘信息</h3><p><strong>查看硬盘和分区分布</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">sda                      8:0    0   5.5T  0 disk </span><br><span class=\"line\">├─sda1                   8:1    0   476M  0 part /boot</span><br><span class=\"line\">├─sda2                   8:2    0    61M  0 part </span><br><span class=\"line\">├─sda3                   8:3    0    64M  0 part /boot/efi</span><br><span class=\"line\">├─sda4                   8:4    0   1.4T  0 part /home</span><br><span class=\"line\">├─sda5                   8:5    0   3.6T  0 part </span><br><span class=\"line\">│ ├─VolGroup0-datavol0 253:2    0     1T  0 lvm  /mnt/vdisk0</span><br><span class=\"line\">│ ├─VolGroup0-datavol1 253:3    0     1T  0 lvm  /mnt/vdisk1</span><br><span class=\"line\">│ ├─VolGroup0-datavol2 253:4    0     1T  0 lvm  /mnt/vdisk2</span><br><span class=\"line\">│ └─VolGroup0-datavol3 253:5    0   540G  0 lvm  /mnt/vdisk3</span><br><span class=\"line\">└─sda6                   8:6    0 474.5G  0 part </span><br><span class=\"line\">  ├─centos-root        253:0    0   400G  0 lvm  /</span><br><span class=\"line\">  └─centos-swap        253:1    0  74.5G  0 lvm  </span><br><span class=\"line\">sr0                     11:0    1  1024M  0 rom  </span><br><span class=\"line\">loop0                    7:0    0  14.4G  0 loop /mnt/iso</span><br></pre></td></tr></table></figure>\n\n<p>可以看到目前服务器上的磁盘结构。<strong>如果重装系统，<code>/home</code>（sda4）可以保留，新系统在安装时，不必要再分/home区。直接将旧系统的/home挂载到新系统上即可。</strong></p>\n<p><strong>目前磁盘已采用LVM技术</strong>。</p>\n<blockquote>\n<p>LVM是（Logical Volume Manager) 逻辑卷管理的简写，它是Linux环境下对磁盘分区进行管理的一种机制。LVM是建立在硬盘和分区之上的一个逻辑层，屏蔽了底层磁盘布局，便于动态调整磁盘容量来提高磁盘分区管理的灵活性。它可以将一个或多个底层块设备组织成一个逻辑设备的卷组，管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统，管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配 。</p>\n</blockquote>\n<p><strong>查看更详细的信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看各分区使用情况</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务器系统信息\"><a href=\"#查看服务器系统信息\" class=\"headerlink\" title=\"查看服务器系统信息\"></a>查看服务器系统信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/*releasebash</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></span><br><span class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></span><br><span class=\"line\">ID=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></span><br><span class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></span><br><span class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></span><br><span class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></span><br><span class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></span><br><span class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=<span class=\"string\">\"CentOS-7\"</span></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br></pre></td></tr></table></figure>\n\n<p>系统为CentOS 7.7。</p>\n<p><strong>查看系统主机名</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看网卡\"><a href=\"#查看网卡\" class=\"headerlink\" title=\"查看网卡\"></a>查看网卡</h3><p><strong>查看网卡硬件信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i <span class=\"string\">'eth'</span></span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br><span class=\"line\">01:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br><span class=\"line\">02:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br><span class=\"line\">02:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br></pre></td></tr></table></figure>\n\n<p><strong>查查看系统的所有网络接口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig -a</span><br></pre></td></tr></table></figure>\n\n<p>可以看到连接网络的那个端口，假设是em2，可以查看该端口的IPV4、IPV6、子网掩码等信息。如果要详细查看如果某个网络接口的详细信息，比如em2的详细参数和指标</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ethtool em2</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings <span class=\"keyword\">for</span> em2:</span><br><span class=\"line\">    Supported ports: [ TP MII ]</span><br><span class=\"line\">    Supported link modes:   10baseT/Half 10baseT/Full </span><br><span class=\"line\">                            100baseT/Half 100baseT/Full </span><br><span class=\"line\">                            1000baseT/Half 1000baseT/Full <span class=\"comment\"># 支持千兆半双工，全双工模式</span></span><br><span class=\"line\">    Supported pause frame use: No </span><br><span class=\"line\">    Supports auto-negotiation: Yes <span class=\"comment\"># 支持自适应模式，一般都支持</span></span><br><span class=\"line\">    Advertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">                            100baseT/Half 100baseT/Full </span><br><span class=\"line\">                            1000baseT/Half 1000baseT/Full</span><br><span class=\"line\">    Advertised pause frame use: Symmetric</span><br><span class=\"line\">    Advertised auto-negotiation: Yes <span class=\"comment\"># 默认使用自适应模式</span></span><br><span class=\"line\">    Advertised FEC modes: Not reported</span><br><span class=\"line\">    Link partner advertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">                                         100baseT/Half 100baseT/Full </span><br><span class=\"line\">                                         1000baseT/Full</span><br><span class=\"line\">    Link partner advertised pause frame use: No</span><br><span class=\"line\">\tLink partner advertised auto-negotiation: Yes</span><br><span class=\"line\">\tLink partner advertised FEC modes: Not reported</span><br><span class=\"line\">    Speed: 1000Mb/s <span class=\"comment\"># 现在网卡的速度是1000Mb</span></span><br><span class=\"line\">    Duplex: Full   <span class=\"comment\"># 全双工</span></span><br><span class=\"line\">    .....</span><br><span class=\"line\">    Link detected: yes    <span class=\"comment\"># 表示有网线连接，和路由是通的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查看显示去往192.168.1.102的所有HTTP会话信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -ni em1 <span class=\"string\">'dst 192.168.1.102 and tcp and port 8080'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>显示来源IP或者目的IP为192.168.1.102的网络通信</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -i eth0 host 192.168.1.102</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看路由器列表</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route -n</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看所有监听端口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lntp</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看所有已经建立的连接</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -antp</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看网络统计信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p><strong>查看系统所有进程</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef</span><br></pre></td></tr></table></figure>\n\n<p><strong>显示所有进程的详细信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux</span><br></pre></td></tr></table></figure>\n\n<p><strong>显示某一用户的进程列表</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -f -u username</span><br></pre></td></tr></table></figure>\n\n<p><strong>实时显示进程状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>退出</p>\n<p><strong>列出当前的进程，以及它们的树状结构</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree</span><br></pre></td></tr></table></figure>\n\n<p><strong>结束进程</strong>，PID为Process ID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> PID</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看系统信号变量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -l</span><br></pre></td></tr></table></figure>\n\n<p>事实上，还有一个比较酷炫的命令是<code>htop</code>，安装方法是<code>sudo yum install htop</code>，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htop</span><br></pre></td></tr></table></figure>\n\n<p><strong>遇到顽固的进程，使出必杀技</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 PID</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s4.aconvert.com/convert/p3r68-cdx67/a6yfe-e7t35.png\" alt=\"\"></p>\n<h3 id=\"资源统计\"><a href=\"#资源统计\" class=\"headerlink\" title=\"资源统计\"></a>资源统计</h3><p><strong>查看当前目录大小</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看系统运行时间、用户数、负载</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统常用指令集合\"><a href=\"#系统常用指令集合\" class=\"headerlink\" title=\"系统常用指令集合\"></a>系统常用指令集合</h3><h4 id=\"cpu-sh-—-CPU统计信息指令\"><a href=\"#cpu-sh-—-CPU统计信息指令\" class=\"headerlink\" title=\"cpu.sh — CPU统计信息指令\"></a>cpu.sh — CPU统计信息指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 限制某个线程的cpu使用率</span></span><br><span class=\"line\">sudo cpulimit -p pid -l 50</span><br><span class=\"line\">ps -eo %cpu,args | grep -m1 PROCESS | awk <span class=\"string\">'&#123;print $1&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前进程按照memory和cpu排序</span></span><br><span class=\"line\">ps aux --sort=%mem,%cpu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照cpu使用率排序</span></span><br><span class=\"line\">ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed <span class=\"string\">\"/^ 0.0 /d\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统的物理cpu个数</span></span><br><span class=\"line\">grep <span class=\"string\">\"processor\"</span> /proc/cpuinfo | wc -l\t</span><br><span class=\"line\">grep -c -e <span class=\"string\">'^cpu[0-9]\\+'</span> /proc/<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前cpu型号</span></span><br><span class=\"line\">grep <span class=\"string\">\"model name\"</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前cpu信息</span></span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统的位数</span></span><br><span class=\"line\">grep -q <span class=\"string\">'\\&lt;lm\\&gt;'</span> /proc/cpuinfo &amp;&amp; <span class=\"built_in\">echo</span> 64 bits || <span class=\"built_in\">echo</span> 32 bits</span><br><span class=\"line\">getconf LONG_BIT | grep <span class=\"string\">'64'</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统的cpu频率</span></span><br><span class=\"line\">awk -F<span class=\"string\">\": \"</span> <span class=\"string\">'/cpu MHz\\ */ &#123; print \"Processor (or core) running speed is: \" $2 &#125;'</span> /proc/cpuinfo ; dmidecode | awk -F<span class=\"string\">\": \"</span> <span class=\"string\">'/Current Speed/ &#123; print \"Processor real speed is: \" $2 &#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每个cpu每个进程的cpu使用率</span></span><br><span class=\"line\">ps ax -L -o pid,tid,psr,pcpu,args | sort -nr -k4| head -15 | cut -c 1-90</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前中断</span></span><br><span class=\"line\">cat /proc/interrupts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看多个处理器的使用率相关信息</span></span><br><span class=\"line\">mpstat –P ALL 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个物理CPU中Core的个数：</span></span><br><span class=\"line\">cat /proc/cpuinfo | grep <span class=\"string\">\"cpu cores\"</span> | uniq | awk -F: <span class=\"string\">'&#123;print $2&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否为超线程？</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有两个逻辑CPU具有相同的”core id”，那么超线程是打开的。</span></span><br><span class=\"line\"><span class=\"comment\"># 每个物理CPU中逻辑CPU(可能是core, threads或both)的个数：</span></span><br><span class=\"line\">cat /proc/cpuinfo | grep <span class=\"string\">\"siblings\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /proc/stat 文件中有一行记录的机器从启动依赖，各个中断序号发生中断的次数。</span></span><br><span class=\"line\"><span class=\"comment\"># 这一行以intr开头，接下来的第一个数字是总的中断数目，之后就是分别的中断数目，从0开始。</span></span><br><span class=\"line\">cat /proc/<span class=\"built_in\">stat</span>  | grep intr</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"disk-sh-—-磁盘相关统计指令\"><a href=\"#disk-sh-—-磁盘相关统计指令\" class=\"headerlink\" title=\"disk.sh — 磁盘相关统计指令\"></a>disk.sh — 磁盘相关统计指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照目录大小排序战士最前面15个目录或者文件</span></span><br><span class=\"line\">du -xB M --max-depth=2 /var | sort -rn | head -n 15</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前所有子目录的文件大小</span></span><br><span class=\"line\">du -h --max-depth=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前文件或者目录最大的10个</span></span><br><span class=\"line\">du -s * | sort -n | tail</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照目录大小从大到小排序</span></span><br><span class=\"line\">du -b --max-depth 1 | sort -nr | perl -pe <span class=\"string\">'s&#123;([0-9]+)&#125;&#123;sprintf \"%.1f%s\", 1&gt;=2∗∗30?(1/2**30, \"G\"): 1&gt;=2∗∗20?(1/2**20, \"M\"): 1&gt;=2∗∗10?(1/2**10, \"K\"): ($1, \"\")&#125;e'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出path这个目录的文件树</span></span><br><span class=\"line\">du -h /path | sort -h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每隔60s监控对应目录的文件大小变化</span></span><br><span class=\"line\">watch -n60 du /var/<span class=\"built_in\">log</span>/messages</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归删除当前目录下所有子目录中的.svn目录</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> d -name <span class=\"string\">'.svn'</span> -print0 | xargs -0 rm -rdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前磁盘的使用情况</span></span><br><span class=\"line\">df -P | column -t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控磁盘的使用情况</span></span><br><span class=\"line\">watch -d -n 5 df</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前inode的使用情况</span></span><br><span class=\"line\">df -i  &lt;partition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照每个磁盘使用量从高到低排序</span></span><br><span class=\"line\">df -h | grep -v ^none | ( <span class=\"built_in\">read</span> header ; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$header</span>\"</span> ; sort -rn -k 5)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看物理磁盘的使用情况</span></span><br><span class=\"line\">df -x tmpfs | grep -vE <span class=\"string\">\"(gvfs|procbususb|rootfs)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前所有磁盘的大小和使用量</span></span><br><span class=\"line\">df -H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有分区使用情况</span></span><br><span class=\"line\">fdisk -l /dev/sda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统所有的分区或给定的分区</span></span><br><span class=\"line\">fdisk -l       </span><br><span class=\"line\"><span class=\"comment\"># 显示时，显示的是扇区数不是柱面数           </span></span><br><span class=\"line\">fdisk -u           </span><br><span class=\"line\"><span class=\"comment\"># 显示指定partition的block数       </span></span><br><span class=\"line\">fdisk -s partition       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘的读写容量</span></span><br><span class=\"line\">iostat -m -d /dev/sda1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试磁盘的读写速度</span></span><br><span class=\"line\">hdparm -t /dev/sda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个文件的所有链接</span></span><br><span class=\"line\">find -L / -samefile /path/to/file -<span class=\"built_in\">exec</span> ls -ld &#123;&#125; +</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看最大的5个文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ls -s &#123;&#125; \\; | sort -n -r | head -5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看365天前的文件并删除</span></span><br><span class=\"line\">find ./ -<span class=\"built_in\">type</span> f -mtime +365 -<span class=\"built_in\">exec</span> rm -f &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看大于100M的文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -size +100M</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"net-sh-—-网络信息统计指令\"><a href=\"#net-sh-—-网络信息统计指令\" class=\"headerlink\" title=\"net.sh  — 网络信息统计指令\"></a>net.sh  — 网络信息统计指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看http请求的header</span></span><br><span class=\"line\">tcpdump -s 1024 -l -A -n host 192.168.9.56</span><br><span class=\"line\">tcpdump -s 1024 -l -A src 192.168.9.56 or dst 192.168.9.56</span><br><span class=\"line\">sudo tcpdump -A -s 1492 dst port 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地网络中IP地址为192.168.0.5的主机现在与外界通信的情况</span></span><br><span class=\"line\">sudo tcpdump -i eth0 src host 192.168.0.5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网卡eth0的http请求的tcp包</span></span><br><span class=\"line\">tcpdump -i eth0 port http</span><br><span class=\"line\">tcpdump -i eth0 port http or port smtp or port imap or port pop3 -l -A | egrep -i <span class=\"string\">'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|userna me:|password:|login:|pass |user '</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tcp，upd，icmp非ssh的包</span></span><br><span class=\"line\">tcpdump -n -v tcp or udp or icmp and not port 22</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看http请求的request 包</span></span><br><span class=\"line\">sudo tcpdump -i eth0 port 80 -w -</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤http响应的get host头信息</span></span><br><span class=\"line\">sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E <span class=\"string\">\"GET \\/.*|Host\\: .*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DNS查询请求响应包</span></span><br><span class=\"line\">sudo tcpdump -i en0 <span class=\"string\">'udp port 53'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nmap -sP指定使用Ping echo 进行扫描 /24查看目的网络有多少主机处于运行状态</span></span><br><span class=\"line\">nmap -sP 192.168.0.1</span><br><span class=\"line\">nmap -sP 192.168.0.0/24</span><br><span class=\"line\">nmap -O www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Netstat主要用于Linux/Unix主机察看自身的网络状况，如开启的端口、在为哪些用户服务以及服务的状态</span></span><br><span class=\"line\">netstat -a</span><br><span class=\"line\">netstat -nlp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># netcat扫描机器开放的端口</span></span><br><span class=\"line\">nc -z -v -n 172.31.100.7 21-25</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># netcat 命令会连接开放端口21并且打印运行在这个端口上服务的banner信息。</span></span><br><span class=\"line\">nc -v 172.31.100.7 21</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出网络的路由表</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示结果包括服务器已经运行了多长时间，有多少登陆用户和对服务器性能的总体评估（load average）。</span></span><br><span class=\"line\">uptime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控 eth1 的网卡的流量 </span></span><br><span class=\"line\">iftop -i eth1 </span><br><span class=\"line\"><span class=\"comment\"># 以位元组(bytes 即字节)为单位显示流量(预设是位元 bits): </span></span><br><span class=\"line\">iftop -B </span><br><span class=\"line\"><span class=\"comment\"># 直接显示 IP, 不进行DNS 反解: </span></span><br><span class=\"line\">iftop -n </span><br><span class=\"line\"><span class=\"comment\"># 直接显示连接埠编号, 不显示服务名称: </span></span><br><span class=\"line\">iftop -N </span><br><span class=\"line\"><span class=\"comment\"># 显示某个网段进出封包流量 </span></span><br><span class=\"line\">iftop -F 192.168.1.0/24 or 192.168.1.0/255.255.255.0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网络流量实时监控工具之nload,查看网卡eth0的流量</span></span><br><span class=\"line\">nload -n eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看各个网卡的流量</span></span><br><span class=\"line\">nload -h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IPTraf是一个网络监控工具,功能比nload更强大,可以监控所有的流量,IP流量,按协议分的流量,还可以设置过滤器</span></span><br><span class=\"line\">iptraf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网络接口当前配置与接口命名：</span></span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"><span class=\"comment\"># 打开（up）或关闭（down）适配器</span></span><br><span class=\"line\">ifconfig &lt;网络名&gt; &lt;up|down&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为适配器分配IP地址：</span></span><br><span class=\"line\">ifconfig &lt;网络名&gt; &lt;ip地址&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为适配器分配第二个IP地址：</span></span><br><span class=\"line\">ifconfig &lt;网络名:实例数&gt; &lt;ip地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个网络适配器的驱动信息，适用于查询软件兼容性的情况：</span></span><br><span class=\"line\">ethtool -i eth0</span><br><span class=\"line\"><span class=\"comment\"># 显示网络数据：</span></span><br><span class=\"line\">ethtool -S</span><br><span class=\"line\"><span class=\"comment\"># 设置适配器连接速度（Mbps）</span></span><br><span class=\"line\">ethtool speed &lt;10|100|1000&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget</span></span><br><span class=\"line\">wget -S --spider http://osswin.sourceforge.net/ 2&gt;&amp;1 | grep Mod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看mac地址</span></span><br><span class=\"line\">cat /sys/class/net/*/address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看eth0的ip</span></span><br><span class=\"line\">ifconfig eth0 | awk <span class=\"string\">'/inet addr/ &#123;split ($2,A,\":\"); print A[2]&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl 查看页面对应的domail name</span></span><br><span class=\"line\">curl -s http://en.m.wikipedia.org/wiki/List_of_Internet_top-level_domains | sed -n <span class=\"string\">'/&lt;tr valign=\"top\"&gt;/&#123;s/&lt;[^&gt;]*&gt;//g;p&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># talnet</span></span><br><span class=\"line\">telnet localhost 6666</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有的网络接口</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;print $1&#125;'</span> /proc/net/dev|grep :|sed <span class=\"string\">\"s/:.*//g\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看DNS server版本好</span></span><br><span class=\"line\">nslookup -q=txt -class=CHAOS version.bind NS.PHX5.NEARLYFREESPEECH.NET</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"system-sh-—-系统信息相关指令\"><a href=\"#system-sh-—-系统信息相关指令\" class=\"headerlink\" title=\"system.sh — 系统信息相关指令\"></a>system.sh — 系统信息相关指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统load</span></span><br><span class=\"line\">uptime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统状态和每个进程的系统资源使用状况</span></span><br><span class=\"line\">top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可视化显示CPU的使用状况</span></span><br><span class=\"line\">htop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每个CPU的负载信息</span></span><br><span class=\"line\">mpstat -P ALL 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每隔1秒查看磁盘IO的统计信息</span></span><br><span class=\"line\">iostat -xkdz 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每隔一秒查看虚拟内存的使用信息</span></span><br><span class=\"line\">vmstat 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内存使用统计信息</span></span><br><span class=\"line\">free</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网络使用信息</span></span><br><span class=\"line\">nicstat -z 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 类似vmstat的显示优化的工具</span></span><br><span class=\"line\">dstat 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统活动状态，比如系统分页统计，块设备IO统计等</span></span><br><span class=\"line\">sar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网络连接状态查看</span></span><br><span class=\"line\">netstat -s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程资源使用信息查看</span></span><br><span class=\"line\">pidstat 1</span><br><span class=\"line\">pidstat -d 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个进程的系统调用信息 -p后面是进程id，-tttT 进程系统后的系统调用时间</span></span><br><span class=\"line\">strace -tttT -p 12670</span><br><span class=\"line\"><span class=\"comment\"># 统计IO设备输入输出的系统调用信息</span></span><br><span class=\"line\">strace -c dd <span class=\"keyword\">if</span>=/dev/zero of=/dev/null bs=512 count=1024k</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tcpdump 查看网络数据包</span></span><br><span class=\"line\">tcpdump -nr /tmp/out.tcpdump</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 块设备的读写事件信息统计</span></span><br><span class=\"line\">btrace /dev/sdb </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iotop查看某个进程的IO操作统计信息</span></span><br><span class=\"line\">iotop -bod5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># slabtop 查看内核 slab内存分配器的使用信息</span></span><br><span class=\"line\">slabtop -sc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 系统参数设置</span></span><br><span class=\"line\">sysctl -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 系统性能指标统计信息</span></span><br><span class=\"line\">perf <span class=\"built_in\">stat</span> gzip file1</span><br><span class=\"line\"><span class=\"comment\"># 系统cpu活动状态查看</span></span><br><span class=\"line\">perf record -a -g -F 997 sleep 10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"process-sh-—-进程统计相关指令\"><a href=\"#process-sh-—-进程统计相关指令\" class=\"headerlink\" title=\"process.sh — 进程统计相关指令\"></a>process.sh — 进程统计相关指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## ps查看当前系统执行的线程列表，进行瞬间状态，不是连续状态，连续状态需要使用top名称查看  更多常用参数请使用 man ps查看</span></span><br><span class=\"line\">ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 显示所有进程详细信息</span></span><br><span class=\"line\">ps aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## -u 显示某个用户的进程列表</span></span><br><span class=\"line\">ps -f -u www-data </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## -C 通过名字或者命令搜索进程</span></span><br><span class=\"line\">ps -C apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## --sort  根据进程cpu使用率降序排列，查看前5个进程  -pcpu表示降序  pcpu升序</span></span><br><span class=\"line\">ps aux --sort=-pcpu | head -5 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## -f 用树结构显示进程的层次关系，父子进程情况下</span></span><br><span class=\"line\">ps -f --forest -C apache2 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 显示一个父进程的所有子进程</span></span><br><span class=\"line\">ps -o pid,uname,comm -C apache2</span><br><span class=\"line\">ps --ppid 2359 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 显示一个进程的所有线程  -L 参数</span></span><br><span class=\"line\">ps -p 3150 -L </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##显示进程的执行时间 -o参数</span></span><br><span class=\"line\">ps -e -o pid,comm,etime </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看系统的线程数</span></span><br><span class=\"line\">nproc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## watch命令可以用来实时捕捉ps显示进程</span></span><br><span class=\"line\">watch -n 1 <span class=\"string\">'ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15'</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## jobs 查看后台运行的进程  jobs命令执行的结果，＋表示是一个当前的作业，减号表是是一个当前作业之后的一个作业，jobs -l选项可显示所有任务的PID,jobs的状态可以是running, stopped, Terminated,但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识；也就是说，jobs命令显示的是当前shell环境中所起的后台正在运行或者被挂起的任务信息</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看后台运营的进程号</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看现在被终止或者退出的进程号</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## kill命令 终止一个前台进程可以使用Ctrl+C键   kill  通过top或者ps获取进程id号  kill [-s 信号 | -p ] [ -a ] 进程号 ...</span></span><br><span class=\"line\"><span class=\"comment\">## 发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。 关闭进程号12的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> 12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 等同于在前台运行PID为123的进程时按下Ctrl+C键</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -2 123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程  </span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 列出所有信号名称</span></span><br><span class=\"line\"><span class=\"comment\">## HUP    1    终端断线</span></span><br><span class=\"line\"><span class=\"comment\">## INT     2    中断（同 Ctrl + C）</span></span><br><span class=\"line\"><span class=\"comment\">## QUIT    3    退出（同 Ctrl + \\）</span></span><br><span class=\"line\"><span class=\"comment\">## TERM   15    终止</span></span><br><span class=\"line\"><span class=\"comment\">## KILL    9    强制终止</span></span><br><span class=\"line\"><span class=\"comment\">## CONT   18    继续（与STOP相反， fg/bg命令）</span></span><br><span class=\"line\"><span class=\"comment\">## STOP    19    暂停（同 Ctrl + Z）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 得到指定信号的数值</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -l KILL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 杀死指定用户所有进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -u peidalinux</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 $(ps -ef | grep peidalinux) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 将后台中的命令调至前台继续运行  将进程123调至前台执行</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span> 123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 将一个在后台暂停的命令，变成继续执行</span></span><br><span class=\"line\"><span class=\"built_in\">bg</span>  123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思  下面输出被重定向到myout.file文件中</span></span><br><span class=\"line\">nohup <span class=\"built_in\">command</span> &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## at：计划任务，在特定的时间执行某项工作，在特定的时间执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">## 格式：at HH:MM YYYY-MM-DD //HH（小时）:MM（分钟） YYYY（年）-MM（月份）-DD（日）</span></span><br><span class=\"line\"><span class=\"comment\">## HH[am pm]+D(天) days //HH（小时）[am（上午）pm（下午）]+days（天）</span></span><br><span class=\"line\">at 12:00（时间） //at命令设定12:00执行一项操作</span><br><span class=\"line\"><span class=\"comment\"># at&gt;useradd aaa //在at命令里设定添加用户aaa</span></span><br><span class=\"line\"><span class=\"comment\"># ctrl+d //退出at命令</span></span><br><span class=\"line\"><span class=\"comment\"># tail -f /etc/passwd //查看/etc/passwd文件后十行是否增加了一个用户aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务。</span></span><br><span class=\"line\">atq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动计划任务后，如果不想启动设定好的计划任务可以使用atrm命令删除。</span></span><br><span class=\"line\">atrm 1 //删除计划任务1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## pstree命令：列出当前的进程，以及它们的树状结构  格式：pstree [选项] [pid|user]</span></span><br><span class=\"line\">pstree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## nice命令：改变程序执行的优先权等级 应用程序优先权值的范围从-20～19，数字越小，优先权就越高。一般情况下，普通应用程序的优先权值（CPU使用权值）都是0，如果让常用程序拥有较高的优先权等级，自然启动和运行速度都会快些。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。</span></span><br><span class=\"line\">nice [-n &lt;优先等级&gt;][--<span class=\"built_in\">help</span>][--version][命令]</span><br><span class=\"line\">nice -n 5 ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## sleep命令：使进程暂停执行一段时间</span></span><br><span class=\"line\">date;sleep 1m;date</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## renice命令 renice命令允许用户修改一个正在运行进程的优先权。 利用renice命令可以在命令执行时调整其优先权。</span></span><br><span class=\"line\"><span class=\"comment\">## 其中，参数number与nice命令的number意义相同。（1） 用户只能对自己所有的进程使用renice命令。（2） root用户可以在任何进程上使用renice命令。（3） 只有root用户才能提高进程的优先权</span></span><br><span class=\"line\">renice -5 -p 5200  <span class=\"comment\">#PID为5200的进程nice设为-5 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## pmap命令用于显示一个或多个进程的内存状态。其报告进程的地址空间和内存状态信息 #pmap PID </span></span><br><span class=\"line\">pmap 20367</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## top 动态查看进程的变化。</span></span><br><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务器存在的问题\"><a href=\"#服务器存在的问题\" class=\"headerlink\" title=\"服务器存在的问题\"></a>服务器存在的问题</h3><ol>\n<li><p><strong>电源供电不足</strong></p>\n<p>目前服务器运行良好，需要注意的是，服务器目前的电源功率是495W（<code>sudo dmidecode | grep Power</code>），GPU显卡额定功率是500W，服务器供电不足导致电源灯一闪一闪，为了保险起见，尽快补一块<a href=\"https://item.jd.com/28405788107.html\">750W服务器电源</a>。</p>\n</li>\n</ol>\n<h2 id=\"第二章：服务器系统安装\"><a href=\"#第二章：服务器系统安装\" class=\"headerlink\" title=\"第二章：服务器系统安装*\"></a>第二章：服务器系统安装*</h2><h2 id=\"第三章：深度学习必备基础环境安装\"><a href=\"#第三章：深度学习必备基础环境安装\" class=\"headerlink\" title=\"第三章：深度学习必备基础环境安装\"></a>第三章：深度学习必备基础环境安装</h2><p><strong>NVIDIA驱动、CUDA、cuDNN三部分尽可能在现场安装</strong>，因为涉及到重启，服务器不能远程重启。</p>\n<p>另外，本部分所有指令，建议在<code>bash</code>环境下运行，使用<code>zsh</code>的shell请切换为<code>bash</code>，避免不必要的麻烦。</p>\n<h3 id=\"显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\"><a href=\"#显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\" class=\"headerlink\" title=\"显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\"></a>显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系</h3><p>不同版本的Tensorflow和PyTorch环境对NVIDIA驱动、CUDA和cuDNN的有着不一样的需求。</p>\n<p>系统能否检测到GPU：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)</span><br><span class=\"line\">04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure>\n\n<p><strong>GTX 1080为Tensorflow、PyTorch等框架提供GPU支持。</strong></p>\n<h4 id=\"GTX-1080信息\"><a href=\"#GTX-1080信息\" class=\"headerlink\" title=\"GTX 1080信息\"></a>GTX 1080信息</h4><p><strong>服务器上GTX 1080信息如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">规格</th>\n<th align=\"center\">核心参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">显卡核心</td>\n<td align=\"center\">NVIDIA GeForce GTX1080</td>\n</tr>\n<tr>\n<td align=\"center\">显存频率</td>\n<td align=\"center\">10010MHz</td>\n</tr>\n<tr>\n<td align=\"center\">显存大小</td>\n<td align=\"center\">8G</td>\n</tr>\n<tr>\n<td align=\"center\">显存类型</td>\n<td align=\"center\">GDDR5X</td>\n</tr>\n<tr>\n<td align=\"center\">显存位宽</td>\n<td align=\"center\">256位</td>\n</tr>\n<tr>\n<td align=\"center\">总线类型</td>\n<td align=\"center\">PCI-E 3.0 x 16</td>\n</tr>\n<tr>\n<td align=\"center\">数字最高分辨率</td>\n<td align=\"center\">7680 x 4320</td>\n</tr>\n<tr>\n<td align=\"center\">SLI</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">散热器类型</td>\n<td align=\"center\">风冷</td>\n</tr>\n<tr>\n<td align=\"center\">额定电源</td>\n<td align=\"center\">500W</td>\n</tr>\n<tr>\n<td align=\"center\">供电外接需求</td>\n<td align=\"center\">8pin x 1</td>\n</tr>\n<tr>\n<td align=\"center\">OpneGL支持版本</td>\n<td align=\"center\">OpenGL 4.5</td>\n</tr>\n</tbody></table>\n<h4 id=\"Tensorflow建议配置\"><a href=\"#Tensorflow建议配置\" class=\"headerlink\" title=\"Tensorflow建议配置\"></a>Tensorflow建议<a href=\"https://www.tensorflow.org/install/source#linux\">配置</a></h4><p>数据来源于<a href=\"https://www.tensorflow.org/install/source#linux\">官网</a>，截止2020年4月11号，<code>tensorflow-2.1.0</code>版本需要配合<code>CUDA 10.1</code>和<code>cuDNN 7.6</code>配合使用。</p>\n<p><img src=\"https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png\" alt=\"Tensorflow版本\"></p>\n<h4 id=\"PyTorch建议配置\"><a href=\"#PyTorch建议配置\" class=\"headerlink\" title=\"PyTorch建议配置\"></a>PyTorch建议<a href=\"https://pytorch.org/get-started/previous-versions/\">配置</a></h4><p>数据来源于<a href=\"https://pytorch.org/get-started/previous-versions/\">官网</a>，截止2020年4月11号，<code>PyTorch 1.4</code>版本需要配合<code>CUDA 10.1</code>或<code>CUDA9.2</code>配合使用。</p>\n<p><img src=\"https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png\" alt=\"PyTorch\"></p>\n<h4 id=\"NVIDIA驱动选型\"><a href=\"#NVIDIA驱动选型\" class=\"headerlink\" title=\"NVIDIA驱动选型\"></a>NVIDIA驱动选型</h4><p>在Linux系统下，<a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\">NVIDIA驱动型号</a>根据需求来安装，<code>CUDA10.2</code>需求<code>NVIDIA &gt;= 440.33</code>，所以NVIDIA驱动型号至少是<code>440.33</code>。</p>\n<p><img src=\"https://pic.downk.cc/item/5e913b69504f4bcb04574a5e.png\" alt=\"CUDA版本与NVIDIA驱动之间的关系\"></p>\n<h3 id=\"NVIDIA驱动安装（CentOS、Ubuntu）\"><a href=\"#NVIDIA驱动安装（CentOS、Ubuntu）\" class=\"headerlink\" title=\"NVIDIA驱动安装（CentOS、Ubuntu）*\"></a>NVIDIA驱动安装（CentOS、Ubuntu）*</h3><p>通过前面的分析，目前Tensorflow 最新版本2.1.0需求CUDA 10.1，索性安装CUDA 10.2所需求的最低要求的NVIDIA版本<code>440.33</code>。</p>\n<p>另外NVIDIA驱动不要轻易更新，在CentOS下，尤其是不到万不得已的地步，千万千万不要运行<code>sudo yum update</code>指令！Ubuntu对应的指令是<code>sudo apt-get update</code>。</p>\n<p><strong>本小节主要介绍在CentOS 7.7系统下的驱动安装</strong>，顺便介绍在Ubuntu系统的驱动检索及安装方法。</p>\n<p>NVIDIA驱动安装完成后，需要到现场重启服务器。</p>\n<h4 id=\"关闭桌面服务\"><a href=\"#关闭桌面服务\" class=\"headerlink\" title=\"关闭桌面服务\"></a>关闭桌面服务</h4><p>如果在现场安装NVIDIA驱动，首先要按住<code>Alt + Ctrl + F1</code>进入终端（F1到F6都行），输入账户密码获取root权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n\n<p>然后关闭桌面模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>Ctrl + Alt + F7</code>发现已无法成功返回图形化模式，说明桌面服务已成功关闭，注意此步对接下来的 NVIDIA 显卡驱动安装尤为重要，必需确保桌面服务已关闭。</p>\n<p>驱动安装完成后，按住<code>Alt + Ctrl + F7</code>可开启桌面模式。</p>\n<h4 id=\"系统检查\"><a href=\"#系统检查\" class=\"headerlink\" title=\"系统检查\"></a>系统检查</h4><p>查看支持CUDA的GPU列表：<a href=\"https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements，根据[官网](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions)建议，**安装NVIDIA驱动和CUDA之前需要查看系统是否满足要求**：\">https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements，根据[官网](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions)建议，**安装NVIDIA驱动和CUDA之前需要查看系统是否满足要求**：</a></p>\n<ol>\n<li><p>验证系统是否具有支持CUDA的GPU</p>\n</li>\n<li><p>确认系统是受支持的Linux发行版本</p>\n</li>\n<li><p>验证系统是否有GCC编译环境</p>\n</li>\n<li><p>验证系统是否安装了正确的内核头文件和开发包</p>\n</li>\n</ol>\n<p>一步一步检测</p>\n<ol>\n<li><p><strong>验证系统是否具有支持CUDA的GPU</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)</span><br><span class=\"line\">04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure>\n\n<p>服务器上的显卡是GTX 1080，支持CUDA</p>\n</li>\n<li><p><strong>确认系统是受支持的Linux发行版本</strong></p>\n<p>CUDA开发工具仅在某些特定的Linux发行版上受支持，运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -m &amp;&amp; cat /etc/*release</span><br></pre></td></tr></table></figure>\n\n<p>输出信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x86_64</span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></span><br><span class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></span><br><span class=\"line\">ID=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></span><br><span class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></span><br><span class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></span><br><span class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></span><br><span class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></span><br><span class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=<span class=\"string\">\"CentOS-7\"</span></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br></pre></td></tr></table></figure>\n\n<p><code>x86_64</code>表示当前系统是64位系统，运行的Linux发行版是CentOS7.7版本。</p>\n</li>\n<li><p><strong>验证系统是否有GCC编译环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下都会有。</p>\n</li>\n<li><p><strong>验证系统是否安装了正确的内核头文件和开发包</strong></p>\n<p>运行以下命令找到系统正在运行的内核版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n\n<p>当前运行的内核的头文件和开发包可以通过以下方式安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"禁用第三方开源驱动nouveau\"><a href=\"#禁用第三方开源驱动nouveau\" class=\"headerlink\" title=\"禁用第三方开源驱动nouveau\"></a>禁用第三方开源驱动nouveau</h4><p>Nouveau是由第三方为NVIDIA显卡开发的一个开源3D驱动，不过没有得到NVIDIA的认可与支持。Nouveau让Linux更容易的应对各种复杂的NVIDIA显卡环境，让用户安装完系统即可进入桌面并且有不错的显示效果，所以，很多Linux发行版默认集成了Nouveau驱动，在遇到NVIDIA显卡时默认安装。企业版的Linux更是如此，几乎所有支持图形界面的企业Linux发行版都将Nouveau收入其中。不过对于个人桌面用户来说，处于成长阶段的Nouveau并不完美，与企业版不一样，个人用户除了想让正常显示图形界面外很多时候还需要一些3D特效，Nouveau多数时候并不能完成，而用户在安装NVIDIA官方私有驱动的时候Nouveau又成为了阻碍，如果不干掉Nouveau，NVIDIA驱动安装时总是报错。</p>\n<p><img src=\"https://pic.downk.cc/item/5e93446cc2a9a83be5684112.jpg\" alt=\"\"></p>\n<p><strong>NVIDIA驱动和nouveau驱动最好二选一</strong>，一般情况下，<strong>深度学习环境配置需禁用nouveau驱动</strong>，查看nouveau驱动信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod |grep nouveau</span><br></pre></td></tr></table></figure>\n\n<p>若有输出，需要禁止该nvidia第三方驱动，若无，OK，<strong>Linux哲学之一：没有消息就是最好的消息。</strong>可忽略该步骤。</p>\n<p><strong>禁用nouveau驱动，需要配置相关文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nvim /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/neovim/neovim\">nvim</a>，即NeoVIm，在生态和功能上比<code>vim</code>要领先一些，在CentOS系统下的<a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim#centos-7--rhel-7\">nvim的安装</a>命令为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">sudo yum install -y neovim python3-neovim</span><br></pre></td></tr></table></figure>\n\n<p>没有安装<a href=\"https://github.com/neovim/neovim\">nvim</a>可以用<code>vim</code>来代替（<code>sudo yum install vim</code>）。</p>\n<p>文件可能没有任何内容，在打开的文件中，进入Vim的<strong>插入模式</strong>（<code>i</code>键），<strong>写入命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau  </span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n\n<p>按下<code>Eac</code>键进入普通模式，输入命令<code>:wq</code>保存并退出文件。</p>\n<p>更新initramfs映像使禁用 <code>nouveau</code> 生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n\n<p>输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod |grep nouveau</span><br></pre></td></tr></table></figure>\n\n<p>若无输出，则表示禁用nouveau生效了。</p>\n<p>当然也可以重启系统使禁用 <code>nouveau</code> 真正生效，但<strong>重启系统有可能会出现黑屏，原因是禁用了集成显卡，系统没有显卡驱动。</strong></p>\n<h4 id=\"卸载原有驱动\"><a href=\"#卸载原有驱动\" class=\"headerlink\" title=\"卸载原有驱动\"></a>卸载原有驱动</h4><p>查看当前系统驱动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls &#x2F;usr&#x2F;src</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nvidia</span><br></pre></td></tr></table></figure>\n\n<p>总之，可以得知当前NVIDIA版本信息（就算使用了<code>sudo yum update</code>），使用上述四条命令之一也可以查到，如果真的真的忘记了，跳过这一步吧……</p>\n<p>假设知道了目前的NVIDIA驱动型号，假设为390.77，去<a href=\"https://download.nvidia.com/XFree86/Linux-x86_64/\">该网站</a>上下载对应的驱动文件</p>\n<p><img src=\"https://pic.downk.cc/item/5e9340d4c2a9a83be565cc63.png\" alt=\"\"></p>\n<p>类似于<code>NVIDIA-Linux-x86_64-390.77.run</code>这种文件，右键<strong>复制链接</strong>，使用<strong>wget</strong>工具下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~    // 回到主目录</span><br><span class=\"line\">wget -c https://download.nvidia.com/XFree86/Linux-x86_64/390.77/NVIDIA-Linux-x86_64-390.77.run</span><br></pre></td></tr></table></figure>\n\n<p>然后运行命令进行卸载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh NVIDIA-Linux-x86_64-390.77.run --uninstall</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NVIDIA官方驱动安装\"><a href=\"#NVIDIA官方驱动安装\" class=\"headerlink\" title=\"NVIDIA官方驱动安装\"></a>NVIDIA官方驱动安装</h4><p><strong>确保已经关闭桌面服务。</strong></p>\n<p>NVIDIA驱动分离线安装和在线安装，离线安装就是在<a href=\"https://www.nvidia.com/Download/index.aspx?lang=cn\">官网</a>下载对应的驱动，再进行安装，为了方便起见，采用<strong>在线</strong>的方法在<strong>CentOS 7.7</strong>系统进行安装。</p>\n<p><strong>添加 ELRepo 源：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\">sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看显卡检测程序：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nvidia-detect</span><br></pre></td></tr></table></figure>\n\n<p>如果安装，跳过下一步，否则</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nvidia-detect</span><br></pre></td></tr></table></figure>\n\n<p><strong>检测显卡型号，查看对应的驱动</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-detect -v</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Probing <span class=\"keyword\">for</span> supported NVIDIA devices...</span><br><span class=\"line\">[102b:0534] Matrox Electronics Systems Ltd. G200eR2</span><br><span class=\"line\">[10de:1b80] NVIDIA Corporation GP104 [GeForce GTX 1080]</span><br><span class=\"line\">This device requires the current 440.64 NVIDIA driver kmod-nvidia</span><br></pre></td></tr></table></figure>\n\n<p>系统告诉我们，显示型号是GTX 1080，对应的NVIDIA驱动型号应为<code>440.64</code>，大于<code>440.33</code>，满足要求，继续安装，否则去<a href=\"https://www.nvidia.com/Download/index.aspx?lang=cn\">官网</a>下载对应的驱动手动离线安装。</p>\n<p>输入命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i    // 获取root权限</span><br><span class=\"line\">yum install kmod-nvidia    // 或者这条命令yum install nvidia-x11-drv</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，或者输出下面的信息，可能要重启系统……</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">软件包 nvidia-x11-drv-440.82-1.el7_8.elrepo.x86_64 已安装并且是最新版本</span><br></pre></td></tr></table></figure>\n\n<p>重启系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<p>安装完成，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>看看显卡信息。</p>\n<ul>\n<li><p>如果是<strong>Ubuntu系统</strong>，可使用下列方法进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge nvidia*\t\t\t\t\t// 卸载之前的NVIDIA驱动</span><br><span class=\"line\">sudo add-apt-repository ppa:graphics-drivers/ppa\t// 添加源</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nvidia-440\t\t\t\t// 安装NVIDIA-440系列驱动</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo ubuntu-drivers devices    // 或者运行apt-cache search nvidia*</span><br><span class=\"line\">// 出现建议的NVIDIA驱动型号xxx</span><br><span class=\"line\">sudo apt-get install nvidia-xxx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>重启服务器</strong>。</p>\n<h4 id=\"查看当前NVIDIA驱动版本\"><a href=\"#查看当前NVIDIA驱动版本\" class=\"headerlink\" title=\"查看当前NVIDIA驱动版本\"></a>查看当前NVIDIA驱动版本</h4><p>使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>安装过程中可能会遇到比较多的问题，<strong>请耐心解决</strong>。</p>\n<h4 id=\"开启桌面服务\"><a href=\"#开启桌面服务\" class=\"headerlink\" title=\"开启桌面服务\"></a>开启桌面服务</h4><p>NVIDIA驱动安装完成后，可开启桌面服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>Ctrl + Alt + F7</code>可返回图形化模式。</p>\n<h3 id=\"CUDA安装\"><a href=\"#CUDA安装\" class=\"headerlink\" title=\"CUDA安装*\"></a>CUDA安装*</h3><p>在此介绍CUDA-9.0、CUDA-9.1、CUDA-9.2、CUDA-10.0、CUDA-10.1、CUDA-10.2共6种CUDA文件的安装（截止2020年4月11号），基本涵盖了当前流行深度学习框架的需求。</p>\n<p>需要注意的是，如果你是个人用户，就是自己在电脑上装了Linux系统进行深度学习环境的设置，可以详细阅读这一小节的内容，这一小节主要介绍的是一般情况下的CUDA配置，因为如果是自己的系统，可以随意更改CUDA的<strong>符号链接</strong>，但是在服务器上，大部分用户都是普通用户，<strong>无root权限</strong>，切换CUDA时很麻烦，不切换CUDA，深度学习环境的配置就比较受限，所以在服务器环境下，<strong>普通用户如何灵活切换CUDA和cuDNN版本呢？有两种方法：</strong></p>\n<ul>\n<li>使用<a href=\"https://modules.readthedocs.io/en/latest/\">Environment Modules</a>来管理CUDA；</li>\n<li>使用<a href=\"https://anaconda.org/\">Anaconda</a>来独立管理<a href=\"#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\">CUDA和cuDNN</a>；</li>\n</ul>\n<p>我建议采用Anaconda来管理，理由很简单：操作方便上手快。具体请<a href=\"#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\">跳转</a>。下面介绍正常情况下的CUDA和cuDNN安装方法。</p>\n<p><strong>推荐下载.run的CUDA文件格式。</strong></p>\n<p>在<code>~/NVIDIA/CUDA</code>目录下依次建立<code>cuda-9.0</code>、<code>cuda-9.1、</code>、<code>cuda-9.2</code>、<code>cuda-10.0</code>、<code>cuda-10.1</code>、<code>cuda-10.2</code>6个目录，目录下是对应CUDA版本的安装文件，文件的后缀名为<code>.run</code>，不管是基础版本还是补丁，安装方法都是一模一样的。</p>\n<p><strong>CUDA的安装，建议<a href=\"#关闭桌面服务\">关闭桌面服务</a>，通过<code>Alt + Ctrl + F1</code>进入终端。</strong></p>\n<h4 id=\"CUDA文件下载\"><a href=\"#CUDA文件下载\" class=\"headerlink\" title=\"CUDA文件下载\"></a>CUDA文件下载</h4><p>CUDA的官网下载链接为<a href=\"https://developer.nvidia.com/cuda-toolkit-archive，CUDA的下载不需要注册，cuDNN需要。以CUDA9.2下载为例，依次按图红色框框进行选择，需要注意的是图中的**黑色框框**，那个是当前CUDA版本的补丁，也要下载，安装方法与**基础版本一致**。\">https://developer.nvidia.com/cuda-toolkit-archive，CUDA的下载不需要注册，cuDNN需要。以CUDA9.2下载为例，依次按图红色框框进行选择，需要注意的是图中的**黑色框框**，那个是当前CUDA版本的补丁，也要下载，安装方法与**基础版本一致**。</a></p>\n<p><img src=\"https://pic.downk.cc/item/5e9144da504f4bcb045fe855.png\" alt=\"cuda9.2\"></p>\n<p>正常方法是点击Download下载，下载后还要拖入到服务器种比较麻烦，在这里给出直接将文件下载到服务器的方法。</p>\n<p>创建不同CUDA版本的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir NVIDIA</span><br><span class=\"line\"><span class=\"built_in\">cd</span> NVIDIA</span><br><span class=\"line\">mkdir CUDA</span><br><span class=\"line\"><span class=\"built_in\">cd</span> CUDA</span><br><span class=\"line\">mkdir cuda-9.&#123;0..2&#125;     // 批量建立文件夹 cuda-9.0、cuda-9.1、cuda-9.2</span><br><span class=\"line\">mkdir cuda-10.&#123;0..2&#125;    // 批量建立文件夹 cuda-10.0、cuda-10.1、cuda-10.2</span><br></pre></td></tr></table></figure>\n\n<p>然后依次在对应目录下下载各个版本的<strong>CUDA基础安装包及其补丁</strong>（时间截止到2020.04.11）</p>\n<p>为了直观起见，使用比较基础的命令</p>\n<h5 id=\"下载CUDA-9-0\"><a href=\"#下载CUDA-9-0\" class=\"headerlink\" title=\"下载CUDA 9.0\"></a>下载<a href=\"https://developer.nvidia.com/cuda-90-download-archive\">CUDA 9.0</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-9.0</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda9.0安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run -O cuda_9.0.176_384.81_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda9.0的4个补丁</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run -O cuda_9.0.176.1_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run -O cuda_9.0.176.2_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda_9.0.176.3_linux-run -O cuda_9.0.176.3_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/4/cuda_9.0.176.4_linux-run -O cuda_9.0.176.4_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-9-1\"><a href=\"#下载CUDA-9-1\" class=\"headerlink\" title=\"下载CUDA 9.1\"></a>下载<a href=\"https://developer.nvidia.com/cuda-91-download-archive-new\">CUDA 9.1</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-9.1</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda9.1安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux -O cuda_9.1.85_387.26_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda9.1的3个补丁</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/1/cuda_9.1.85.1_linux -O cuda_9.1.85.1_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/2/cuda_9.1.85.2_linux -O cuda_9.1.85.2_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/3/cuda_9.1.85.3_linux -O cuda_9.1.85.3_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-9-2\"><a href=\"#下载CUDA-9-2\" class=\"headerlink\" title=\"下载CUDA 9.2\"></a>下载<a href=\"https://developer.nvidia.com/cuda-92-download-archive\">CUDA 9.2</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-9.2</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda9.2安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/local_installers/cuda_9.2.148_396.37_linux -O cuda_9.2.148_396.37_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda9.2的1个补丁</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/patches/1/cuda_9.2.148.1_linux -O cuda_9.2.148.1_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-10-0\"><a href=\"#下载CUDA-10-0\" class=\"headerlink\" title=\"下载CUDA 10.0\"></a>下载<a href=\"https://developer.nvidia.com/cuda-10.0-download-archive\">CUDA 10.0</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-10.0</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda10.0安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux -O cuda_10.0.130_410.48_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda10.0的1个补丁</span><br><span class=\"line\">wget -c http://developer.download.nvidia.com/compute/cuda/10.0/Prod/patches/1/cuda_10.0.130.1_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-10-1-update2\"><a href=\"#下载CUDA-10-1-update2\" class=\"headerlink\" title=\"下载CUDA 10.1 update2\"></a>下载<a href=\"https://developer.nvidia.com/cuda-10.1-download-archive-base\">CUDA 10.1 update2</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-10.1</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda10.1安装包，无补丁</span><br><span class=\"line\">wget -c http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-10-2\"><a href=\"#下载CUDA-10-2\" class=\"headerlink\" title=\"下载CUDA 10.2\"></a>下载<a href=\"https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&target_distro=CentOS&target_version=7&target_type=runfilelocal\">CUDA 10.2</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-10.2</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda10.2安装包，无补丁</span><br><span class=\"line\">wget -c http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装CUDA\"><a href=\"#安装CUDA\" class=\"headerlink\" title=\"安装CUDA\"></a>安装CUDA</h4><p>以<code>cuda_9.1.85_387.26_linux.run</code>文件为例说明怎么安装的，所有的文件都是一样的安装方法（<strong>CUDA 10.1以及后续版本，安装界面有所不一样，请仔细阅读</strong>）。</p>\n<h5 id=\"CUDA-10-0及其之前的版本的安装方法\"><a href=\"#CUDA-10-0及其之前的版本的安装方法\" class=\"headerlink\" title=\"CUDA 10.0及其之前的版本的安装方法\"></a>CUDA 10.0及其之前的版本的安装方法</h5><p>CUDA默认安装位置：<code>/usr/local</code></p>\n<p>先建立一个名为<strong>CUDAInstall</strong>的<a href=\"https://github.com/tmux/tmux\">tmux</a>窗口，这是为了在安装的时候，防止终端出现紧急情况，影响安装，这个习惯可以让你减少不必要的损失，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s CUDAInstall     </span><br><span class=\"line\">sudo sh cuda_9.1.85_387.26_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到文件权限问题，可以赋予CUDA文件可执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x cuda_9.1.85_387.26_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>运行CUDA安装文件后，紧接着在屏幕上出现了很长的说明，按住<strong>空格</strong>键至进度100%，然后按照下面的提示操作即可，需要注意的是，在提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install NVIDIA Accelerated Graphics Driver <span class=\"keyword\">for</span> Linux-x86_64 387.26?</span><br><span class=\"line\">(y)es/(n)o/(q)uit:</span><br></pre></td></tr></table></figure>\n\n<p>意思是：<strong>安装NVIDIA驱动吗？</strong>选择<code>n</code>，NVIDIA驱动我们单独安装。</p>\n<p>安装过程中每一步的提示如下，请仔细阅读<strong>翻译</strong>，尤其是符号链接那部分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------</span><br><span class=\"line\">// 接受之前阅读的说明吗？必须接受啊</span><br><span class=\"line\">Do you accept the previously <span class=\"built_in\">read</span> EULA?</span><br><span class=\"line\">accept/decline/quit: accept</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装NVIDIA驱动吗？NVIDIA驱动我们单独安装</span><br><span class=\"line\">Install NVIDIA Accelerated Graphics Driver <span class=\"keyword\">for</span> Linux-x86_64 387.26?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: n</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装CUDA9.1的工具集吗？安装</span><br><span class=\"line\">Install the CUDA 9.1 Toolkit?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA的默认路径，按Enter键继续</span><br><span class=\"line\">Enter Toolkit Location</span><br><span class=\"line\"> [ default is /usr/<span class=\"built_in\">local</span>/cuda-9.1 ]: </span><br><span class=\"line\"> </span><br><span class=\"line\">// 要为CUDA9.1建立符号链接吗？如果该CUDA是你想默认的，输入y；</span><br><span class=\"line\">// 如果不是但是以后想调用，输入n</span><br><span class=\"line\">// 这个可以在安装之后修改</span><br><span class=\"line\">Do you want to install a symbolic link at /usr/<span class=\"built_in\">local</span>/cuda?</span><br><span class=\"line\">(y)es/(n)o/(q)uit:y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA 9.1的示例，可以安装，方便测试</span><br><span class=\"line\">Install the CUDA 9.1 Samples?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认</span><br><span class=\"line\">Enter CUDA Samples Location</span><br><span class=\"line\"> [ default is /home/unix ]:</span><br></pre></td></tr></table></figure>\n\n<p>然后开始安装，终端上会显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installing the CUDA Toolkit in &#x2F;usr&#x2F;local&#x2F;cuda-9.1 ...</span><br></pre></td></tr></table></figure>\n\n<p>表示<code>CUDA 9.1</code>会被安装到目录<code>/usr/local/cuda-9.1</code>文件夹下，大约1分钟左右，终端显示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installing the CUDA Samples <span class=\"keyword\">in</span> /home/unix ...</span><br><span class=\"line\">Copying samples to /home/unix/NVIDIA_CUDA-9.1_Samples now...</span><br><span class=\"line\">Finished copying samples.</span><br><span class=\"line\"></span><br><span class=\"line\">===========</span><br><span class=\"line\">= Summary =</span><br><span class=\"line\">===========</span><br><span class=\"line\"></span><br><span class=\"line\">Driver:   Not Selected</span><br><span class=\"line\">Toolkit:  Installed <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-9.1</span><br><span class=\"line\">Samples:  Installed <span class=\"keyword\">in</span> /home/unix</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure that</span><br><span class=\"line\"> -   PATH includes /usr/<span class=\"built_in\">local</span>/cuda-9.1/bin</span><br><span class=\"line\"> -   LD_LIBRARY_PATH includes /usr/<span class=\"built_in\">local</span>/cuda-9.1/lib64, or, add /usr/<span class=\"built_in\">local</span>/cuda-9.1/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\"></span><br><span class=\"line\">To uninstall the CUDA Toolkit, run the uninstall script <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-9.1/bin</span><br><span class=\"line\"></span><br><span class=\"line\">Please see CUDA_Installation_Guide_Linux.pdf <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-9.1/doc/pdf <span class=\"keyword\">for</span> detailed information on setting up CUDA.</span><br><span class=\"line\"></span><br><span class=\"line\">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required <span class=\"keyword\">for</span> CUDA 9.1 functionality to work.</span><br><span class=\"line\">To install the driver using this installer, run the following <span class=\"built_in\">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:</span><br><span class=\"line\">    sudo &lt;CudaInstaller&gt;.run -silent -driver</span><br><span class=\"line\"></span><br><span class=\"line\">Logfile is /tmp/cuda_install_89370.log</span><br></pre></td></tr></table></figure>\n\n<p>终端输出的内容非常清楚，包含了这么几个意思：</p>\n<ul>\n<li><p>关于NVIDIA驱动：NVIDIA驱动已经安装但是没有被检测出来，重启系统就好了，因为服务器在学校，必须到现场才能重启成功；</p>\n</li>\n<li><p>关于路径：CUDA 9.1被安装在<code>/usr/local/cuda-9.1</code>目录下</p>\n</li>\n<li><p>关于卸载CUDA：CUDA的卸载脚本在/usr/local/cuda-9.1/bin里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装CUDA的补丁包</p>\n</li>\n</ul>\n<p>大部分CUDA版本都有补丁包，补丁的安装比较容易，以CUDA 9.1的补丁1<code>cuda_9.1.85.1_linux.run</code>为例说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda_9.1.85.1_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>屏幕上也会出现很长的说明，按住<strong>空格</strong>键至进度100%，出现了一些选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------</span><br><span class=\"line\">Do you accept the previously read EULA?</span><br><span class=\"line\">accept&#x2F;decline&#x2F;quit:  accept</span><br><span class=\"line\"></span><br><span class=\"line\">Enter CUDA Toolkit installation directory</span><br><span class=\"line\"> [ default is &#x2F;usr&#x2F;local&#x2F;cuda-9.1 ]:</span><br></pre></td></tr></table></figure>\n\n<p>安装位置默认就行，按住Enter后，秒安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installation complete!</span><br><span class=\"line\">Installation directory: /usr/<span class=\"built_in\">local</span>/cuda-9.1</span><br></pre></td></tr></table></figure>\n\n<p>按照该方法，安装CUDA 9.1其它两个补丁包。</p>\n<p>至此CUDA基础安装包及其补丁包的方法介绍完了，<strong>按照此方法，依次安装其它CUDA 9.0 ~ CUDA10.0版本的基础安装包及其补丁。</strong></p>\n<h5 id=\"CUDA-10-1及其之后的版本的安装方法\"><a href=\"#CUDA-10-1及其之后的版本的安装方法\" class=\"headerlink\" title=\"CUDA 10.1及其之后的版本的安装方法\"></a>CUDA 10.1及其之后的版本的安装方法</h5><p>从CUDA 10.1起，安装界面有所不同，比如安装<strong>CUDA 10.1</strong>版本<code>cuda_10.1.243_418.87.00_linux.run</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda_10.1.243_418.87.00_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>终端会出现一个框框</p>\n<p><img src=\"https://pic.downk.cc/item/5e919104504f4bcb04a646b2.png\" alt=\"\"></p>\n<p>输入<strong>accept</strong>后，出现</p>\n<p><img src=\"https://pic.downk.cc/item/5e918ea5504f4bcb04a3d678.png\" alt=\"CUDA 10.1\"></p>\n<p>注意，不要选择<strong>Driver</strong>！<strong>如图所选</strong>，移动<strong>下键</strong>至<strong>Install</strong>处，Enter一下立即安装，出现界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e918f1e504f4bcb04a443d9.png\" alt=\"\"></p>\n<p>选择<strong>No</strong>，安装过程中没有什么反应，耐心等待一会儿，终端打印出信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===========</span><br><span class=\"line\">= Summary =</span><br><span class=\"line\">===========</span><br><span class=\"line\"></span><br><span class=\"line\">Driver:   Not Selected</span><br><span class=\"line\">Toolkit:  Installed <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-10.1/</span><br><span class=\"line\">Samples:  Installed <span class=\"keyword\">in</span> /home/unix/</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure that</span><br><span class=\"line\"> -   PATH includes /usr/<span class=\"built_in\">local</span>/cuda-10.1/bin</span><br><span class=\"line\"> -   LD_LIBRARY_PATH includes /usr/<span class=\"built_in\">local</span>/cuda-10.1/lib64, or, add /usr/<span class=\"built_in\">local</span>/cuda-10.1/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\"></span><br><span class=\"line\">To uninstall the CUDA Toolkit, run cuda-uninstaller <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-10.1/bin</span><br><span class=\"line\"></span><br><span class=\"line\">Please see CUDA_Installation_Guide_Linux.pdf <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-10.1/doc/pdf <span class=\"keyword\">for</span> detailed information on setting up CUDA.</span><br><span class=\"line\">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 418.00 is required <span class=\"keyword\">for</span> CUDA 10.1 functionality to work.</span><br><span class=\"line\">To install the driver using this installer, run the following <span class=\"built_in\">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:</span><br><span class=\"line\">    sudo &lt;CudaInstaller&gt;.run --silent --driver</span><br><span class=\"line\"></span><br><span class=\"line\">Logfile is /var/<span class=\"built_in\">log</span>/cuda-installer.log</span><br></pre></td></tr></table></figure>\n\n<p>与之前的信息差不多，具体请看之前的描述。CUDA 10.2安装方法与CUDA 10.1类似。</p>\n<h4 id=\"卸载CUDA\"><a href=\"#卸载CUDA\" class=\"headerlink\" title=\"卸载CUDA\"></a>卸载CUDA</h4><ul>\n<li><p>CUDA 10.0及其之前版本</p>\n<p>以CUDA 9.1为例，CUDA 9.1的卸载脚本在/usr/local/cuda-9.1/bin里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CUDA 10.1及其之后的版本</p>\n<p>卸载CUDA 10.1和10.2有所不同，需要运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">sudo ./cuda-10.1/bin/cuda-uninstaller</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"查看当前CUDA版本的符号链接\"><a href=\"#查看当前CUDA版本的符号链接\" class=\"headerlink\" title=\"查看当前CUDA版本的符号链接\"></a>查看当前CUDA版本的符号链接</h4><p>查看当前cuda对应的版本（符号链接）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"built_in\">stat</span> cuda</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  文件：<span class=\"string\">\"cuda\"</span> -&gt; <span class=\"string\">\"/usr/local/cuda-9.0\"</span></span><br><span class=\"line\">  大小：19        \t块：0          IO 块：4096   符号链接</span><br><span class=\"line\">设备：fd00h/64768d\tInode：20341519    硬链接：1</span><br><span class=\"line\">权限：(0777/lrwxrwxrwx)  Uid：(    0/    root)   Gid：(    0/    root)</span><br><span class=\"line\">环境：unconfined_u:object_r:usr_t:s0</span><br><span class=\"line\">最近访问：2020-04-10 14:43:19.316455577 +0800</span><br><span class=\"line\">最近更改：2019-09-26 22:20:21.054175738 +0800</span><br><span class=\"line\">最近改动：2019-09-26 22:20:21.054175738 +0800</span><br><span class=\"line\">创建时间：-</span><br></pre></td></tr></table></figure>\n\n<p>之前为cuda-9.0建立了<strong>符号链接</strong>，所以cuda指向cuda-9.0，因为系统是根据这个<strong>符号链接</strong>来识别当前cuda版本，所以更改其指向即可切换cuda版本。</p>\n<h4 id=\"CUDA环境变量配置\"><a href=\"#CUDA环境变量配置\" class=\"headerlink\" title=\"CUDA环境变量配置\"></a>CUDA环境变量配置</h4><p>建议在bash环境下运行，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash</span><br></pre></td></tr></table></figure>\n\n<p>进入bash shell。</p>\n<p>为了管理方便，管理员可以在文件<code>/etc/profile</code>里全局配置CUDA环境变量，如果是个人Linux系统或者普通用户，在文件<code>~/.bashrc</code>下配置CUDA环境变量。</p>\n<ul>\n<li><p><strong>全局添加CUDA环境变量（管理员操作）</strong></p>\n<p>这种修改方式使CUDA配置应用到每位普通用户的shell里</p>\n<p>打开全局环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nvim /etc/profile    // 为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.</span><br></pre></td></tr></table></figure>\n\n<p>然后在打开的文件里的末尾新增四条命令，具体操作是：按住大写<code>G</code>键跳转到文本的最后一行行首，再按住<code>$</code>，也就是‘shift + 4’键跳转到最后一行的最后一个字符，按住<code>i</code>键进入插入模式，使光标右移一个字符，再回车换行后，添加以下变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CUDA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cuda -&gt; cuda9.1</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda/bin<span class=\"variable\">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># include -&gt; targets/x86_64-linux/include</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CPATH=/usr/<span class=\"built_in\">local</span>/cuda/include:<span class=\"variable\">$CPATH</span> </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=<span class=\"variable\">$LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda/lib64 </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"comment\"># export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新配置，使配置文件生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>普通用户添加CUDA环境变量</strong></p>\n<p>只对当前shell有效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>同样的操作，在文件末尾新增四条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CUDA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cuda -&gt; cuda9.1</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda/bin<span class=\"variable\">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># include -&gt; targets/x86_64-linux/include</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CPATH=/usr/<span class=\"built_in\">local</span>/cuda/include:<span class=\"variable\">$CPATH</span> </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=<span class=\"variable\">$LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda/lib64 </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"comment\"># export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"验证CUDA安装\"><a href=\"#验证CUDA安装\" class=\"headerlink\" title=\"验证CUDA安装\"></a>验证CUDA安装</h4><p>在安装CUDA时，比如在安装CUDA 9.1时，有这么一句提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// CUDA 9.1的示例，可以安装，方便测试</span><br><span class=\"line\">Install the CUDA 9.1 Samples?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认</span><br><span class=\"line\">Enter CUDA Samples Location</span><br><span class=\"line\"> [ default is /home/unix ]:</span><br></pre></td></tr></table></figure>\n\n<p>为了验证CUDA 9.1是否被安装完成，选择安装示例，默认的安装位置是<strong>根目录</strong>，进入根目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">cd</span> NVIDIA_CUDA-9.1_Samples/1_Utilities/deviceQuery    // 选择其中一个示例进行测试</span><br><span class=\"line\">make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n\n<p>如果成功，会显示<code>Result = PASS</code>，否则根据错误提示解决问题。</p>\n<h4 id=\"查看CUDA当前版本\"><a href=\"#查看CUDA当前版本\" class=\"headerlink\" title=\"查看CUDA当前版本\"></a>查看CUDA当前版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/<span class=\"built_in\">local</span>/cuda/version.txt</span><br></pre></td></tr></table></figure>\n\n<p>如果是在终端命令行下安装的CUDA，则需要安装成功后开启桌面服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n\n<p>然后再按通过<code>Ctrl + Alt + F7</code>可返回桌面模式。</p>\n<h3 id=\"cuDNN安装\"><a href=\"#cuDNN安装\" class=\"headerlink\" title=\"cuDNN安装*\"></a>cuDNN安装*</h3><p>首先登录<a href=\"https://developer.nvidia.com/rdp/cuDNN-archive\">官网</a>进行注册，然后才能选择对应版本的cuDNN进行下载。以cuDNN7.0.5为例进行说明，其它版本与此类似。</p>\n<p>按照<a href=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux\">官方指导教程</a>进行cuDNN配置。</p>\n<h4 id=\"cuDNN文件下载\"><a href=\"#cuDNN文件下载\" class=\"headerlink\" title=\"cuDNN文件下载\"></a>cuDNN文件下载</h4><p>首先要确定要下载的cuDNN版本，<strong>仔细看清楚其对应的CUDA版本</strong>，以cuDNN对应的CUDA 9.0为例，推荐下载<strong>cuDNN v7.0.5 Library for Linux</strong>类似的压缩包。</p>\n<p><img src=\"https://pic.downk.cc/item/5e9518fcc2a9a83be5720e10.png\" alt=\"\"></p>\n<p>下载完成后，文件为cudnn-9.0-linux-x64-v7.solitairetheme8，这其实是一个压缩包，解压方法与<code>.tgz</code>格式的文件一致。建立cuDNN文件夹，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/NVIDIA/cuDNN</span><br></pre></td></tr></table></figure>\n\n<p>将其拖入到服务器中（使用FileZilla、Xftp进行文件传输）里的NVIDIA文件下的cuDNN文件夹下。</p>\n<h4 id=\"cuDNN文件解压\"><a href=\"#cuDNN文件解压\" class=\"headerlink\" title=\"cuDNN文件解压\"></a>cuDNN文件解压</h4><p>解压cudnn-9.0-linux-x64-v7.solitairetheme8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cudnn-9.0-linux-x64-v7.solitairetheme8</span><br></pre></td></tr></table></figure>\n\n<p>解压后的文件都在名为<code>cuda</code>的文件夹下，如图</p>\n<p><img src=\"https://pic.downk.cc/item/5e958245c2a9a83be5b9b2a0.png\" alt=\"\"></p>\n<p><code>cudnn-9.0-linux-x64-v7.solitairetheme8</code>的文件组成如下</p>\n<p><img src=\"https://pic.downk.cc/item/5e958783c2a9a83be5bd2a6a.jpg\" alt=\"\"></p>\n<p>查看<code>linudnn.so</code>、<code>libcudnn.so.7</code>、<code>libcudnn.so.7.0.5</code>的关系</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll ~/NVIDIA/cuDNN/lib64</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<p><img src=\"https://pic.downk.cc/item/5e95ada0c2a9a83be5d76131.png\" alt=\"\"></p>\n<p>说明<code>linudnn.so</code>、<code>libcudnn.so.7</code>、<code>libcudnn.so.7.0.5</code>其实是同一个文件的不同扩展名。</p>\n<h4 id=\"cuDNN配置\"><a href=\"#cuDNN配置\" class=\"headerlink\" title=\"cuDNN配置\"></a>cuDNN配置</h4><p>解压文件在<code>~/NVIDIA/cuDNN/cuda</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制头文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/cuDNN/</span><br><span class=\"line\">sudo cp cuda/include/cudnn.h /usr/<span class=\"built_in\">local</span>/cuda/include </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制动态链接库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/cuDNN/</span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn* /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>\n\n<p>配置权限，使所有用户具有可读权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h</span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看cuDNN版本\"><a href=\"#查看cuDNN版本\" class=\"headerlink\" title=\"查看cuDNN版本\"></a>查看cuDNN版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Anaconda3安装\"><a href=\"#Anaconda3安装\" class=\"headerlink\" title=\"Anaconda3安装\"></a>Anaconda3安装</h3><h4 id=\"安装Anaconda3\"><a href=\"#安装Anaconda3\" class=\"headerlink\" title=\"安装Anaconda3\"></a>安装Anaconda3</h4><p>在<a href=\"https://repo.anaconda.com/archive/\">官方repo</a>下载<strong><em>Anaconda</em></strong>安装包（<code>.sh</code>后缀名），如果下载速度过慢，访问<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\">国内镜像源</a>下载，右键复制对应Anaconda包的链接，使用<code>wget</code>指令下载，注意下载时注意该Anaconda包是基于Python 3.6还是Python 3.7的，<strong>推荐Python 3.6</strong>，下载<em>Anaconda3-5.2.0-Linux-x86_64.sh</em>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">wget -c https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p><em>Anaconda3-5.2.0-Linux-x86_64.sh</em>这是 <strong><em>python3.6</em></strong> 版本的Anaconda安装包，继续运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>按<code>Enter</code>键继续，出现Anaconda版本的一些说明，此时按一下<code>space</code>(空格)键，有如下提示，在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Do you accept the license terms? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>紧接着有提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Anaconda3 will now be installed into this location:</span><br><span class=\"line\">/home/<span class=\"built_in\">test</span>/anaconda3</span><br><span class=\"line\"></span><br><span class=\"line\">  - Press ENTER to confirm the location</span><br><span class=\"line\">  - Press CTRL-C to abort the installation</span><br><span class=\"line\">  - Or specify a different location below</span><br><span class=\"line\"></span><br><span class=\"line\">[/home/<span class=\"built_in\">test</span>/anaconda3] &gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>按下<code>Enter</code>键即可开始安装，安装完成后，提示如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">installation finished.</span><br><span class=\"line\">Do you wish the installer to prepend the Anaconda3 install location</span><br><span class=\"line\">to PATH <span class=\"keyword\">in</span> your /home/<span class=\"built_in\">test</span>/.bashrc ? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>后出现Anaconda安装成功的消息，此时出现<em>是否安装Microsoft VSCode</em>的消息，输入<code>no</code>即可。</p>\n<p>python3.6版本的Anaconda安装完成，此时在终端输入<code>conda</code>，会提示<code>conda:未找到命令</code>，不要慌，反手输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>刷新环境，再输入<code>conda</code>即有消息提示，表明conda安装成功。</p>\n<h4 id=\"配置Anaconda国内开源镜像\"><a href=\"#配置Anaconda国内开源镜像\" class=\"headerlink\" title=\"配置Anaconda国内开源镜像\"></a>配置Anaconda国内开源镜像</h4><p>显示有关当前conda安装的信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    active environment : None</span><br><span class=\"line\">      user config file : /home/adoredee/.condarc</span><br><span class=\"line\">populated config files : </span><br><span class=\"line\">         conda version : 4.8.3</span><br><span class=\"line\">   conda-build version : not installed</span><br><span class=\"line\">        python version : 3.7.0.final.0</span><br><span class=\"line\">      virtual packages : __glibc=2.17</span><br><span class=\"line\">      base environment : /home/adoredee/anaconda3  (writable)</span><br><span class=\"line\">          channel URLs : https://repo.anaconda.com/pkgs/main/linux-64</span><br><span class=\"line\">                         https://repo.anaconda.com/pkgs/main/noarch</span><br><span class=\"line\">                         https://repo.anaconda.com/pkgs/r/linux-64</span><br><span class=\"line\">                         https://repo.anaconda.com/pkgs/r/noarch</span><br><span class=\"line\">         package cache : /home/adoredee/anaconda3/pkgs</span><br><span class=\"line\">                         /home/adoredee/.conda/pkgs</span><br><span class=\"line\">      envs directories : /home/adoredee/anaconda3/envs</span><br><span class=\"line\">                         /home/adoredee/.conda/envs</span><br><span class=\"line\">              platform : linux-64</span><br><span class=\"line\">            user-agent : conda/4.8.3 requests/2.23.0 CPython/3.7.0 Linux/3.10.0-957.el7.x86_64 centos/7.7.1908 glibc/2.17</span><br><span class=\"line\">               UID:GID : 1000:1000</span><br><span class=\"line\">            netrc file : None</span><br><span class=\"line\">          offline mode : False</span><br></pre></td></tr></table></figure>\n\n<p>可以看到在conda安装好之后，默认的镜像是官方的（<strong>channel URLs</strong>），由于官网的镜像在境外，国内访问较慢，配置国内的镜像能够加快访问的速度。</p>\n<p>上海交通大学镜像源：<a href=\"https://mirrors.sjtug.sjtu.edu.cn/anaconda/\">https://mirrors.sjtug.sjtu.edu.cn/anaconda/</a></p>\n<p>清华大学镜像源：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/</a></p>\n<p><strong>创建配置文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.condarc</span><br></pre></td></tr></table></figure>\n\n<p>如果使用<a href=\"https://mirrors.sjtug.sjtu.edu.cn/#/\">上海交通大学镜像源</a>，将以下配置写入<code>~/.condarc</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: <span class=\"literal\">true</span></span><br><span class=\"line\">channel_alias: https://anaconda.mirrors.sjtug.sjtu.edu.cn</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/free</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/mro</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  bioconda: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  menpo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  soumith: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  viscid-hub: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  atztogo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br></pre></td></tr></table></figure>\n\n<p>如果使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\">清华大学镜像源</a>，将以下配置写入<code>~/.bashrc</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: <span class=\"literal\">true</span></span><br><span class=\"line\">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>\n\n<p><strong>清除索引缓存</strong>，保证用的是镜像站提供的索引：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda clean -i</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载Anaconda3\"><a href=\"#卸载Anaconda3\" class=\"headerlink\" title=\"卸载Anaconda3\"></a>卸载Anaconda3</h4><p>按照<a href=\"https://docs.anaconda.com/anaconda/install/uninstall/\">官方卸载指导</a>，Anaconda3安装在<code>~/anaconda3</code>文件夹下，首先删除目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf anaconda3</span><br></pre></td></tr></table></figure>\n\n<p>清理<code>.bashrc</code>里的Anaconda环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>清理隐藏文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm .condarc</span><br><span class=\"line\">rm -rf ~/.condarc ~/.conda ~/.continuum</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"conda常用命令\"><a href=\"#conda常用命令\" class=\"headerlink\" title=\"conda常用命令\"></a>conda常用命令</h4><h5 id=\"关于环境\"><a href=\"#关于环境\" class=\"headerlink\" title=\"关于环境\"></a>关于环境</h5><p><strong>创建一个名为myenv的环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n myenv pip python=3.6</span><br></pre></td></tr></table></figure>\n\n<p><strong>激活myenv环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate myenv</span><br></pre></td></tr></table></figure>\n\n<p><strong>退出环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> deactivate myenv</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除一个已有的环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate myenv    <span class=\"comment\"># for Windows</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> deactivate myenv    <span class=\"comment\"># for Linux &amp; Mac</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查看Anaconda环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看已安装的虚拟环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info -e</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda envs</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除虚拟环境</strong></p>\n<p>输出虚拟环境myenv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n myenv --all</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h5><p><strong>安装</strong></p>\n<p>对于Python的包，尽可能使用<code>pip</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install packages</span><br></pre></td></tr></table></figure>\n\n<p><code>pip</code>安装不了的，使用conda</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install packages\t\t\t<span class=\"comment\"># 安装最新版本</span></span><br><span class=\"line\">conda install packsges==xxx\t\t<span class=\"comment\"># 安装指定版本</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前环境下已安装的包</strong></p>\n<p>python环境下的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n\n<p>conda环境下的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda list</span><br></pre></td></tr></table></figure>\n\n<p>查看某一conda环境下的包，比如查看myenv环境下的安装的包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda list -n myenv</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找package信息</strong></p>\n<p><strong>不同镜像源的包的信息不一样，尽量使用<code>pkgs/main</code>channels的包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search packages</span><br></pre></td></tr></table></figure>\n\n<p><strong>升级conda</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n\n<p><strong>卸载某一个环境下的包</strong></p>\n<p>在myenv虚拟环境下卸载某一packsges</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n myenv packages</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pip安装\"><a href=\"#pip安装\" class=\"headerlink\" title=\"pip安装\"></a>pip安装</h3><p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。目前如果在 <a href=\"https://www.python.org/\">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p>\n<p>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p>\n<p>pip 官网：<a href=\"https://pypi.org/project/pip/\">https://pypi.org/project/pip/</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>在终端利用SSH登录到服务器系统(CentOS 7.6)，由于<strong>普通用户</strong>无法使用<code>sudo</code>，如果没有安装python，则需<strong>手动安装pip</strong>，在终端中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python3 get-pip.py --user</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>:参数<code>--user</code>一定要记得使用，否则会提示权限不足。</p>\n<p>安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=~/.<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>此时已在非root用户环境中安装好通用的Python包管理工具<code>pip</code>。</p>\n<p>如果系统安装了Python且Python 2.7.9 + 或 Python 3.4+ 以上版本，<strong>自带 pip 工具</strong>。</p>\n<h4 id=\"更换国内镜像源\"><a href=\"#更换国内镜像源\" class=\"headerlink\" title=\"更换国内镜像源\"></a>更换国内镜像源</h4><p>为了加快下载速度，更换到<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\">国内的镜像源</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pip -U</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><strong>显示版本和路径</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取帮助</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>升级 pip</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U pip</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果这个升级命令出现问题 ，可以使用以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo easy_install --upgrade pip</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>安装包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install SomePackage              # 最新版本</span><br><span class=\"line\">pip install SomePackage&#x3D;&#x3D;1.0.4       # 指定版本</span><br><span class=\"line\">pip install &#39;SomePackage&gt;&#x3D;1.0.4&#39;     # 最小版本</span><br></pre></td></tr></table></figure>\n\n<p>比如要安装 Django。用以下的一条命令就可以，方便快捷。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Django==1.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>升级包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade SomePackage</span><br></pre></td></tr></table></figure>\n\n<p>升级指定的包，通过使用==, &gt;=, &lt;=, &gt;, &lt; 来指定一个版本号。</p>\n<p><strong>卸载包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip uninstall SomePackage</span><br></pre></td></tr></table></figure>\n\n<p><strong>搜索包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip search SomePackage</span><br></pre></td></tr></table></figure>\n\n<p><strong>显示安装包信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看指定包的详细信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show -f SomePackage</span><br></pre></td></tr></table></figure>\n\n<p><strong>列出已安装的包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看可升级的包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list -o</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事项</strong></p>\n<p>如果 Python2 和 Python3 同时有 pip，则使用方法如下：</p>\n<p>Python2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python2 -m pip install XXX</span><br></pre></td></tr></table></figure>\n\n<p>Python3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install XXX</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OpenCV安装\"><a href=\"#OpenCV安装\" class=\"headerlink\" title=\"OpenCV安装\"></a>OpenCV安装</h3><h4 id=\"Opencv-for-Python\"><a href=\"#Opencv-for-Python\" class=\"headerlink\" title=\"Opencv for Python\"></a>Opencv for Python</h4><p>首先确保Linux系统安装了Python 3.x，推荐<a href=\"#Anaconda3安装\">Anaconda</a>，激活不同的虚拟环境后，配置基于Python 3.x的Opencv 4.2。</p>\n<p>激活对应的虚拟环境，比如我使用了Anaconda创建了一个虚拟环境<code>tensorflow-gpu</code>，激活：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<p>此时终端会变成如下模样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(tensorflow-gpu) username@devices:~$</span><br></pre></td></tr></table></figure>\n\n<p>即为正常。</p>\n<p>上述命令解释</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">username</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">devices</td>\n<td align=\"center\">主机名</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">当前用户主目录</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">普通用户</td>\n</tr>\n<tr>\n<td align=\"center\">(tensorflow-gpu)</td>\n<td align=\"center\">系统指定环境</td>\n</tr>\n</tbody></table>\n<p>然后使用<code>pip</code>命令进行安装，查找<a href=\"https://pypi.org/project/opencv-python/3.4.9.33/#history\">opencv的不同版本</a>，使用下面的命令，替换版本号即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python==3.4.9.33</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证</strong>，在虚拟环境中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.8 |Anaconda, Inc.| (default, Dec 30 2018, 01:22:34) </span><br><span class=\"line\">[GCC 7.3.0] on linux</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span>, <span class=\"string\">\"copyright\"</span>, <span class=\"string\">\"credits\"</span> or <span class=\"string\">\"license\"</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接着输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import cv2</span><br><span class=\"line\">&gt;&gt;&gt; cv2.__version__</span><br><span class=\"line\"><span class=\"string\">'3.4.9'</span></span><br></pre></td></tr></table></figure>\n\n<p>结果显示Opencv3.4.9，安装正确。</p>\n<p><strong><del>源码编译安装</del></strong></p>\n<p>参考Opencv 4.2.0的官网提示](<a href=\"https://docs.opencv.org/4.2.0/d2/de6/tutorial_py_setup_in_ubuntu.html)，其教程是在Ubuntu系统进行的，服务器系统为CentOS，编译安装中注意区别。\">https://docs.opencv.org/4.2.0/d2/de6/tutorial_py_setup_in_ubuntu.html)，其教程是在Ubuntu系统进行的，服务器系统为CentOS，编译安装中注意区别。</a></p>\n<ul>\n<li><p><strong>下载</strong></p>\n<p>进入官网 : <a href=\"http://opencv.org/releases.html\">http://opencv.org/releases.html</a> 或者 <a href=\"https://github.com/opencv/opencv/releases\">https://github.com/opencv/opencv/releases</a>, 选择需要的 <code>x.x.x.zip</code>版本，以载<code>opencv-4.2.0.zip</code> 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">wget -c https://github.com/opencv/opencv/archive/4.2.0.zip</span><br><span class=\"line\">unzip</span><br></pre></td></tr></table></figure>\n\n<p>文件被解压到名为<code>opencv-4.2.0</code>的文件夹内</p>\n</li>\n<li><p><strong>安装依赖</strong></p>\n<p>确保系统安装了<code>cmake</code>、<code>gcc</code>、<code>g++</code>、<code>python 3.x</code>以及以及对应的<code>numpy</code>包。</p>\n<p>Opencv 4.2.0支持相机、媒体（ffmpeg、gstreamer）等特征</p>\n<p><strong>安装多媒体框架ffmpeg</strong></p>\n<p>centos服务器系统是非常稳定的，所以官方的RPM repository提供的RPM包往往是很滞后的，毕竟是服务器版本，安全稳定是重点，如果是个人用户，推荐Ubuntu，环境搭建起来毕竟方便。CentOS提供的RPM包不够丰富，很多时候需要自己编译，而<strong>EPEL</strong>恰恰可以解决这两方面的问题。<strong>EPEL的全称叫 Extra Packages for Enterprise Linux</strong> 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。</p>\n<p><strong>EPEL则为服务器版本提供大量的RPM包，而且大多数RPM包在官方 repository 中是找不到的</strong>。<strong>绝大多数rpm包要比官方repository 的RPM包版本要来得新，EPEL会有很多源地址</strong></p>\n<h5 id=\"1-FFMPEG安装\"><a href=\"#1-FFMPEG安装\" class=\"headerlink\" title=\"1. FFMPEG安装\"></a>1. FFMPEG安装</h5><p><strong>利用EPEL安装FFMPEG</strong>，<a href=\"https://linoxide.com/linux-how-to/install-ffmpeg-centos-7/\">参考教程</a>。</p>\n<ul>\n<li><p><strong>安装EPEL repo</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>添加可用的epel repo</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class=\"line\">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装FFMPEG及其开发包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看FFMPEG版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg version 2.8.15 Copyright (c) 2000-2018 the FFmpeg developers</span><br><span class=\"line\">  built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-36)</span><br><span class=\"line\">  configuration: --prefix=/usr --bindir=/usr/bin --datadir=/usr/share/ffmpeg --incdir=/usr/include/ffmpeg --libdir=/usr/lib64 --mandir=/usr/share/man --arch=x86_64 --optflags=<span class=\"string\">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic'</span> --extra-ldflags=<span class=\"string\">'-Wl,-z,relro '</span> --<span class=\"built_in\">enable</span>-libopencore-amrnb --<span class=\"built_in\">enable</span>-libopencore-amrwb --<span class=\"built_in\">enable</span>-libvo-amrwbenc --<span class=\"built_in\">enable</span>-version3 --<span class=\"built_in\">enable</span>-bzlib --<span class=\"built_in\">disable</span>-crystalhd --<span class=\"built_in\">enable</span>-gnutls --<span class=\"built_in\">enable</span>-ladspa --<span class=\"built_in\">enable</span>-libass --<span class=\"built_in\">enable</span>-libcdio --<span class=\"built_in\">enable</span>-libdc1394 --<span class=\"built_in\">enable</span>-libfdk-aac --<span class=\"built_in\">enable</span>-nonfree --<span class=\"built_in\">disable</span>-indev=jack --<span class=\"built_in\">enable</span>-libfreetype --<span class=\"built_in\">enable</span>-libgsm --<span class=\"built_in\">enable</span>-libmp3lame --<span class=\"built_in\">enable</span>-openal --<span class=\"built_in\">enable</span>-libopenjpeg --<span class=\"built_in\">enable</span>-libopus --<span class=\"built_in\">enable</span>-libpulse --<span class=\"built_in\">enable</span>-libschroedinger --<span class=\"built_in\">enable</span>-libsoxr --<span class=\"built_in\">enable</span>-libspeex --<span class=\"built_in\">enable</span>-libtheora --<span class=\"built_in\">enable</span>-libvorbis --<span class=\"built_in\">enable</span>-libv4l2 --<span class=\"built_in\">enable</span>-libx264 --<span class=\"built_in\">enable</span>-libx265 --<span class=\"built_in\">enable</span>-libxvid --<span class=\"built_in\">enable</span>-x11grab --<span class=\"built_in\">enable</span>-avfilter --<span class=\"built_in\">enable</span>-avresample --<span class=\"built_in\">enable</span>-postproc --<span class=\"built_in\">enable</span>-pthreads --<span class=\"built_in\">disable</span>-static --<span class=\"built_in\">enable</span>-shared --<span class=\"built_in\">enable</span>-gpl --<span class=\"built_in\">disable</span>-debug --<span class=\"built_in\">disable</span>-stripping --shlibdir=/usr/lib64 --<span class=\"built_in\">enable</span>-runtime-cpudetect</span><br><span class=\"line\">  libavutil      54. 31.100 / 54. 31.100</span><br><span class=\"line\">  libavcodec     56. 60.100 / 56. 60.100</span><br><span class=\"line\">  libavformat    56. 40.101 / 56. 40.101</span><br><span class=\"line\">  libavdevice    56.  4.100 / 56.  4.100</span><br><span class=\"line\">  libavfilter     5. 40.101 /  5. 40.101</span><br><span class=\"line\">  libavresample   2.  1.  0 /  2.  1.  0</span><br><span class=\"line\">  libswscale      3.  1.101 /  3.  1.101</span><br><span class=\"line\">  libswresample   1.  2.101 /  1.  2.101</span><br><span class=\"line\">  libpostproc    53.  3.100 / 53.  3.100</span><br><span class=\"line\">Hyper fast Audio and Video encoder</span><br><span class=\"line\">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</span><br><span class=\"line\"></span><br><span class=\"line\">Use -h to get full <span class=\"built_in\">help</span> or, even better, run <span class=\"string\">'man ffmpeg'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>FFMPEG安装成功。</strong></p>\n</li>\n</ul>\n<h5 id=\"3-gtk3\"><a href=\"#3-gtk3\" class=\"headerlink\" title=\"3. gtk3\"></a>3. gtk3</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gtk3 gtk3-devel gtk3-devel-docs</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-v4l（Video-for-Linux）\"><a href=\"#4-v4l（Video-for-Linux）\" class=\"headerlink\" title=\"4. v4l（Video for Linux）\"></a>4. v4l（Video for Linux）</h5><p><a href=\"http://www.linuxfromscratch.org/blfs/view/svn/multimedia/v4l-utils.html\">参考链接</a>，可选。</p>\n<h5 id=\"5-gstreamer\"><a href=\"#5-gstreamer\" class=\"headerlink\" title=\"5. gstreamer\"></a>5. gstreamer</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gstreamer*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译</p>\n<p>如果对 <code>CMakeLists</code> 文件不进行修改，那么 <code>Opencv</code> 默认的安装位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/include/opencv2/         -- 新版Opencv核心头文件</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/include/opencv/          -- 旧Opencv核心头文件</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/share/OpenCV/            -- 一些Opencv其他安装信息</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/lib/                     -- Opencv中的动态链接库存放位置</span><br></pre></td></tr></table></figure>\n\n<p>开始编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> opencv-4.2.0</span><br><span class=\"line\">mkdir build <span class=\"comment\"># 创建编译的文件目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装目录: /usr/local</span></span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release \\</span><br><span class=\"line\">      -D CMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span> \\    </span><br><span class=\"line\">      -DBUILD_JPEG=ON -DBUILD_TIFF=ON \\</span><br><span class=\"line\">      -DBUILD_PNG=ON ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"GCC多版本切换\"><a href=\"#GCC多版本切换\" class=\"headerlink\" title=\"GCC多版本切换*\"></a>GCC多版本切换*</h3><p>在CentOS 7下，使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gcc</span><br></pre></td></tr></table></figure>\n\n<p>CentOS官方的gcc或者g++版本最多到4.8.5，如果要安装Tensorflow 2.0以上的版本，就需要GCC 7.3.1，由于CentOS源没有提供高版本的GCC安装包，这时就不能通过安装包安装，通常的解决方案就是通过编译安装高版本的GCC。在这里介绍如何利用CentOS的新特性<strong>SCL</strong>进行高版本GCC的安装。</p>\n<p><a href=\"https://www.softwarecollections.org/en/scls/user/rhscl/\">SCL软件集</a>（Software Collections）是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。</p>\n<p><strong>devtoolset和GCC对应关系如下表</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">devtoolset</th>\n<th align=\"center\">GCC版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">devtoolset-3</td>\n<td align=\"center\">4.9.2</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-4</td>\n<td align=\"center\">5.3.1</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-6</td>\n<td align=\"center\">6.3.1</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-7</td>\n<td align=\"center\">7.3.1</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-8</td>\n<td align=\"center\">8.3.1</td>\n</tr>\n</tbody></table>\n<h4 id=\"添加centos-release-scl包\"><a href=\"#添加centos-release-scl包\" class=\"headerlink\" title=\"添加centos-release-scl包\"></a>添加centos-release-scl包</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install centos-release-scl</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用RHSCL库\"><a href=\"#启用RHSCL库\" class=\"headerlink\" title=\"启用RHSCL库\"></a>启用RHSCL库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --<span class=\"built_in\">enable</span> rhel-server-rhscl-7-rpms</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装GCC\"><a href=\"#安装GCC\" class=\"headerlink\" title=\"安装GCC\"></a>安装GCC</h4><p>Devtoolset 默认安装到 <code>/opt/rh</code> 目录下</p>\n<h5 id=\"GCC-4-9-2\"><a href=\"#GCC-4-9-2\" class=\"headerlink\" title=\"GCC 4.9.2\"></a>GCC 4.9.2</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-3</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-5-3-1\"><a href=\"#GCC-5-3-1\" class=\"headerlink\" title=\"GCC 5.3.1\"></a>GCC 5.3.1</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-6-3-1\"><a href=\"#GCC-6-3-1\" class=\"headerlink\" title=\"GCC 6.3.1\"></a>GCC 6.3.1</h5><p><a href=\"https://www.softwarecollections.org/en/scls/rhscl/devtoolset-6/\">参考官方链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-6</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-7-3-1\"><a href=\"#GCC-7-3-1\" class=\"headerlink\" title=\"GCC 7.3.1\"></a>GCC 7.3.1</h5><p><a href=\"https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/\">参考官方链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-7</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-8-3-1\"><a href=\"#GCC-8-3-1\" class=\"headerlink\" title=\"GCC 8.3.1\"></a>GCC 8.3.1</h5><p><a href=\"https://www.softwarecollections.org/en/scls/rhscl/devtoolset-8/\">参考官方链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-8</span><br></pre></td></tr></table></figure>\n\n<p>scl-utils 只是方便 Software Collections 使用，比如要查看当前安装了哪些Software Collections，可以使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl --list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"临时生效\"><a href=\"#临时生效\" class=\"headerlink\" title=\"临时生效\"></a>临时生效</h4><p>假设使<code>GCC 7.3.1</code>生效，其对应<code>devtoolset-7</code>，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl <span class=\"built_in\">enable</span> devtoolset-7 bash</span><br></pre></td></tr></table></figure>\n\n<p>这种方法只对当前的shell环境有效，退出后GCC回退到系统指定的版本。</p>\n<h4 id=\"全局生效\"><a href=\"#全局生效\" class=\"headerlink\" title=\"全局生效\"></a>全局生效</h4><p><a href=\"http://kuanghy.github.io/2016/03/22/devtoolset\">执行下列命令</a>可使对应的GCC全局有效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/rh/devtoolset-7/root/usr/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"><span class=\"built_in\">hash</span> -r</span><br></pre></td></tr></table></figure>\n\n<p>测试 gcc 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MatLab-R2020a安装\"><a href=\"#MatLab-R2020a安装\" class=\"headerlink\" title=\"MatLab R2020a安装*\"></a>MatLab R2020a安装*</h3><p>NO GUI安装会产生比较多莫名其妙的错误，现场安装吧……</p>\n<h2 id=\"第四章：深度学习环境搭建\"><a href=\"#第四章：深度学习环境搭建\" class=\"headerlink\" title=\"第四章：深度学习环境搭建\"></a>第四章：深度学习环境搭建</h2><h3 id=\"SSH远程登录和文件传输\"><a href=\"#SSH远程登录和文件传输\" class=\"headerlink\" title=\"SSH远程登录和文件传输\"></a>SSH远程登录和文件传输</h3><ul>\n<li><strong>SSH</strong>是用来<strong>登录</strong>远程服务器的安全协议；</li>\n<li><strong>FileZilla</strong>是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的<strong>文件传输</strong>)</li>\n</ul>\n<p>SSH和FileZilla都安装在<strong>本地计算机系统</strong>中</p>\n<h4 id=\"SSH安装\"><a href=\"#SSH安装\" class=\"headerlink\" title=\"SSH安装\"></a>SSH安装</h4><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">SSH</a>(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>\n</blockquote>\n<p>在<strong>本地计算机系统</strong>中，<code>UNIX</code>、<code>Window</code>以及<code>Mac</code>系统都可运行SSH,安装方法如下：</p>\n<ul>\n<li><strong><em>CentOS 7</em></strong></li>\n</ul>\n<p>需要普通管理员权限(sudo)，用快捷键<code>ctrl</code>+<code>alt</code>+<code>t</code>打开终端Terminal窗口，运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>然后回车,输入<code>y</code>，即可安装完成。</p>\n<ul>\n<li><strong><em>Windows10</em></strong></li>\n</ul>\n<p>下载<a href=\"https://www.mls-software.com/files/setupssh-7.9p1-1.exe\">openssh for windows</a>，进行默认安装即可。</p>\n<ul>\n<li><strong><em>Mac</em></strong></li>\n</ul>\n<p>由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动<code>sshd服务</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>\n\n<p>输入Mac密码后即可开启。</p>\n<h4 id=\"SSH登录\"><a href=\"#SSH登录\" class=\"headerlink\" title=\"SSH登录\"></a>SSH登录</h4><p>在任一平台上打开终端(Windows上推荐<a href=\"https://www.netsarang.com/zh/xshell-download/\"><strong>Xshell</strong></a>、<a href=\"http://www.hostbuf.com/t/988.html\"><strong>FinalShell</strong></a>，Linux系统和Mac直接打开终端即可)，输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p PORT</span><br></pre></td></tr></table></figure>\n\n<p>其中，<br><code>username</code>为服务器的用户名<br><code>IPaddress</code>为服务器的IP地址<br><code>PORT</code>为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员</p>\n<p>输入密码后即可进入自己账户的主目录（普通用户，无root权限）</p>\n<h4 id=\"修改账户密码\"><a href=\"#修改账户密码\" class=\"headerlink\" title=\"修改账户密码\"></a>修改账户密码</h4><p>登录到服务器之后，修改原始密码保证账户安全，直接输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p><code>username</code>为您在服务器上的用户名，根据提示修改新的密码。</p>\n<p>至此，您已经安全登录到服务器上。</p>\n<h4 id=\"FileZilla在Windows和Linux下互传文件\"><a href=\"#FileZilla在Windows和Linux下互传文件\" class=\"headerlink\" title=\"FileZilla在Windows和Linux下互传文件\"></a>FileZilla在Windows和Linux下互传文件</h4><blockquote>\n<p>FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。</p>\n</blockquote>\n<p>以windows 10为例，下载<a href=\"https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe\">FileZilla</a>，选择安装位置，正常安装即可。</p>\n<p><img src=\"https://pic.downk.cc/item/5e95d3bac2a9a83be5f30b2e.png\" alt=\"\"></p>\n<h4 id=\"FileZilla连接服务器\"><a href=\"#FileZilla连接服务器\" class=\"headerlink\" title=\"FileZilla连接服务器\"></a>FileZilla连接服务器</h4><p>打开FileZilla软件，</p>\n<ul>\n<li><ol>\n<li>点击”<strong>文件</strong>“——“<strong>站点管理器</strong>“</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>点击”<strong>新站点</strong>“，在”<strong>我的站点</strong>“下重命名，此处设为“Lab532”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>继停留在”<strong>站点管理器</strong>“界面，在”<strong>常规</strong>“选项卡中，设置如下：</li>\n</ol>\n<ul>\n<li>主机：<strong>服务器IP地址</strong></li>\n<li>端口：<strong>默认是 22，已禁用，详细端口请联系管理员</strong></li>\n<li>协议：<strong>SFTP - SSH File transfer Protocol</strong></li>\n<li>登录类型：<ul>\n<li>1）若选”<strong>正常</strong>“<ul>\n<li>用户名：username</li>\n<li>密码：password</li>\n</ul>\n</li>\n<li>2）若选”<strong>询问密码</strong>“，只能填写用户名：username，然后点击右下角的”<strong>连接</strong>“，再输入密码。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"4\">\n<li>之后一直ok即可。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h4><p>以window 10为例，利用FileZilla登录到服务器后，可以看到左边是<strong>本地站点</strong>，右边是<strong>远程站点</strong>(服务器上的目录)，如下图所示，直接将本地文件<code>test.py</code>用鼠标拖拽到服务器上的指定目录即可（<strong>上传过程</strong>），这个过程是可逆的（<strong>下载过程</strong>），非常方便。</p>\n<p><img src=\"https://pic.downk.cc/item/5e95d3f9c2a9a83be5f335d0.png\" alt=\"\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>利用<strong>FileZilla</strong>软件配合<strong>SSH</strong>协议，即可完成文件传输及程序运行等必要工作。</p>\n<h3 id=\"CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件\"><a href=\"#CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件\" class=\"headerlink\" title=\"CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件*\"></a>CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件*</h3><h4 id=\"CUDA切换\"><a href=\"#CUDA切换\" class=\"headerlink\" title=\"CUDA切换\"></a>CUDA切换</h4><p>在<a href=\"#安装CUDA\">安装CUDA</a>这一小节介绍了多种CUDA文件的安装，这些CUDA版本统一被安装到<code>/usr/local</code>文件夹下，使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll /usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<p><img src=\"https://pic.downk.cc/item/5e95b42ac2a9a83be5dc2927.png\" alt=\"\"></p>\n<p><strong>系统是通过<code>/usr/local/</code>下的<code>cuda</code>符号链接来识别CUDA当前指定的CUDA版本</strong>，比如现在符号链接<code>**cuda**</code>指向<strong>cuda-9.0</strong>，如果要指向其它CUDA版本，修改符号链接即可，比如切换到<strong>CUDA-10.0</strong>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除符号链接</span></span><br><span class=\"line\">sudo rm cuda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建符号链接</span></span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/cuda-10.0 /usr/<span class=\"built_in\">local</span>/cuda</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前<code>cuda</code>指向</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e95b5b6c2a9a83be5dd2da7.png\" alt=\"\"></p>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> cuda</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e95b63cc2a9a83be5dd7b59.png\" alt=\"\"></p>\n<p><strong>查看CUDA版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"cuDNN切换\"><a href=\"#cuDNN切换\" class=\"headerlink\" title=\"cuDNN切换\"></a>cuDNN切换</h4><p>在Tensorflow不同版本的GPU环境配置中，CUDA的切换，往往伴随着cuDNN的切换，cuDNN是由头文件和动态链接库组成的，所以下载对应的cuDNN，按照<a href=\"#cuDNN安装*\">cuDNN的安装方法</a>进行文件替换即可。</p>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这种方法的CUDA和cuDNN版本切换，适用于管理员整体切换和个人使用者，不适合服务器环境下的普通用户，有一种好的解决方法是配合<a href=\"https://modules.readthedocs.io/en/latest/\">Environment Modules</a>来进行环境管理，后续可以进行深入探索，<strong>推荐使用Anaconda来进行CUDA、cuDNN版本的管理。</strong></p>\n<h3 id=\"（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\"><a href=\"#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\" class=\"headerlink\" title=\"（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\"></a>（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN</h3><p>虚拟环境的重要性：<strong>无它，唯方便尔。</strong></p>\n<blockquote>\n<p>因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；创建独立的虚拟环境，各个虚拟环境相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。</p>\n</blockquote>\n<p>虚拟环境的创建有很多方法：Anaconda、virtualenv、docker等，但是就深度学习环境来说，Anaconda方便管理和使用，在此推荐<strong>Anaconda</strong>。</p>\n<p>考虑到这么一个场景：苦于科研无想法，于是在github上逛gai碰碰运气，终于看到一个不错的项目，一顿操作，clone这个repo之后，从anaconda创建一个虚拟环境来尝试运行，仔细阅读README，<strong>发现要求特定版本的一些依赖库</strong>，其它的库都还好说，如果要求特定版本的CUDN和cuDNN，如果重新下载安装配置就比较麻烦，何况非管理员用户没有安装和配置权限。这时候考虑Anaconda。</p>\n<p>Anaconda生态比较完整，只要系统里正确安装了<a href=\"#NVIDIA驱动安装（CentOS、Ubuntu）*\">NVIDIA驱动</a>，就可以在Anaconda下的虚拟环境中，安装特定版本的cuda和cudnn，而不必全局进行安装。</p>\n<p>需要注意的是：</p>\n<ul>\n<li><p><strong>Anaconda的 cudatoolkit 不包含完整安装cuda的全部文件，只是包含了用于 tensorflow，PyTorch，xgboost 和 Cupy 等所需要的共享库文件，cuDNN亦是如此。</strong></p>\n</li>\n<li><p><strong>如果系统已经全局安装了CUDA和cuDNN，在虚拟环境中又安装了其它版本的CUDA和cuDNN，互不影响，且首先调用虚拟环境中的版本。</strong></p>\n</li>\n</ul>\n<h4 id=\"conda创建虚拟环境\"><a href=\"#conda创建虚拟环境\" class=\"headerlink\" title=\"conda创建虚拟环境\"></a>conda创建虚拟环境</h4><p>确定系统安装了<a href=\"#Anaconda3安装\">Anaconda3</a>，假设此时要搭建一个Tensorflow 1.6的GPU环境，<a href=\"#Tensorflow建议配置\">查表</a>可知，需求CUDA 9、cuDNN 7版本，python版本指定为3.6。</p>\n<ul>\n<li><p><strong>创建虚拟环境</strong></p>\n<p>在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow16-gpu pip python=3.6</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后，在 <strong>~/anaconda3/env</strong> 文件夹下出现名为为 <strong><em>tensorflow16-gpu</em></strong> 的虚拟环境</p>\n<p>查看当前系统的Anaconda环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>激活虚拟环境</strong></p>\n<p>不建议使用系统建议的激活方式：<code>conda activate tensorflow16-gpu</code>，推荐使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow16-gpu</span><br></pre></td></tr></table></figure>\n\n<p>若要退出当前环境，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> deactivate tensorflow16-gpu</span><br></pre></td></tr></table></figure>\n\n<p>究竟使用哪种激活方式，看Anaconda发展和个人喜好。</p>\n</li>\n</ul>\n<h4 id=\"示例：安装Tensorflow-GPU-1-6（CUDA-9和cuDNN-7）\"><a href=\"#示例：安装Tensorflow-GPU-1-6（CUDA-9和cuDNN-7）\" class=\"headerlink\" title=\"示例：安装Tensorflow-GPU 1.6（CUDA 9和cuDNN 7）\"></a>示例：安装Tensorflow-GPU 1.6（CUDA 9和cuDNN 7）</h4><ul>\n<li><p><strong>安装CUDA 9</strong></p>\n<p><strong>查询Anaconda库里的CUDA版本：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search cuda</span><br></pre></td></tr></table></figure>\n\n<p>截止2020年4月11日，Anaconda官方<a href=\"https://anaconda.org/anaconda/cudatoolkit/files\">CUDA版本</a>包含：<a href=\"https://developer.nvidia.com/cuda-90-download-archive\">9.0</a>、<a href=\"https://developer.nvidia.com/cuda-92-download-archive\">9.2</a>、<a href=\"https://developer.nvidia.com/cuda-10.0-download-archive\">10.0</a>、10.1（<a href=\"https://developer.nvidia.com/cuda-10.1-download-archive-update1\">update1</a>和<a href=\"https://developer.nvidia.com/cuda-10.1-download-archive-update2\">update2</a>）、<a href=\"https://developer.nvidia.com/cuda-downloads\">10.2</a>，Anaconda <a href=\"https://anaconda.org/anaconda/cudatoolkit/files\">CUDA版本</a>紧跟NVIDIA官方<a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">CUDA</a>更新速度，满足绝大部分深度学习环境的要求。</p>\n<p>注意：不同的Anaconda源里的版本不一样，但是channel是<code>pkgs/main</code>的比较权威的，推荐使用<code>pkgs/main</code>里的版本。</p>\n<p><img src=\"https://pic.downk.cc/item/5e97d227c2a9a83be532729a.png\" alt=\"\"></p>\n<p><strong>Tensorflow 1.6 GPU版本需求CUDA 9.0：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudatoolkit==9.0</span><br></pre></td></tr></table></figure>\n\n<p>安装完成</p>\n<p><img src=\"https://pic.downk.cc/item/5e97d5f0c2a9a83be534c17d.png\" alt=\"\"></p>\n</li>\n</ul>\n<ul>\n<li><p><strong>安装cuDNN 7</strong></p>\n<p><strong>查询Anaconda库里的CUDA版本：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search cudnn</span><br></pre></td></tr></table></figure>\n\n<p>截止2020年4月11日，Anaconda官方<a href=\"https://anaconda.org/anaconda/cudnn/files\">cuDNN版本</a>如下，根据需求进行安装，也满足绝大部分深度学习环境的要求。</p>\n<p><img src=\"https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png\" alt=\"\"></p>\n<p><strong>Tensorflow 1.6 GPU版本需求cuDNN 7</strong>。</p>\n<p>选择cuDNN 7.0.5：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudnn==7.0.5</span><br></pre></td></tr></table></figure>\n\n<p>出现错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collecting package metadata (current_repodata.json): <span class=\"keyword\">done</span></span><br><span class=\"line\">Solving environment: failed with initial frozen solve. Retrying with flexible solve.</span><br><span class=\"line\">Collecting package metadata (repodata.json): <span class=\"keyword\">done</span></span><br><span class=\"line\">Solving environment: failed with initial frozen solve. Retrying with flexible solve.</span><br><span class=\"line\">Solving environment: - </span><br><span class=\"line\">Found conflicts! Looking <span class=\"keyword\">for</span> incompatible packages.                                       failed                                                                          </span><br><span class=\"line\">UnsatisfiableError:</span><br></pre></td></tr></table></figure>\n\n<p>这是怎么回事呢？打开<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">cuDNN官网</a>，注意到，同一个版本的cuDNN，可能对应不同的CUDA版本，比如cuDNN 7.0.5可以对应CUDA 8.0、CUDA 9.0和CUDA 9.1，所以查看Anaconda官方里的cuDNN 7.0.5对应哪个CUDA版本。</p>\n<p><img src=\"https://pic.downk.cc/item/5e97db58c2a9a83be5381c80.png\" alt=\"\"></p>\n<p>打开cuDNN的<a href=\"https://anaconda.org/anaconda/cudnn/files\">Anaconda仓库</a>，查询到Anaconda仓库里的cuDNN 7.0.5对应的是CUDA 8.0），因此选择CUDA 9.0对应的<strong>cuDNN 7.1.2</strong>，所以在安装前，使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search cudnn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e980e14c2a9a83be559cec6.jpg\" alt=\"\"></p>\n<p><strong>查询cuDNN与CUDA的对应关系。</strong></p>\n<p><strong>安装cuDNN 7.1.2：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudnn==7.1.2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e980693c2a9a83be5556703.png\" alt=\"\"></p>\n<p>这种方法安装CUDA和cuDNN，没有单独形成文件夹，都是统一存放在虚拟环境中的<code>lib</code>、<code>include</code>文件夹下，查看<code>CUDA 9.0</code>和<code>cuDNN 7.1.2</code>是否被安装到虚拟环境<code>tensorflow16-gpu</code>中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/lib/</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<p><img src=\"https://pic.downk.cc/item/5e98076bc2a9a83be555d9a8.png\" alt=\"\"></p>\n<p>或者使用以下命令<strong>查看CUDA共享库</strong>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cuda</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcudart.so</span><br><span class=\"line\">libcudart.so.9.0</span><br><span class=\"line\">libcudart.so.9.0.176</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令<strong>查看cuDNN共享库</strong>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cudnn</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcudnn.so</span><br><span class=\"line\">libcudnn.so.7</span><br><span class=\"line\">libcudnn.so.7.1.2</span><br><span class=\"line\">libcudnn_static.a</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令<strong>查看cuDNN头文件</strong>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/include/ | grep cudnn</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cudnn.h</span><br></pre></td></tr></table></figure>\n\n<p>可以看到相关CUDA、cuDNN的共享库，</p>\n</li>\n<li><p><strong>安装tensorflow-gpu 1.6.0</strong></p>\n<p>安装完CUDA 9.0和cuDNN 7.1.2之后，在激活的环境中输入</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>是否正确安装，请参照章节 <strong><em>测试tensorflow-gpu版本的正确性</em></strong> 里的方法验证。</p>\n<h4 id=\"测试tensorflow-gpu版本的正确性\"><a href=\"#测试tensorflow-gpu版本的正确性\" class=\"headerlink\" title=\"测试tensorflow-gpu版本的正确性\"></a>测试tensorflow-gpu版本的正确性</h4><p>在激活的环境中，输入<code>python</code>，进入到python3.6环境中，依次输入命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tf.test.is_gpu_available()</span><br></pre></td></tr></table></figure>\n\n<p>若输出类似的内容，且最后一行为<code>True</code>，则表示tensorflow-gpu 1.6 版本安装成功！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">45.539907</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class=\"number\">140</span>] Your CPU supports instructions that this TensorFlow binary was <span class=\"keyword\">not</span> compiled to use: AVX2 FMA</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425789</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1212</span>] Found device <span class=\"number\">0</span> <span class=\"keyword\">with</span> properties:</span><br><span class=\"line\">name: GeForce GTX <span class=\"number\">1080</span> major: <span class=\"number\">6</span> minor: <span class=\"number\">1</span> memoryClockRate(GHz): <span class=\"number\">1.7715</span></span><br><span class=\"line\">pciBusID: <span class=\"number\">0000</span>:<span class=\"number\">04</span>:<span class=\"number\">00.0</span></span><br><span class=\"line\">totalMemory: <span class=\"number\">7.93</span>GiB freeMemory: <span class=\"number\">7.81</span>GiB</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425831</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1312</span>] Adding visible gpu devices: <span class=\"number\">0</span></span><br><span class=\"line\">2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>查看tensorflow的版本的命令为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tf.__version__)</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>__</code>为两个<code>_</code>组合而成。</p>\n<h3 id=\"Anaconda下安装Tensorflow的GPU各个版本（从1-6到2-1）\"><a href=\"#Anaconda下安装Tensorflow的GPU各个版本（从1-6到2-1）\" class=\"headerlink\" title=\"Anaconda下安装Tensorflow的GPU各个版本（从1.6到2.1）\"></a>Anaconda下安装Tensorflow的GPU各个版本（从1.6到2.1）</h3><p><img src=\"https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png\" alt=\"Tensorflow版本\"></p>\n<p>根据Tensorflow<a href=\"https://www.tensorflow.org/install/source#linux\">官网</a>，在Anaconda环境下安装Tensorflow 1.6.0、1.11.1和2.1.0三个典型的GPU版本。使用<code>conda search cudnn</code>命令<strong>查询cuDNN与CUDA的对应关系。</strong></p>\n<p><img src=\"https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png\" alt=\"\"></p>\n<h4 id=\"Tensorflow-1-6-0\"><a href=\"#Tensorflow-1-6-0\" class=\"headerlink\" title=\"Tensorflow 1.6.0\"></a>Tensorflow 1.6.0</h4><p>系统默认GCC为4.8.5，在正常的终端中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow16-gpu pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow16-gpu</span><br></pre></td></tr></table></figure>\n\n<p>在激活的环境中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装CUDA 9.0和cuDNN 7.1.2</span></span><br><span class=\"line\">conda install cudatoolkit==9.0</span><br><span class=\"line\">conda install cudnn==7.1.2</span><br><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tensorflow-1-11-0\"><a href=\"#Tensorflow-1-11-0\" class=\"headerlink\" title=\"Tensorflow 1.11.0\"></a>Tensorflow 1.11.0</h4><p>系统默认GCC为4.8.5，在正常的终端中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow111-gpu pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow111-gpu</span><br></pre></td></tr></table></figure>\n\n<p>在激活的环境中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装CUDA 9.2和cuDNN 7.2.1</span></span><br><span class=\"line\">conda install cudatoolkit==9.2</span><br><span class=\"line\">conda install cudnn==7.2.1</span><br><span class=\"line\">pip install tensorflow-gpu==1.11.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tensorflow-2-1-0\"><a href=\"#Tensorflow-2-1-0\" class=\"headerlink\" title=\"Tensorflow 2.1.0\"></a>Tensorflow 2.1.0</h4><p><strong>切换GCC版本至7.3.1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable devtoolset-7 bash</span><br></pre></td></tr></table></figure>\n\n<p>仅本shell本次登录有效，若使全局生效，<a href=\"#全局生效\">查看方法</a>。</p>\n<p>在正常的终端中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow21-gpu pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow12-gpu</span><br></pre></td></tr></table></figure>\n\n<p>在激活的环境中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装CUDA 10.1.243和cuDNN 7.6.5</span></span><br><span class=\"line\">conda install cudatoolkit==10.1.243</span><br><span class=\"line\">conda install cudnn==7.6.5</span><br><span class=\"line\">pip install tensorflow-gpu==2.1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Anaconda下安装PyTorch的GPU各个版本（从0-4到1-4）\"><a href=\"#Anaconda下安装PyTorch的GPU各个版本（从0-4到1-4）\" class=\"headerlink\" title=\"Anaconda下安装PyTorch的GPU各个版本（从0.4到1.4）\"></a>Anaconda下安装PyTorch的GPU各个版本（从0.4到1.4）</h3><p>数据来源于<a href=\"https://pytorch.org/get-started/previous-versions/\">官网</a>，截止2020年4月11号，<code>PyTorch 1.4</code>版本需要配合<code>CUDA 10.1</code>或<code>CUDA9.2</code>配合使用。</p>\n<p><img src=\"https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png\" alt=\"PyTorch\"></p>\n<h4 id=\"PyTorch-0-4-1\"><a href=\"#PyTorch-0-4-1\" class=\"headerlink\" title=\"PyTorch 0.4.1\"></a>PyTorch 0.4.1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n pytorch041 pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate pytorch041</span><br></pre></td></tr></table></figure>\n\n<p>在虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudatoolkit==9.0</span><br><span class=\"line\">conda install pytorch=0.4.1 cuda90 -c pytorch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PyTorch-1-1-0\"><a href=\"#PyTorch-1-1-0\" class=\"headerlink\" title=\"PyTorch 1.1.0\"></a>PyTorch 1.1.0</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n pytorch110 pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate pytorch110</span><br></pre></td></tr></table></figure>\n\n<p>在虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch==1.1.0 torchvision==0.3.0 cudatoolkit=9.0 -c pytorch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PyTorch-1-4\"><a href=\"#PyTorch-1-4\" class=\"headerlink\" title=\"PyTorch 1.4\"></a>PyTorch 1.4</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n pytorch14 pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate pytorch14</span><br></pre></td></tr></table></figure>\n\n<p>在虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1 -c pytorch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>如果在安装过程中出现类似的错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CondaHTTPError: HTTP 000 CONNECTION FAILED <span class=\"keyword\">for</span> url &lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2&gt;</span><br><span class=\"line\">Elapsed: -</span><br><span class=\"line\"></span><br><span class=\"line\">An HTTP error occurred when trying to retrieve this URL.</span><br><span class=\"line\">HTTP errors are often intermittent, and a simple retry will get you on your way.</span><br></pre></td></tr></table></figure>\n\n<p>可能因为网络原因导致安装中断，不断尝试安装命令即可。</p>\n<h3 id=\"NVim-Vim简单使用\"><a href=\"#NVim-Vim简单使用\" class=\"headerlink\" title=\"NVim/Vim简单使用\"></a>NVim/Vim简单使用</h3><p>本小节内容节选自我的另一篇文章<a href=\"https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/\">《Linux之打造vim实用配置方案》</a>。</p>\n<h4 id=\"什么是Vim？\"><a href=\"#什么是Vim？\" class=\"headerlink\" title=\"什么是Vim？\"></a>什么是Vim？</h4><p><strong><a href=\"https://www.vim.org/\">Vim</a>- the ubiquitous text editor</strong>，一种无处不在的文本编辑器，维基百科是这么介绍<strong>vim</strong>的：</p>\n<blockquote>\n<p><strong>Vim</strong>是从<a href=\"https://zh.wikipedia.org/wiki/Vi\">vi</a>发展出来的一个<a href=\"https://zh.wikipedia.org/wiki/文本编辑器\">文本编辑器</a>。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和<a href=\"https://zh.wikipedia.org/wiki/Emacs\">Emacs</a>并列成为<a href=\"https://zh.wikipedia.org/wiki/类Unix系统\">类Unix系统</a>用户最喜欢的编辑器。</p>\n<p>Vim的第一个版本由<a href=\"https://zh.wikipedia.org/wiki/布萊姆·米勒\">布莱姆·米勒</a>在1991年发布。最初的简称是<strong>V</strong>i <strong>IM</strong>itation，随着功能的不断增加，正式名称改成了<strong>V</strong>i <strong>IM</strong>proved。现在是在<a href=\"https://zh.wikipedia.org/wiki/开放源代码\">开放源代码</a>方式下发行的<a href=\"https://zh.wikipedia.org/wiki/自由软件\">自由软件</a>。</p>\n</blockquote>\n<p><strong>文件的增删查改</strong>——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。</p>\n<p><strong>配置文件</strong>——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿<code>git clone repoyoulike</code>，然后按照配置文档进行修改，什么<strong>tf</strong>要升级啦，<strong>gcc/g++</strong>要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用<code>gedit</code>来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用<strong>ssh</strong>连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。</p>\n<p><strong>知其然知其所以然</strong>——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。</p>\n<p><strong>Vim</strong>适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从<a href=\"https://www.vim.org/download.php\">官网</a>下载。 </p>\n<h4 id=\"Vim哲学\"><a href=\"#Vim哲学\" class=\"headerlink\" title=\"Vim哲学\"></a>Vim哲学</h4><p>简单概括：摆脱鼠标，一键到达。</p>\n<p>即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。</p>\n<h4 id=\"升级支持python3的Vim8\"><a href=\"#升级支持python3的Vim8\" class=\"headerlink\" title=\"升级支持python3的Vim8*\"></a>升级支持python3的Vim8*</h4><p>在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是<strong>vi</strong>编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，<a href=\"https://github.com/vim/vim\">Vim8</a>在<a href=\"https://github.com/neovim/neovim\">NeoVim</a>的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口<strong>terminal</strong>，尤其是支持<strong>terminal</strong>非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，在升级了支持<strong>Python3</strong>的Vim8后（<strong>在Vim版本中，不能同时支持Python2和Python3</strong>），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。在这一小节，介绍怎么<strong>编译支持Python3的Vim8版本</strong>，<strong>前提是系统了安装Python3</strong>，Python3的安装不做讨论。</p>\n<ol>\n<li><p><strong>编译安装yum源里的vim最新版</strong></p>\n<p><a href=\"https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source\">参考YouCompleteMe</a>里给出的方法，略作调整。</p>\n<p>首先检查系统里的Vim是否已经安装，在终端输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep vim</span><br></pre></td></tr></table></figure>\n\n<p>如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（<strong>下载Vim最新版源代码</strong>）开始阅读。</p>\n<p>一般情况下，运行下列命令安装Vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install yum*    // CentOS7.6系统</span><br></pre></td></tr></table></figure>\n\n<p>查看vim版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。</p>\n<p>如果是Vim版本，查看Vim是否支持Python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version | grep python</span><br></pre></td></tr></table></figure>\n\n<p>如果结果显示python3前面是<code>+</code>号，则这一小节可以跳过，如果是<code>-</code>号，则需要自己编译Vim，需执行以下步骤。</p>\n</li>\n<li><p><strong>卸载Vim</strong></p>\n<p>在编译之前，需要卸载系统上的Vim版本</p>\n<ul>\n<li><p>如果使用<code>yum install vim*</code>命令安装的Vim，卸载Vim时执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果Vim是使用<code>make</code>编译过的，在<strong>CentOS7.6系统</strong>下，进入到Vim源代码目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make uninstall</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone <a href=\"https://github.com/vim/vim.git)，然后`cd\">https://github.com/vim/vim.git)，然后`cd</a> vim`，再执行上述语句。</p>\n<p>如果是<strong>Ubuntu系统</strong>，卸载起来就比较方便</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install checkinstall</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/vim       // vim是Vim源代码文件夹</span><br><span class=\"line\">sudo checkinstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>下载Vim最新版源代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~                                         // 进入到当前用户的根目录下</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vim/vim.git     // 下载Vim源代码</span><br><span class=\"line\"><span class=\"built_in\">cd</span> vim                                       // 进入到Vim源代码文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-features=huge \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-multibyte \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-rubyinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-python3interp=yes \\</span><br><span class=\"line\">            --with-python3-config-dir=$(python3-config --configdir) \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-perlinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-luainterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-gui=gtk2 \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-cscope \\</span><br><span class=\"line\">            --prefix=/usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>命令<a href=\"https://www.jianshu.com/p/aac78ff576c5\">解释</a>：</p>\n<p><code>--with-features=huge</code>：支持最大特性</p>\n<p><code>--enable-multibyte</code>：打开多字节支持，可以在Vim中输入中文</p>\n<p><code>--enable-rubyinterp</code>：打开对ruby编写的插件的支持</p>\n<p><code>--enable-python3interp</code>：打开对python3编写的插件的支持</p>\n<p><code>--with-python-config-dir</code>：Python3的路径</p>\n<p><code>--enable-perlinterp</code>：打开对perl编写的插件的支持</p>\n<p><code>--enable-luainterp</code>：打开对lua编写的插件的支持</p>\n<p><code>--enable-gui</code>：打开GUI支持</p>\n<p><code>--enable-cscope</code>：打开对cscope的支持</p>\n<p><code>--prefix=/usr/local/</code>：指定将要安装到的路径</p>\n</li>\n<li><p><strong>设置VIMRUNTIMEDIR</strong></p>\n<p><strong>VIMRUNTIMEDIR</strong>是vim运行时候所需资源的目录，非常重要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make VIMRUNTIMEDIR=/usr/<span class=\"built_in\">local</span>/share/vim/vim82</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编译安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置Vim为默认的编辑器</strong></p>\n<p>使用<code>update-alternative</code>设置vim为默认编辑器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/editor editor /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> editor /usr/<span class=\"built_in\">local</span>/bin/vim</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/vi vi /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> vi /usr/<span class=\"built_in\">local</span>/bin/vim</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>按照上述步骤完成后查看Vim**版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png\" alt=\"vim版本\"></p>\n<p>可以看到Vim版本是8.2版本，已开启<strong>python3支持</strong>，需要进行验证，在终端输入<code>vim</code>，接着在<strong>正常模式</strong>下输入<code>:echo has(&quot;python3&quot;)</code>，按一下回车键，若屏幕最下面输出<code>1</code>，则配置正确，Vim支持Python3。</p>\n<p>编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及<strong>Issues（非常有用）</strong>、<a href=\"https://stackoverflow.com/\">stackoverflow</a>等，其次再考虑其它出处，尽可能多看<strong>专业的英文文档</strong>，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！</p>\n<p>该方法是全局设置方法。</p>\n<ul>\n<li><p><strong>安装中文vim帮助文档</strong></p>\n<p>进入Vim环境，按一下前缀键<code>esc</code>，在英文语法环境下，输入<code>:help</code>后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：</p>\n<ul>\n<li><p><strong>下载中文安装包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>解压</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vimcdoc-2.3.0/\t\t\t\t<span class=\"comment\"># 进入解压后的目录</span></span><br><span class=\"line\">./vimcdoc.sh -i\t\t\t\t\t<span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n\n<p>命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Vim8-—-gt-NeoVim\"><a href=\"#Vim8-—-gt-NeoVim\" class=\"headerlink\" title=\"Vim8 —&gt; NeoVim\"></a>Vim8 —&gt; NeoVim</h4><p>完全是偶然。在上回讲到，在Vim下折腾了两三天的<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。</p>\n<p>关于Vim的插件介绍，请查阅我的另一篇文章<a href=\"https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/\">《Linux之打造vim实用配置方案》</a>。</p>\n<p><strong>NeoVim和Vim的用法基本一致</strong>，底层架构有所不同而已，Vim用户可以很方便的操作NeoVim，配置文件可以直接进行迁移。</p>\n<p><a href=\"https://github.com/neovim/neovim\">NeoVim</a>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">sudo yum install -y neovim python3-neovim</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"心理准备\"><a href=\"#心理准备\" class=\"headerlink\" title=\"心理准备\"></a>心理准备</h4><ul>\n<li><strong>学习Vim在开始时是痛苦的</strong>，<strong>但是熟悉之后，工作效率会大大提升</strong></li>\n<li>需要时间</li>\n<li>需要不断地练习</li>\n<li>不要期望你能在3天内把vim练得比别的编辑器更有效率</li>\n</ul>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>如果使用NVim或Vim编辑文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NeoVim</span></span><br><span class=\"line\">nvim file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Vim</span></span><br><span class=\"line\">vim file</span><br></pre></td></tr></table></figure>\n\n<p>发现界面黑乎乎的，没有行号，没有语法高亮等，作为一名视觉动物，稍微美化一下NeoVim或者Vim，使其不那么打击我们学习的热情。</p>\n<p>NVim的配置文件路径：<code>~/.config/nvim/init.vim</code></p>\n<p>Vim的配置文件路径：<code>~/.vim/vimrc</code></p>\n<p>将下列配置，根据需求，粘贴到配置文件中，然后<code>:wq</code>，在终端中输入<code>source ~/.config/nvim/init.vim</code>或者<code>source ~/.vim/vimrc</code>刷新配置文件。</p>\n<p><strong>请仔细阅读每一行注释。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -----------------</span><br><span class=\"line\"><span class=\"string\">\"  基本设置</span></span><br><span class=\"line\"><span class=\"string\">\"</span> -----------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 语法高亮</span></span><br><span class=\"line\"><span class=\"string\">syntax on</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示行号</span><br><span class=\"line\"><span class=\"built_in\">set</span> number</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 显示当前行号的相关行，比如以此行为标准，向上/向下数第1行、第2行等 </span></span><br><span class=\"line\"><span class=\"string\">set relativenumber</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 设置TAB宽度, ts: tabstop</span><br><span class=\"line\"><span class=\"built_in\">set</span> expandtab</span><br><span class=\"line\"><span class=\"built_in\">set</span> tabstop=2</span><br><span class=\"line\"><span class=\"built_in\">set</span> shiftwidth=2</span><br><span class=\"line\"><span class=\"built_in\">set</span> softtabstop=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 光标所在的那一栏上面/下面还显示出6行</span></span><br><span class=\"line\"><span class=\"string\">set scrolloff=6</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示当前行的下滑线</span><br><span class=\"line\"><span class=\"built_in\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 保证当前vim环境下的字不会超出屏幕</span></span><br><span class=\"line\"><span class=\"string\">set wrap</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示当前的命令</span><br><span class=\"line\"><span class=\"built_in\">set</span> showcmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 左下角显示当前的模式名称</span></span><br><span class=\"line\"><span class=\"string\">set showmode</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 按下TAB，自动补全指令</span><br><span class=\"line\"><span class=\"built_in\">set</span> wildmenu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 是否显示状态栏, 0 : 不显示, 1 : 表示只在多窗口时显示, 2 : 表示显示</span></span><br><span class=\"line\"><span class=\"string\">set laststatus=2</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示当前光标的位置、进度以及时间</span><br><span class=\"line\"><span class=\"built_in\">set</span> statusline=%F%m%r%h%w\\ [pos=(%l,%v)]\\ [progress=%p%%]\\ %&#123;strftime(\\\"%d/%m/%y\\ -\\ %H:%M\\\")&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 关闭当错误发生的bell提示音</span></span><br><span class=\"line\"><span class=\"string\">set noeb</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 当错误发生时, 屏幕闪烁</span><br><span class=\"line\"><span class=\"string\">\" set vb</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 当错误发生时, 不要闪烁屏幕</span><br><span class=\"line\"><span class=\"string\">\" set novisualbell    </span></span><br><span class=\"line\"><span class=\"string\">\"</span> ------------------</span><br><span class=\"line\"><span class=\"string\">\"   关于搜索和高亮</span></span><br><span class=\"line\"><span class=\"string\">\"</span> ------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 高亮搜索到的词</span></span><br><span class=\"line\"><span class=\"string\">set hlsearch</span></span><br><span class=\"line\"><span class=\"string\">\"</span>为了避免打开新的文件时显示的上一个文件的搜索结果产生的高亮</span><br><span class=\"line\"><span class=\"string\">\" exec 表示在:后面运行的命令</span></span><br><span class=\"line\"><span class=\"string\">exec \"</span>nohlsearch<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 输入时, 边输入, 边高亮</span><br><span class=\"line\"><span class=\"built_in\">set</span> incsearch</span><br><span class=\"line\"><span class=\"string\">\" 忽略大小写</span></span><br><span class=\"line\"><span class=\"string\">set ignorecase</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 智能大小写</span><br><span class=\"line\"><span class=\"built_in\">set</span> smartcase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 支持鼠标点击和滚动</span></span><br><span class=\"line\"><span class=\"string\">\"</span> <span class=\"built_in\">set</span> mouse=a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" -----------------</span></span><br><span class=\"line\"><span class=\"string\">\"</span>   map 键盘映射</span><br><span class=\"line\"><span class=\"string\">\" -----------------</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 按下小写s, 啥事不干</span><br><span class=\"line\">map s &lt;nop&gt;      </span><br><span class=\"line\"><span class=\"string\">\" 按下大写S, 保存当前文件, &lt;CR&gt;为回车按键</span></span><br><span class=\"line\"><span class=\"string\">map S :w&lt;CR&gt; </span></span><br><span class=\"line\"><span class=\"string\">\"</span> 按下大写Q, 退出当前文件</span><br><span class=\"line\">map Q :q&lt;CR&gt; </span><br><span class=\"line\"><span class=\"string\">\" 按下大写R, 更新文件配置</span></span><br><span class=\"line\"><span class=\"string\">map R :source <span class=\"variable\">$MYVIMRC</span>&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>77~81</code>行解释，假设要编辑一个文件，进行了修改，此时</p>\n<ul>\n<li>保存文件 — 先按前缀键<code>Esc</code>，再按住大写<code>S</code>，默认操作：先按前缀键<code>Esc</code>，再输入<code>:w</code>；</li>\n<li>更新配置 — 先按前缀键<code>Esc</code>，再按住大写<code>R</code>，默认操作：退出文件，再<code>source files</code>；</li>\n<li>退出文件 — 先按前缀键<code>Esc</code>，再按住大写<code>Q</code>，默认操作：先按前缀键<code>Esc</code>，再输入<code>:q</code>；</li>\n</ul>\n<p>这三个快捷键非常有用，可以相互搭配使用！</p>\n<h4 id=\"几种模式\"><a href=\"#几种模式\" class=\"headerlink\" title=\"几种模式\"></a>几种模式</h4><ul>\n<li>普通模式（Normal）：启动NVim/Vim后，Vim默认在模式下，进入Normal模式的快捷键：<code>Esc</code>；</li>\n<li>插入模式（Insert）：快捷键：<code>i</code>，会看到vim左下角有一个 <strong>– 插入 –</strong> 字样，表示可以以插入的方式输入，此时，你可以输入文本了，就像你用“记事本”一样；</li>\n</ul>\n<h4 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vimtutor</span><br></pre></td></tr></table></figure>\n\n<p>查看Vim教程（已在<a href=\"升级支持python3的Vim8*\">章节</a>安装了中文版教程），强烈建议自学一遍。先按前缀键<code>Esc</code>，再输入<code>:q</code>可退出教程。</p>\n<ul>\n<li><p><code>i</code>→ Insert 模式，按 ESC 回到 Normal 模式；</p>\n</li>\n<li><p>退出并保存</p>\n<ul>\n<li>一般操作：先按前缀键<code>Esc</code>，再输入<code>:wq</code>；</li>\n<li>快捷键：根据上述配置文件，先按前缀键<code>Esc</code>，再按住<code>SQ</code>；</li>\n</ul>\n</li>\n<li><p>保存并更新配置：</p>\n<ul>\n<li>一般操作：先按前缀键<code>Esc</code>，再输入<code>:wq</code>，在终端输入<code>source files</code>；</li>\n<li>快捷键：根据上述配置文件，先按前缀键<code>Esc</code>，再按住<code>SR</code>；</li>\n</ul>\n</li>\n<li><p>退出不保存：先按前缀键<code>Esc</code>，再输入<code>:q!</code></p>\n</li>\n<li><p>关于删除：<strong>在普通模式（Normal）下</strong>，</p>\n<ul>\n<li><code>x</code> → 删除光标所指向的字符；</li>\n<li><code>dd</code> → 删除光标所在的那一行；</li>\n</ul>\n</li>\n<li><p>关于插入：<strong>在普通模式（Normal）下，</strong>除了<code>i</code>可以进入插入模式外，还有</p>\n<ul>\n<li><code>a</code>→ 在光标后插入；</li>\n<li><code>o</code>→ 在当前行后插入一个新行；</li>\n<li><code>O</code> → 在当前行前插入一个新行；</li>\n<li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符；</li>\n</ul>\n</li>\n<li><p>关于撤销/恢复：<strong>在普通模式（Normal）下</strong>，</p>\n<ul>\n<li><code>u</code> → 撤销；</li>\n<li><C-r>，意为<code>Ctrl + r</code> → 恢复；</li>\n</ul>\n</li>\n<li><p>关于跳转：<strong>在普通模式（Normal）下</strong>，</p>\n<ul>\n<li><code>gg</code> → 跳转到当前文件的第一行行首；</li>\n<li><code>G</code> →  跳转到当前文件的最后一行行首；</li>\n<li><code>0</code>→ 跳转到当前行的行首；</li>\n<li><code>$</code> → 跳转到当前行的最后一个字符处；</li>\n<li><code>50gg</code> → 跳转到第50行；</li>\n<li><code>50j</code> → 从当前行向后跳转50行；</li>\n</ul>\n</li>\n<li><p>关于搜索：<strong>在普通模式（Normal）下</strong>，输入<code>/</code>，就可以进行文件内搜索，按<code>n</code>查找下一个，<code>N</code>查找上一个</p>\n</li>\n</ul>\n<p>这只是些非常基础的命令，不过足以应付一般情况，NVim/Vim下有很多实用的插件，请关注我的另一篇文章：<a href=\"https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/\">《Linux之打造vim实用配置方案》</a>。</p>\n<h3 id=\"Tmux简单使用\"><a href=\"#Tmux简单使用\" class=\"headerlink\" title=\"Tmux简单使用\"></a>Tmux简单使用</h3><p>Tmux 是一个终端复用器（terminal multiplexer），非常有用，<strong>建议所有重要的操作，都在Tmux里进行，只要服务器不宕机，操作一直在进行。</strong></p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。<strong>用户与计算机的这种临时的交互，称为一次”会话”（session）</strong> 。</p>\n<p>会话的一个重要特点是，窗口与其中启动的进程是<a href=\"http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html\">连在一起</a>的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p>\n<p>一个典型的例子就是，<a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\">SSH 登录</a>远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p>\n<p><strong>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。</strong></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p>\n<blockquote>\n<ul>\n<li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li>\n<li>它可以让新窗口”接入”已经存在的会话。</li>\n<li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li>\n<li>它还支持窗口任意的垂直和水平拆分。</li>\n</ul>\n</blockquote>\n<h4 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h4><ul>\n<li>会话(session): 建立一个 tmux 工作区会话，会话可以长期驻留，重新连接服务器不会丢失，我们只需重新 tmux attach 到之前的工作区就可以恢复会话</li>\n<li>窗口(window): 容纳多个窗格</li>\n<li>窗格(pane): 可以在窗口中分成多个窗格</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e986635c2a9a83be5a21e27.jpg\" alt=\"\"></p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><p><strong>CentOS/Fedora</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install tmux</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Ubuntu/Debian</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install tmux</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mac</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tmux</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"启动和退出\"><a href=\"#启动和退出\" class=\"headerlink\" title=\"启动和退出\"></a>启动和退出</h4><p>在终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e982247c2a9a83be5672750.png\" alt=\"\"></p>\n<p>启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。</p>\n<p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p>\n<h4 id=\"前缀键\"><a href=\"#前缀键\" class=\"headerlink\" title=\"前缀键\"></a>前缀键</h4><p>与<code>vim</code>、<code>nvim</code>类似，都存在一个<strong>前缀键</strong>，Tmux 窗口有大量的快捷键，<strong>所有快捷键都要通过前缀键唤起</strong>。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p>\n<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p>\n<p>然后，按下 ESC 键或<code>q</code>键，就可以退出帮助。</p>\n<p>当然如果觉得前缀键<code>Ctrl+b</code>不太方便，可以更换前缀键。</p>\n<h4 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h4><h5 id=\"新建会话\"><a href=\"#新建会话\" class=\"headerlink\" title=\"新建会话\"></a>新建会话</h5><p>第一个启动的 Tmux 窗口，编号是<code>0</code>，第二个窗口的编号是<code>1</code>，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>\n<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s YourSeeName</span><br></pre></td></tr></table></figure>\n\n<p>新建了一个名为<strong>YourSeeName</strong>的Tmux窗口。</p>\n<h5 id=\"分离会话\"><a href=\"#分离会话\" class=\"headerlink\" title=\"分离会话\"></a>分离会话</h5><p>在 Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离，进入普通的终端界面，<strong>但是会话和里面的进程仍然在后台运行</strong>，<code>tmux ls</code>命令可以查看当前所有的 Tmux 会话。</p>\n<h5 id=\"会话查看\"><a href=\"#会话查看\" class=\"headerlink\" title=\"会话查看\"></a>会话查看</h5><p>在Tmux会话内，列出所有会话的快捷键是<code>Ctrl+b s</code></p>\n<p>登录到终端以后，使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux ls</span><br></pre></td></tr></table></figure>\n\n<p>可以查看当前所有的 Tmux 会话。</p>\n<h5 id=\"进入会话\"><a href=\"#进入会话\" class=\"headerlink\" title=\"进入会话\"></a>进入会话</h5><p>进入到Tmux最后一次退出的窗口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>tmux ls</code>查看可用的窗口，然后选择想进入的窗口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入名为Seesion-Name的会话窗口</span></span><br><span class=\"line\">tmux a -t Seesion-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入编号为SessionNum的会话窗口</span></span><br><span class=\"line\">tmux a -t Session-Num\t<span class=\"comment\"># SessionNum为0、1、2...3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"杀死会话\"><a href=\"#杀死会话\" class=\"headerlink\" title=\"杀死会话\"></a>杀死会话</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用会话名称</span></span><br><span class=\"line\">tmux <span class=\"built_in\">kill</span>-session -t Seesion-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用会话编号</span></span><br><span class=\"line\">tmux <span class=\"built_in\">kill</span>-session -t Session-Num</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切换会话\"><a href=\"#切换会话\" class=\"headerlink\" title=\"切换会话\"></a>切换会话</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用会话名称</span></span><br><span class=\"line\">tmux switch -t Seesion-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用会话编号</span></span><br><span class=\"line\">tmux switch -t Session-Num</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重命名会话\"><a href=\"#重命名会话\" class=\"headerlink\" title=\"重命名会话\"></a>重命名会话</h5><p>在Tmux会话内，重命名的快捷键是<code>Ctrl+b $</code></p>\n<p>在终端界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用会话名称</span></span><br><span class=\"line\">tmux rename-session -t Seesion-Name New-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用会话编号</span></span><br><span class=\"line\">tmux rename-session -t Session-Num New-Name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"窗格操作\"><a href=\"#窗格操作\" class=\"headerlink\" title=\"窗格操作\"></a>窗格操作</h4><p><code>Ctrl+b %</code>：划分左右两个窗格</p>\n<p><code>Ctrl+b &quot;</code>：划分上下两个窗格</p>\n<p><code>Ctrl+b q</code>：显示窗格编号</p>\n<h2 id=\"第五章：在服务器上利用GPU跑程序的简化步骤\"><a href=\"#第五章：在服务器上利用GPU跑程序的简化步骤\" class=\"headerlink\" title=\"第五章：在服务器上利用GPU跑程序的简化步骤\"></a>第五章：在服务器上利用GPU跑程序的简化步骤</h2><ol>\n<li>利用FileZilla软件登录远程服务器上传所需程序文件</li>\n<li>在终端利用SSH登录远程服务器</li>\n<li>按照下面的命令进行操作，建议使用<strong>tmux终端复用神器</strong>，第2、3、4步不是必须的，但是强烈推荐使用！</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p 22      <span class=\"comment\"># 登录服务器</span></span><br><span class=\"line\">tmux ls                           <span class=\"comment\"># 查看终端会话列表，若没有，新建一个</span></span><br><span class=\"line\">                                  <span class=\"comment\"># 会话窗口 tmux new -s Seesion-Name，保证程序在后台运行</span></span><br><span class=\"line\">tmux a -t Seesion-Name             <span class=\"comment\"># 进入你指定的会话窗口</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu    <span class=\"comment\"># 在会话窗口中激活tensorflow-gpu环境</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> xxx/yyy                        <span class=\"comment\"># 程序文件所在路径</span></span><br><span class=\"line\">ls                                <span class=\"comment\"># 查看文件</span></span><br><span class=\"line\">python abc.py                     <span class=\"comment\"># 运行程序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第六章：服务器管理\"><a href=\"#第六章：服务器管理\" class=\"headerlink\" title=\"第六章：服务器管理*\"></a>第六章：服务器管理*</h2><h3 id=\"添加-删除账户\"><a href=\"#添加-删除账户\" class=\"headerlink\" title=\"添加/删除账户\"></a>添加/删除账户</h3><h4 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、创建hadoop用户并修改密码</span></span><br><span class=\"line\">sudo useradd -m username -s /bin/bash -g lab532 </span><br><span class=\"line\">sudo passwd username</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>useradd</code>命令创建用户，其中</p>\n<ul>\n<li><code>-m</code>：创建用户的主目录</li>\n<li><code>-s</code>：新账户的登录 shell</li>\n<li><code>-g</code>：新账户所属的用户组的名称或 ID，实验室用户都在组<code>lab532</code>中</li>\n</ul>\n<h4 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2、删除用户</span></span><br><span class=\"line\">sudo deluser username --remove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h3><h4 id=\"查看用户的UID和GID\"><a href=\"#查看用户的UID和GID\" class=\"headerlink\" title=\"查看用户的UID和GID\"></a>查看用户的UID和GID</h4><p>以用户<code>adoredee</code>为例，查看用户<code>adoredee</code>的的UID和GID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id adoredee</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>UID为UserId，即用户ID，用来标识每个用户的唯一标示符</li>\n<li>GID为GroupId，即组ID，用来标识用户组的唯一标识符</li>\n</ul>\n<h4 id=\"修改用户的用户组\"><a href=\"#修改用户的用户组\" class=\"headerlink\" title=\"修改用户的用户组\"></a>修改用户的用户组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -g lab532 adoredee</span><br></pre></td></tr></table></figure>\n\n<p>强制用户<code>adoredee</code>的基本组为<code>lab532</code></p>\n<h4 id=\"查看某一用户组下的所有成员\"><a href=\"#查看某一用户组下的所有成员\" class=\"headerlink\" title=\"查看某一用户组下的所有成员\"></a>查看某一用户组下的所有成员</h4><p>查看用户组<code>lab532</code>下的所属成员</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/group | grep <span class=\"string\">'lab532'</span></span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lab532:x:1002:</span><br></pre></td></tr></table></figure>\n\n<p>得知用户组<code>lab532</code>的组ID是<strong>1002</strong>，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F<span class=\"string\">\":\"</span> <span class=\"string\">'&#123;print $1\"\\t\\t\"$4&#125;'</span> /etc/passwd | grep <span class=\"string\">'1002'</span></span><br></pre></td></tr></table></figure>\n\n<p>显示组<code>lab532</code>下的所有用户。</p>\n<h4 id=\"修改用户组名称\"><a href=\"#修改用户组名称\" class=\"headerlink\" title=\"修改用户组名称\"></a>修改用户组名称</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod -n newname oldname</span><br></pre></td></tr></table></figure>\n\n<p>用户组名从 <code>oldname</code>修改为 <code>newname</code>。</p>\n<h3 id=\"将普通用户赋予管理员权限\"><a href=\"#将普通用户赋予管理员权限\" class=\"headerlink\" title=\"将普通用户赋予管理员权限\"></a>将普通用户赋予管理员权限</h3><p>使用<code>useradd</code>命令创建的用户没有管理员权限，不能使用<code>sudo</code>命令，假设要将用户<code>adoredee</code>提拔为系统管理员，首先打开文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给予/etc/sudoers文件 写 的权限</span></span><br><span class=\"line\">sudo +w /etc/sudoers</span><br><span class=\"line\">sudo nvim /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>然后找到如下界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Next comes the main part: which users can run what software on </span></span><br><span class=\"line\"><span class=\"comment\">## which machines (the sudoers file can be shared between multiple</span></span><br><span class=\"line\"><span class=\"comment\">## systems).</span></span><br><span class=\"line\"><span class=\"comment\">## Syntax:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">##      user    MACHINE=COMMANDS</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## The COMMANDS section may have other options added to it.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">root     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n<p>在root下面一行新增命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adoredee ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n<p>退出并保存文件，取消<code>/etc/sudoers</code>文件 <strong>写</strong> 的权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -w /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>此时用户<code>adoredee</code>从普通用户晋升为系统管理员。</p>\n<p><strong>系统管理员请尊重其他用户的隐私。</strong></p>\n<h3 id=\"修改登录界面显示\"><a href=\"#修改登录界面显示\" class=\"headerlink\" title=\"修改登录界面显示\"></a>修改登录界面显示</h3><p><img src=\"https://pic.downk.cc/item/5e989362c2a9a83be5ccd569.png\" alt=\"\"></p>\n<p>远程连接服务器时，可以在登录成功后，显示欢迎界面，如上图，设置方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS</span></span><br><span class=\"line\">sudo nvim /etc/motd</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Ubuntu </span></span><br><span class=\"line\">sudo nvim /etc/update-motd.d</span><br></pre></td></tr></table></figure>\n\n<p>下面是几种不同的风格，直接复制到文件中即可。</p>\n<h4 id=\"SJTU\"><a href=\"#SJTU\" class=\"headerlink\" title=\"SJTU\"></a>SJTU</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ____     _____  ______  __  __</span><br><span class=\"line\">&#x2F;\\  _&#96;\\  &#x2F;\\___ \\&#x2F;\\__  _\\&#x2F;\\ \\&#x2F;\\ \\</span><br><span class=\"line\">\\ \\,\\L\\_\\\\&#x2F;__&#x2F;\\ \\&#x2F;_&#x2F;\\ \\&#x2F;\\ \\ \\ \\ \\</span><br><span class=\"line\"> \\&#x2F;_\\__ \\   _\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\</span><br><span class=\"line\">   &#x2F;\\ \\L\\ \\&#x2F;\\ \\_\\ \\ \\ \\ \\ \\ \\ \\_\\ \\</span><br><span class=\"line\">   \\ &#96;\\____\\ \\____&#x2F;  \\ \\_\\ \\ \\_____\\</span><br><span class=\"line\">    \\&#x2F;_____&#x2F;\\&#x2F;___&#x2F;    \\&#x2F;_&#x2F;  \\&#x2F;_____&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lab532\"><a href=\"#Lab532\" class=\"headerlink\" title=\"Lab532\"></a>Lab532</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;\\       &#x2F;_&#x2F;__&#x2F;_\\  &#x2F;\\ ___&#96;\\ </span><br><span class=\"line\"> \\ \\      \\ \\   \\ \\ \\&#x2F;\\_____\\ </span><br><span class=\"line\">  \\ \\      \\ \\___\\ \\ \\ \\____&#x2F;_  </span><br><span class=\"line\">   \\ \\      \\ \\___\\ \\ \\ \\___\\ \\ </span><br><span class=\"line\">    \\ \\_____ \\ \\   \\ \\ \\ \\___\\_\\ </span><br><span class=\"line\">     \\&#x2F;______&#x2F;\\_\\   \\_\\ \\&#x2F;___&#x2F;_&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"佛祖保佑\"><a href=\"#佛祖保佑\" class=\"headerlink\" title=\"佛祖保佑\"></a>佛祖保佑</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *</span><br><span class=\"line\">*</span><br><span class=\"line\">*                             _ooOoo_</span><br><span class=\"line\">*                            o8888888o</span><br><span class=\"line\">*                            88<span class=\"string\">\" . \"</span>88</span><br><span class=\"line\">*                            (| -_- |)</span><br><span class=\"line\">*                            O\\  =  /O</span><br><span class=\"line\">*                         ____/`---<span class=\"string\">'\\____</span></span><br><span class=\"line\"><span class=\"string\">*                       .'</span>  \\\\|     |//  `.</span><br><span class=\"line\">*                      /  \\\\|||  :  |||//  \\</span><br><span class=\"line\">*                     /  _||||| -:- |||||-  \\</span><br><span class=\"line\">*                     |   | \\\\\\  -  /// |   |</span><br><span class=\"line\">*                     | \\_|  <span class=\"string\">''</span>\\---/<span class=\"string\">''</span>  |   |</span><br><span class=\"line\">*                     \\  .-\\__  `-`  ___/-. /</span><br><span class=\"line\">*                   ___`. .<span class=\"string\">'  /--.--\\  `. . __</span></span><br><span class=\"line\"><span class=\"string\">*                .\"\" '</span>&lt;  `.___\\_&lt;|&gt;_/___.<span class=\"string\">'  &gt;'</span><span class=\"string\">\"\"</span>.</span><br><span class=\"line\">*               | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |</span><br><span class=\"line\">*               \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /</span><br><span class=\"line\">*          ======`-.____`-.___\\_____/___.-`____.-<span class=\"string\">'======</span></span><br><span class=\"line\"><span class=\"string\">*                             `=---='</span></span><br><span class=\"line\">*\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        </span><br><span class=\"line\">*              佛祖镇楼         永无BUG        永不修改</span><br><span class=\"line\">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"佛祖瘫痪\"><a href=\"#佛祖瘫痪\" class=\"headerlink\" title=\"佛祖瘫痪\"></a>佛祖瘫痪</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * _ooOoo_</span><br><span class=\"line\"> * o8888888o</span><br><span class=\"line\"> * 88&quot; . &quot;88</span><br><span class=\"line\"> * (| -_- |)</span><br><span class=\"line\"> *  O\\ &#x3D; &#x2F;O</span><br><span class=\"line\"> * ___&#x2F;&#96;---&#39;\\____</span><br><span class=\"line\"> * .   &#39; \\\\| |&#x2F;&#x2F; &#96;.</span><br><span class=\"line\"> * &#x2F; \\\\||| : |||&#x2F;&#x2F; \\</span><br><span class=\"line\"> * &#x2F; _||||| -:- |||||- \\</span><br><span class=\"line\"> * | | \\\\\\ - &#x2F;&#x2F;&#x2F; | |</span><br><span class=\"line\"> * | \\_| &#39;&#39;\\---&#x2F;&#39;&#39; | |</span><br><span class=\"line\"> * \\ .-\\__ &#96;-&#96; ___&#x2F;-. &#x2F;</span><br><span class=\"line\"> * ___&#96;. .&#39; &#x2F;--.--\\ &#96;. . __</span><br><span class=\"line\"> * .&quot;&quot; &#39;&lt; &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.</span><br><span class=\"line\"> * | | : &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |</span><br><span class=\"line\"> * \\ \\ &#96;-. \\_ __\\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;</span><br><span class=\"line\"> * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"> * &#96;&#x3D;---&#x3D;&#39;</span><br><span class=\"line\"> *          .............................................</span><br><span class=\"line\"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"神兽草泥马\"><a href=\"#神兽草泥马\" class=\"headerlink\" title=\"神兽草泥马\"></a>神兽草泥马</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     ┏┓　　　┏┓+ +</span><br><span class=\"line\">┏┛┻━━━┛┻┓ + +</span><br><span class=\"line\">┃　　　　　　　┃ 　</span><br><span class=\"line\">┃　　　━　　　┃ ++ + + +</span><br><span class=\"line\">████━████ ┃+</span><br><span class=\"line\">┃　　　　　　　┃ +</span><br><span class=\"line\">┃　　　┻　　　┃</span><br><span class=\"line\">┃　　　　　　　┃ + +</span><br><span class=\"line\">┗━┓　　　┏━┛</span><br><span class=\"line\">  ┃　　　┃　　　　　　　　　　　</span><br><span class=\"line\">  ┃　　　┃ + + + +</span><br><span class=\"line\">  ┃　　　┃　　　　Codes are far away from bugs with the animal protecting　　　</span><br><span class=\"line\">  ┃　　　┃ + 　　　　神兽保佑,代码无bug　　</span><br><span class=\"line\">  ┃　　　┃</span><br><span class=\"line\">  ┃　　　┃　　+　　　　　　　　　</span><br><span class=\"line\">  ┃　 　　┗━━━┓ + +</span><br><span class=\"line\">  ┃ 　　　　　　　┣┓</span><br><span class=\"line\">  ┃ 　　　　　　　┏┛</span><br><span class=\"line\">  ┗┓┓┏━┳┓┏┛ + + + +</span><br><span class=\"line\">   ┃┫┫　┃┫┫</span><br><span class=\"line\">   ┗┻┛　┗┻┛+ + + +</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"兔子\"><a href=\"#兔子\" class=\"headerlink\" title=\"兔子\"></a>兔子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**********&#x2F;**********&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;</span><br><span class=\"line\">  .--,       .--,</span><br><span class=\"line\"> ( (  \\.---.&#x2F;  ) )</span><br><span class=\"line\">  &#39;.__&#x2F;o   o\\__.&#39;</span><br><span class=\"line\">     &#123;&#x3D;  ^  &#x3D;&#125;</span><br><span class=\"line\">      &gt;  -  &lt;</span><br><span class=\"line\">     &#x2F;       \\</span><br><span class=\"line\">    &#x2F;&#x2F;       \\\\</span><br><span class=\"line\">   &#x2F;&#x2F;|   .   |\\\\</span><br><span class=\"line\">   &quot;&#39;\\       &#x2F;&#39;&quot;_.-~^&#96;&#39;-.</span><br><span class=\"line\">      \\  _  &#x2F;--&#39;         &#96;</span><br><span class=\"line\">    ___)( )(___</span><br><span class=\"line\">   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**********&#x2F;**********&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"顶\"><a href=\"#顶\" class=\"headerlink\" title=\"顶\"></a>顶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class=\"line\"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class=\"line\"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class=\"line\"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class=\"line\"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"妹子\"><a href=\"#妹子\" class=\"headerlink\" title=\"妹子\"></a>妹子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;                       .::::.</span><br><span class=\"line\">&#x2F;&#x2F;                     .::::::::.</span><br><span class=\"line\">&#x2F;&#x2F;                    :::::::::::</span><br><span class=\"line\">&#x2F;&#x2F;                 ..:::::::::::&#39;</span><br><span class=\"line\">&#x2F;&#x2F;              &#39;::::::::::::&#39;</span><br><span class=\"line\">&#x2F;&#x2F;                .::::::::::</span><br><span class=\"line\">&#x2F;&#x2F;           &#39;::::::::::::::..</span><br><span class=\"line\">&#x2F;&#x2F;                ..::::::::::::.</span><br><span class=\"line\">&#x2F;&#x2F;              &#96;&#96;::::::::::::::::</span><br><span class=\"line\">&#x2F;&#x2F;               ::::&#96;&#96;:::::::::&#39;        .:::.</span><br><span class=\"line\">&#x2F;&#x2F;              ::::&#39;   &#39;:::::&#39;       .::::::::.</span><br><span class=\"line\">&#x2F;&#x2F;            .::::&#39;      ::::     .:::::::&#39;::::.</span><br><span class=\"line\">&#x2F;&#x2F;           .:::&#39;       :::::  .:::::::::&#39; &#39;:::::.</span><br><span class=\"line\">&#x2F;&#x2F;          .::&#39;        :::::.:::::::::&#39;      &#39;:::::.</span><br><span class=\"line\">&#x2F;&#x2F;         .::&#39;         ::::::::::::::&#39;         &#96;&#96;::::.</span><br><span class=\"line\">&#x2F;&#x2F;     ...:::           ::::::::::::&#39;              &#96;&#96;::.</span><br><span class=\"line\">&#x2F;&#x2F;    &#96;&#96;&#96;&#96;&#39;:.          &#39;:::::::::&#39;                  ::::..</span><br><span class=\"line\">&#x2F;&#x2F;                       &#39;.:::::&#39;                    &#39;:&#39;&#96;&#96;&#96;&#96;..</span><br><span class=\"line\">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"神兽小龙\"><a href=\"#神兽小龙\" class=\"headerlink\" title=\"神兽小龙\"></a>神兽小龙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                                  __----~~~~~~~~~~~------___</span><br><span class=\"line\">                                 .  .   ~~//====......          __--~ ~~</span><br><span class=\"line\">                  -.            \\_|//     |||\\\\  ~~~~~~::::... /~</span><br><span class=\"line\">               ___-==_       _-~o~  \\/    |||  \\\\            _/~~-</span><br><span class=\"line\">       __---~~~.==~||\\=_    -_--~/_-~|-   |\\\\   \\\\        _/~</span><br><span class=\"line\">   _-~~     .=~    |  \\\\-_    <span class=\"string\">'-~7  /-   /  ||    \\      /</span></span><br><span class=\"line\"><span class=\"string\"> .~       .~       |   \\\\ -_    /  /-   /   ||      \\   /</span></span><br><span class=\"line\"><span class=\"string\">/  ____  /         |     \\\\ ~-_/  /|- _/   .||       \\ /</span></span><br><span class=\"line\"><span class=\"string\">|~~    ~~|--~~~~--_ \\     ~==-/   | \\~--===~~        .\\</span></span><br><span class=\"line\"><span class=\"string\">          '</span>         ~-|      /|    |-~\\~~       __--~~</span><br><span class=\"line\">                      |-~~-_/ |    |   ~\\_   _-~            /\\</span><br><span class=\"line\">                           /  \\     \\__   \\/~                \\__</span><br><span class=\"line\">                       _--~ _/ | .-~~____--~-/                  ~~==.</span><br><span class=\"line\">                      ((-&gt;/~   <span class=\"string\">'.|||'</span> -_|    ~~-/ ,              . _||</span><br><span class=\"line\">                                 -_     ~\\      ~~---l__i__i__i--~~_/</span><br><span class=\"line\">                                 _-~-__   ~)  \\--______________--~~</span><br><span class=\"line\">                               //.-~~~-~_--~- |-------~~~~~~~~</span><br><span class=\"line\">                                      //.-~~~--\\</span><br><span class=\"line\"></span><br><span class=\"line\">                                神兽保佑   代码无BUG!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"电脑\"><a href=\"#电脑\" class=\"headerlink\" title=\"电脑\"></a>电脑</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     ,----------------,              ,---------,</span><br><span class=\"line\">        ,-----------------------,          ,&quot;        ,&quot;|</span><br><span class=\"line\">      ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |</span><br><span class=\"line\">     +-----------------------+  |      ,&quot;        ,&quot;    |</span><br><span class=\"line\">     |  .-----------------.  |  |     +---------+      |</span><br><span class=\"line\">     |  |                 |  |  |     | -&#x3D;&#x3D;----&#39;|      |</span><br><span class=\"line\">     |  |  I LOVE DOS!    |  |  |     |         |      |</span><br><span class=\"line\">     |  |  Bad command or |  |  |&#x2F;----|&#96;---&#x3D;    |      |</span><br><span class=\"line\">     |  |  C:\\&gt;_          |  |  |   ,&#x2F;|&#x3D;&#x3D;&#x3D;&#x3D; ooo |      ;</span><br><span class=\"line\">     |  |                 |  |  |  &#x2F;&#x2F; |(((( [33]|    ,&quot;</span><br><span class=\"line\">     |  &#96;-----------------&#39;  |,&quot; .;&#39;| |((((     |  ,&quot;</span><br><span class=\"line\">     +-----------------------+  ;;  | |         |,&quot;</span><br><span class=\"line\">        &#x2F;_)______________(_&#x2F;  &#x2F;&#x2F;&#39;   | +---------+</span><br><span class=\"line\">   ___________________________&#x2F;___  &#96;,</span><br><span class=\"line\">  &#x2F;  oooooooooooooooo  .o.  oooo &#x2F;,   \\,&quot;-----------</span><br><span class=\"line\"> &#x2F; &#x3D;&#x3D;ooooooooooooooo&#x3D;&#x3D;.o.  ooo&#x3D; &#x2F;&#x2F;   ,&#96;\\--&#123;)B     ,&quot;</span><br><span class=\"line\">&#x2F;_&#x3D;&#x3D;__&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;__&#x3D;&#x3D;_ooo__ooo&#x3D;_&#x2F;&#39;   &#x2F;___________,&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span><br><span class=\"line\">            __.&#39;              ~.   .~              &#96;.__</span><br><span class=\"line\">          .&#39;&#x2F;&#x2F;                  \\.&#x2F;                  \\\\&#96;.</span><br><span class=\"line\">        .&#39;&#x2F;&#x2F;                     |                     \\\\&#96;.</span><br><span class=\"line\">      .&#39;&#x2F;&#x2F; .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\\\&#96;.</span><br><span class=\"line\">    .&#39;&#x2F;&#x2F;.-&quot;                 &#96;-.  |  .-&#39;                 &quot;-.\\\\&#96;.</span><br><span class=\"line\">  .&#39;&#x2F;&#x2F;______.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-..   \\ | &#x2F;   ..-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;.______\\\\&#96;.</span><br><span class=\"line\">.&#39;______________________________\\|&#x2F;______________________________&#96;.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"键盘\"><a href=\"#键盘\" class=\"headerlink\" title=\"键盘\"></a>键盘</h4><p>宽度有点窄，变形了……</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class=\"line\"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P&#x2F;S│S L│P&#x2F;B│  ┌┐    ┌┐    ┌┐</span><br><span class=\"line\"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class=\"line\"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class=\"line\"> * │~ &#96;│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ &#x3D;│ BacSp │ │Ins│Hom│PUp│ │N L│ &#x2F; │ * │ - │</span><br><span class=\"line\"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class=\"line\"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class=\"line\"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class=\"line\"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class=\"line\"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class=\"line\"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? &#x2F;│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class=\"line\"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class=\"line\"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class=\"line\"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"剪刀手\"><a href=\"#剪刀手\" class=\"headerlink\" title=\"剪刀手\"></a>剪刀手</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                      d*<span class=\"comment\">##$.</span></span><br><span class=\"line\"> zP<span class=\"string\">\"\"</span><span class=\"string\">\"\"</span><span class=\"string\">\"<span class=\"variable\">$e</span>.           $\"</span>    <span class=\"variable\">$o</span></span><br><span class=\"line\">4$       <span class=\"string\">'$          $\"      $</span></span><br><span class=\"line\"><span class=\"string\">'</span>$        <span class=\"string\">'$        J$       $F</span></span><br><span class=\"line\"><span class=\"string\"> '</span>b        <span class=\"variable\">$k</span>       $&gt;       $</span><br><span class=\"line\">  <span class=\"variable\">$k</span>        <span class=\"variable\">$r</span>     J$       d$</span><br><span class=\"line\">  <span class=\"string\">'$         $     $\"       $~</span></span><br><span class=\"line\"><span class=\"string\">   '</span>$        <span class=\"string\">\"$   '<span class=\"variable\">$E</span>       $</span></span><br><span class=\"line\"><span class=\"string\">    $         <span class=\"variable\">$L</span>   $\"</span>      <span class=\"variable\">$F</span> ...</span><br><span class=\"line\">     $.       4B   $      $$$*<span class=\"string\">\"\"</span><span class=\"string\">\"*b</span></span><br><span class=\"line\"><span class=\"string\">    '$        $.  $$     $$      <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">      \"</span>$       R$  <span class=\"variable\">$F</span>     $<span class=\"string\">\"      $</span></span><br><span class=\"line\"><span class=\"string\">       <span class=\"variable\">$k</span>      ?$ u*     dF      .$</span></span><br><span class=\"line\"><span class=\"string\">       ^$.      $$\"</span>     z$      u$$$<span class=\"variable\">$e</span></span><br><span class=\"line\">       <span class=\"comment\">#$b             $E.dW@e$\"    ?$</span></span><br><span class=\"line\">         <span class=\"comment\">#$           .o$$# d$$$$c    ?F</span></span><br><span class=\"line\">         $      .d$<span class=\"variable\">$#</span><span class=\"string\">\" . zo$&gt;   #<span class=\"variable\">$r</span> .uF</span></span><br><span class=\"line\"><span class=\"string\">          <span class=\"variable\">$L</span> .u$*\"</span>      $&amp;$$<span class=\"variable\">$k</span>   .$<span class=\"variable\">$d</span>$<span class=\"variable\">$F</span></span><br><span class=\"line\">           $$<span class=\"string\">\"            \"</span><span class=\"string\">\"^\"</span>$$<span class=\"variable\">$P</span><span class=\"string\">\"<span class=\"variable\">$P9</span>$</span></span><br><span class=\"line\"><span class=\"string\">          JP              .o$$$<span class=\"variable\">$u</span>:<span class=\"variable\">$P</span> $$</span></span><br><span class=\"line\"><span class=\"string\">          $          ..ue$\"</span>      <span class=\"string\">\"\"</span>  $<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">         d$          <span class=\"variable\">$F</span>              $</span></span><br><span class=\"line\"><span class=\"string\">         $$     ....udE             4B</span></span><br><span class=\"line\"><span class=\"string\">          #$    \"</span><span class=\"string\">\"\"</span><span class=\"string\">\"` <span class=\"variable\">$r</span>            @$</span></span><br><span class=\"line\"><span class=\"string\">           ^<span class=\"variable\">$L</span>        '$            <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">             RN        4N           $</span></span><br><span class=\"line\"><span class=\"string\">              *<span class=\"variable\">$b</span>                  d$</span></span><br><span class=\"line\"><span class=\"string\">               $<span class=\"variable\">$k</span>                 <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">               $<span class=\"variable\">$b</span>                <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">                 $\"</span><span class=\"string\">\"               <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">                 '$                $</span></span><br><span class=\"line\"><span class=\"string\">                  <span class=\"variable\">$L</span>               $</span></span><br><span class=\"line\"><span class=\"string\">                  '$               $</span></span><br><span class=\"line\"><span class=\"string\">                   $               $</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"龙图腾\"><a href=\"#龙图腾\" class=\"headerlink\" title=\"龙图腾\"></a>龙图腾</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......................................&amp;&amp;.........................</span><br><span class=\"line\">....................................&amp;&amp;&amp;..........................</span><br><span class=\"line\">.................................&amp;&amp;&amp;&amp;............................</span><br><span class=\"line\">...............................&amp;&amp;&amp;&amp;..............................</span><br><span class=\"line\">.............................&amp;&amp;&amp;&amp;&amp;&amp;..............................</span><br><span class=\"line\">...........................&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;........</span><br><span class=\"line\">..................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............</span><br><span class=\"line\">................&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................</span><br><span class=\"line\">.......................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........</span><br><span class=\"line\">...................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...............</span><br><span class=\"line\">..................&amp;&amp;&amp;   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">...............&amp;&amp;&amp;&amp;&amp;@  &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........</span><br><span class=\"line\">..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.&amp;&amp;....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;.........</span><br><span class=\"line\">..........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;........</span><br><span class=\"line\">........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;.......</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;......</span><br><span class=\"line\">........&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.............</span><br><span class=\"line\">..........&amp;...................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">..................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">...........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;......&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;...............&amp;&amp;&amp;.............</span><br><span class=\"line\">.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............................&amp;&amp;..............</span><br><span class=\"line\">....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;...........................</span><br><span class=\"line\">...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;......................</span><br><span class=\"line\">...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.&amp;&amp;&amp;........................&amp;&amp;&amp;&amp;&amp;...................</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;..........................&amp;&amp;&amp;&amp;&amp;&amp;&amp;...............</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;............&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;.............</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........</span><br><span class=\"line\">..&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.......</span><br><span class=\"line\">...&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;......</span><br><span class=\"line\">....&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;....</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;..........&amp;&amp;&amp;&amp;&amp;&amp;....</span><br><span class=\"line\">........&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;..&amp;&amp;&amp;&amp;...</span><br><span class=\"line\">.......&amp;&amp;&amp;........&amp;&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;&amp;&amp;...</span><br><span class=\"line\">.......&amp;&amp;&amp;...............&amp;&amp;&amp;&amp;&amp;&amp;&amp;.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............&amp;&amp;&amp;...</span><br><span class=\"line\">........&amp;&amp;...................&amp;&amp;&amp;&amp;&amp;&amp;.........................&amp;&amp;&amp;..</span><br><span class=\"line\">.........&amp;.....................&amp;&amp;&amp;&amp;........................&amp;&amp;....</span><br><span class=\"line\">...............................&amp;&amp;&amp;.......................&amp;&amp;......</span><br><span class=\"line\">................................&amp;&amp;......................&amp;&amp;.......</span><br><span class=\"line\">.................................&amp;&amp;..............................</span><br><span class=\"line\">..................................&amp;..............................</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七章：问题汇总\"><a href=\"#第七章：问题汇总\" class=\"headerlink\" title=\"第七章：问题汇总\"></a>第七章：问题汇总</h2><h3 id=\"1-禁止使用sudo-yum-update\"><a href=\"#1-禁止使用sudo-yum-update\" class=\"headerlink\" title=\"1. 禁止使用sudo yum update\"></a>1. 禁止使用sudo yum update</h3><p>起因是服务器更新了内核，CentOS从7.6升级到了7.7，输入<code>nvidia-smi</code>提示</p>\n<blockquote>\n<p>NVIDIA NVML Driver/library version mismatch</p>\n</blockquote>\n<p>在终端输入以下命令查看nvidia的kernel模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nvidia</span><br></pre></td></tr></table></figure>\n\n<p>什么都没有。</p>\n<p>接着查看显卡驱动所使用的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>Nothing！</p>\n<p>再查看nvcc编译器的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<p>提示：<strong>bash: nvcc: 未找到命令…</strong></p>\n<p>Nothing is everywhere！可能只能去现场启动<strong>重启大法</strong>了。</p>\n<ul>\n<li><p><strong>Notice：</strong></p>\n<p>如果运行<code>lsmod | grep nvidia</code>出现了类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia_uvm 634880 8</span><br><span class=\"line\">nvidia_drm 53248 0</span><br><span class=\"line\">nvidia_modeset 790528 1 nvidia_drm</span><br><span class=\"line\">nvidia 12312576 86 nvidia_modeset,nvidia_uvm</span><br></pre></td></tr></table></figure>\n\n<p>这样的输出，则先<strong>关闭相关的进程</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rmmod nvidia_uvm</span><br><span class=\"line\">sudo rmmod nvidia_modeset</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rmmod nvidia</span><br><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>此时可能会出现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NVIDIA-SMI has failed because it couldn<span class=\"string\">'t communicate with the NVIDIA driver</span></span><br></pre></td></tr></table></figure>\n\n<p>再看看<strong>NVIDIA显卡状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n\n<p>输出（查看集成显卡的命令是<code>lspci | grep -i VGA</code>）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)</span><br><span class=\"line\">04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure>\n\n<p>正常。</p>\n<p><strong>查看系统依赖</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info dkms</span><br><span class=\"line\">yum info libvdpau </span><br><span class=\"line\">yum info kernel-devel</span><br></pre></td></tr></table></figure>\n\n<p>都已安装，若没有安装，执行<code>sudo yum install packages</code>，<code>packages</code>指的是缺省的包。</p>\n<p><strong>为内核安装NVIDIA模块</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dkms status</span><br></pre></td></tr></table></figure>\n\n<p>是否有输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/</span><br></pre></td></tr></table></figure>\n\n<p>看看NVIDIA有哪些版本，选择其中一个进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dkms install -m nvidia -v xxx.xx     // xxx.xx为/usr/src/下的NVIDIA的版本号</span><br></pre></td></tr></table></figure>\n\n<p>如果有多个版本，则挨个试试……</p>\n<p>非必要情况下，不要重启。</p>\n<p>继续尝试<code>nvidia-smi</code>命令，如果依旧不正常，继续探索。</p>\n</li>\n</ul>\n<h3 id=\"2-ImportError-libcublas-so-9-0\"><a href=\"#2-ImportError-libcublas-so-9-0\" class=\"headerlink\" title=\"2. ImportError: libcublas.so.9.0\"></a>2. ImportError: libcublas.so.9.0</h3><ul>\n<li><p><strong>错误</strong>——激活环境后，导入<code>import tensorflow as tf</code>包后，出现错误</p>\n<blockquote>\n<p>ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量<code>LD_LIBRARY_PATH</code>未能配置正确</p>\n</li>\n<li><p><strong>解决</strong>——<code>libcublas.so.9.0</code>文件在<code>/usr/local/cuda/lib64</code>路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ldconfig /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>\n\n<p>问题可能会被解决，如果出现了<strong>情况2</strong>，请看解答。</p>\n</li>\n</ul>\n<h3 id=\"3-libcublas-so-9-0-cannot-open-shared-object-file\"><a href=\"#3-libcublas-so-9-0-cannot-open-shared-object-file\" class=\"headerlink\" title=\"3. libcublas.so.9.0: cannot open shared object file\"></a>3. libcublas.so.9.0: cannot open shared object file</h3><ul>\n<li><p><strong>错误</strong>——运行<strong>情况1</strong>里的<code>sudo ldconfig /usr/local/cuda/lib64</code>后，出现错误</p>\n<blockquote>\n<p>libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——符号链接出错</p>\n</li>\n<li><p><strong>解决</strong>——创建软链接，将<code>libcudnn.so.7.0.5</code>软连接到<code>libcudnn.so.7</code>，如果<code>libcudnn.so.7.0.5</code>丢失，<code>libcudnn.so.7</code>将失效，<code>-s</code>表示建立软连接，<code>-f</code>表示强制执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sf /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"4-安装PyTorch时中断安装\"><a href=\"#4-安装PyTorch时中断安装\" class=\"headerlink\" title=\"4. 安装PyTorch时中断安装\"></a>4. 安装PyTorch时中断安装</h3><ul>\n<li><p><strong>错误</strong>——在安装PyTorch过程中出现类似的错误</p>\n<blockquote>\n<p>CondaHTTPError: HTTP 000 CONNECTION FAILED for url <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2</a><br>Elapsed: -</p>\n<p>An HTTP error occurred when trying to retrieve this URL.<br>HTTP errors are often intermittent, and a simple retry will get you on your way.</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——网络原因</p>\n</li>\n<li><p><strong>解决</strong>——<a href=\"#配置Anaconda国内开源镜像\">更换Anaconda源</a>或者继续尝试安装命令。</p>\n</li>\n</ul>\n<p>（未完待续，随时更新）</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://blog.csdn.net/ksws0292756/article/details/80120561?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\">stat cuda</a></li>\n<li><a href=\"https://blog.csdn.net/Hungryof/article/details/99233087?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2\">NVIDIA NVML Driver/library version mismatch</a></li>\n<li><a href=\"https://gist.github.com/fxrcode/0afa3c8db13f0ae0b427bb6ddc44adf4\">NVIDIA driver</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42451919/article/details/89400365\">NVIDIA驱动安装</a></li>\n<li><a href=\"https://qinqianshan.com/unix/linux/nvidia/\">https://qinqianshan.com/unix/linux/nvidia/</a></li>\n<li><a href=\"https://dinghow.site/2019/05/19/cuda-cuDNN-version/\">CUDA和cuDNN版本切换</a></li>\n<li><a href=\"https://oldpan.me/archives/cuda-cuDNN-multiple-edition\">切换GCC</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/35834028\">CUDA切换</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>搭建和配置<strong>深度学习环境</strong>、<strong>Matlab环境</strong>，普通用户可以自由切换多版本CUDA、cuDNN版本，自由组合创建不同版本的Tensorflow、PyTorch等深度学习环境。</p>\n<p>注意：标题右上角带有”<strong>***”标记的，意为这一部分内容需要</strong>管理员**操作。</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>[toc]</p>\n<h2 id=\"安装计划\"><a href=\"#安装计划\" class=\"headerlink\" title=\"安装计划\"></a>安装计划</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 服务器系统</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> NVIDIA驱动安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> CUDA安装：9.0、9.1、9.2、10.0、10.1、10.2</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> cuDNN安装：7.0.5、7.4、7.6</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> SSH远程登录及文件传输</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Aanconda安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> OpenCV安装（pip）</li>\n<li><input disabled=\"\" type=\"checkbox\"> Opencv源码编译</li>\n<li><input disabled=\"\" type=\"checkbox\"> GCC安装：4.8.5、7.3.1</li>\n<li><input disabled=\"\" type=\"checkbox\"> MatLab安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Anaconda安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Tensorflow各个版本的安装</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> PyTorch各个版本的安装</li>\n<li><input disabled=\"\" type=\"checkbox\"> Torch各个版本的安装</li>\n<li><input disabled=\"\" type=\"checkbox\"> Caffe安装</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用 <strong>Environment Module</strong> 管理不同版本的软件</li>\n</ul>\n<h2 id=\"第一章：服务器情况简介\"><a href=\"#第一章：服务器情况简介\" class=\"headerlink\" title=\"第一章：服务器情况简介\"></a>第一章：服务器情况简介</h2><h3 id=\"查看系统硬件设备信息\"><a href=\"#查看系统硬件设备信息\" class=\"headerlink\" title=\"查看系统硬件设备信息\"></a>查看系统硬件设备信息</h3><p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dmidecode | more</span><br></pre></td></tr></table></figure>\n\n<p>查看服务器硬件设备信息，包括<strong>BIOS信息（BIOS Information）</strong>、<strong>服务器信息（System Information）</strong>、<strong>CPU信息（Processor Information）</strong>、<strong>缓存信息（Cache Information）</strong>、<strong>内存信息（Physical Memory Array）</strong>、<strong>电源信息（System Power Supply）</strong>、<strong>内存设备（Memory Device）</strong>等。</p>\n<p>服务器型号为<a href=\"https://www.dell.com/zh-cn/work/shop/povw/poweredge-r730\">Dell R730</a>，有两个显卡插槽，原机无显卡。2018年7月，在服务器上安装了一块GPU，型号为GTX 1080（<code>lspci | grep -i nvidia</code>），显存8G。</p>\n<h3 id=\"查看系统CPU\"><a href=\"#查看系统CPU\" class=\"headerlink\" title=\"查看系统CPU\"></a>查看系统CPU</h3><p><strong>查看CPU的统计信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lscpu</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Architecture:          x86_64</span><br><span class=\"line\">CPU op-mode(s):        32-bit, 64-bit</span><br><span class=\"line\">Byte Order:            Little Endian</span><br><span class=\"line\">CPU(s):                6</span><br><span class=\"line\">On-line CPU(s) list:   0-5</span><br><span class=\"line\">Thread(s) per core:    1</span><br><span class=\"line\">Core(s) per socket:    6</span><br><span class=\"line\">座：                 1</span><br><span class=\"line\">NUMA 节点：         1</span><br><span class=\"line\">厂商 ID：           GenuineIntel</span><br><span class=\"line\">CPU 系列：          6</span><br><span class=\"line\">型号：              79</span><br><span class=\"line\">型号名称：        Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz</span><br><span class=\"line\">步进：              1</span><br><span class=\"line\">CPU MHz：             1200.085</span><br><span class=\"line\">CPU max MHz:           1700.0000</span><br><span class=\"line\">CPU min MHz:           1200.0000</span><br><span class=\"line\">BogoMIPS：            3400.03</span><br><span class=\"line\">虚拟化：           VT-x</span><br><span class=\"line\">L1d 缓存：          32K</span><br><span class=\"line\">L1i 缓存：          32K</span><br><span class=\"line\">L2 缓存：           256K</span><br><span class=\"line\">L3 缓存：           15360K</span><br><span class=\"line\">NUMA 节点0 CPU：    0-5</span><br><span class=\"line\">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm arat pln pts</span><br></pre></td></tr></table></figure>\n\n<p>查看每个CPU信息，如每个CPU的型号，主频等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure>\n\n<p>运行命令查看CPU型号，为<strong>Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz</strong>。</p>\n<h3 id=\"查看内存\"><a href=\"#查看内存\" class=\"headerlink\" title=\"查看内存\"></a>查看内存</h3><p>查看内存使用量和交换区使用量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n\n<p>查看内存详细情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/meminfo    // 或者vmstat -s</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MemTotal:       40779120 kB</span><br><span class=\"line\">MemFree:          323944 kB</span><br><span class=\"line\">MemAvailable:   38162436 kB</span><br><span class=\"line\">Buffers:         1284976 kB</span><br><span class=\"line\">Cached:         36028884 kB</span><br><span class=\"line\">SwapCached:            0 kB</span><br><span class=\"line\">Active:         19560888 kB</span><br><span class=\"line\">Inactive:       18538364 kB</span><br><span class=\"line\">Active(anon):    1214532 kB</span><br><span class=\"line\">Inactive(anon):   270932 kB</span><br><span class=\"line\">Active(file):   18346356 kB</span><br><span class=\"line\">Inactive(file): 18267432 kB</span><br><span class=\"line\">Unevictable:           0 kB</span><br><span class=\"line\">Mlocked:               0 kB</span><br><span class=\"line\">SwapTotal:             0 kB</span><br><span class=\"line\">SwapFree:              0 kB</span><br><span class=\"line\">Dirty:                 0 kB</span><br><span class=\"line\">Writeback:             0 kB</span><br><span class=\"line\">AnonPages:        785432 kB</span><br><span class=\"line\">Mapped:           139012 kB</span><br><span class=\"line\">Shmem:            700072 kB</span><br><span class=\"line\">Slab:            1861424 kB</span><br><span class=\"line\">SReclaimable:    1663764 kB</span><br><span class=\"line\">SUnreclaim:       197660 kB</span><br><span class=\"line\">KernelStack:        9504 kB</span><br><span class=\"line\">PageTables:        17908 kB</span><br><span class=\"line\">NFS_Unstable:          0 kB</span><br><span class=\"line\">Bounce:                0 kB</span><br><span class=\"line\">WritebackTmp:          0 kB</span><br><span class=\"line\">CommitLimit:    20389560 kB</span><br><span class=\"line\">Committed_AS:    3160860 kB</span><br><span class=\"line\">VmallocTotal:   34359738367 kB</span><br><span class=\"line\">VmallocUsed:      443080 kB</span><br><span class=\"line\">VmallocChunk:   34358900732 kB</span><br><span class=\"line\">HardwareCorrupted:     0 kB</span><br><span class=\"line\">AnonHugePages:     36864 kB</span><br><span class=\"line\">CmaTotal:              0 kB</span><br><span class=\"line\">CmaFree:               0 kB</span><br><span class=\"line\">HugePages_Total:       0</span><br><span class=\"line\">HugePages_Free:        0</span><br><span class=\"line\">HugePages_Rsvd:        0</span><br><span class=\"line\">HugePages_Surp:        0</span><br><span class=\"line\">Hugepagesize:       2048 kB</span><br><span class=\"line\">DirectMap4k:    38408912 kB</span><br><span class=\"line\">DirectMap2M:     3305472 kB</span><br><span class=\"line\">DirectMap1G:     2097152 kB</span><br></pre></td></tr></table></figure>\n\n<p>原机内存大小为8G，在2018年7月，扩展到40G，实际上不到40G，为38.8G左右。</p>\n<h3 id=\"磁盘信息\"><a href=\"#磁盘信息\" class=\"headerlink\" title=\"磁盘信息\"></a>磁盘信息</h3><p><strong>查看硬盘和分区分布</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">sda                      8:0    0   5.5T  0 disk </span><br><span class=\"line\">├─sda1                   8:1    0   476M  0 part /boot</span><br><span class=\"line\">├─sda2                   8:2    0    61M  0 part </span><br><span class=\"line\">├─sda3                   8:3    0    64M  0 part /boot/efi</span><br><span class=\"line\">├─sda4                   8:4    0   1.4T  0 part /home</span><br><span class=\"line\">├─sda5                   8:5    0   3.6T  0 part </span><br><span class=\"line\">│ ├─VolGroup0-datavol0 253:2    0     1T  0 lvm  /mnt/vdisk0</span><br><span class=\"line\">│ ├─VolGroup0-datavol1 253:3    0     1T  0 lvm  /mnt/vdisk1</span><br><span class=\"line\">│ ├─VolGroup0-datavol2 253:4    0     1T  0 lvm  /mnt/vdisk2</span><br><span class=\"line\">│ └─VolGroup0-datavol3 253:5    0   540G  0 lvm  /mnt/vdisk3</span><br><span class=\"line\">└─sda6                   8:6    0 474.5G  0 part </span><br><span class=\"line\">  ├─centos-root        253:0    0   400G  0 lvm  /</span><br><span class=\"line\">  └─centos-swap        253:1    0  74.5G  0 lvm  </span><br><span class=\"line\">sr0                     11:0    1  1024M  0 rom  </span><br><span class=\"line\">loop0                    7:0    0  14.4G  0 loop /mnt/iso</span><br></pre></td></tr></table></figure>\n\n<p>可以看到目前服务器上的磁盘结构。<strong>如果重装系统，<code>/home</code>（sda4）可以保留，新系统在安装时，不必要再分/home区。直接将旧系统的/home挂载到新系统上即可。</strong></p>\n<p><strong>目前磁盘已采用LVM技术</strong>。</p>\n<blockquote>\n<p>LVM是（Logical Volume Manager) 逻辑卷管理的简写，它是Linux环境下对磁盘分区进行管理的一种机制。LVM是建立在硬盘和分区之上的一个逻辑层，屏蔽了底层磁盘布局，便于动态调整磁盘容量来提高磁盘分区管理的灵活性。它可以将一个或多个底层块设备组织成一个逻辑设备的卷组，管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统，管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配 。</p>\n</blockquote>\n<p><strong>查看更详细的信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看各分区使用情况</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务器系统信息\"><a href=\"#查看服务器系统信息\" class=\"headerlink\" title=\"查看服务器系统信息\"></a>查看服务器系统信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/*releasebash</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></span><br><span class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></span><br><span class=\"line\">ID=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></span><br><span class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></span><br><span class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></span><br><span class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></span><br><span class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></span><br><span class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=<span class=\"string\">\"CentOS-7\"</span></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br></pre></td></tr></table></figure>\n\n<p>系统为CentOS 7.7。</p>\n<p><strong>查看系统主机名</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看网卡\"><a href=\"#查看网卡\" class=\"headerlink\" title=\"查看网卡\"></a>查看网卡</h3><p><strong>查看网卡硬件信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i <span class=\"string\">'eth'</span></span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br><span class=\"line\">01:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br><span class=\"line\">02:00.0 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br><span class=\"line\">02:00.1 Ethernet controller: Broadcom Inc. and subsidiaries NetXtreme BCM5720 2-port Gigabit Ethernet PCIe</span><br></pre></td></tr></table></figure>\n\n<p><strong>查查看系统的所有网络接口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig -a</span><br></pre></td></tr></table></figure>\n\n<p>可以看到连接网络的那个端口，假设是em2，可以查看该端口的IPV4、IPV6、子网掩码等信息。如果要详细查看如果某个网络接口的详细信息，比如em2的详细参数和指标</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ethtool em2</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings <span class=\"keyword\">for</span> em2:</span><br><span class=\"line\">    Supported ports: [ TP MII ]</span><br><span class=\"line\">    Supported link modes:   10baseT/Half 10baseT/Full </span><br><span class=\"line\">                            100baseT/Half 100baseT/Full </span><br><span class=\"line\">                            1000baseT/Half 1000baseT/Full <span class=\"comment\"># 支持千兆半双工，全双工模式</span></span><br><span class=\"line\">    Supported pause frame use: No </span><br><span class=\"line\">    Supports auto-negotiation: Yes <span class=\"comment\"># 支持自适应模式，一般都支持</span></span><br><span class=\"line\">    Advertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">                            100baseT/Half 100baseT/Full </span><br><span class=\"line\">                            1000baseT/Half 1000baseT/Full</span><br><span class=\"line\">    Advertised pause frame use: Symmetric</span><br><span class=\"line\">    Advertised auto-negotiation: Yes <span class=\"comment\"># 默认使用自适应模式</span></span><br><span class=\"line\">    Advertised FEC modes: Not reported</span><br><span class=\"line\">    Link partner advertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">                                         100baseT/Half 100baseT/Full </span><br><span class=\"line\">                                         1000baseT/Full</span><br><span class=\"line\">    Link partner advertised pause frame use: No</span><br><span class=\"line\">\tLink partner advertised auto-negotiation: Yes</span><br><span class=\"line\">\tLink partner advertised FEC modes: Not reported</span><br><span class=\"line\">    Speed: 1000Mb/s <span class=\"comment\"># 现在网卡的速度是1000Mb</span></span><br><span class=\"line\">    Duplex: Full   <span class=\"comment\"># 全双工</span></span><br><span class=\"line\">    .....</span><br><span class=\"line\">    Link detected: yes    <span class=\"comment\"># 表示有网线连接，和路由是通的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查看显示去往192.168.1.102的所有HTTP会话信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -ni em1 <span class=\"string\">'dst 192.168.1.102 and tcp and port 8080'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>显示来源IP或者目的IP为192.168.1.102的网络通信</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -i eth0 host 192.168.1.102</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看路由器列表</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route -n</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看所有监听端口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lntp</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看所有已经建立的连接</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -antp</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看网络统计信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p><strong>查看系统所有进程</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef</span><br></pre></td></tr></table></figure>\n\n<p><strong>显示所有进程的详细信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux</span><br></pre></td></tr></table></figure>\n\n<p><strong>显示某一用户的进程列表</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -f -u username</span><br></pre></td></tr></table></figure>\n\n<p><strong>实时显示进程状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>退出</p>\n<p><strong>列出当前的进程，以及它们的树状结构</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree</span><br></pre></td></tr></table></figure>\n\n<p><strong>结束进程</strong>，PID为Process ID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> PID</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看系统信号变量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -l</span><br></pre></td></tr></table></figure>\n\n<p>事实上，还有一个比较酷炫的命令是<code>htop</code>，安装方法是<code>sudo yum install htop</code>，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htop</span><br></pre></td></tr></table></figure>\n\n<p><strong>遇到顽固的进程，使出必杀技</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 PID</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s4.aconvert.com/convert/p3r68-cdx67/a6yfe-e7t35.png\" alt=\"\"></p>\n<h3 id=\"资源统计\"><a href=\"#资源统计\" class=\"headerlink\" title=\"资源统计\"></a>资源统计</h3><p><strong>查看当前目录大小</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看系统运行时间、用户数、负载</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统常用指令集合\"><a href=\"#系统常用指令集合\" class=\"headerlink\" title=\"系统常用指令集合\"></a>系统常用指令集合</h3><h4 id=\"cpu-sh-—-CPU统计信息指令\"><a href=\"#cpu-sh-—-CPU统计信息指令\" class=\"headerlink\" title=\"cpu.sh — CPU统计信息指令\"></a>cpu.sh — CPU统计信息指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 限制某个线程的cpu使用率</span></span><br><span class=\"line\">sudo cpulimit -p pid -l 50</span><br><span class=\"line\">ps -eo %cpu,args | grep -m1 PROCESS | awk <span class=\"string\">'&#123;print $1&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前进程按照memory和cpu排序</span></span><br><span class=\"line\">ps aux --sort=%mem,%cpu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照cpu使用率排序</span></span><br><span class=\"line\">ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed <span class=\"string\">\"/^ 0.0 /d\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统的物理cpu个数</span></span><br><span class=\"line\">grep <span class=\"string\">\"processor\"</span> /proc/cpuinfo | wc -l\t</span><br><span class=\"line\">grep -c -e <span class=\"string\">'^cpu[0-9]\\+'</span> /proc/<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前cpu型号</span></span><br><span class=\"line\">grep <span class=\"string\">\"model name\"</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前cpu信息</span></span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统的位数</span></span><br><span class=\"line\">grep -q <span class=\"string\">'\\&lt;lm\\&gt;'</span> /proc/cpuinfo &amp;&amp; <span class=\"built_in\">echo</span> 64 bits || <span class=\"built_in\">echo</span> 32 bits</span><br><span class=\"line\">getconf LONG_BIT | grep <span class=\"string\">'64'</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统的cpu频率</span></span><br><span class=\"line\">awk -F<span class=\"string\">\": \"</span> <span class=\"string\">'/cpu MHz\\ */ &#123; print \"Processor (or core) running speed is: \" $2 &#125;'</span> /proc/cpuinfo ; dmidecode | awk -F<span class=\"string\">\": \"</span> <span class=\"string\">'/Current Speed/ &#123; print \"Processor real speed is: \" $2 &#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每个cpu每个进程的cpu使用率</span></span><br><span class=\"line\">ps ax -L -o pid,tid,psr,pcpu,args | sort -nr -k4| head -15 | cut -c 1-90</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前中断</span></span><br><span class=\"line\">cat /proc/interrupts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看多个处理器的使用率相关信息</span></span><br><span class=\"line\">mpstat –P ALL 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个物理CPU中Core的个数：</span></span><br><span class=\"line\">cat /proc/cpuinfo | grep <span class=\"string\">\"cpu cores\"</span> | uniq | awk -F: <span class=\"string\">'&#123;print $2&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否为超线程？</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有两个逻辑CPU具有相同的”core id”，那么超线程是打开的。</span></span><br><span class=\"line\"><span class=\"comment\"># 每个物理CPU中逻辑CPU(可能是core, threads或both)的个数：</span></span><br><span class=\"line\">cat /proc/cpuinfo | grep <span class=\"string\">\"siblings\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /proc/stat 文件中有一行记录的机器从启动依赖，各个中断序号发生中断的次数。</span></span><br><span class=\"line\"><span class=\"comment\"># 这一行以intr开头，接下来的第一个数字是总的中断数目，之后就是分别的中断数目，从0开始。</span></span><br><span class=\"line\">cat /proc/<span class=\"built_in\">stat</span>  | grep intr</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"disk-sh-—-磁盘相关统计指令\"><a href=\"#disk-sh-—-磁盘相关统计指令\" class=\"headerlink\" title=\"disk.sh — 磁盘相关统计指令\"></a>disk.sh — 磁盘相关统计指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照目录大小排序战士最前面15个目录或者文件</span></span><br><span class=\"line\">du -xB M --max-depth=2 /var | sort -rn | head -n 15</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前所有子目录的文件大小</span></span><br><span class=\"line\">du -h --max-depth=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前文件或者目录最大的10个</span></span><br><span class=\"line\">du -s * | sort -n | tail</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照目录大小从大到小排序</span></span><br><span class=\"line\">du -b --max-depth 1 | sort -nr | perl -pe <span class=\"string\">'s&#123;([0-9]+)&#125;&#123;sprintf \"%.1f%s\", 1&gt;=2∗∗30?(1/2**30, \"G\"): 1&gt;=2∗∗20?(1/2**20, \"M\"): 1&gt;=2∗∗10?(1/2**10, \"K\"): ($1, \"\")&#125;e'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出path这个目录的文件树</span></span><br><span class=\"line\">du -h /path | sort -h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每隔60s监控对应目录的文件大小变化</span></span><br><span class=\"line\">watch -n60 du /var/<span class=\"built_in\">log</span>/messages</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归删除当前目录下所有子目录中的.svn目录</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> d -name <span class=\"string\">'.svn'</span> -print0 | xargs -0 rm -rdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前磁盘的使用情况</span></span><br><span class=\"line\">df -P | column -t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控磁盘的使用情况</span></span><br><span class=\"line\">watch -d -n 5 df</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前inode的使用情况</span></span><br><span class=\"line\">df -i  &lt;partition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按照每个磁盘使用量从高到低排序</span></span><br><span class=\"line\">df -h | grep -v ^none | ( <span class=\"built_in\">read</span> header ; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$header</span>\"</span> ; sort -rn -k 5)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看物理磁盘的使用情况</span></span><br><span class=\"line\">df -x tmpfs | grep -vE <span class=\"string\">\"(gvfs|procbususb|rootfs)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前所有磁盘的大小和使用量</span></span><br><span class=\"line\">df -H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有分区使用情况</span></span><br><span class=\"line\">fdisk -l /dev/sda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统所有的分区或给定的分区</span></span><br><span class=\"line\">fdisk -l       </span><br><span class=\"line\"><span class=\"comment\"># 显示时，显示的是扇区数不是柱面数           </span></span><br><span class=\"line\">fdisk -u           </span><br><span class=\"line\"><span class=\"comment\"># 显示指定partition的block数       </span></span><br><span class=\"line\">fdisk -s partition       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘的读写容量</span></span><br><span class=\"line\">iostat -m -d /dev/sda1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试磁盘的读写速度</span></span><br><span class=\"line\">hdparm -t /dev/sda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个文件的所有链接</span></span><br><span class=\"line\">find -L / -samefile /path/to/file -<span class=\"built_in\">exec</span> ls -ld &#123;&#125; +</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看最大的5个文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ls -s &#123;&#125; \\; | sort -n -r | head -5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看365天前的文件并删除</span></span><br><span class=\"line\">find ./ -<span class=\"built_in\">type</span> f -mtime +365 -<span class=\"built_in\">exec</span> rm -f &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看大于100M的文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -size +100M</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"net-sh-—-网络信息统计指令\"><a href=\"#net-sh-—-网络信息统计指令\" class=\"headerlink\" title=\"net.sh  — 网络信息统计指令\"></a>net.sh  — 网络信息统计指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看http请求的header</span></span><br><span class=\"line\">tcpdump -s 1024 -l -A -n host 192.168.9.56</span><br><span class=\"line\">tcpdump -s 1024 -l -A src 192.168.9.56 or dst 192.168.9.56</span><br><span class=\"line\">sudo tcpdump -A -s 1492 dst port 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地网络中IP地址为192.168.0.5的主机现在与外界通信的情况</span></span><br><span class=\"line\">sudo tcpdump -i eth0 src host 192.168.0.5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网卡eth0的http请求的tcp包</span></span><br><span class=\"line\">tcpdump -i eth0 port http</span><br><span class=\"line\">tcpdump -i eth0 port http or port smtp or port imap or port pop3 -l -A | egrep -i <span class=\"string\">'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|userna me:|password:|login:|pass |user '</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tcp，upd，icmp非ssh的包</span></span><br><span class=\"line\">tcpdump -n -v tcp or udp or icmp and not port 22</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看http请求的request 包</span></span><br><span class=\"line\">sudo tcpdump -i eth0 port 80 -w -</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤http响应的get host头信息</span></span><br><span class=\"line\">sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E <span class=\"string\">\"GET \\/.*|Host\\: .*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DNS查询请求响应包</span></span><br><span class=\"line\">sudo tcpdump -i en0 <span class=\"string\">'udp port 53'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nmap -sP指定使用Ping echo 进行扫描 /24查看目的网络有多少主机处于运行状态</span></span><br><span class=\"line\">nmap -sP 192.168.0.1</span><br><span class=\"line\">nmap -sP 192.168.0.0/24</span><br><span class=\"line\">nmap -O www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Netstat主要用于Linux/Unix主机察看自身的网络状况，如开启的端口、在为哪些用户服务以及服务的状态</span></span><br><span class=\"line\">netstat -a</span><br><span class=\"line\">netstat -nlp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># netcat扫描机器开放的端口</span></span><br><span class=\"line\">nc -z -v -n 172.31.100.7 21-25</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># netcat 命令会连接开放端口21并且打印运行在这个端口上服务的banner信息。</span></span><br><span class=\"line\">nc -v 172.31.100.7 21</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出网络的路由表</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示结果包括服务器已经运行了多长时间，有多少登陆用户和对服务器性能的总体评估（load average）。</span></span><br><span class=\"line\">uptime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控 eth1 的网卡的流量 </span></span><br><span class=\"line\">iftop -i eth1 </span><br><span class=\"line\"><span class=\"comment\"># 以位元组(bytes 即字节)为单位显示流量(预设是位元 bits): </span></span><br><span class=\"line\">iftop -B </span><br><span class=\"line\"><span class=\"comment\"># 直接显示 IP, 不进行DNS 反解: </span></span><br><span class=\"line\">iftop -n </span><br><span class=\"line\"><span class=\"comment\"># 直接显示连接埠编号, 不显示服务名称: </span></span><br><span class=\"line\">iftop -N </span><br><span class=\"line\"><span class=\"comment\"># 显示某个网段进出封包流量 </span></span><br><span class=\"line\">iftop -F 192.168.1.0/24 or 192.168.1.0/255.255.255.0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网络流量实时监控工具之nload,查看网卡eth0的流量</span></span><br><span class=\"line\">nload -n eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看各个网卡的流量</span></span><br><span class=\"line\">nload -h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IPTraf是一个网络监控工具,功能比nload更强大,可以监控所有的流量,IP流量,按协议分的流量,还可以设置过滤器</span></span><br><span class=\"line\">iptraf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网络接口当前配置与接口命名：</span></span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"><span class=\"comment\"># 打开（up）或关闭（down）适配器</span></span><br><span class=\"line\">ifconfig &lt;网络名&gt; &lt;up|down&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为适配器分配IP地址：</span></span><br><span class=\"line\">ifconfig &lt;网络名&gt; &lt;ip地址&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为适配器分配第二个IP地址：</span></span><br><span class=\"line\">ifconfig &lt;网络名:实例数&gt; &lt;ip地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个网络适配器的驱动信息，适用于查询软件兼容性的情况：</span></span><br><span class=\"line\">ethtool -i eth0</span><br><span class=\"line\"><span class=\"comment\"># 显示网络数据：</span></span><br><span class=\"line\">ethtool -S</span><br><span class=\"line\"><span class=\"comment\"># 设置适配器连接速度（Mbps）</span></span><br><span class=\"line\">ethtool speed &lt;10|100|1000&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget</span></span><br><span class=\"line\">wget -S --spider http://osswin.sourceforge.net/ 2&gt;&amp;1 | grep Mod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看mac地址</span></span><br><span class=\"line\">cat /sys/class/net/*/address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看eth0的ip</span></span><br><span class=\"line\">ifconfig eth0 | awk <span class=\"string\">'/inet addr/ &#123;split ($2,A,\":\"); print A[2]&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl 查看页面对应的domail name</span></span><br><span class=\"line\">curl -s http://en.m.wikipedia.org/wiki/List_of_Internet_top-level_domains | sed -n <span class=\"string\">'/&lt;tr valign=\"top\"&gt;/&#123;s/&lt;[^&gt;]*&gt;//g;p&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># talnet</span></span><br><span class=\"line\">telnet localhost 6666</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有的网络接口</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;print $1&#125;'</span> /proc/net/dev|grep :|sed <span class=\"string\">\"s/:.*//g\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看DNS server版本好</span></span><br><span class=\"line\">nslookup -q=txt -class=CHAOS version.bind NS.PHX5.NEARLYFREESPEECH.NET</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"system-sh-—-系统信息相关指令\"><a href=\"#system-sh-—-系统信息相关指令\" class=\"headerlink\" title=\"system.sh — 系统信息相关指令\"></a>system.sh — 系统信息相关指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统load</span></span><br><span class=\"line\">uptime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统状态和每个进程的系统资源使用状况</span></span><br><span class=\"line\">top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可视化显示CPU的使用状况</span></span><br><span class=\"line\">htop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每个CPU的负载信息</span></span><br><span class=\"line\">mpstat -P ALL 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每隔1秒查看磁盘IO的统计信息</span></span><br><span class=\"line\">iostat -xkdz 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每隔一秒查看虚拟内存的使用信息</span></span><br><span class=\"line\">vmstat 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内存使用统计信息</span></span><br><span class=\"line\">free</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网络使用信息</span></span><br><span class=\"line\">nicstat -z 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 类似vmstat的显示优化的工具</span></span><br><span class=\"line\">dstat 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统活动状态，比如系统分页统计，块设备IO统计等</span></span><br><span class=\"line\">sar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网络连接状态查看</span></span><br><span class=\"line\">netstat -s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程资源使用信息查看</span></span><br><span class=\"line\">pidstat 1</span><br><span class=\"line\">pidstat -d 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个进程的系统调用信息 -p后面是进程id，-tttT 进程系统后的系统调用时间</span></span><br><span class=\"line\">strace -tttT -p 12670</span><br><span class=\"line\"><span class=\"comment\"># 统计IO设备输入输出的系统调用信息</span></span><br><span class=\"line\">strace -c dd <span class=\"keyword\">if</span>=/dev/zero of=/dev/null bs=512 count=1024k</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tcpdump 查看网络数据包</span></span><br><span class=\"line\">tcpdump -nr /tmp/out.tcpdump</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 块设备的读写事件信息统计</span></span><br><span class=\"line\">btrace /dev/sdb </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iotop查看某个进程的IO操作统计信息</span></span><br><span class=\"line\">iotop -bod5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># slabtop 查看内核 slab内存分配器的使用信息</span></span><br><span class=\"line\">slabtop -sc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 系统参数设置</span></span><br><span class=\"line\">sysctl -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 系统性能指标统计信息</span></span><br><span class=\"line\">perf <span class=\"built_in\">stat</span> gzip file1</span><br><span class=\"line\"><span class=\"comment\"># 系统cpu活动状态查看</span></span><br><span class=\"line\">perf record -a -g -F 997 sleep 10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"process-sh-—-进程统计相关指令\"><a href=\"#process-sh-—-进程统计相关指令\" class=\"headerlink\" title=\"process.sh — 进程统计相关指令\"></a>process.sh — 进程统计相关指令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## ps查看当前系统执行的线程列表，进行瞬间状态，不是连续状态，连续状态需要使用top名称查看  更多常用参数请使用 man ps查看</span></span><br><span class=\"line\">ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 显示所有进程详细信息</span></span><br><span class=\"line\">ps aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## -u 显示某个用户的进程列表</span></span><br><span class=\"line\">ps -f -u www-data </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## -C 通过名字或者命令搜索进程</span></span><br><span class=\"line\">ps -C apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## --sort  根据进程cpu使用率降序排列，查看前5个进程  -pcpu表示降序  pcpu升序</span></span><br><span class=\"line\">ps aux --sort=-pcpu | head -5 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## -f 用树结构显示进程的层次关系，父子进程情况下</span></span><br><span class=\"line\">ps -f --forest -C apache2 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 显示一个父进程的所有子进程</span></span><br><span class=\"line\">ps -o pid,uname,comm -C apache2</span><br><span class=\"line\">ps --ppid 2359 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 显示一个进程的所有线程  -L 参数</span></span><br><span class=\"line\">ps -p 3150 -L </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##显示进程的执行时间 -o参数</span></span><br><span class=\"line\">ps -e -o pid,comm,etime </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看系统的线程数</span></span><br><span class=\"line\">nproc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## watch命令可以用来实时捕捉ps显示进程</span></span><br><span class=\"line\">watch -n 1 <span class=\"string\">'ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15'</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## jobs 查看后台运行的进程  jobs命令执行的结果，＋表示是一个当前的作业，减号表是是一个当前作业之后的一个作业，jobs -l选项可显示所有任务的PID,jobs的状态可以是running, stopped, Terminated,但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识；也就是说，jobs命令显示的是当前shell环境中所起的后台正在运行或者被挂起的任务信息</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看后台运营的进程号</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看现在被终止或者退出的进程号</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## kill命令 终止一个前台进程可以使用Ctrl+C键   kill  通过top或者ps获取进程id号  kill [-s 信号 | -p ] [ -a ] 进程号 ...</span></span><br><span class=\"line\"><span class=\"comment\">## 发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。 关闭进程号12的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> 12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 等同于在前台运行PID为123的进程时按下Ctrl+C键</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -2 123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程  </span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 列出所有信号名称</span></span><br><span class=\"line\"><span class=\"comment\">## HUP    1    终端断线</span></span><br><span class=\"line\"><span class=\"comment\">## INT     2    中断（同 Ctrl + C）</span></span><br><span class=\"line\"><span class=\"comment\">## QUIT    3    退出（同 Ctrl + \\）</span></span><br><span class=\"line\"><span class=\"comment\">## TERM   15    终止</span></span><br><span class=\"line\"><span class=\"comment\">## KILL    9    强制终止</span></span><br><span class=\"line\"><span class=\"comment\">## CONT   18    继续（与STOP相反， fg/bg命令）</span></span><br><span class=\"line\"><span class=\"comment\">## STOP    19    暂停（同 Ctrl + Z）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 得到指定信号的数值</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -l KILL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 杀死指定用户所有进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -u peidalinux</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 $(ps -ef | grep peidalinux) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 将后台中的命令调至前台继续运行  将进程123调至前台执行</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span> 123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 将一个在后台暂停的命令，变成继续执行</span></span><br><span class=\"line\"><span class=\"built_in\">bg</span>  123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思  下面输出被重定向到myout.file文件中</span></span><br><span class=\"line\">nohup <span class=\"built_in\">command</span> &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## at：计划任务，在特定的时间执行某项工作，在特定的时间执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">## 格式：at HH:MM YYYY-MM-DD //HH（小时）:MM（分钟） YYYY（年）-MM（月份）-DD（日）</span></span><br><span class=\"line\"><span class=\"comment\">## HH[am pm]+D(天) days //HH（小时）[am（上午）pm（下午）]+days（天）</span></span><br><span class=\"line\">at 12:00（时间） //at命令设定12:00执行一项操作</span><br><span class=\"line\"><span class=\"comment\"># at&gt;useradd aaa //在at命令里设定添加用户aaa</span></span><br><span class=\"line\"><span class=\"comment\"># ctrl+d //退出at命令</span></span><br><span class=\"line\"><span class=\"comment\"># tail -f /etc/passwd //查看/etc/passwd文件后十行是否增加了一个用户aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务。</span></span><br><span class=\"line\">atq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动计划任务后，如果不想启动设定好的计划任务可以使用atrm命令删除。</span></span><br><span class=\"line\">atrm 1 //删除计划任务1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## pstree命令：列出当前的进程，以及它们的树状结构  格式：pstree [选项] [pid|user]</span></span><br><span class=\"line\">pstree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## nice命令：改变程序执行的优先权等级 应用程序优先权值的范围从-20～19，数字越小，优先权就越高。一般情况下，普通应用程序的优先权值（CPU使用权值）都是0，如果让常用程序拥有较高的优先权等级，自然启动和运行速度都会快些。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。</span></span><br><span class=\"line\">nice [-n &lt;优先等级&gt;][--<span class=\"built_in\">help</span>][--version][命令]</span><br><span class=\"line\">nice -n 5 ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## sleep命令：使进程暂停执行一段时间</span></span><br><span class=\"line\">date;sleep 1m;date</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## renice命令 renice命令允许用户修改一个正在运行进程的优先权。 利用renice命令可以在命令执行时调整其优先权。</span></span><br><span class=\"line\"><span class=\"comment\">## 其中，参数number与nice命令的number意义相同。（1） 用户只能对自己所有的进程使用renice命令。（2） root用户可以在任何进程上使用renice命令。（3） 只有root用户才能提高进程的优先权</span></span><br><span class=\"line\">renice -5 -p 5200  <span class=\"comment\">#PID为5200的进程nice设为-5 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## pmap命令用于显示一个或多个进程的内存状态。其报告进程的地址空间和内存状态信息 #pmap PID </span></span><br><span class=\"line\">pmap 20367</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## top 动态查看进程的变化。</span></span><br><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务器存在的问题\"><a href=\"#服务器存在的问题\" class=\"headerlink\" title=\"服务器存在的问题\"></a>服务器存在的问题</h3><ol>\n<li><p><strong>电源供电不足</strong></p>\n<p>目前服务器运行良好，需要注意的是，服务器目前的电源功率是495W（<code>sudo dmidecode | grep Power</code>），GPU显卡额定功率是500W，服务器供电不足导致电源灯一闪一闪，为了保险起见，尽快补一块<a href=\"https://item.jd.com/28405788107.html\">750W服务器电源</a>。</p>\n</li>\n</ol>\n<h2 id=\"第二章：服务器系统安装\"><a href=\"#第二章：服务器系统安装\" class=\"headerlink\" title=\"第二章：服务器系统安装*\"></a>第二章：服务器系统安装*</h2><h2 id=\"第三章：深度学习必备基础环境安装\"><a href=\"#第三章：深度学习必备基础环境安装\" class=\"headerlink\" title=\"第三章：深度学习必备基础环境安装\"></a>第三章：深度学习必备基础环境安装</h2><p><strong>NVIDIA驱动、CUDA、cuDNN三部分尽可能在现场安装</strong>，因为涉及到重启，服务器不能远程重启。</p>\n<p>另外，本部分所有指令，建议在<code>bash</code>环境下运行，使用<code>zsh</code>的shell请切换为<code>bash</code>，避免不必要的麻烦。</p>\n<h3 id=\"显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\"><a href=\"#显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\" class=\"headerlink\" title=\"显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系\"></a>显卡、NVIDIA驱动、CUDA、cuDNN和Tensorflow、Pytorch之间的对应关系</h3><p>不同版本的Tensorflow和PyTorch环境对NVIDIA驱动、CUDA和cuDNN的有着不一样的需求。</p>\n<p>系统能否检测到GPU：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)</span><br><span class=\"line\">04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure>\n\n<p><strong>GTX 1080为Tensorflow、PyTorch等框架提供GPU支持。</strong></p>\n<h4 id=\"GTX-1080信息\"><a href=\"#GTX-1080信息\" class=\"headerlink\" title=\"GTX 1080信息\"></a>GTX 1080信息</h4><p><strong>服务器上GTX 1080信息如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">规格</th>\n<th align=\"center\">核心参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">显卡核心</td>\n<td align=\"center\">NVIDIA GeForce GTX1080</td>\n</tr>\n<tr>\n<td align=\"center\">显存频率</td>\n<td align=\"center\">10010MHz</td>\n</tr>\n<tr>\n<td align=\"center\">显存大小</td>\n<td align=\"center\">8G</td>\n</tr>\n<tr>\n<td align=\"center\">显存类型</td>\n<td align=\"center\">GDDR5X</td>\n</tr>\n<tr>\n<td align=\"center\">显存位宽</td>\n<td align=\"center\">256位</td>\n</tr>\n<tr>\n<td align=\"center\">总线类型</td>\n<td align=\"center\">PCI-E 3.0 x 16</td>\n</tr>\n<tr>\n<td align=\"center\">数字最高分辨率</td>\n<td align=\"center\">7680 x 4320</td>\n</tr>\n<tr>\n<td align=\"center\">SLI</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">散热器类型</td>\n<td align=\"center\">风冷</td>\n</tr>\n<tr>\n<td align=\"center\">额定电源</td>\n<td align=\"center\">500W</td>\n</tr>\n<tr>\n<td align=\"center\">供电外接需求</td>\n<td align=\"center\">8pin x 1</td>\n</tr>\n<tr>\n<td align=\"center\">OpneGL支持版本</td>\n<td align=\"center\">OpenGL 4.5</td>\n</tr>\n</tbody></table>\n<h4 id=\"Tensorflow建议配置\"><a href=\"#Tensorflow建议配置\" class=\"headerlink\" title=\"Tensorflow建议配置\"></a>Tensorflow建议<a href=\"https://www.tensorflow.org/install/source#linux\">配置</a></h4><p>数据来源于<a href=\"https://www.tensorflow.org/install/source#linux\">官网</a>，截止2020年4月11号，<code>tensorflow-2.1.0</code>版本需要配合<code>CUDA 10.1</code>和<code>cuDNN 7.6</code>配合使用。</p>\n<p><img src=\"https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png\" alt=\"Tensorflow版本\"></p>\n<h4 id=\"PyTorch建议配置\"><a href=\"#PyTorch建议配置\" class=\"headerlink\" title=\"PyTorch建议配置\"></a>PyTorch建议<a href=\"https://pytorch.org/get-started/previous-versions/\">配置</a></h4><p>数据来源于<a href=\"https://pytorch.org/get-started/previous-versions/\">官网</a>，截止2020年4月11号，<code>PyTorch 1.4</code>版本需要配合<code>CUDA 10.1</code>或<code>CUDA9.2</code>配合使用。</p>\n<p><img src=\"https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png\" alt=\"PyTorch\"></p>\n<h4 id=\"NVIDIA驱动选型\"><a href=\"#NVIDIA驱动选型\" class=\"headerlink\" title=\"NVIDIA驱动选型\"></a>NVIDIA驱动选型</h4><p>在Linux系统下，<a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\">NVIDIA驱动型号</a>根据需求来安装，<code>CUDA10.2</code>需求<code>NVIDIA &gt;= 440.33</code>，所以NVIDIA驱动型号至少是<code>440.33</code>。</p>\n<p><img src=\"https://pic.downk.cc/item/5e913b69504f4bcb04574a5e.png\" alt=\"CUDA版本与NVIDIA驱动之间的关系\"></p>\n<h3 id=\"NVIDIA驱动安装（CentOS、Ubuntu）\"><a href=\"#NVIDIA驱动安装（CentOS、Ubuntu）\" class=\"headerlink\" title=\"NVIDIA驱动安装（CentOS、Ubuntu）*\"></a>NVIDIA驱动安装（CentOS、Ubuntu）*</h3><p>通过前面的分析，目前Tensorflow 最新版本2.1.0需求CUDA 10.1，索性安装CUDA 10.2所需求的最低要求的NVIDIA版本<code>440.33</code>。</p>\n<p>另外NVIDIA驱动不要轻易更新，在CentOS下，尤其是不到万不得已的地步，千万千万不要运行<code>sudo yum update</code>指令！Ubuntu对应的指令是<code>sudo apt-get update</code>。</p>\n<p><strong>本小节主要介绍在CentOS 7.7系统下的驱动安装</strong>，顺便介绍在Ubuntu系统的驱动检索及安装方法。</p>\n<p>NVIDIA驱动安装完成后，需要到现场重启服务器。</p>\n<h4 id=\"关闭桌面服务\"><a href=\"#关闭桌面服务\" class=\"headerlink\" title=\"关闭桌面服务\"></a>关闭桌面服务</h4><p>如果在现场安装NVIDIA驱动，首先要按住<code>Alt + Ctrl + F1</code>进入终端（F1到F6都行），输入账户密码获取root权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n\n<p>然后关闭桌面模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>Ctrl + Alt + F7</code>发现已无法成功返回图形化模式，说明桌面服务已成功关闭，注意此步对接下来的 NVIDIA 显卡驱动安装尤为重要，必需确保桌面服务已关闭。</p>\n<p>驱动安装完成后，按住<code>Alt + Ctrl + F7</code>可开启桌面模式。</p>\n<h4 id=\"系统检查\"><a href=\"#系统检查\" class=\"headerlink\" title=\"系统检查\"></a>系统检查</h4><p>查看支持CUDA的GPU列表：<a href=\"https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements，根据[官网](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions)建议，**安装NVIDIA驱动和CUDA之前需要查看系统是否满足要求**：\">https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements，根据[官网](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions)建议，**安装NVIDIA驱动和CUDA之前需要查看系统是否满足要求**：</a></p>\n<ol>\n<li><p>验证系统是否具有支持CUDA的GPU</p>\n</li>\n<li><p>确认系统是受支持的Linux发行版本</p>\n</li>\n<li><p>验证系统是否有GCC编译环境</p>\n</li>\n<li><p>验证系统是否安装了正确的内核头文件和开发包</p>\n</li>\n</ol>\n<p>一步一步检测</p>\n<ol>\n<li><p><strong>验证系统是否具有支持CUDA的GPU</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)</span><br><span class=\"line\">04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure>\n\n<p>服务器上的显卡是GTX 1080，支持CUDA</p>\n</li>\n<li><p><strong>确认系统是受支持的Linux发行版本</strong></p>\n<p>CUDA开发工具仅在某些特定的Linux发行版上受支持，运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -m &amp;&amp; cat /etc/*release</span><br></pre></td></tr></table></figure>\n\n<p>输出信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x86_64</span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></span><br><span class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></span><br><span class=\"line\">ID=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></span><br><span class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></span><br><span class=\"line\">ANSI_COLOR=<span class=\"string\">\"0;31\"</span></span><br><span class=\"line\">CPE_NAME=<span class=\"string\">\"cpe:/o:centos:centos:7\"</span></span><br><span class=\"line\">HOME_URL=<span class=\"string\">\"https://www.centos.org/\"</span></span><br><span class=\"line\">BUG_REPORT_URL=<span class=\"string\">\"https://bugs.centos.org/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=<span class=\"string\">\"CentOS-7\"</span></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=<span class=\"string\">\"7\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br><span class=\"line\">CentOS Linux release 7.7.1908 (Core)</span><br></pre></td></tr></table></figure>\n\n<p><code>x86_64</code>表示当前系统是64位系统，运行的Linux发行版是CentOS7.7版本。</p>\n</li>\n<li><p><strong>验证系统是否有GCC编译环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下都会有。</p>\n</li>\n<li><p><strong>验证系统是否安装了正确的内核头文件和开发包</strong></p>\n<p>运行以下命令找到系统正在运行的内核版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n\n<p>当前运行的内核的头文件和开发包可以通过以下方式安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"禁用第三方开源驱动nouveau\"><a href=\"#禁用第三方开源驱动nouveau\" class=\"headerlink\" title=\"禁用第三方开源驱动nouveau\"></a>禁用第三方开源驱动nouveau</h4><p>Nouveau是由第三方为NVIDIA显卡开发的一个开源3D驱动，不过没有得到NVIDIA的认可与支持。Nouveau让Linux更容易的应对各种复杂的NVIDIA显卡环境，让用户安装完系统即可进入桌面并且有不错的显示效果，所以，很多Linux发行版默认集成了Nouveau驱动，在遇到NVIDIA显卡时默认安装。企业版的Linux更是如此，几乎所有支持图形界面的企业Linux发行版都将Nouveau收入其中。不过对于个人桌面用户来说，处于成长阶段的Nouveau并不完美，与企业版不一样，个人用户除了想让正常显示图形界面外很多时候还需要一些3D特效，Nouveau多数时候并不能完成，而用户在安装NVIDIA官方私有驱动的时候Nouveau又成为了阻碍，如果不干掉Nouveau，NVIDIA驱动安装时总是报错。</p>\n<p><img src=\"https://pic.downk.cc/item/5e93446cc2a9a83be5684112.jpg\" alt=\"\"></p>\n<p><strong>NVIDIA驱动和nouveau驱动最好二选一</strong>，一般情况下，<strong>深度学习环境配置需禁用nouveau驱动</strong>，查看nouveau驱动信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod |grep nouveau</span><br></pre></td></tr></table></figure>\n\n<p>若有输出，需要禁止该nvidia第三方驱动，若无，OK，<strong>Linux哲学之一：没有消息就是最好的消息。</strong>可忽略该步骤。</p>\n<p><strong>禁用nouveau驱动，需要配置相关文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nvim /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/neovim/neovim\">nvim</a>，即NeoVIm，在生态和功能上比<code>vim</code>要领先一些，在CentOS系统下的<a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim#centos-7--rhel-7\">nvim的安装</a>命令为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">sudo yum install -y neovim python3-neovim</span><br></pre></td></tr></table></figure>\n\n<p>没有安装<a href=\"https://github.com/neovim/neovim\">nvim</a>可以用<code>vim</code>来代替（<code>sudo yum install vim</code>）。</p>\n<p>文件可能没有任何内容，在打开的文件中，进入Vim的<strong>插入模式</strong>（<code>i</code>键），<strong>写入命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau  </span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n\n<p>按下<code>Eac</code>键进入普通模式，输入命令<code>:wq</code>保存并退出文件。</p>\n<p>更新initramfs映像使禁用 <code>nouveau</code> 生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n\n<p>输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod |grep nouveau</span><br></pre></td></tr></table></figure>\n\n<p>若无输出，则表示禁用nouveau生效了。</p>\n<p>当然也可以重启系统使禁用 <code>nouveau</code> 真正生效，但<strong>重启系统有可能会出现黑屏，原因是禁用了集成显卡，系统没有显卡驱动。</strong></p>\n<h4 id=\"卸载原有驱动\"><a href=\"#卸载原有驱动\" class=\"headerlink\" title=\"卸载原有驱动\"></a>卸载原有驱动</h4><p>查看当前系统驱动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls &#x2F;usr&#x2F;src</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nvidia</span><br></pre></td></tr></table></figure>\n\n<p>总之，可以得知当前NVIDIA版本信息（就算使用了<code>sudo yum update</code>），使用上述四条命令之一也可以查到，如果真的真的忘记了，跳过这一步吧……</p>\n<p>假设知道了目前的NVIDIA驱动型号，假设为390.77，去<a href=\"https://download.nvidia.com/XFree86/Linux-x86_64/\">该网站</a>上下载对应的驱动文件</p>\n<p><img src=\"https://pic.downk.cc/item/5e9340d4c2a9a83be565cc63.png\" alt=\"\"></p>\n<p>类似于<code>NVIDIA-Linux-x86_64-390.77.run</code>这种文件，右键<strong>复制链接</strong>，使用<strong>wget</strong>工具下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~    // 回到主目录</span><br><span class=\"line\">wget -c https://download.nvidia.com/XFree86/Linux-x86_64/390.77/NVIDIA-Linux-x86_64-390.77.run</span><br></pre></td></tr></table></figure>\n\n<p>然后运行命令进行卸载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh NVIDIA-Linux-x86_64-390.77.run --uninstall</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NVIDIA官方驱动安装\"><a href=\"#NVIDIA官方驱动安装\" class=\"headerlink\" title=\"NVIDIA官方驱动安装\"></a>NVIDIA官方驱动安装</h4><p><strong>确保已经关闭桌面服务。</strong></p>\n<p>NVIDIA驱动分离线安装和在线安装，离线安装就是在<a href=\"https://www.nvidia.com/Download/index.aspx?lang=cn\">官网</a>下载对应的驱动，再进行安装，为了方便起见，采用<strong>在线</strong>的方法在<strong>CentOS 7.7</strong>系统进行安装。</p>\n<p><strong>添加 ELRepo 源：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\">sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看显卡检测程序：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nvidia-detect</span><br></pre></td></tr></table></figure>\n\n<p>如果安装，跳过下一步，否则</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nvidia-detect</span><br></pre></td></tr></table></figure>\n\n<p><strong>检测显卡型号，查看对应的驱动</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-detect -v</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Probing <span class=\"keyword\">for</span> supported NVIDIA devices...</span><br><span class=\"line\">[102b:0534] Matrox Electronics Systems Ltd. G200eR2</span><br><span class=\"line\">[10de:1b80] NVIDIA Corporation GP104 [GeForce GTX 1080]</span><br><span class=\"line\">This device requires the current 440.64 NVIDIA driver kmod-nvidia</span><br></pre></td></tr></table></figure>\n\n<p>系统告诉我们，显示型号是GTX 1080，对应的NVIDIA驱动型号应为<code>440.64</code>，大于<code>440.33</code>，满足要求，继续安装，否则去<a href=\"https://www.nvidia.com/Download/index.aspx?lang=cn\">官网</a>下载对应的驱动手动离线安装。</p>\n<p>输入命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i    // 获取root权限</span><br><span class=\"line\">yum install kmod-nvidia    // 或者这条命令yum install nvidia-x11-drv</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，或者输出下面的信息，可能要重启系统……</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">软件包 nvidia-x11-drv-440.82-1.el7_8.elrepo.x86_64 已安装并且是最新版本</span><br></pre></td></tr></table></figure>\n\n<p>重启系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<p>安装完成，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>看看显卡信息。</p>\n<ul>\n<li><p>如果是<strong>Ubuntu系统</strong>，可使用下列方法进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge nvidia*\t\t\t\t\t// 卸载之前的NVIDIA驱动</span><br><span class=\"line\">sudo add-apt-repository ppa:graphics-drivers/ppa\t// 添加源</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nvidia-440\t\t\t\t// 安装NVIDIA-440系列驱动</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo ubuntu-drivers devices    // 或者运行apt-cache search nvidia*</span><br><span class=\"line\">// 出现建议的NVIDIA驱动型号xxx</span><br><span class=\"line\">sudo apt-get install nvidia-xxx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>重启服务器</strong>。</p>\n<h4 id=\"查看当前NVIDIA驱动版本\"><a href=\"#查看当前NVIDIA驱动版本\" class=\"headerlink\" title=\"查看当前NVIDIA驱动版本\"></a>查看当前NVIDIA驱动版本</h4><p>使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>安装过程中可能会遇到比较多的问题，<strong>请耐心解决</strong>。</p>\n<h4 id=\"开启桌面服务\"><a href=\"#开启桌面服务\" class=\"headerlink\" title=\"开启桌面服务\"></a>开启桌面服务</h4><p>NVIDIA驱动安装完成后，可开启桌面服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>Ctrl + Alt + F7</code>可返回图形化模式。</p>\n<h3 id=\"CUDA安装\"><a href=\"#CUDA安装\" class=\"headerlink\" title=\"CUDA安装*\"></a>CUDA安装*</h3><p>在此介绍CUDA-9.0、CUDA-9.1、CUDA-9.2、CUDA-10.0、CUDA-10.1、CUDA-10.2共6种CUDA文件的安装（截止2020年4月11号），基本涵盖了当前流行深度学习框架的需求。</p>\n<p>需要注意的是，如果你是个人用户，就是自己在电脑上装了Linux系统进行深度学习环境的设置，可以详细阅读这一小节的内容，这一小节主要介绍的是一般情况下的CUDA配置，因为如果是自己的系统，可以随意更改CUDA的<strong>符号链接</strong>，但是在服务器上，大部分用户都是普通用户，<strong>无root权限</strong>，切换CUDA时很麻烦，不切换CUDA，深度学习环境的配置就比较受限，所以在服务器环境下，<strong>普通用户如何灵活切换CUDA和cuDNN版本呢？有两种方法：</strong></p>\n<ul>\n<li>使用<a href=\"https://modules.readthedocs.io/en/latest/\">Environment Modules</a>来管理CUDA；</li>\n<li>使用<a href=\"https://anaconda.org/\">Anaconda</a>来独立管理<a href=\"#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\">CUDA和cuDNN</a>；</li>\n</ul>\n<p>我建议采用Anaconda来管理，理由很简单：操作方便上手快。具体请<a href=\"#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\">跳转</a>。下面介绍正常情况下的CUDA和cuDNN安装方法。</p>\n<p><strong>推荐下载.run的CUDA文件格式。</strong></p>\n<p>在<code>~/NVIDIA/CUDA</code>目录下依次建立<code>cuda-9.0</code>、<code>cuda-9.1、</code>、<code>cuda-9.2</code>、<code>cuda-10.0</code>、<code>cuda-10.1</code>、<code>cuda-10.2</code>6个目录，目录下是对应CUDA版本的安装文件，文件的后缀名为<code>.run</code>，不管是基础版本还是补丁，安装方法都是一模一样的。</p>\n<p><strong>CUDA的安装，建议<a href=\"#关闭桌面服务\">关闭桌面服务</a>，通过<code>Alt + Ctrl + F1</code>进入终端。</strong></p>\n<h4 id=\"CUDA文件下载\"><a href=\"#CUDA文件下载\" class=\"headerlink\" title=\"CUDA文件下载\"></a>CUDA文件下载</h4><p>CUDA的官网下载链接为<a href=\"https://developer.nvidia.com/cuda-toolkit-archive，CUDA的下载不需要注册，cuDNN需要。以CUDA9.2下载为例，依次按图红色框框进行选择，需要注意的是图中的**黑色框框**，那个是当前CUDA版本的补丁，也要下载，安装方法与**基础版本一致**。\">https://developer.nvidia.com/cuda-toolkit-archive，CUDA的下载不需要注册，cuDNN需要。以CUDA9.2下载为例，依次按图红色框框进行选择，需要注意的是图中的**黑色框框**，那个是当前CUDA版本的补丁，也要下载，安装方法与**基础版本一致**。</a></p>\n<p><img src=\"https://pic.downk.cc/item/5e9144da504f4bcb045fe855.png\" alt=\"cuda9.2\"></p>\n<p>正常方法是点击Download下载，下载后还要拖入到服务器种比较麻烦，在这里给出直接将文件下载到服务器的方法。</p>\n<p>创建不同CUDA版本的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir NVIDIA</span><br><span class=\"line\"><span class=\"built_in\">cd</span> NVIDIA</span><br><span class=\"line\">mkdir CUDA</span><br><span class=\"line\"><span class=\"built_in\">cd</span> CUDA</span><br><span class=\"line\">mkdir cuda-9.&#123;0..2&#125;     // 批量建立文件夹 cuda-9.0、cuda-9.1、cuda-9.2</span><br><span class=\"line\">mkdir cuda-10.&#123;0..2&#125;    // 批量建立文件夹 cuda-10.0、cuda-10.1、cuda-10.2</span><br></pre></td></tr></table></figure>\n\n<p>然后依次在对应目录下下载各个版本的<strong>CUDA基础安装包及其补丁</strong>（时间截止到2020.04.11）</p>\n<p>为了直观起见，使用比较基础的命令</p>\n<h5 id=\"下载CUDA-9-0\"><a href=\"#下载CUDA-9-0\" class=\"headerlink\" title=\"下载CUDA 9.0\"></a>下载<a href=\"https://developer.nvidia.com/cuda-90-download-archive\">CUDA 9.0</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-9.0</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda9.0安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run -O cuda_9.0.176_384.81_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda9.0的4个补丁</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run -O cuda_9.0.176.1_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run -O cuda_9.0.176.2_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda_9.0.176.3_linux-run -O cuda_9.0.176.3_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/4/cuda_9.0.176.4_linux-run -O cuda_9.0.176.4_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-9-1\"><a href=\"#下载CUDA-9-1\" class=\"headerlink\" title=\"下载CUDA 9.1\"></a>下载<a href=\"https://developer.nvidia.com/cuda-91-download-archive-new\">CUDA 9.1</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-9.1</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda9.1安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux -O cuda_9.1.85_387.26_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda9.1的3个补丁</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/1/cuda_9.1.85.1_linux -O cuda_9.1.85.1_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/2/cuda_9.1.85.2_linux -O cuda_9.1.85.2_linux.run</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/3/cuda_9.1.85.3_linux -O cuda_9.1.85.3_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-9-2\"><a href=\"#下载CUDA-9-2\" class=\"headerlink\" title=\"下载CUDA 9.2\"></a>下载<a href=\"https://developer.nvidia.com/cuda-92-download-archive\">CUDA 9.2</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-9.2</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda9.2安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/local_installers/cuda_9.2.148_396.37_linux -O cuda_9.2.148_396.37_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda9.2的1个补丁</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/9.2/Prod2/patches/1/cuda_9.2.148.1_linux -O cuda_9.2.148.1_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-10-0\"><a href=\"#下载CUDA-10-0\" class=\"headerlink\" title=\"下载CUDA 10.0\"></a>下载<a href=\"https://developer.nvidia.com/cuda-10.0-download-archive\">CUDA 10.0</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-10.0</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda10.0安装包</span><br><span class=\"line\">wget -c https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux -O cuda_10.0.130_410.48_linux.run</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载cuda10.0的1个补丁</span><br><span class=\"line\">wget -c http://developer.download.nvidia.com/compute/cuda/10.0/Prod/patches/1/cuda_10.0.130.1_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-10-1-update2\"><a href=\"#下载CUDA-10-1-update2\" class=\"headerlink\" title=\"下载CUDA 10.1 update2\"></a>下载<a href=\"https://developer.nvidia.com/cuda-10.1-download-archive-base\">CUDA 10.1 update2</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-10.1</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda10.1安装包，无补丁</span><br><span class=\"line\">wget -c http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载CUDA-10-2\"><a href=\"#下载CUDA-10-2\" class=\"headerlink\" title=\"下载CUDA 10.2\"></a>下载<a href=\"https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&target_distro=CentOS&target_version=7&target_type=runfilelocal\">CUDA 10.2</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/CUDA/cuda-10.2</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载基础cuda10.2安装包，无补丁</span><br><span class=\"line\">wget -c http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装CUDA\"><a href=\"#安装CUDA\" class=\"headerlink\" title=\"安装CUDA\"></a>安装CUDA</h4><p>以<code>cuda_9.1.85_387.26_linux.run</code>文件为例说明怎么安装的，所有的文件都是一样的安装方法（<strong>CUDA 10.1以及后续版本，安装界面有所不一样，请仔细阅读</strong>）。</p>\n<h5 id=\"CUDA-10-0及其之前的版本的安装方法\"><a href=\"#CUDA-10-0及其之前的版本的安装方法\" class=\"headerlink\" title=\"CUDA 10.0及其之前的版本的安装方法\"></a>CUDA 10.0及其之前的版本的安装方法</h5><p>CUDA默认安装位置：<code>/usr/local</code></p>\n<p>先建立一个名为<strong>CUDAInstall</strong>的<a href=\"https://github.com/tmux/tmux\">tmux</a>窗口，这是为了在安装的时候，防止终端出现紧急情况，影响安装，这个习惯可以让你减少不必要的损失，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s CUDAInstall     </span><br><span class=\"line\">sudo sh cuda_9.1.85_387.26_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到文件权限问题，可以赋予CUDA文件可执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x cuda_9.1.85_387.26_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>运行CUDA安装文件后，紧接着在屏幕上出现了很长的说明，按住<strong>空格</strong>键至进度100%，然后按照下面的提示操作即可，需要注意的是，在提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install NVIDIA Accelerated Graphics Driver <span class=\"keyword\">for</span> Linux-x86_64 387.26?</span><br><span class=\"line\">(y)es/(n)o/(q)uit:</span><br></pre></td></tr></table></figure>\n\n<p>意思是：<strong>安装NVIDIA驱动吗？</strong>选择<code>n</code>，NVIDIA驱动我们单独安装。</p>\n<p>安装过程中每一步的提示如下，请仔细阅读<strong>翻译</strong>，尤其是符号链接那部分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------</span><br><span class=\"line\">// 接受之前阅读的说明吗？必须接受啊</span><br><span class=\"line\">Do you accept the previously <span class=\"built_in\">read</span> EULA?</span><br><span class=\"line\">accept/decline/quit: accept</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装NVIDIA驱动吗？NVIDIA驱动我们单独安装</span><br><span class=\"line\">Install NVIDIA Accelerated Graphics Driver <span class=\"keyword\">for</span> Linux-x86_64 387.26?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: n</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装CUDA9.1的工具集吗？安装</span><br><span class=\"line\">Install the CUDA 9.1 Toolkit?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA的默认路径，按Enter键继续</span><br><span class=\"line\">Enter Toolkit Location</span><br><span class=\"line\"> [ default is /usr/<span class=\"built_in\">local</span>/cuda-9.1 ]: </span><br><span class=\"line\"> </span><br><span class=\"line\">// 要为CUDA9.1建立符号链接吗？如果该CUDA是你想默认的，输入y；</span><br><span class=\"line\">// 如果不是但是以后想调用，输入n</span><br><span class=\"line\">// 这个可以在安装之后修改</span><br><span class=\"line\">Do you want to install a symbolic link at /usr/<span class=\"built_in\">local</span>/cuda?</span><br><span class=\"line\">(y)es/(n)o/(q)uit:y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA 9.1的示例，可以安装，方便测试</span><br><span class=\"line\">Install the CUDA 9.1 Samples?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认</span><br><span class=\"line\">Enter CUDA Samples Location</span><br><span class=\"line\"> [ default is /home/unix ]:</span><br></pre></td></tr></table></figure>\n\n<p>然后开始安装，终端上会显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installing the CUDA Toolkit in &#x2F;usr&#x2F;local&#x2F;cuda-9.1 ...</span><br></pre></td></tr></table></figure>\n\n<p>表示<code>CUDA 9.1</code>会被安装到目录<code>/usr/local/cuda-9.1</code>文件夹下，大约1分钟左右，终端显示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installing the CUDA Samples <span class=\"keyword\">in</span> /home/unix ...</span><br><span class=\"line\">Copying samples to /home/unix/NVIDIA_CUDA-9.1_Samples now...</span><br><span class=\"line\">Finished copying samples.</span><br><span class=\"line\"></span><br><span class=\"line\">===========</span><br><span class=\"line\">= Summary =</span><br><span class=\"line\">===========</span><br><span class=\"line\"></span><br><span class=\"line\">Driver:   Not Selected</span><br><span class=\"line\">Toolkit:  Installed <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-9.1</span><br><span class=\"line\">Samples:  Installed <span class=\"keyword\">in</span> /home/unix</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure that</span><br><span class=\"line\"> -   PATH includes /usr/<span class=\"built_in\">local</span>/cuda-9.1/bin</span><br><span class=\"line\"> -   LD_LIBRARY_PATH includes /usr/<span class=\"built_in\">local</span>/cuda-9.1/lib64, or, add /usr/<span class=\"built_in\">local</span>/cuda-9.1/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\"></span><br><span class=\"line\">To uninstall the CUDA Toolkit, run the uninstall script <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-9.1/bin</span><br><span class=\"line\"></span><br><span class=\"line\">Please see CUDA_Installation_Guide_Linux.pdf <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-9.1/doc/pdf <span class=\"keyword\">for</span> detailed information on setting up CUDA.</span><br><span class=\"line\"></span><br><span class=\"line\">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required <span class=\"keyword\">for</span> CUDA 9.1 functionality to work.</span><br><span class=\"line\">To install the driver using this installer, run the following <span class=\"built_in\">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:</span><br><span class=\"line\">    sudo &lt;CudaInstaller&gt;.run -silent -driver</span><br><span class=\"line\"></span><br><span class=\"line\">Logfile is /tmp/cuda_install_89370.log</span><br></pre></td></tr></table></figure>\n\n<p>终端输出的内容非常清楚，包含了这么几个意思：</p>\n<ul>\n<li><p>关于NVIDIA驱动：NVIDIA驱动已经安装但是没有被检测出来，重启系统就好了，因为服务器在学校，必须到现场才能重启成功；</p>\n</li>\n<li><p>关于路径：CUDA 9.1被安装在<code>/usr/local/cuda-9.1</code>目录下</p>\n</li>\n<li><p>关于卸载CUDA：CUDA的卸载脚本在/usr/local/cuda-9.1/bin里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装CUDA的补丁包</p>\n</li>\n</ul>\n<p>大部分CUDA版本都有补丁包，补丁的安装比较容易，以CUDA 9.1的补丁1<code>cuda_9.1.85.1_linux.run</code>为例说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda_9.1.85.1_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>屏幕上也会出现很长的说明，按住<strong>空格</strong>键至进度100%，出现了一些选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------</span><br><span class=\"line\">Do you accept the previously read EULA?</span><br><span class=\"line\">accept&#x2F;decline&#x2F;quit:  accept</span><br><span class=\"line\"></span><br><span class=\"line\">Enter CUDA Toolkit installation directory</span><br><span class=\"line\"> [ default is &#x2F;usr&#x2F;local&#x2F;cuda-9.1 ]:</span><br></pre></td></tr></table></figure>\n\n<p>安装位置默认就行，按住Enter后，秒安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installation complete!</span><br><span class=\"line\">Installation directory: /usr/<span class=\"built_in\">local</span>/cuda-9.1</span><br></pre></td></tr></table></figure>\n\n<p>按照该方法，安装CUDA 9.1其它两个补丁包。</p>\n<p>至此CUDA基础安装包及其补丁包的方法介绍完了，<strong>按照此方法，依次安装其它CUDA 9.0 ~ CUDA10.0版本的基础安装包及其补丁。</strong></p>\n<h5 id=\"CUDA-10-1及其之后的版本的安装方法\"><a href=\"#CUDA-10-1及其之后的版本的安装方法\" class=\"headerlink\" title=\"CUDA 10.1及其之后的版本的安装方法\"></a>CUDA 10.1及其之后的版本的安装方法</h5><p>从CUDA 10.1起，安装界面有所不同，比如安装<strong>CUDA 10.1</strong>版本<code>cuda_10.1.243_418.87.00_linux.run</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda_10.1.243_418.87.00_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>终端会出现一个框框</p>\n<p><img src=\"https://pic.downk.cc/item/5e919104504f4bcb04a646b2.png\" alt=\"\"></p>\n<p>输入<strong>accept</strong>后，出现</p>\n<p><img src=\"https://pic.downk.cc/item/5e918ea5504f4bcb04a3d678.png\" alt=\"CUDA 10.1\"></p>\n<p>注意，不要选择<strong>Driver</strong>！<strong>如图所选</strong>，移动<strong>下键</strong>至<strong>Install</strong>处，Enter一下立即安装，出现界面</p>\n<p><img src=\"https://pic.downk.cc/item/5e918f1e504f4bcb04a443d9.png\" alt=\"\"></p>\n<p>选择<strong>No</strong>，安装过程中没有什么反应，耐心等待一会儿，终端打印出信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===========</span><br><span class=\"line\">= Summary =</span><br><span class=\"line\">===========</span><br><span class=\"line\"></span><br><span class=\"line\">Driver:   Not Selected</span><br><span class=\"line\">Toolkit:  Installed <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-10.1/</span><br><span class=\"line\">Samples:  Installed <span class=\"keyword\">in</span> /home/unix/</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure that</span><br><span class=\"line\"> -   PATH includes /usr/<span class=\"built_in\">local</span>/cuda-10.1/bin</span><br><span class=\"line\"> -   LD_LIBRARY_PATH includes /usr/<span class=\"built_in\">local</span>/cuda-10.1/lib64, or, add /usr/<span class=\"built_in\">local</span>/cuda-10.1/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\"></span><br><span class=\"line\">To uninstall the CUDA Toolkit, run cuda-uninstaller <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-10.1/bin</span><br><span class=\"line\"></span><br><span class=\"line\">Please see CUDA_Installation_Guide_Linux.pdf <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/cuda-10.1/doc/pdf <span class=\"keyword\">for</span> detailed information on setting up CUDA.</span><br><span class=\"line\">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 418.00 is required <span class=\"keyword\">for</span> CUDA 10.1 functionality to work.</span><br><span class=\"line\">To install the driver using this installer, run the following <span class=\"built_in\">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:</span><br><span class=\"line\">    sudo &lt;CudaInstaller&gt;.run --silent --driver</span><br><span class=\"line\"></span><br><span class=\"line\">Logfile is /var/<span class=\"built_in\">log</span>/cuda-installer.log</span><br></pre></td></tr></table></figure>\n\n<p>与之前的信息差不多，具体请看之前的描述。CUDA 10.2安装方法与CUDA 10.1类似。</p>\n<h4 id=\"卸载CUDA\"><a href=\"#卸载CUDA\" class=\"headerlink\" title=\"卸载CUDA\"></a>卸载CUDA</h4><ul>\n<li><p>CUDA 10.0及其之前版本</p>\n<p>以CUDA 9.1为例，CUDA 9.1的卸载脚本在/usr/local/cuda-9.1/bin里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">sudo ./cuda-9.1/bin/uninstall_cuda_9.1.pl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CUDA 10.1及其之后的版本</p>\n<p>卸载CUDA 10.1和10.2有所不同，需要运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">sudo ./cuda-10.1/bin/cuda-uninstaller</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"查看当前CUDA版本的符号链接\"><a href=\"#查看当前CUDA版本的符号链接\" class=\"headerlink\" title=\"查看当前CUDA版本的符号链接\"></a>查看当前CUDA版本的符号链接</h4><p>查看当前cuda对应的版本（符号链接）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"built_in\">stat</span> cuda</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  文件：<span class=\"string\">\"cuda\"</span> -&gt; <span class=\"string\">\"/usr/local/cuda-9.0\"</span></span><br><span class=\"line\">  大小：19        \t块：0          IO 块：4096   符号链接</span><br><span class=\"line\">设备：fd00h/64768d\tInode：20341519    硬链接：1</span><br><span class=\"line\">权限：(0777/lrwxrwxrwx)  Uid：(    0/    root)   Gid：(    0/    root)</span><br><span class=\"line\">环境：unconfined_u:object_r:usr_t:s0</span><br><span class=\"line\">最近访问：2020-04-10 14:43:19.316455577 +0800</span><br><span class=\"line\">最近更改：2019-09-26 22:20:21.054175738 +0800</span><br><span class=\"line\">最近改动：2019-09-26 22:20:21.054175738 +0800</span><br><span class=\"line\">创建时间：-</span><br></pre></td></tr></table></figure>\n\n<p>之前为cuda-9.0建立了<strong>符号链接</strong>，所以cuda指向cuda-9.0，因为系统是根据这个<strong>符号链接</strong>来识别当前cuda版本，所以更改其指向即可切换cuda版本。</p>\n<h4 id=\"CUDA环境变量配置\"><a href=\"#CUDA环境变量配置\" class=\"headerlink\" title=\"CUDA环境变量配置\"></a>CUDA环境变量配置</h4><p>建议在bash环境下运行，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash</span><br></pre></td></tr></table></figure>\n\n<p>进入bash shell。</p>\n<p>为了管理方便，管理员可以在文件<code>/etc/profile</code>里全局配置CUDA环境变量，如果是个人Linux系统或者普通用户，在文件<code>~/.bashrc</code>下配置CUDA环境变量。</p>\n<ul>\n<li><p><strong>全局添加CUDA环境变量（管理员操作）</strong></p>\n<p>这种修改方式使CUDA配置应用到每位普通用户的shell里</p>\n<p>打开全局环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nvim /etc/profile    // 为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.</span><br></pre></td></tr></table></figure>\n\n<p>然后在打开的文件里的末尾新增四条命令，具体操作是：按住大写<code>G</code>键跳转到文本的最后一行行首，再按住<code>$</code>，也就是‘shift + 4’键跳转到最后一行的最后一个字符，按住<code>i</code>键进入插入模式，使光标右移一个字符，再回车换行后，添加以下变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CUDA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cuda -&gt; cuda9.1</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda/bin<span class=\"variable\">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># include -&gt; targets/x86_64-linux/include</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CPATH=/usr/<span class=\"built_in\">local</span>/cuda/include:<span class=\"variable\">$CPATH</span> </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=<span class=\"variable\">$LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda/lib64 </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"comment\"># export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新配置，使配置文件生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>普通用户添加CUDA环境变量</strong></p>\n<p>只对当前shell有效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>同样的操作，在文件末尾新增四条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CUDA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cuda -&gt; cuda9.1</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda/bin<span class=\"variable\">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># include -&gt; targets/x86_64-linux/include</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CPATH=/usr/<span class=\"built_in\">local</span>/cuda/include:<span class=\"variable\">$CPATH</span> </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=<span class=\"variable\">$LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda/lib64 </span><br><span class=\"line\"><span class=\"comment\"># lib64 -&gt; targets/x86_64-linux/lib</span></span><br><span class=\"line\"><span class=\"comment\"># export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"验证CUDA安装\"><a href=\"#验证CUDA安装\" class=\"headerlink\" title=\"验证CUDA安装\"></a>验证CUDA安装</h4><p>在安装CUDA时，比如在安装CUDA 9.1时，有这么一句提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// CUDA 9.1的示例，可以安装，方便测试</span><br><span class=\"line\">Install the CUDA 9.1 Samples?</span><br><span class=\"line\">(y)es/(n)o/(q)uit: y</span><br><span class=\"line\"></span><br><span class=\"line\">// CUDA 9.1的示例位置，默认即可，测试完成后可以删掉，按Enter键表示默认</span><br><span class=\"line\">Enter CUDA Samples Location</span><br><span class=\"line\"> [ default is /home/unix ]:</span><br></pre></td></tr></table></figure>\n\n<p>为了验证CUDA 9.1是否被安装完成，选择安装示例，默认的安装位置是<strong>根目录</strong>，进入根目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">cd</span> NVIDIA_CUDA-9.1_Samples/1_Utilities/deviceQuery    // 选择其中一个示例进行测试</span><br><span class=\"line\">make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n\n<p>如果成功，会显示<code>Result = PASS</code>，否则根据错误提示解决问题。</p>\n<h4 id=\"查看CUDA当前版本\"><a href=\"#查看CUDA当前版本\" class=\"headerlink\" title=\"查看CUDA当前版本\"></a>查看CUDA当前版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/<span class=\"built_in\">local</span>/cuda/version.txt</span><br></pre></td></tr></table></figure>\n\n<p>如果是在终端命令行下安装的CUDA，则需要安装成功后开启桌面服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n\n<p>然后再按通过<code>Ctrl + Alt + F7</code>可返回桌面模式。</p>\n<h3 id=\"cuDNN安装\"><a href=\"#cuDNN安装\" class=\"headerlink\" title=\"cuDNN安装*\"></a>cuDNN安装*</h3><p>首先登录<a href=\"https://developer.nvidia.com/rdp/cuDNN-archive\">官网</a>进行注册，然后才能选择对应版本的cuDNN进行下载。以cuDNN7.0.5为例进行说明，其它版本与此类似。</p>\n<p>按照<a href=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux\">官方指导教程</a>进行cuDNN配置。</p>\n<h4 id=\"cuDNN文件下载\"><a href=\"#cuDNN文件下载\" class=\"headerlink\" title=\"cuDNN文件下载\"></a>cuDNN文件下载</h4><p>首先要确定要下载的cuDNN版本，<strong>仔细看清楚其对应的CUDA版本</strong>，以cuDNN对应的CUDA 9.0为例，推荐下载<strong>cuDNN v7.0.5 Library for Linux</strong>类似的压缩包。</p>\n<p><img src=\"https://pic.downk.cc/item/5e9518fcc2a9a83be5720e10.png\" alt=\"\"></p>\n<p>下载完成后，文件为cudnn-9.0-linux-x64-v7.solitairetheme8，这其实是一个压缩包，解压方法与<code>.tgz</code>格式的文件一致。建立cuDNN文件夹，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/NVIDIA/cuDNN</span><br></pre></td></tr></table></figure>\n\n<p>将其拖入到服务器中（使用FileZilla、Xftp进行文件传输）里的NVIDIA文件下的cuDNN文件夹下。</p>\n<h4 id=\"cuDNN文件解压\"><a href=\"#cuDNN文件解压\" class=\"headerlink\" title=\"cuDNN文件解压\"></a>cuDNN文件解压</h4><p>解压cudnn-9.0-linux-x64-v7.solitairetheme8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cudnn-9.0-linux-x64-v7.solitairetheme8</span><br></pre></td></tr></table></figure>\n\n<p>解压后的文件都在名为<code>cuda</code>的文件夹下，如图</p>\n<p><img src=\"https://pic.downk.cc/item/5e958245c2a9a83be5b9b2a0.png\" alt=\"\"></p>\n<p><code>cudnn-9.0-linux-x64-v7.solitairetheme8</code>的文件组成如下</p>\n<p><img src=\"https://pic.downk.cc/item/5e958783c2a9a83be5bd2a6a.jpg\" alt=\"\"></p>\n<p>查看<code>linudnn.so</code>、<code>libcudnn.so.7</code>、<code>libcudnn.so.7.0.5</code>的关系</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll ~/NVIDIA/cuDNN/lib64</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<p><img src=\"https://pic.downk.cc/item/5e95ada0c2a9a83be5d76131.png\" alt=\"\"></p>\n<p>说明<code>linudnn.so</code>、<code>libcudnn.so.7</code>、<code>libcudnn.so.7.0.5</code>其实是同一个文件的不同扩展名。</p>\n<h4 id=\"cuDNN配置\"><a href=\"#cuDNN配置\" class=\"headerlink\" title=\"cuDNN配置\"></a>cuDNN配置</h4><p>解压文件在<code>~/NVIDIA/cuDNN/cuda</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制头文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/cuDNN/</span><br><span class=\"line\">sudo cp cuda/include/cudnn.h /usr/<span class=\"built_in\">local</span>/cuda/include </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制动态链接库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/NVIDIA/cuDNN/</span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn* /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>\n\n<p>配置权限，使所有用户具有可读权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h</span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看cuDNN版本\"><a href=\"#查看cuDNN版本\" class=\"headerlink\" title=\"查看cuDNN版本\"></a>查看cuDNN版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Anaconda3安装\"><a href=\"#Anaconda3安装\" class=\"headerlink\" title=\"Anaconda3安装\"></a>Anaconda3安装</h3><h4 id=\"安装Anaconda3\"><a href=\"#安装Anaconda3\" class=\"headerlink\" title=\"安装Anaconda3\"></a>安装Anaconda3</h4><p>在<a href=\"https://repo.anaconda.com/archive/\">官方repo</a>下载<strong><em>Anaconda</em></strong>安装包（<code>.sh</code>后缀名），如果下载速度过慢，访问<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\">国内镜像源</a>下载，右键复制对应Anaconda包的链接，使用<code>wget</code>指令下载，注意下载时注意该Anaconda包是基于Python 3.6还是Python 3.7的，<strong>推荐Python 3.6</strong>，下载<em>Anaconda3-5.2.0-Linux-x86_64.sh</em>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">wget -c https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p><em>Anaconda3-5.2.0-Linux-x86_64.sh</em>这是 <strong><em>python3.6</em></strong> 版本的Anaconda安装包，继续运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>按<code>Enter</code>键继续，出现Anaconda版本的一些说明，此时按一下<code>space</code>(空格)键，有如下提示，在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Do you accept the license terms? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>紧接着有提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Anaconda3 will now be installed into this location:</span><br><span class=\"line\">/home/<span class=\"built_in\">test</span>/anaconda3</span><br><span class=\"line\"></span><br><span class=\"line\">  - Press ENTER to confirm the location</span><br><span class=\"line\">  - Press CTRL-C to abort the installation</span><br><span class=\"line\">  - Or specify a different location below</span><br><span class=\"line\"></span><br><span class=\"line\">[/home/<span class=\"built_in\">test</span>/anaconda3] &gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>按下<code>Enter</code>键即可开始安装，安装完成后，提示如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">installation finished.</span><br><span class=\"line\">Do you wish the installer to prepend the Anaconda3 install location</span><br><span class=\"line\">to PATH <span class=\"keyword\">in</span> your /home/<span class=\"built_in\">test</span>/.bashrc ? [yes|no]</span><br><span class=\"line\">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>\n\n<p>在<code>[no] &gt;&gt;&gt;</code> 后面输入<code>yes</code>后出现Anaconda安装成功的消息，此时出现<em>是否安装Microsoft VSCode</em>的消息，输入<code>no</code>即可。</p>\n<p>python3.6版本的Anaconda安装完成，此时在终端输入<code>conda</code>，会提示<code>conda:未找到命令</code>，不要慌，反手输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>刷新环境，再输入<code>conda</code>即有消息提示，表明conda安装成功。</p>\n<h4 id=\"配置Anaconda国内开源镜像\"><a href=\"#配置Anaconda国内开源镜像\" class=\"headerlink\" title=\"配置Anaconda国内开源镜像\"></a>配置Anaconda国内开源镜像</h4><p>显示有关当前conda安装的信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    active environment : None</span><br><span class=\"line\">      user config file : /home/adoredee/.condarc</span><br><span class=\"line\">populated config files : </span><br><span class=\"line\">         conda version : 4.8.3</span><br><span class=\"line\">   conda-build version : not installed</span><br><span class=\"line\">        python version : 3.7.0.final.0</span><br><span class=\"line\">      virtual packages : __glibc=2.17</span><br><span class=\"line\">      base environment : /home/adoredee/anaconda3  (writable)</span><br><span class=\"line\">          channel URLs : https://repo.anaconda.com/pkgs/main/linux-64</span><br><span class=\"line\">                         https://repo.anaconda.com/pkgs/main/noarch</span><br><span class=\"line\">                         https://repo.anaconda.com/pkgs/r/linux-64</span><br><span class=\"line\">                         https://repo.anaconda.com/pkgs/r/noarch</span><br><span class=\"line\">         package cache : /home/adoredee/anaconda3/pkgs</span><br><span class=\"line\">                         /home/adoredee/.conda/pkgs</span><br><span class=\"line\">      envs directories : /home/adoredee/anaconda3/envs</span><br><span class=\"line\">                         /home/adoredee/.conda/envs</span><br><span class=\"line\">              platform : linux-64</span><br><span class=\"line\">            user-agent : conda/4.8.3 requests/2.23.0 CPython/3.7.0 Linux/3.10.0-957.el7.x86_64 centos/7.7.1908 glibc/2.17</span><br><span class=\"line\">               UID:GID : 1000:1000</span><br><span class=\"line\">            netrc file : None</span><br><span class=\"line\">          offline mode : False</span><br></pre></td></tr></table></figure>\n\n<p>可以看到在conda安装好之后，默认的镜像是官方的（<strong>channel URLs</strong>），由于官网的镜像在境外，国内访问较慢，配置国内的镜像能够加快访问的速度。</p>\n<p>上海交通大学镜像源：<a href=\"https://mirrors.sjtug.sjtu.edu.cn/anaconda/\">https://mirrors.sjtug.sjtu.edu.cn/anaconda/</a></p>\n<p>清华大学镜像源：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/</a></p>\n<p><strong>创建配置文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.condarc</span><br></pre></td></tr></table></figure>\n\n<p>如果使用<a href=\"https://mirrors.sjtug.sjtu.edu.cn/#/\">上海交通大学镜像源</a>，将以下配置写入<code>~/.condarc</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: <span class=\"literal\">true</span></span><br><span class=\"line\">channel_alias: https://anaconda.mirrors.sjtug.sjtu.edu.cn</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/free</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/mro</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r</span><br><span class=\"line\">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  bioconda: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  menpo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  soumith: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  viscid-hub: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class=\"line\">  atztogo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br></pre></td></tr></table></figure>\n\n<p>如果使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\">清华大学镜像源</a>，将以下配置写入<code>~/.bashrc</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: <span class=\"literal\">true</span></span><br><span class=\"line\">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>\n\n<p><strong>清除索引缓存</strong>，保证用的是镜像站提供的索引：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda clean -i</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载Anaconda3\"><a href=\"#卸载Anaconda3\" class=\"headerlink\" title=\"卸载Anaconda3\"></a>卸载Anaconda3</h4><p>按照<a href=\"https://docs.anaconda.com/anaconda/install/uninstall/\">官方卸载指导</a>，Anaconda3安装在<code>~/anaconda3</code>文件夹下，首先删除目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf anaconda3</span><br></pre></td></tr></table></figure>\n\n<p>清理<code>.bashrc</code>里的Anaconda环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>清理隐藏文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm .condarc</span><br><span class=\"line\">rm -rf ~/.condarc ~/.conda ~/.continuum</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"conda常用命令\"><a href=\"#conda常用命令\" class=\"headerlink\" title=\"conda常用命令\"></a>conda常用命令</h4><h5 id=\"关于环境\"><a href=\"#关于环境\" class=\"headerlink\" title=\"关于环境\"></a>关于环境</h5><p><strong>创建一个名为myenv的环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n myenv pip python=3.6</span><br></pre></td></tr></table></figure>\n\n<p><strong>激活myenv环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate myenv</span><br></pre></td></tr></table></figure>\n\n<p><strong>退出环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> deactivate myenv</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除一个已有的环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate myenv    <span class=\"comment\"># for Windows</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> deactivate myenv    <span class=\"comment\"># for Linux &amp; Mac</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查看Anaconda环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看已安装的虚拟环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info -e</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda envs</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除虚拟环境</strong></p>\n<p>输出虚拟环境myenv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n myenv --all</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h5><p><strong>安装</strong></p>\n<p>对于Python的包，尽可能使用<code>pip</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install packages</span><br></pre></td></tr></table></figure>\n\n<p><code>pip</code>安装不了的，使用conda</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install packages\t\t\t<span class=\"comment\"># 安装最新版本</span></span><br><span class=\"line\">conda install packsges==xxx\t\t<span class=\"comment\"># 安装指定版本</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前环境下已安装的包</strong></p>\n<p>python环境下的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n\n<p>conda环境下的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda list</span><br></pre></td></tr></table></figure>\n\n<p>查看某一conda环境下的包，比如查看myenv环境下的安装的包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda list -n myenv</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找package信息</strong></p>\n<p><strong>不同镜像源的包的信息不一样，尽量使用<code>pkgs/main</code>channels的包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search packages</span><br></pre></td></tr></table></figure>\n\n<p><strong>升级conda</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n\n<p><strong>卸载某一个环境下的包</strong></p>\n<p>在myenv虚拟环境下卸载某一packsges</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n myenv packages</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pip安装\"><a href=\"#pip安装\" class=\"headerlink\" title=\"pip安装\"></a>pip安装</h3><p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。目前如果在 <a href=\"https://www.python.org/\">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p>\n<p>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p>\n<p>pip 官网：<a href=\"https://pypi.org/project/pip/\">https://pypi.org/project/pip/</a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>在终端利用SSH登录到服务器系统(CentOS 7.6)，由于<strong>普通用户</strong>无法使用<code>sudo</code>，如果没有安装python，则需<strong>手动安装pip</strong>，在终端中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python3 get-pip.py --user</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>:参数<code>--user</code>一定要记得使用，否则会提示权限不足。</p>\n<p>安装完成后会在家目录下生成 .local 文件夹，里面有bin文件夹和lib文件夹，加入环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=~/.<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>此时已在非root用户环境中安装好通用的Python包管理工具<code>pip</code>。</p>\n<p>如果系统安装了Python且Python 2.7.9 + 或 Python 3.4+ 以上版本，<strong>自带 pip 工具</strong>。</p>\n<h4 id=\"更换国内镜像源\"><a href=\"#更换国内镜像源\" class=\"headerlink\" title=\"更换国内镜像源\"></a>更换国内镜像源</h4><p>为了加快下载速度，更换到<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\">国内的镜像源</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pip -U</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><strong>显示版本和路径</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取帮助</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>升级 pip</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U pip</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果这个升级命令出现问题 ，可以使用以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo easy_install --upgrade pip</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>安装包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install SomePackage              # 最新版本</span><br><span class=\"line\">pip install SomePackage&#x3D;&#x3D;1.0.4       # 指定版本</span><br><span class=\"line\">pip install &#39;SomePackage&gt;&#x3D;1.0.4&#39;     # 最小版本</span><br></pre></td></tr></table></figure>\n\n<p>比如要安装 Django。用以下的一条命令就可以，方便快捷。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Django==1.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>升级包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade SomePackage</span><br></pre></td></tr></table></figure>\n\n<p>升级指定的包，通过使用==, &gt;=, &lt;=, &gt;, &lt; 来指定一个版本号。</p>\n<p><strong>卸载包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip uninstall SomePackage</span><br></pre></td></tr></table></figure>\n\n<p><strong>搜索包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip search SomePackage</span><br></pre></td></tr></table></figure>\n\n<p><strong>显示安装包信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看指定包的详细信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show -f SomePackage</span><br></pre></td></tr></table></figure>\n\n<p><strong>列出已安装的包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看可升级的包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list -o</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事项</strong></p>\n<p>如果 Python2 和 Python3 同时有 pip，则使用方法如下：</p>\n<p>Python2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python2 -m pip install XXX</span><br></pre></td></tr></table></figure>\n\n<p>Python3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install XXX</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OpenCV安装\"><a href=\"#OpenCV安装\" class=\"headerlink\" title=\"OpenCV安装\"></a>OpenCV安装</h3><h4 id=\"Opencv-for-Python\"><a href=\"#Opencv-for-Python\" class=\"headerlink\" title=\"Opencv for Python\"></a>Opencv for Python</h4><p>首先确保Linux系统安装了Python 3.x，推荐<a href=\"#Anaconda3安装\">Anaconda</a>，激活不同的虚拟环境后，配置基于Python 3.x的Opencv 4.2。</p>\n<p>激活对应的虚拟环境，比如我使用了Anaconda创建了一个虚拟环境<code>tensorflow-gpu</code>，激活：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu</span><br></pre></td></tr></table></figure>\n\n<p>此时终端会变成如下模样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(tensorflow-gpu) username@devices:~$</span><br></pre></td></tr></table></figure>\n\n<p>即为正常。</p>\n<p>上述命令解释</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th align=\"center\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">username</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">devices</td>\n<td align=\"center\">主机名</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">当前用户主目录</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">普通用户</td>\n</tr>\n<tr>\n<td align=\"center\">(tensorflow-gpu)</td>\n<td align=\"center\">系统指定环境</td>\n</tr>\n</tbody></table>\n<p>然后使用<code>pip</code>命令进行安装，查找<a href=\"https://pypi.org/project/opencv-python/3.4.9.33/#history\">opencv的不同版本</a>，使用下面的命令，替换版本号即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python==3.4.9.33</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证</strong>，在虚拟环境中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.8 |Anaconda, Inc.| (default, Dec 30 2018, 01:22:34) </span><br><span class=\"line\">[GCC 7.3.0] on linux</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span>, <span class=\"string\">\"copyright\"</span>, <span class=\"string\">\"credits\"</span> or <span class=\"string\">\"license\"</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接着输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import cv2</span><br><span class=\"line\">&gt;&gt;&gt; cv2.__version__</span><br><span class=\"line\"><span class=\"string\">'3.4.9'</span></span><br></pre></td></tr></table></figure>\n\n<p>结果显示Opencv3.4.9，安装正确。</p>\n<p><strong><del>源码编译安装</del></strong></p>\n<p>参考Opencv 4.2.0的官网提示](<a href=\"https://docs.opencv.org/4.2.0/d2/de6/tutorial_py_setup_in_ubuntu.html)，其教程是在Ubuntu系统进行的，服务器系统为CentOS，编译安装中注意区别。\">https://docs.opencv.org/4.2.0/d2/de6/tutorial_py_setup_in_ubuntu.html)，其教程是在Ubuntu系统进行的，服务器系统为CentOS，编译安装中注意区别。</a></p>\n<ul>\n<li><p><strong>下载</strong></p>\n<p>进入官网 : <a href=\"http://opencv.org/releases.html\">http://opencv.org/releases.html</a> 或者 <a href=\"https://github.com/opencv/opencv/releases\">https://github.com/opencv/opencv/releases</a>, 选择需要的 <code>x.x.x.zip</code>版本，以载<code>opencv-4.2.0.zip</code> 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">wget -c https://github.com/opencv/opencv/archive/4.2.0.zip</span><br><span class=\"line\">unzip</span><br></pre></td></tr></table></figure>\n\n<p>文件被解压到名为<code>opencv-4.2.0</code>的文件夹内</p>\n</li>\n<li><p><strong>安装依赖</strong></p>\n<p>确保系统安装了<code>cmake</code>、<code>gcc</code>、<code>g++</code>、<code>python 3.x</code>以及以及对应的<code>numpy</code>包。</p>\n<p>Opencv 4.2.0支持相机、媒体（ffmpeg、gstreamer）等特征</p>\n<p><strong>安装多媒体框架ffmpeg</strong></p>\n<p>centos服务器系统是非常稳定的，所以官方的RPM repository提供的RPM包往往是很滞后的，毕竟是服务器版本，安全稳定是重点，如果是个人用户，推荐Ubuntu，环境搭建起来毕竟方便。CentOS提供的RPM包不够丰富，很多时候需要自己编译，而<strong>EPEL</strong>恰恰可以解决这两方面的问题。<strong>EPEL的全称叫 Extra Packages for Enterprise Linux</strong> 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。</p>\n<p><strong>EPEL则为服务器版本提供大量的RPM包，而且大多数RPM包在官方 repository 中是找不到的</strong>。<strong>绝大多数rpm包要比官方repository 的RPM包版本要来得新，EPEL会有很多源地址</strong></p>\n<h5 id=\"1-FFMPEG安装\"><a href=\"#1-FFMPEG安装\" class=\"headerlink\" title=\"1. FFMPEG安装\"></a>1. FFMPEG安装</h5><p><strong>利用EPEL安装FFMPEG</strong>，<a href=\"https://linoxide.com/linux-how-to/install-ffmpeg-centos-7/\">参考教程</a>。</p>\n<ul>\n<li><p><strong>安装EPEL repo</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>添加可用的epel repo</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class=\"line\">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装FFMPEG及其开发包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看FFMPEG版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg version 2.8.15 Copyright (c) 2000-2018 the FFmpeg developers</span><br><span class=\"line\">  built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-36)</span><br><span class=\"line\">  configuration: --prefix=/usr --bindir=/usr/bin --datadir=/usr/share/ffmpeg --incdir=/usr/include/ffmpeg --libdir=/usr/lib64 --mandir=/usr/share/man --arch=x86_64 --optflags=<span class=\"string\">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic'</span> --extra-ldflags=<span class=\"string\">'-Wl,-z,relro '</span> --<span class=\"built_in\">enable</span>-libopencore-amrnb --<span class=\"built_in\">enable</span>-libopencore-amrwb --<span class=\"built_in\">enable</span>-libvo-amrwbenc --<span class=\"built_in\">enable</span>-version3 --<span class=\"built_in\">enable</span>-bzlib --<span class=\"built_in\">disable</span>-crystalhd --<span class=\"built_in\">enable</span>-gnutls --<span class=\"built_in\">enable</span>-ladspa --<span class=\"built_in\">enable</span>-libass --<span class=\"built_in\">enable</span>-libcdio --<span class=\"built_in\">enable</span>-libdc1394 --<span class=\"built_in\">enable</span>-libfdk-aac --<span class=\"built_in\">enable</span>-nonfree --<span class=\"built_in\">disable</span>-indev=jack --<span class=\"built_in\">enable</span>-libfreetype --<span class=\"built_in\">enable</span>-libgsm --<span class=\"built_in\">enable</span>-libmp3lame --<span class=\"built_in\">enable</span>-openal --<span class=\"built_in\">enable</span>-libopenjpeg --<span class=\"built_in\">enable</span>-libopus --<span class=\"built_in\">enable</span>-libpulse --<span class=\"built_in\">enable</span>-libschroedinger --<span class=\"built_in\">enable</span>-libsoxr --<span class=\"built_in\">enable</span>-libspeex --<span class=\"built_in\">enable</span>-libtheora --<span class=\"built_in\">enable</span>-libvorbis --<span class=\"built_in\">enable</span>-libv4l2 --<span class=\"built_in\">enable</span>-libx264 --<span class=\"built_in\">enable</span>-libx265 --<span class=\"built_in\">enable</span>-libxvid --<span class=\"built_in\">enable</span>-x11grab --<span class=\"built_in\">enable</span>-avfilter --<span class=\"built_in\">enable</span>-avresample --<span class=\"built_in\">enable</span>-postproc --<span class=\"built_in\">enable</span>-pthreads --<span class=\"built_in\">disable</span>-static --<span class=\"built_in\">enable</span>-shared --<span class=\"built_in\">enable</span>-gpl --<span class=\"built_in\">disable</span>-debug --<span class=\"built_in\">disable</span>-stripping --shlibdir=/usr/lib64 --<span class=\"built_in\">enable</span>-runtime-cpudetect</span><br><span class=\"line\">  libavutil      54. 31.100 / 54. 31.100</span><br><span class=\"line\">  libavcodec     56. 60.100 / 56. 60.100</span><br><span class=\"line\">  libavformat    56. 40.101 / 56. 40.101</span><br><span class=\"line\">  libavdevice    56.  4.100 / 56.  4.100</span><br><span class=\"line\">  libavfilter     5. 40.101 /  5. 40.101</span><br><span class=\"line\">  libavresample   2.  1.  0 /  2.  1.  0</span><br><span class=\"line\">  libswscale      3.  1.101 /  3.  1.101</span><br><span class=\"line\">  libswresample   1.  2.101 /  1.  2.101</span><br><span class=\"line\">  libpostproc    53.  3.100 / 53.  3.100</span><br><span class=\"line\">Hyper fast Audio and Video encoder</span><br><span class=\"line\">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</span><br><span class=\"line\"></span><br><span class=\"line\">Use -h to get full <span class=\"built_in\">help</span> or, even better, run <span class=\"string\">'man ffmpeg'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>FFMPEG安装成功。</strong></p>\n</li>\n</ul>\n<h5 id=\"3-gtk3\"><a href=\"#3-gtk3\" class=\"headerlink\" title=\"3. gtk3\"></a>3. gtk3</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gtk3 gtk3-devel gtk3-devel-docs</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-v4l（Video-for-Linux）\"><a href=\"#4-v4l（Video-for-Linux）\" class=\"headerlink\" title=\"4. v4l（Video for Linux）\"></a>4. v4l（Video for Linux）</h5><p><a href=\"http://www.linuxfromscratch.org/blfs/view/svn/multimedia/v4l-utils.html\">参考链接</a>，可选。</p>\n<h5 id=\"5-gstreamer\"><a href=\"#5-gstreamer\" class=\"headerlink\" title=\"5. gstreamer\"></a>5. gstreamer</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gstreamer*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译</p>\n<p>如果对 <code>CMakeLists</code> 文件不进行修改，那么 <code>Opencv</code> 默认的安装位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/include/opencv2/         -- 新版Opencv核心头文件</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/include/opencv/          -- 旧Opencv核心头文件</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/share/OpenCV/            -- 一些Opencv其他安装信息</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/lib/                     -- Opencv中的动态链接库存放位置</span><br></pre></td></tr></table></figure>\n\n<p>开始编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> opencv-4.2.0</span><br><span class=\"line\">mkdir build <span class=\"comment\"># 创建编译的文件目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装目录: /usr/local</span></span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release \\</span><br><span class=\"line\">      -D CMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span> \\    </span><br><span class=\"line\">      -DBUILD_JPEG=ON -DBUILD_TIFF=ON \\</span><br><span class=\"line\">      -DBUILD_PNG=ON ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"GCC多版本切换\"><a href=\"#GCC多版本切换\" class=\"headerlink\" title=\"GCC多版本切换*\"></a>GCC多版本切换*</h3><p>在CentOS 7下，使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gcc</span><br></pre></td></tr></table></figure>\n\n<p>CentOS官方的gcc或者g++版本最多到4.8.5，如果要安装Tensorflow 2.0以上的版本，就需要GCC 7.3.1，由于CentOS源没有提供高版本的GCC安装包，这时就不能通过安装包安装，通常的解决方案就是通过编译安装高版本的GCC。在这里介绍如何利用CentOS的新特性<strong>SCL</strong>进行高版本GCC的安装。</p>\n<p><a href=\"https://www.softwarecollections.org/en/scls/user/rhscl/\">SCL软件集</a>（Software Collections）是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。</p>\n<p><strong>devtoolset和GCC对应关系如下表</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">devtoolset</th>\n<th align=\"center\">GCC版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">devtoolset-3</td>\n<td align=\"center\">4.9.2</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-4</td>\n<td align=\"center\">5.3.1</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-6</td>\n<td align=\"center\">6.3.1</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-7</td>\n<td align=\"center\">7.3.1</td>\n</tr>\n<tr>\n<td align=\"center\">devtoolset-8</td>\n<td align=\"center\">8.3.1</td>\n</tr>\n</tbody></table>\n<h4 id=\"添加centos-release-scl包\"><a href=\"#添加centos-release-scl包\" class=\"headerlink\" title=\"添加centos-release-scl包\"></a>添加centos-release-scl包</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install centos-release-scl</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用RHSCL库\"><a href=\"#启用RHSCL库\" class=\"headerlink\" title=\"启用RHSCL库\"></a>启用RHSCL库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --<span class=\"built_in\">enable</span> rhel-server-rhscl-7-rpms</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装GCC\"><a href=\"#安装GCC\" class=\"headerlink\" title=\"安装GCC\"></a>安装GCC</h4><p>Devtoolset 默认安装到 <code>/opt/rh</code> 目录下</p>\n<h5 id=\"GCC-4-9-2\"><a href=\"#GCC-4-9-2\" class=\"headerlink\" title=\"GCC 4.9.2\"></a>GCC 4.9.2</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-3</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-5-3-1\"><a href=\"#GCC-5-3-1\" class=\"headerlink\" title=\"GCC 5.3.1\"></a>GCC 5.3.1</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-6-3-1\"><a href=\"#GCC-6-3-1\" class=\"headerlink\" title=\"GCC 6.3.1\"></a>GCC 6.3.1</h5><p><a href=\"https://www.softwarecollections.org/en/scls/rhscl/devtoolset-6/\">参考官方链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-6</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-7-3-1\"><a href=\"#GCC-7-3-1\" class=\"headerlink\" title=\"GCC 7.3.1\"></a>GCC 7.3.1</h5><p><a href=\"https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/\">参考官方链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-7</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GCC-8-3-1\"><a href=\"#GCC-8-3-1\" class=\"headerlink\" title=\"GCC 8.3.1\"></a>GCC 8.3.1</h5><p><a href=\"https://www.softwarecollections.org/en/scls/rhscl/devtoolset-8/\">参考官方链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-8</span><br></pre></td></tr></table></figure>\n\n<p>scl-utils 只是方便 Software Collections 使用，比如要查看当前安装了哪些Software Collections，可以使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl --list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"临时生效\"><a href=\"#临时生效\" class=\"headerlink\" title=\"临时生效\"></a>临时生效</h4><p>假设使<code>GCC 7.3.1</code>生效，其对应<code>devtoolset-7</code>，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl <span class=\"built_in\">enable</span> devtoolset-7 bash</span><br></pre></td></tr></table></figure>\n\n<p>这种方法只对当前的shell环境有效，退出后GCC回退到系统指定的版本。</p>\n<h4 id=\"全局生效\"><a href=\"#全局生效\" class=\"headerlink\" title=\"全局生效\"></a>全局生效</h4><p><a href=\"http://kuanghy.github.io/2016/03/22/devtoolset\">执行下列命令</a>可使对应的GCC全局有效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/rh/devtoolset-7/root/usr/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"><span class=\"built_in\">hash</span> -r</span><br></pre></td></tr></table></figure>\n\n<p>测试 gcc 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MatLab-R2020a安装\"><a href=\"#MatLab-R2020a安装\" class=\"headerlink\" title=\"MatLab R2020a安装*\"></a>MatLab R2020a安装*</h3><p>NO GUI安装会产生比较多莫名其妙的错误，现场安装吧……</p>\n<h2 id=\"第四章：深度学习环境搭建\"><a href=\"#第四章：深度学习环境搭建\" class=\"headerlink\" title=\"第四章：深度学习环境搭建\"></a>第四章：深度学习环境搭建</h2><h3 id=\"SSH远程登录和文件传输\"><a href=\"#SSH远程登录和文件传输\" class=\"headerlink\" title=\"SSH远程登录和文件传输\"></a>SSH远程登录和文件传输</h3><ul>\n<li><strong>SSH</strong>是用来<strong>登录</strong>远程服务器的安全协议；</li>\n<li><strong>FileZilla</strong>是一个免费开源的FTP软件，支持SSH文件传输协议(SFTP)(可进行本地计算机与远程服务器之间的<strong>文件传输</strong>)</li>\n</ul>\n<p>SSH和FileZilla都安装在<strong>本地计算机系统</strong>中</p>\n<h4 id=\"SSH安装\"><a href=\"#SSH安装\" class=\"headerlink\" title=\"SSH安装\"></a>SSH安装</h4><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">SSH</a>(Secure Shell)由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>\n</blockquote>\n<p>在<strong>本地计算机系统</strong>中，<code>UNIX</code>、<code>Window</code>以及<code>Mac</code>系统都可运行SSH,安装方法如下：</p>\n<ul>\n<li><strong><em>CentOS 7</em></strong></li>\n</ul>\n<p>需要普通管理员权限(sudo)，用快捷键<code>ctrl</code>+<code>alt</code>+<code>t</code>打开终端Terminal窗口，运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>然后回车,输入<code>y</code>，即可安装完成。</p>\n<ul>\n<li><strong><em>Windows10</em></strong></li>\n</ul>\n<p>下载<a href=\"https://www.mls-software.com/files/setupssh-7.9p1-1.exe\">openssh for windows</a>，进行默认安装即可。</p>\n<ul>\n<li><strong><em>Mac</em></strong></li>\n</ul>\n<p>由于Mac本身安装了ssh服务，默认情况下不会开机自启，所以打开终端，输入命令启动<code>sshd服务</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>\n\n<p>输入Mac密码后即可开启。</p>\n<h4 id=\"SSH登录\"><a href=\"#SSH登录\" class=\"headerlink\" title=\"SSH登录\"></a>SSH登录</h4><p>在任一平台上打开终端(Windows上推荐<a href=\"https://www.netsarang.com/zh/xshell-download/\"><strong>Xshell</strong></a>、<a href=\"http://www.hostbuf.com/t/988.html\"><strong>FinalShell</strong></a>，Linux系统和Mac直接打开终端即可)，输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p PORT</span><br></pre></td></tr></table></figure>\n\n<p>其中，<br><code>username</code>为服务器的用户名<br><code>IPaddress</code>为服务器的IP地址<br><code>PORT</code>为服务器端口号，默认为22，已禁止。已设置实验室专用端口，请联系管理员</p>\n<p>输入密码后即可进入自己账户的主目录（普通用户，无root权限）</p>\n<h4 id=\"修改账户密码\"><a href=\"#修改账户密码\" class=\"headerlink\" title=\"修改账户密码\"></a>修改账户密码</h4><p>登录到服务器之后，修改原始密码保证账户安全，直接输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p><code>username</code>为您在服务器上的用户名，根据提示修改新的密码。</p>\n<p>至此，您已经安全登录到服务器上。</p>\n<h4 id=\"FileZilla在Windows和Linux下互传文件\"><a href=\"#FileZilla在Windows和Linux下互传文件\" class=\"headerlink\" title=\"FileZilla在Windows和Linux下互传文件\"></a>FileZilla在Windows和Linux下互传文件</h4><blockquote>\n<p>FileZilla 客户端是一个快速可靠的、跨平台的FTP,FTPS和SFTP客户端。具有图形用户界面(GUI)和很多有用的特性，比如支持FTP, FTP并支持SSL/TLS (FTPS)协议，支持SSH文件传输协议(SFTP)等。</p>\n</blockquote>\n<p>以windows 10为例，下载<a href=\"https://download.filezilla-project.org/client/FileZilla_3.38.1_win64-setup_bundled.exe\">FileZilla</a>，选择安装位置，正常安装即可。</p>\n<p><img src=\"https://pic.downk.cc/item/5e95d3bac2a9a83be5f30b2e.png\" alt=\"\"></p>\n<h4 id=\"FileZilla连接服务器\"><a href=\"#FileZilla连接服务器\" class=\"headerlink\" title=\"FileZilla连接服务器\"></a>FileZilla连接服务器</h4><p>打开FileZilla软件，</p>\n<ul>\n<li><ol>\n<li>点击”<strong>文件</strong>“——“<strong>站点管理器</strong>“</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>点击”<strong>新站点</strong>“，在”<strong>我的站点</strong>“下重命名，此处设为“Lab532”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>继停留在”<strong>站点管理器</strong>“界面，在”<strong>常规</strong>“选项卡中，设置如下：</li>\n</ol>\n<ul>\n<li>主机：<strong>服务器IP地址</strong></li>\n<li>端口：<strong>默认是 22，已禁用，详细端口请联系管理员</strong></li>\n<li>协议：<strong>SFTP - SSH File transfer Protocol</strong></li>\n<li>登录类型：<ul>\n<li>1）若选”<strong>正常</strong>“<ul>\n<li>用户名：username</li>\n<li>密码：password</li>\n</ul>\n</li>\n<li>2）若选”<strong>询问密码</strong>“，只能填写用户名：username，然后点击右下角的”<strong>连接</strong>“，再输入密码。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"4\">\n<li>之后一直ok即可。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h4><p>以window 10为例，利用FileZilla登录到服务器后，可以看到左边是<strong>本地站点</strong>，右边是<strong>远程站点</strong>(服务器上的目录)，如下图所示，直接将本地文件<code>test.py</code>用鼠标拖拽到服务器上的指定目录即可（<strong>上传过程</strong>），这个过程是可逆的（<strong>下载过程</strong>），非常方便。</p>\n<p><img src=\"https://pic.downk.cc/item/5e95d3f9c2a9a83be5f335d0.png\" alt=\"\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>利用<strong>FileZilla</strong>软件配合<strong>SSH</strong>协议，即可完成文件传输及程序运行等必要工作。</p>\n<h3 id=\"CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件\"><a href=\"#CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件\" class=\"headerlink\" title=\"CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件*\"></a>CUDA、cuDNN多版本切换之：修改符号链接和覆盖cuDNN文件*</h3><h4 id=\"CUDA切换\"><a href=\"#CUDA切换\" class=\"headerlink\" title=\"CUDA切换\"></a>CUDA切换</h4><p>在<a href=\"#安装CUDA\">安装CUDA</a>这一小节介绍了多种CUDA文件的安装，这些CUDA版本统一被安装到<code>/usr/local</code>文件夹下，使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll /usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<p><img src=\"https://pic.downk.cc/item/5e95b42ac2a9a83be5dc2927.png\" alt=\"\"></p>\n<p><strong>系统是通过<code>/usr/local/</code>下的<code>cuda</code>符号链接来识别CUDA当前指定的CUDA版本</strong>，比如现在符号链接<code>**cuda**</code>指向<strong>cuda-9.0</strong>，如果要指向其它CUDA版本，修改符号链接即可，比如切换到<strong>CUDA-10.0</strong>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除符号链接</span></span><br><span class=\"line\">sudo rm cuda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建符号链接</span></span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/cuda-10.0 /usr/<span class=\"built_in\">local</span>/cuda</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前<code>cuda</code>指向</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e95b5b6c2a9a83be5dd2da7.png\" alt=\"\"></p>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> cuda</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e95b63cc2a9a83be5dd7b59.png\" alt=\"\"></p>\n<p><strong>查看CUDA版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"cuDNN切换\"><a href=\"#cuDNN切换\" class=\"headerlink\" title=\"cuDNN切换\"></a>cuDNN切换</h4><p>在Tensorflow不同版本的GPU环境配置中，CUDA的切换，往往伴随着cuDNN的切换，cuDNN是由头文件和动态链接库组成的，所以下载对应的cuDNN，按照<a href=\"#cuDNN安装*\">cuDNN的安装方法</a>进行文件替换即可。</p>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这种方法的CUDA和cuDNN版本切换，适用于管理员整体切换和个人使用者，不适合服务器环境下的普通用户，有一种好的解决方法是配合<a href=\"https://modules.readthedocs.io/en/latest/\">Environment Modules</a>来进行环境管理，后续可以进行深入探索，<strong>推荐使用Anaconda来进行CUDA、cuDNN版本的管理。</strong></p>\n<h3 id=\"（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\"><a href=\"#（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\" class=\"headerlink\" title=\"（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN\"></a>（推荐）CUDA、cuDNN多版本切换之：Anaconda下安装不同版本的CUDA、cuDNN</h3><p>虚拟环境的重要性：<strong>无它，唯方便尔。</strong></p>\n<blockquote>\n<p>因为独立的环境利于管理，不激活不会对系统环境造成不必要的影响，若虚拟环境遇到了无法期望的错误，即可删除环境并重新创建即可，不需要重装系统；创建独立的虚拟环境，各个虚拟环境相互独立，互不影响，不同应用可以使用不同的版本，环境内的包升级不影响其他应用。</p>\n</blockquote>\n<p>虚拟环境的创建有很多方法：Anaconda、virtualenv、docker等，但是就深度学习环境来说，Anaconda方便管理和使用，在此推荐<strong>Anaconda</strong>。</p>\n<p>考虑到这么一个场景：苦于科研无想法，于是在github上逛gai碰碰运气，终于看到一个不错的项目，一顿操作，clone这个repo之后，从anaconda创建一个虚拟环境来尝试运行，仔细阅读README，<strong>发现要求特定版本的一些依赖库</strong>，其它的库都还好说，如果要求特定版本的CUDN和cuDNN，如果重新下载安装配置就比较麻烦，何况非管理员用户没有安装和配置权限。这时候考虑Anaconda。</p>\n<p>Anaconda生态比较完整，只要系统里正确安装了<a href=\"#NVIDIA驱动安装（CentOS、Ubuntu）*\">NVIDIA驱动</a>，就可以在Anaconda下的虚拟环境中，安装特定版本的cuda和cudnn，而不必全局进行安装。</p>\n<p>需要注意的是：</p>\n<ul>\n<li><p><strong>Anaconda的 cudatoolkit 不包含完整安装cuda的全部文件，只是包含了用于 tensorflow，PyTorch，xgboost 和 Cupy 等所需要的共享库文件，cuDNN亦是如此。</strong></p>\n</li>\n<li><p><strong>如果系统已经全局安装了CUDA和cuDNN，在虚拟环境中又安装了其它版本的CUDA和cuDNN，互不影响，且首先调用虚拟环境中的版本。</strong></p>\n</li>\n</ul>\n<h4 id=\"conda创建虚拟环境\"><a href=\"#conda创建虚拟环境\" class=\"headerlink\" title=\"conda创建虚拟环境\"></a>conda创建虚拟环境</h4><p>确定系统安装了<a href=\"#Anaconda3安装\">Anaconda3</a>，假设此时要搭建一个Tensorflow 1.6的GPU环境，<a href=\"#Tensorflow建议配置\">查表</a>可知，需求CUDA 9、cuDNN 7版本，python版本指定为3.6。</p>\n<ul>\n<li><p><strong>创建虚拟环境</strong></p>\n<p>在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow16-gpu pip python=3.6</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后，在 <strong>~/anaconda3/env</strong> 文件夹下出现名为为 <strong><em>tensorflow16-gpu</em></strong> 的虚拟环境</p>\n<p>查看当前系统的Anaconda环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>激活虚拟环境</strong></p>\n<p>不建议使用系统建议的激活方式：<code>conda activate tensorflow16-gpu</code>，推荐使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow16-gpu</span><br></pre></td></tr></table></figure>\n\n<p>若要退出当前环境，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> deactivate tensorflow16-gpu</span><br></pre></td></tr></table></figure>\n\n<p>究竟使用哪种激活方式，看Anaconda发展和个人喜好。</p>\n</li>\n</ul>\n<h4 id=\"示例：安装Tensorflow-GPU-1-6（CUDA-9和cuDNN-7）\"><a href=\"#示例：安装Tensorflow-GPU-1-6（CUDA-9和cuDNN-7）\" class=\"headerlink\" title=\"示例：安装Tensorflow-GPU 1.6（CUDA 9和cuDNN 7）\"></a>示例：安装Tensorflow-GPU 1.6（CUDA 9和cuDNN 7）</h4><ul>\n<li><p><strong>安装CUDA 9</strong></p>\n<p><strong>查询Anaconda库里的CUDA版本：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search cuda</span><br></pre></td></tr></table></figure>\n\n<p>截止2020年4月11日，Anaconda官方<a href=\"https://anaconda.org/anaconda/cudatoolkit/files\">CUDA版本</a>包含：<a href=\"https://developer.nvidia.com/cuda-90-download-archive\">9.0</a>、<a href=\"https://developer.nvidia.com/cuda-92-download-archive\">9.2</a>、<a href=\"https://developer.nvidia.com/cuda-10.0-download-archive\">10.0</a>、10.1（<a href=\"https://developer.nvidia.com/cuda-10.1-download-archive-update1\">update1</a>和<a href=\"https://developer.nvidia.com/cuda-10.1-download-archive-update2\">update2</a>）、<a href=\"https://developer.nvidia.com/cuda-downloads\">10.2</a>，Anaconda <a href=\"https://anaconda.org/anaconda/cudatoolkit/files\">CUDA版本</a>紧跟NVIDIA官方<a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">CUDA</a>更新速度，满足绝大部分深度学习环境的要求。</p>\n<p>注意：不同的Anaconda源里的版本不一样，但是channel是<code>pkgs/main</code>的比较权威的，推荐使用<code>pkgs/main</code>里的版本。</p>\n<p><img src=\"https://pic.downk.cc/item/5e97d227c2a9a83be532729a.png\" alt=\"\"></p>\n<p><strong>Tensorflow 1.6 GPU版本需求CUDA 9.0：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudatoolkit==9.0</span><br></pre></td></tr></table></figure>\n\n<p>安装完成</p>\n<p><img src=\"https://pic.downk.cc/item/5e97d5f0c2a9a83be534c17d.png\" alt=\"\"></p>\n</li>\n</ul>\n<ul>\n<li><p><strong>安装cuDNN 7</strong></p>\n<p><strong>查询Anaconda库里的CUDA版本：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search cudnn</span><br></pre></td></tr></table></figure>\n\n<p>截止2020年4月11日，Anaconda官方<a href=\"https://anaconda.org/anaconda/cudnn/files\">cuDNN版本</a>如下，根据需求进行安装，也满足绝大部分深度学习环境的要求。</p>\n<p><img src=\"https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png\" alt=\"\"></p>\n<p><strong>Tensorflow 1.6 GPU版本需求cuDNN 7</strong>。</p>\n<p>选择cuDNN 7.0.5：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudnn==7.0.5</span><br></pre></td></tr></table></figure>\n\n<p>出现错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collecting package metadata (current_repodata.json): <span class=\"keyword\">done</span></span><br><span class=\"line\">Solving environment: failed with initial frozen solve. Retrying with flexible solve.</span><br><span class=\"line\">Collecting package metadata (repodata.json): <span class=\"keyword\">done</span></span><br><span class=\"line\">Solving environment: failed with initial frozen solve. Retrying with flexible solve.</span><br><span class=\"line\">Solving environment: - </span><br><span class=\"line\">Found conflicts! Looking <span class=\"keyword\">for</span> incompatible packages.                                       failed                                                                          </span><br><span class=\"line\">UnsatisfiableError:</span><br></pre></td></tr></table></figure>\n\n<p>这是怎么回事呢？打开<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">cuDNN官网</a>，注意到，同一个版本的cuDNN，可能对应不同的CUDA版本，比如cuDNN 7.0.5可以对应CUDA 8.0、CUDA 9.0和CUDA 9.1，所以查看Anaconda官方里的cuDNN 7.0.5对应哪个CUDA版本。</p>\n<p><img src=\"https://pic.downk.cc/item/5e97db58c2a9a83be5381c80.png\" alt=\"\"></p>\n<p>打开cuDNN的<a href=\"https://anaconda.org/anaconda/cudnn/files\">Anaconda仓库</a>，查询到Anaconda仓库里的cuDNN 7.0.5对应的是CUDA 8.0），因此选择CUDA 9.0对应的<strong>cuDNN 7.1.2</strong>，所以在安装前，使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda search cudnn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e980e14c2a9a83be559cec6.jpg\" alt=\"\"></p>\n<p><strong>查询cuDNN与CUDA的对应关系。</strong></p>\n<p><strong>安装cuDNN 7.1.2：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudnn==7.1.2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e980693c2a9a83be5556703.png\" alt=\"\"></p>\n<p>这种方法安装CUDA和cuDNN，没有单独形成文件夹，都是统一存放在虚拟环境中的<code>lib</code>、<code>include</code>文件夹下，查看<code>CUDA 9.0</code>和<code>cuDNN 7.1.2</code>是否被安装到虚拟环境<code>tensorflow16-gpu</code>中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/lib/</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<p><img src=\"https://pic.downk.cc/item/5e98076bc2a9a83be555d9a8.png\" alt=\"\"></p>\n<p>或者使用以下命令<strong>查看CUDA共享库</strong>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cuda</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcudart.so</span><br><span class=\"line\">libcudart.so.9.0</span><br><span class=\"line\">libcudart.so.9.0.176</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令<strong>查看cuDNN共享库</strong>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/lib/ | grep cudnn</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcudnn.so</span><br><span class=\"line\">libcudnn.so.7</span><br><span class=\"line\">libcudnn.so.7.1.2</span><br><span class=\"line\">libcudnn_static.a</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令<strong>查看cuDNN头文件</strong>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls ~/anaconda3/envs/tensorflow16-gpu/include/ | grep cudnn</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cudnn.h</span><br></pre></td></tr></table></figure>\n\n<p>可以看到相关CUDA、cuDNN的共享库，</p>\n</li>\n<li><p><strong>安装tensorflow-gpu 1.6.0</strong></p>\n<p>安装完CUDA 9.0和cuDNN 7.1.2之后，在激活的环境中输入</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>是否正确安装，请参照章节 <strong><em>测试tensorflow-gpu版本的正确性</em></strong> 里的方法验证。</p>\n<h4 id=\"测试tensorflow-gpu版本的正确性\"><a href=\"#测试tensorflow-gpu版本的正确性\" class=\"headerlink\" title=\"测试tensorflow-gpu版本的正确性\"></a>测试tensorflow-gpu版本的正确性</h4><p>在激活的环境中，输入<code>python</code>，进入到python3.6环境中，依次输入命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tf.test.is_gpu_available()</span><br></pre></td></tr></table></figure>\n\n<p>若输出类似的内容，且最后一行为<code>True</code>，则表示tensorflow-gpu 1.6 版本安装成功！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">45.539907</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class=\"number\">140</span>] Your CPU supports instructions that this TensorFlow binary was <span class=\"keyword\">not</span> compiled to use: AVX2 FMA</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425789</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1212</span>] Found device <span class=\"number\">0</span> <span class=\"keyword\">with</span> properties:</span><br><span class=\"line\">name: GeForce GTX <span class=\"number\">1080</span> major: <span class=\"number\">6</span> minor: <span class=\"number\">1</span> memoryClockRate(GHz): <span class=\"number\">1.7715</span></span><br><span class=\"line\">pciBusID: <span class=\"number\">0000</span>:<span class=\"number\">04</span>:<span class=\"number\">00.0</span></span><br><span class=\"line\">totalMemory: <span class=\"number\">7.93</span>GiB freeMemory: <span class=\"number\">7.81</span>GiB</span><br><span class=\"line\"><span class=\"number\">2018</span><span class=\"number\">-11</span><span class=\"number\">-10</span> <span class=\"number\">01</span>:<span class=\"number\">32</span>:<span class=\"number\">46.425831</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class=\"number\">1312</span>] Adding visible gpu devices: <span class=\"number\">0</span></span><br><span class=\"line\">2018-11-10 01:32:46.794084: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/device:GPU:0 with 7545 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1080, pci bus id: 0000:04:00.0, compute capability: 6.1)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>查看tensorflow的版本的命令为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tf.__version__)</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>__</code>为两个<code>_</code>组合而成。</p>\n<h3 id=\"Anaconda下安装Tensorflow的GPU各个版本（从1-6到2-1）\"><a href=\"#Anaconda下安装Tensorflow的GPU各个版本（从1-6到2-1）\" class=\"headerlink\" title=\"Anaconda下安装Tensorflow的GPU各个版本（从1.6到2.1）\"></a>Anaconda下安装Tensorflow的GPU各个版本（从1.6到2.1）</h3><p><img src=\"https://pic.downk.cc/item/5e9137b1504f4bcb04541d52.png\" alt=\"Tensorflow版本\"></p>\n<p>根据Tensorflow<a href=\"https://www.tensorflow.org/install/source#linux\">官网</a>，在Anaconda环境下安装Tensorflow 1.6.0、1.11.1和2.1.0三个典型的GPU版本。使用<code>conda search cudnn</code>命令<strong>查询cuDNN与CUDA的对应关系。</strong></p>\n<p><img src=\"https://pic.downk.cc/item/5e97d82fc2a9a83be5361d52.png\" alt=\"\"></p>\n<h4 id=\"Tensorflow-1-6-0\"><a href=\"#Tensorflow-1-6-0\" class=\"headerlink\" title=\"Tensorflow 1.6.0\"></a>Tensorflow 1.6.0</h4><p>系统默认GCC为4.8.5，在正常的终端中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow16-gpu pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow16-gpu</span><br></pre></td></tr></table></figure>\n\n<p>在激活的环境中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装CUDA 9.0和cuDNN 7.1.2</span></span><br><span class=\"line\">conda install cudatoolkit==9.0</span><br><span class=\"line\">conda install cudnn==7.1.2</span><br><span class=\"line\">pip install tensorflow-gpu==1.6.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tensorflow-1-11-0\"><a href=\"#Tensorflow-1-11-0\" class=\"headerlink\" title=\"Tensorflow 1.11.0\"></a>Tensorflow 1.11.0</h4><p>系统默认GCC为4.8.5，在正常的终端中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow111-gpu pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow111-gpu</span><br></pre></td></tr></table></figure>\n\n<p>在激活的环境中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装CUDA 9.2和cuDNN 7.2.1</span></span><br><span class=\"line\">conda install cudatoolkit==9.2</span><br><span class=\"line\">conda install cudnn==7.2.1</span><br><span class=\"line\">pip install tensorflow-gpu==1.11.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tensorflow-2-1-0\"><a href=\"#Tensorflow-2-1-0\" class=\"headerlink\" title=\"Tensorflow 2.1.0\"></a>Tensorflow 2.1.0</h4><p><strong>切换GCC版本至7.3.1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable devtoolset-7 bash</span><br></pre></td></tr></table></figure>\n\n<p>仅本shell本次登录有效，若使全局生效，<a href=\"#全局生效\">查看方法</a>。</p>\n<p>在正常的终端中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n tensorflow21-gpu pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow12-gpu</span><br></pre></td></tr></table></figure>\n\n<p>在激活的环境中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装CUDA 10.1.243和cuDNN 7.6.5</span></span><br><span class=\"line\">conda install cudatoolkit==10.1.243</span><br><span class=\"line\">conda install cudnn==7.6.5</span><br><span class=\"line\">pip install tensorflow-gpu==2.1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Anaconda下安装PyTorch的GPU各个版本（从0-4到1-4）\"><a href=\"#Anaconda下安装PyTorch的GPU各个版本（从0-4到1-4）\" class=\"headerlink\" title=\"Anaconda下安装PyTorch的GPU各个版本（从0.4到1.4）\"></a>Anaconda下安装PyTorch的GPU各个版本（从0.4到1.4）</h3><p>数据来源于<a href=\"https://pytorch.org/get-started/previous-versions/\">官网</a>，截止2020年4月11号，<code>PyTorch 1.4</code>版本需要配合<code>CUDA 10.1</code>或<code>CUDA9.2</code>配合使用。</p>\n<p><img src=\"https://pic.downk.cc/item/5e91390d504f4bcb04552f6c.png\" alt=\"PyTorch\"></p>\n<h4 id=\"PyTorch-0-4-1\"><a href=\"#PyTorch-0-4-1\" class=\"headerlink\" title=\"PyTorch 0.4.1\"></a>PyTorch 0.4.1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n pytorch041 pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate pytorch041</span><br></pre></td></tr></table></figure>\n\n<p>在虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cudatoolkit==9.0</span><br><span class=\"line\">conda install pytorch=0.4.1 cuda90 -c pytorch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PyTorch-1-1-0\"><a href=\"#PyTorch-1-1-0\" class=\"headerlink\" title=\"PyTorch 1.1.0\"></a>PyTorch 1.1.0</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n pytorch110 pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate pytorch110</span><br></pre></td></tr></table></figure>\n\n<p>在虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch==1.1.0 torchvision==0.3.0 cudatoolkit=9.0 -c pytorch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PyTorch-1-4\"><a href=\"#PyTorch-1-4\" class=\"headerlink\" title=\"PyTorch 1.4\"></a>PyTorch 1.4</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n pytorch14 pip python=3.6</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate pytorch14</span><br></pre></td></tr></table></figure>\n\n<p>在虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1 -c pytorch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>如果在安装过程中出现类似的错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CondaHTTPError: HTTP 000 CONNECTION FAILED <span class=\"keyword\">for</span> url &lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2&gt;</span><br><span class=\"line\">Elapsed: -</span><br><span class=\"line\"></span><br><span class=\"line\">An HTTP error occurred when trying to retrieve this URL.</span><br><span class=\"line\">HTTP errors are often intermittent, and a simple retry will get you on your way.</span><br></pre></td></tr></table></figure>\n\n<p>可能因为网络原因导致安装中断，不断尝试安装命令即可。</p>\n<h3 id=\"NVim-Vim简单使用\"><a href=\"#NVim-Vim简单使用\" class=\"headerlink\" title=\"NVim/Vim简单使用\"></a>NVim/Vim简单使用</h3><p>本小节内容节选自我的另一篇文章<a href=\"https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/\">《Linux之打造vim实用配置方案》</a>。</p>\n<h4 id=\"什么是Vim？\"><a href=\"#什么是Vim？\" class=\"headerlink\" title=\"什么是Vim？\"></a>什么是Vim？</h4><p><strong><a href=\"https://www.vim.org/\">Vim</a>- the ubiquitous text editor</strong>，一种无处不在的文本编辑器，维基百科是这么介绍<strong>vim</strong>的：</p>\n<blockquote>\n<p><strong>Vim</strong>是从<a href=\"https://zh.wikipedia.org/wiki/Vi\">vi</a>发展出来的一个<a href=\"https://zh.wikipedia.org/wiki/文本编辑器\">文本编辑器</a>。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和<a href=\"https://zh.wikipedia.org/wiki/Emacs\">Emacs</a>并列成为<a href=\"https://zh.wikipedia.org/wiki/类Unix系统\">类Unix系统</a>用户最喜欢的编辑器。</p>\n<p>Vim的第一个版本由<a href=\"https://zh.wikipedia.org/wiki/布萊姆·米勒\">布莱姆·米勒</a>在1991年发布。最初的简称是<strong>V</strong>i <strong>IM</strong>itation，随着功能的不断增加，正式名称改成了<strong>V</strong>i <strong>IM</strong>proved。现在是在<a href=\"https://zh.wikipedia.org/wiki/开放源代码\">开放源代码</a>方式下发行的<a href=\"https://zh.wikipedia.org/wiki/自由软件\">自由软件</a>。</p>\n</blockquote>\n<p><strong>文件的增删查改</strong>——熟悉Windows的朋友可能对文件增删查改习以为常，在此不做讨论。对于一名程序工作者，可能经常在Linux下进行程序的增删查改，很多人可能有这么一套方法：我在Windows环境下编写好了程序，然后通过Xftp、FileZilla等类似的工具将其丢到服务器上，一顿操作下来，发现程序报错了，怎么办？然后在Windows下修改，再丢到服务器上双十合十祈求老天保佑……当然像PyCharm这种强大的IDE，会提供远程接入服务器进行同步文件及程序运行等功能，这种也挺好，就是可能需要鼠标点来点去，也有一定的学习成本。现在有这么一个问题，PyCharm明天到期了……社区版？不好意思所有社区版鄙人都不会去尝试，别问为啥，问就是不喜欢。</p>\n<p><strong>配置文件</strong>——配置文件和工作效率有着紧密的联系。对于算法工程师或者后端工程师，在Github逛gai的时候终于发现了一个好用的模型，一顿<code>git clone repoyoulike</code>，然后按照配置文档进行修改，什么<strong>tf</strong>要升级啦，<strong>gcc/g++</strong>要降级啦，这个文档要修改路径，那个文档要改参数，都离不开Vim，如果是带桌面的Linux系统，可能会使用<code>gedit</code>来打开文件进行编辑，但是这样效率很低，尤其是大型程序修改起来特别费劲。对于大多数情况，可能用<strong>ssh</strong>连接远程服务器，这个时候，怎么也绕不开Vim，尤其是那些只能在服务器上运行的程序。</p>\n<p><strong>知其然知其所以然</strong>——使用Vim来处理程序方面的设定问题，不但可以让自己比较熟悉Linux的运行状况，也更加能保证你的修改可以在Linux下正确运行。</p>\n<p><strong>Vim</strong>适用于各种操作系统上，比如类Unix（种Linux发行版本、Mac 用户）以及Windwos系统。Unix可以使用包管理器安装 Vim；对于 Windows 用户，可以从<a href=\"https://www.vim.org/download.php\">官网</a>下载。 </p>\n<h4 id=\"Vim哲学\"><a href=\"#Vim哲学\" class=\"headerlink\" title=\"Vim哲学\"></a>Vim哲学</h4><p>简单概括：摆脱鼠标，一键到达。</p>\n<p>即为全命令操作，能用键盘做到的事情，绝不用鼠标，在Vim下，键盘可以满足你的一切需求，效率是第一生产力。</p>\n<h4 id=\"升级支持python3的Vim8\"><a href=\"#升级支持python3的Vim8\" class=\"headerlink\" title=\"升级支持python3的Vim8*\"></a>升级支持python3的Vim8*</h4><p>在众多Linux发行版中，比如CentOS或者Ubuntu等，默认安装的是<strong>vi</strong>编辑器，Vim兼容vi。Vim已经存在20年了，时代在进步，<a href=\"https://github.com/vim/vim\">Vim8</a>在<a href=\"https://github.com/neovim/neovim\">NeoVim</a>的步步紧逼下，扩展了一些新的特征，比如支持时钟、异步操作、支持终端窗口<strong>terminal</strong>，尤其是支持<strong>terminal</strong>非常关键。本文最开始在Vim7下进行操作的，但是有些插件需要Vim8版本，尤其是<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，在升级了支持<strong>Python3</strong>的Vim8后（<strong>在Vim版本中，不能同时支持Python2和Python3</strong>），依然有些瑕疵，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，折腾了两三天后，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。在这一小节，介绍怎么<strong>编译支持Python3的Vim8版本</strong>，<strong>前提是系统了安装Python3</strong>，Python3的安装不做讨论。</p>\n<ol>\n<li><p><strong>编译安装yum源里的vim最新版</strong></p>\n<p><a href=\"https://github.com/ycm-core/YouCompleteMe/wiki/Building-Vim-from-source\">参考YouCompleteMe</a>里给出的方法，略作调整。</p>\n<p>首先检查系统里的Vim是否已经安装，在终端输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep vim</span><br></pre></td></tr></table></figure>\n\n<p>如果有显示且没有提示任何缺包或者错误，则表示Vim已经被安装，如果没有安装，直接从第3步（<strong>下载Vim最新版源代码</strong>）开始阅读。</p>\n<p>一般情况下，运行下列命令安装Vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install yum*    // CentOS7.6系统</span><br></pre></td></tr></table></figure>\n\n<p>查看vim版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，Vim版本一般是7.4，而现在Vim发行版已经发行到了第八代，包括很多新的功能，为了打造属于自己的IDE，必须升级Vim到最新版本。</p>\n<p>如果是Vim版本，查看Vim是否支持Python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version | grep python</span><br></pre></td></tr></table></figure>\n\n<p>如果结果显示python3前面是<code>+</code>号，则这一小节可以跳过，如果是<code>-</code>号，则需要自己编译Vim，需执行以下步骤。</p>\n</li>\n<li><p><strong>卸载Vim</strong></p>\n<p>在编译之前，需要卸载系统上的Vim版本</p>\n<ul>\n<li><p>如果使用<code>yum install vim*</code>命令安装的Vim，卸载Vim时执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果Vim是使用<code>make</code>编译过的，在<strong>CentOS7.6系统</strong>下，进入到Vim源代码目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make uninstall</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果Vim源代码已经删除，则需要重新[下载Vim源码](git clone <a href=\"https://github.com/vim/vim.git)，然后`cd\">https://github.com/vim/vim.git)，然后`cd</a> vim`，再执行上述语句。</p>\n<p>如果是<strong>Ubuntu系统</strong>，卸载起来就比较方便</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install checkinstall</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/vim       // vim是Vim源代码文件夹</span><br><span class=\"line\">sudo checkinstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>下载Vim最新版源代码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~                                         // 进入到当前用户的根目录下</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vim/vim.git     // 下载Vim源代码</span><br><span class=\"line\"><span class=\"built_in\">cd</span> vim                                       // 进入到Vim源代码文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-features=huge \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-multibyte \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-rubyinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-python3interp=yes \\</span><br><span class=\"line\">            --with-python3-config-dir=$(python3-config --configdir) \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-perlinterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-luainterp=yes \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-gui=gtk2 \\</span><br><span class=\"line\">            --<span class=\"built_in\">enable</span>-cscope \\</span><br><span class=\"line\">            --prefix=/usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>命令<a href=\"https://www.jianshu.com/p/aac78ff576c5\">解释</a>：</p>\n<p><code>--with-features=huge</code>：支持最大特性</p>\n<p><code>--enable-multibyte</code>：打开多字节支持，可以在Vim中输入中文</p>\n<p><code>--enable-rubyinterp</code>：打开对ruby编写的插件的支持</p>\n<p><code>--enable-python3interp</code>：打开对python3编写的插件的支持</p>\n<p><code>--with-python-config-dir</code>：Python3的路径</p>\n<p><code>--enable-perlinterp</code>：打开对perl编写的插件的支持</p>\n<p><code>--enable-luainterp</code>：打开对lua编写的插件的支持</p>\n<p><code>--enable-gui</code>：打开GUI支持</p>\n<p><code>--enable-cscope</code>：打开对cscope的支持</p>\n<p><code>--prefix=/usr/local/</code>：指定将要安装到的路径</p>\n</li>\n<li><p><strong>设置VIMRUNTIMEDIR</strong></p>\n<p><strong>VIMRUNTIMEDIR</strong>是vim运行时候所需资源的目录，非常重要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make VIMRUNTIMEDIR=/usr/<span class=\"built_in\">local</span>/share/vim/vim82</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编译安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>设置Vim为默认的编辑器</strong></p>\n<p>使用<code>update-alternative</code>设置vim为默认编辑器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/editor editor /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> editor /usr/<span class=\"built_in\">local</span>/bin/vim</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/vi vi /usr/<span class=\"built_in\">local</span>/bin/vim 1</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> vi /usr/<span class=\"built_in\">local</span>/bin/vim</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>按照上述步骤完成后查看Vim**版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e89ec78504f4bcb042f0550.png\" alt=\"vim版本\"></p>\n<p>可以看到Vim版本是8.2版本，已开启<strong>python3支持</strong>，需要进行验证，在终端输入<code>vim</code>，接着在<strong>正常模式</strong>下输入<code>:echo has(&quot;python3&quot;)</code>，按一下回车键，若屏幕最下面输出<code>1</code>，则配置正确，Vim支持Python3。</p>\n<p>编译的时候可能会出现各种意想不到的问题，这个时候要多看专业的文档，比如官网文档、github及<strong>Issues（非常有用）</strong>、<a href=\"https://stackoverflow.com/\">stackoverflow</a>等，其次再考虑其它出处，尽可能多看<strong>专业的英文文档</strong>，很多问题我们习惯看一些野路子中文解答，看似走了捷径但是花费了更多的时间，切记！一些优秀的项目有对应的中文文档，首推！</p>\n<p>该方法是全局设置方法。</p>\n<ul>\n<li><p><strong>安装中文vim帮助文档</strong></p>\n<p>进入Vim环境，按一下前缀键<code>esc</code>，在英文语法环境下，输入<code>:help</code>后（终端最下面显示），进入vim帮助文档，此界面是英文的，如果想要设置中文帮助文档，请执行以下步骤：</p>\n<ul>\n<li><p><strong>下载中文安装包</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/yianwillis/vimcdoc/archive/v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>解压</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf v2.3.0.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vimcdoc-2.3.0/\t\t\t\t<span class=\"comment\"># 进入解压后的目录</span></span><br><span class=\"line\">./vimcdoc.sh -i\t\t\t\t\t<span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n\n<p>命令会自动识别 Vim 的安装路径，并将中文的文档拷贝到相应的地方，原有的英文文档不受影响，查阅中文文档学习Vim。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Vim8-—-gt-NeoVim\"><a href=\"#Vim8-—-gt-NeoVim\" class=\"headerlink\" title=\"Vim8 —&gt; NeoVim\"></a>Vim8 —&gt; NeoVim</h4><p>完全是偶然。在上回讲到，在Vim下折腾了两三天的<a href=\"https://github.com/ycm-core/YouCompleteMe\">代码补全插件YouCompleteMe</a>，使用起来并不是很顺手，比如对Python3的第三方库的扩展不是很友好，对C/C++支持得还不错，不知道是不是我的插件安装有问题还是什么原因，果断把Vim换成了<a href=\"https://github.com/neovim/neovim\">NeoVim</a>，<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>换了另一个代码补全插件<a href=\"https://github.com/neoclide/coc.nvim\">coc-vim</a>，香得不行。</p>\n<p>关于Vim的插件介绍，请查阅我的另一篇文章<a href=\"https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/\">《Linux之打造vim实用配置方案》</a>。</p>\n<p><strong>NeoVim和Vim的用法基本一致</strong>，底层架构有所不同而已，Vim用户可以很方便的操作NeoVim，配置文件可以直接进行迁移。</p>\n<p><a href=\"https://github.com/neovim/neovim\">NeoVim</a>的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">sudo yum install -y neovim python3-neovim</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"心理准备\"><a href=\"#心理准备\" class=\"headerlink\" title=\"心理准备\"></a>心理准备</h4><ul>\n<li><strong>学习Vim在开始时是痛苦的</strong>，<strong>但是熟悉之后，工作效率会大大提升</strong></li>\n<li>需要时间</li>\n<li>需要不断地练习</li>\n<li>不要期望你能在3天内把vim练得比别的编辑器更有效率</li>\n</ul>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>如果使用NVim或Vim编辑文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NeoVim</span></span><br><span class=\"line\">nvim file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Vim</span></span><br><span class=\"line\">vim file</span><br></pre></td></tr></table></figure>\n\n<p>发现界面黑乎乎的，没有行号，没有语法高亮等，作为一名视觉动物，稍微美化一下NeoVim或者Vim，使其不那么打击我们学习的热情。</p>\n<p>NVim的配置文件路径：<code>~/.config/nvim/init.vim</code></p>\n<p>Vim的配置文件路径：<code>~/.vim/vimrc</code></p>\n<p>将下列配置，根据需求，粘贴到配置文件中，然后<code>:wq</code>，在终端中输入<code>source ~/.config/nvim/init.vim</code>或者<code>source ~/.vim/vimrc</code>刷新配置文件。</p>\n<p><strong>请仔细阅读每一行注释。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -----------------</span><br><span class=\"line\"><span class=\"string\">\"  基本设置</span></span><br><span class=\"line\"><span class=\"string\">\"</span> -----------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 语法高亮</span></span><br><span class=\"line\"><span class=\"string\">syntax on</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示行号</span><br><span class=\"line\"><span class=\"built_in\">set</span> number</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 显示当前行号的相关行，比如以此行为标准，向上/向下数第1行、第2行等 </span></span><br><span class=\"line\"><span class=\"string\">set relativenumber</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 设置TAB宽度, ts: tabstop</span><br><span class=\"line\"><span class=\"built_in\">set</span> expandtab</span><br><span class=\"line\"><span class=\"built_in\">set</span> tabstop=2</span><br><span class=\"line\"><span class=\"built_in\">set</span> shiftwidth=2</span><br><span class=\"line\"><span class=\"built_in\">set</span> softtabstop=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 光标所在的那一栏上面/下面还显示出6行</span></span><br><span class=\"line\"><span class=\"string\">set scrolloff=6</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示当前行的下滑线</span><br><span class=\"line\"><span class=\"built_in\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 保证当前vim环境下的字不会超出屏幕</span></span><br><span class=\"line\"><span class=\"string\">set wrap</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示当前的命令</span><br><span class=\"line\"><span class=\"built_in\">set</span> showcmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 左下角显示当前的模式名称</span></span><br><span class=\"line\"><span class=\"string\">set showmode</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 按下TAB，自动补全指令</span><br><span class=\"line\"><span class=\"built_in\">set</span> wildmenu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 是否显示状态栏, 0 : 不显示, 1 : 表示只在多窗口时显示, 2 : 表示显示</span></span><br><span class=\"line\"><span class=\"string\">set laststatus=2</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 显示当前光标的位置、进度以及时间</span><br><span class=\"line\"><span class=\"built_in\">set</span> statusline=%F%m%r%h%w\\ [pos=(%l,%v)]\\ [progress=%p%%]\\ %&#123;strftime(\\\"%d/%m/%y\\ -\\ %H:%M\\\")&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 关闭当错误发生的bell提示音</span></span><br><span class=\"line\"><span class=\"string\">set noeb</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 当错误发生时, 屏幕闪烁</span><br><span class=\"line\"><span class=\"string\">\" set vb</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 当错误发生时, 不要闪烁屏幕</span><br><span class=\"line\"><span class=\"string\">\" set novisualbell    </span></span><br><span class=\"line\"><span class=\"string\">\"</span> ------------------</span><br><span class=\"line\"><span class=\"string\">\"   关于搜索和高亮</span></span><br><span class=\"line\"><span class=\"string\">\"</span> ------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 高亮搜索到的词</span></span><br><span class=\"line\"><span class=\"string\">set hlsearch</span></span><br><span class=\"line\"><span class=\"string\">\"</span>为了避免打开新的文件时显示的上一个文件的搜索结果产生的高亮</span><br><span class=\"line\"><span class=\"string\">\" exec 表示在:后面运行的命令</span></span><br><span class=\"line\"><span class=\"string\">exec \"</span>nohlsearch<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 输入时, 边输入, 边高亮</span><br><span class=\"line\"><span class=\"built_in\">set</span> incsearch</span><br><span class=\"line\"><span class=\"string\">\" 忽略大小写</span></span><br><span class=\"line\"><span class=\"string\">set ignorecase</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 智能大小写</span><br><span class=\"line\"><span class=\"built_in\">set</span> smartcase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" 支持鼠标点击和滚动</span></span><br><span class=\"line\"><span class=\"string\">\"</span> <span class=\"built_in\">set</span> mouse=a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" -----------------</span></span><br><span class=\"line\"><span class=\"string\">\"</span>   map 键盘映射</span><br><span class=\"line\"><span class=\"string\">\" -----------------</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"</span> 按下小写s, 啥事不干</span><br><span class=\"line\">map s &lt;nop&gt;      </span><br><span class=\"line\"><span class=\"string\">\" 按下大写S, 保存当前文件, &lt;CR&gt;为回车按键</span></span><br><span class=\"line\"><span class=\"string\">map S :w&lt;CR&gt; </span></span><br><span class=\"line\"><span class=\"string\">\"</span> 按下大写Q, 退出当前文件</span><br><span class=\"line\">map Q :q&lt;CR&gt; </span><br><span class=\"line\"><span class=\"string\">\" 按下大写R, 更新文件配置</span></span><br><span class=\"line\"><span class=\"string\">map R :source <span class=\"variable\">$MYVIMRC</span>&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>77~81</code>行解释，假设要编辑一个文件，进行了修改，此时</p>\n<ul>\n<li>保存文件 — 先按前缀键<code>Esc</code>，再按住大写<code>S</code>，默认操作：先按前缀键<code>Esc</code>，再输入<code>:w</code>；</li>\n<li>更新配置 — 先按前缀键<code>Esc</code>，再按住大写<code>R</code>，默认操作：退出文件，再<code>source files</code>；</li>\n<li>退出文件 — 先按前缀键<code>Esc</code>，再按住大写<code>Q</code>，默认操作：先按前缀键<code>Esc</code>，再输入<code>:q</code>；</li>\n</ul>\n<p>这三个快捷键非常有用，可以相互搭配使用！</p>\n<h4 id=\"几种模式\"><a href=\"#几种模式\" class=\"headerlink\" title=\"几种模式\"></a>几种模式</h4><ul>\n<li>普通模式（Normal）：启动NVim/Vim后，Vim默认在模式下，进入Normal模式的快捷键：<code>Esc</code>；</li>\n<li>插入模式（Insert）：快捷键：<code>i</code>，会看到vim左下角有一个 <strong>– 插入 –</strong> 字样，表示可以以插入的方式输入，此时，你可以输入文本了，就像你用“记事本”一样；</li>\n</ul>\n<h4 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vimtutor</span><br></pre></td></tr></table></figure>\n\n<p>查看Vim教程（已在<a href=\"升级支持python3的Vim8*\">章节</a>安装了中文版教程），强烈建议自学一遍。先按前缀键<code>Esc</code>，再输入<code>:q</code>可退出教程。</p>\n<ul>\n<li><p><code>i</code>→ Insert 模式，按 ESC 回到 Normal 模式；</p>\n</li>\n<li><p>退出并保存</p>\n<ul>\n<li>一般操作：先按前缀键<code>Esc</code>，再输入<code>:wq</code>；</li>\n<li>快捷键：根据上述配置文件，先按前缀键<code>Esc</code>，再按住<code>SQ</code>；</li>\n</ul>\n</li>\n<li><p>保存并更新配置：</p>\n<ul>\n<li>一般操作：先按前缀键<code>Esc</code>，再输入<code>:wq</code>，在终端输入<code>source files</code>；</li>\n<li>快捷键：根据上述配置文件，先按前缀键<code>Esc</code>，再按住<code>SR</code>；</li>\n</ul>\n</li>\n<li><p>退出不保存：先按前缀键<code>Esc</code>，再输入<code>:q!</code></p>\n</li>\n<li><p>关于删除：<strong>在普通模式（Normal）下</strong>，</p>\n<ul>\n<li><code>x</code> → 删除光标所指向的字符；</li>\n<li><code>dd</code> → 删除光标所在的那一行；</li>\n</ul>\n</li>\n<li><p>关于插入：<strong>在普通模式（Normal）下，</strong>除了<code>i</code>可以进入插入模式外，还有</p>\n<ul>\n<li><code>a</code>→ 在光标后插入；</li>\n<li><code>o</code>→ 在当前行后插入一个新行；</li>\n<li><code>O</code> → 在当前行前插入一个新行；</li>\n<li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符；</li>\n</ul>\n</li>\n<li><p>关于撤销/恢复：<strong>在普通模式（Normal）下</strong>，</p>\n<ul>\n<li><code>u</code> → 撤销；</li>\n<li><C-r>，意为<code>Ctrl + r</code> → 恢复；</li>\n</ul>\n</li>\n<li><p>关于跳转：<strong>在普通模式（Normal）下</strong>，</p>\n<ul>\n<li><code>gg</code> → 跳转到当前文件的第一行行首；</li>\n<li><code>G</code> →  跳转到当前文件的最后一行行首；</li>\n<li><code>0</code>→ 跳转到当前行的行首；</li>\n<li><code>$</code> → 跳转到当前行的最后一个字符处；</li>\n<li><code>50gg</code> → 跳转到第50行；</li>\n<li><code>50j</code> → 从当前行向后跳转50行；</li>\n</ul>\n</li>\n<li><p>关于搜索：<strong>在普通模式（Normal）下</strong>，输入<code>/</code>，就可以进行文件内搜索，按<code>n</code>查找下一个，<code>N</code>查找上一个</p>\n</li>\n</ul>\n<p>这只是些非常基础的命令，不过足以应付一般情况，NVim/Vim下有很多实用的插件，请关注我的另一篇文章：<a href=\"https://www.kangzhiheng.top/2020/03/30/Linux之打造vim实用配置方案/\">《Linux之打造vim实用配置方案》</a>。</p>\n<h3 id=\"Tmux简单使用\"><a href=\"#Tmux简单使用\" class=\"headerlink\" title=\"Tmux简单使用\"></a>Tmux简单使用</h3><p>Tmux 是一个终端复用器（terminal multiplexer），非常有用，<strong>建议所有重要的操作，都在Tmux里进行，只要服务器不宕机，操作一直在进行。</strong></p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。<strong>用户与计算机的这种临时的交互，称为一次”会话”（session）</strong> 。</p>\n<p>会话的一个重要特点是，窗口与其中启动的进程是<a href=\"http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html\">连在一起</a>的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p>\n<p>一个典型的例子就是，<a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\">SSH 登录</a>远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p>\n<p><strong>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。</strong></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p>\n<blockquote>\n<ul>\n<li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li>\n<li>它可以让新窗口”接入”已经存在的会话。</li>\n<li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li>\n<li>它还支持窗口任意的垂直和水平拆分。</li>\n</ul>\n</blockquote>\n<h4 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h4><ul>\n<li>会话(session): 建立一个 tmux 工作区会话，会话可以长期驻留，重新连接服务器不会丢失，我们只需重新 tmux attach 到之前的工作区就可以恢复会话</li>\n<li>窗口(window): 容纳多个窗格</li>\n<li>窗格(pane): 可以在窗口中分成多个窗格</li>\n</ul>\n<p><img src=\"https://pic.downk.cc/item/5e986635c2a9a83be5a21e27.jpg\" alt=\"\"></p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><p><strong>CentOS/Fedora</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install tmux</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Ubuntu/Debian</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install tmux</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mac</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tmux</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"启动和退出\"><a href=\"#启动和退出\" class=\"headerlink\" title=\"启动和退出\"></a>启动和退出</h4><p>在终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.downk.cc/item/5e982247c2a9a83be5672750.png\" alt=\"\"></p>\n<p>启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。</p>\n<p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p>\n<h4 id=\"前缀键\"><a href=\"#前缀键\" class=\"headerlink\" title=\"前缀键\"></a>前缀键</h4><p>与<code>vim</code>、<code>nvim</code>类似，都存在一个<strong>前缀键</strong>，Tmux 窗口有大量的快捷键，<strong>所有快捷键都要通过前缀键唤起</strong>。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p>\n<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p>\n<p>然后，按下 ESC 键或<code>q</code>键，就可以退出帮助。</p>\n<p>当然如果觉得前缀键<code>Ctrl+b</code>不太方便，可以更换前缀键。</p>\n<h4 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h4><h5 id=\"新建会话\"><a href=\"#新建会话\" class=\"headerlink\" title=\"新建会话\"></a>新建会话</h5><p>第一个启动的 Tmux 窗口，编号是<code>0</code>，第二个窗口的编号是<code>1</code>，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>\n<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s YourSeeName</span><br></pre></td></tr></table></figure>\n\n<p>新建了一个名为<strong>YourSeeName</strong>的Tmux窗口。</p>\n<h5 id=\"分离会话\"><a href=\"#分离会话\" class=\"headerlink\" title=\"分离会话\"></a>分离会话</h5><p>在 Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离，进入普通的终端界面，<strong>但是会话和里面的进程仍然在后台运行</strong>，<code>tmux ls</code>命令可以查看当前所有的 Tmux 会话。</p>\n<h5 id=\"会话查看\"><a href=\"#会话查看\" class=\"headerlink\" title=\"会话查看\"></a>会话查看</h5><p>在Tmux会话内，列出所有会话的快捷键是<code>Ctrl+b s</code></p>\n<p>登录到终端以后，使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux ls</span><br></pre></td></tr></table></figure>\n\n<p>可以查看当前所有的 Tmux 会话。</p>\n<h5 id=\"进入会话\"><a href=\"#进入会话\" class=\"headerlink\" title=\"进入会话\"></a>进入会话</h5><p>进入到Tmux最后一次退出的窗口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>tmux ls</code>查看可用的窗口，然后选择想进入的窗口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入名为Seesion-Name的会话窗口</span></span><br><span class=\"line\">tmux a -t Seesion-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入编号为SessionNum的会话窗口</span></span><br><span class=\"line\">tmux a -t Session-Num\t<span class=\"comment\"># SessionNum为0、1、2...3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"杀死会话\"><a href=\"#杀死会话\" class=\"headerlink\" title=\"杀死会话\"></a>杀死会话</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用会话名称</span></span><br><span class=\"line\">tmux <span class=\"built_in\">kill</span>-session -t Seesion-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用会话编号</span></span><br><span class=\"line\">tmux <span class=\"built_in\">kill</span>-session -t Session-Num</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切换会话\"><a href=\"#切换会话\" class=\"headerlink\" title=\"切换会话\"></a>切换会话</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用会话名称</span></span><br><span class=\"line\">tmux switch -t Seesion-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用会话编号</span></span><br><span class=\"line\">tmux switch -t Session-Num</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重命名会话\"><a href=\"#重命名会话\" class=\"headerlink\" title=\"重命名会话\"></a>重命名会话</h5><p>在Tmux会话内，重命名的快捷键是<code>Ctrl+b $</code></p>\n<p>在终端界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用会话名称</span></span><br><span class=\"line\">tmux rename-session -t Seesion-Name New-Name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用会话编号</span></span><br><span class=\"line\">tmux rename-session -t Session-Num New-Name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"窗格操作\"><a href=\"#窗格操作\" class=\"headerlink\" title=\"窗格操作\"></a>窗格操作</h4><p><code>Ctrl+b %</code>：划分左右两个窗格</p>\n<p><code>Ctrl+b &quot;</code>：划分上下两个窗格</p>\n<p><code>Ctrl+b q</code>：显示窗格编号</p>\n<h2 id=\"第五章：在服务器上利用GPU跑程序的简化步骤\"><a href=\"#第五章：在服务器上利用GPU跑程序的简化步骤\" class=\"headerlink\" title=\"第五章：在服务器上利用GPU跑程序的简化步骤\"></a>第五章：在服务器上利用GPU跑程序的简化步骤</h2><ol>\n<li>利用FileZilla软件登录远程服务器上传所需程序文件</li>\n<li>在终端利用SSH登录远程服务器</li>\n<li>按照下面的命令进行操作，建议使用<strong>tmux终端复用神器</strong>，第2、3、4步不是必须的，但是强烈推荐使用！</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@IPaddress -p 22      <span class=\"comment\"># 登录服务器</span></span><br><span class=\"line\">tmux ls                           <span class=\"comment\"># 查看终端会话列表，若没有，新建一个</span></span><br><span class=\"line\">                                  <span class=\"comment\"># 会话窗口 tmux new -s Seesion-Name，保证程序在后台运行</span></span><br><span class=\"line\">tmux a -t Seesion-Name             <span class=\"comment\"># 进入你指定的会话窗口</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate tensorflow-gpu    <span class=\"comment\"># 在会话窗口中激活tensorflow-gpu环境</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> xxx/yyy                        <span class=\"comment\"># 程序文件所在路径</span></span><br><span class=\"line\">ls                                <span class=\"comment\"># 查看文件</span></span><br><span class=\"line\">python abc.py                     <span class=\"comment\"># 运行程序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第六章：服务器管理\"><a href=\"#第六章：服务器管理\" class=\"headerlink\" title=\"第六章：服务器管理*\"></a>第六章：服务器管理*</h2><h3 id=\"添加-删除账户\"><a href=\"#添加-删除账户\" class=\"headerlink\" title=\"添加/删除账户\"></a>添加/删除账户</h3><h4 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、创建hadoop用户并修改密码</span></span><br><span class=\"line\">sudo useradd -m username -s /bin/bash -g lab532 </span><br><span class=\"line\">sudo passwd username</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>useradd</code>命令创建用户，其中</p>\n<ul>\n<li><code>-m</code>：创建用户的主目录</li>\n<li><code>-s</code>：新账户的登录 shell</li>\n<li><code>-g</code>：新账户所属的用户组的名称或 ID，实验室用户都在组<code>lab532</code>中</li>\n</ul>\n<h4 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2、删除用户</span></span><br><span class=\"line\">sudo deluser username --remove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h3><h4 id=\"查看用户的UID和GID\"><a href=\"#查看用户的UID和GID\" class=\"headerlink\" title=\"查看用户的UID和GID\"></a>查看用户的UID和GID</h4><p>以用户<code>adoredee</code>为例，查看用户<code>adoredee</code>的的UID和GID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id adoredee</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>UID为UserId，即用户ID，用来标识每个用户的唯一标示符</li>\n<li>GID为GroupId，即组ID，用来标识用户组的唯一标识符</li>\n</ul>\n<h4 id=\"修改用户的用户组\"><a href=\"#修改用户的用户组\" class=\"headerlink\" title=\"修改用户的用户组\"></a>修改用户的用户组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -g lab532 adoredee</span><br></pre></td></tr></table></figure>\n\n<p>强制用户<code>adoredee</code>的基本组为<code>lab532</code></p>\n<h4 id=\"查看某一用户组下的所有成员\"><a href=\"#查看某一用户组下的所有成员\" class=\"headerlink\" title=\"查看某一用户组下的所有成员\"></a>查看某一用户组下的所有成员</h4><p>查看用户组<code>lab532</code>下的所属成员</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/group | grep <span class=\"string\">'lab532'</span></span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lab532:x:1002:</span><br></pre></td></tr></table></figure>\n\n<p>得知用户组<code>lab532</code>的组ID是<strong>1002</strong>，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F<span class=\"string\">\":\"</span> <span class=\"string\">'&#123;print $1\"\\t\\t\"$4&#125;'</span> /etc/passwd | grep <span class=\"string\">'1002'</span></span><br></pre></td></tr></table></figure>\n\n<p>显示组<code>lab532</code>下的所有用户。</p>\n<h4 id=\"修改用户组名称\"><a href=\"#修改用户组名称\" class=\"headerlink\" title=\"修改用户组名称\"></a>修改用户组名称</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod -n newname oldname</span><br></pre></td></tr></table></figure>\n\n<p>用户组名从 <code>oldname</code>修改为 <code>newname</code>。</p>\n<h3 id=\"将普通用户赋予管理员权限\"><a href=\"#将普通用户赋予管理员权限\" class=\"headerlink\" title=\"将普通用户赋予管理员权限\"></a>将普通用户赋予管理员权限</h3><p>使用<code>useradd</code>命令创建的用户没有管理员权限，不能使用<code>sudo</code>命令，假设要将用户<code>adoredee</code>提拔为系统管理员，首先打开文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给予/etc/sudoers文件 写 的权限</span></span><br><span class=\"line\">sudo +w /etc/sudoers</span><br><span class=\"line\">sudo nvim /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>然后找到如下界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Next comes the main part: which users can run what software on </span></span><br><span class=\"line\"><span class=\"comment\">## which machines (the sudoers file can be shared between multiple</span></span><br><span class=\"line\"><span class=\"comment\">## systems).</span></span><br><span class=\"line\"><span class=\"comment\">## Syntax:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">##      user    MACHINE=COMMANDS</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## The COMMANDS section may have other options added to it.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">root     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n<p>在root下面一行新增命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adoredee ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n<p>退出并保存文件，取消<code>/etc/sudoers</code>文件 <strong>写</strong> 的权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -w /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>此时用户<code>adoredee</code>从普通用户晋升为系统管理员。</p>\n<p><strong>系统管理员请尊重其他用户的隐私。</strong></p>\n<h3 id=\"修改登录界面显示\"><a href=\"#修改登录界面显示\" class=\"headerlink\" title=\"修改登录界面显示\"></a>修改登录界面显示</h3><p><img src=\"https://pic.downk.cc/item/5e989362c2a9a83be5ccd569.png\" alt=\"\"></p>\n<p>远程连接服务器时，可以在登录成功后，显示欢迎界面，如上图，设置方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS</span></span><br><span class=\"line\">sudo nvim /etc/motd</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Ubuntu </span></span><br><span class=\"line\">sudo nvim /etc/update-motd.d</span><br></pre></td></tr></table></figure>\n\n<p>下面是几种不同的风格，直接复制到文件中即可。</p>\n<h4 id=\"SJTU\"><a href=\"#SJTU\" class=\"headerlink\" title=\"SJTU\"></a>SJTU</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ____     _____  ______  __  __</span><br><span class=\"line\">&#x2F;\\  _&#96;\\  &#x2F;\\___ \\&#x2F;\\__  _\\&#x2F;\\ \\&#x2F;\\ \\</span><br><span class=\"line\">\\ \\,\\L\\_\\\\&#x2F;__&#x2F;\\ \\&#x2F;_&#x2F;\\ \\&#x2F;\\ \\ \\ \\ \\</span><br><span class=\"line\"> \\&#x2F;_\\__ \\   _\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\</span><br><span class=\"line\">   &#x2F;\\ \\L\\ \\&#x2F;\\ \\_\\ \\ \\ \\ \\ \\ \\ \\_\\ \\</span><br><span class=\"line\">   \\ &#96;\\____\\ \\____&#x2F;  \\ \\_\\ \\ \\_____\\</span><br><span class=\"line\">    \\&#x2F;_____&#x2F;\\&#x2F;___&#x2F;    \\&#x2F;_&#x2F;  \\&#x2F;_____&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lab532\"><a href=\"#Lab532\" class=\"headerlink\" title=\"Lab532\"></a>Lab532</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;\\       &#x2F;_&#x2F;__&#x2F;_\\  &#x2F;\\ ___&#96;\\ </span><br><span class=\"line\"> \\ \\      \\ \\   \\ \\ \\&#x2F;\\_____\\ </span><br><span class=\"line\">  \\ \\      \\ \\___\\ \\ \\ \\____&#x2F;_  </span><br><span class=\"line\">   \\ \\      \\ \\___\\ \\ \\ \\___\\ \\ </span><br><span class=\"line\">    \\ \\_____ \\ \\   \\ \\ \\ \\___\\_\\ </span><br><span class=\"line\">     \\&#x2F;______&#x2F;\\_\\   \\_\\ \\&#x2F;___&#x2F;_&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"佛祖保佑\"><a href=\"#佛祖保佑\" class=\"headerlink\" title=\"佛祖保佑\"></a>佛祖保佑</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *</span><br><span class=\"line\">*</span><br><span class=\"line\">*                             _ooOoo_</span><br><span class=\"line\">*                            o8888888o</span><br><span class=\"line\">*                            88<span class=\"string\">\" . \"</span>88</span><br><span class=\"line\">*                            (| -_- |)</span><br><span class=\"line\">*                            O\\  =  /O</span><br><span class=\"line\">*                         ____/`---<span class=\"string\">'\\____</span></span><br><span class=\"line\"><span class=\"string\">*                       .'</span>  \\\\|     |//  `.</span><br><span class=\"line\">*                      /  \\\\|||  :  |||//  \\</span><br><span class=\"line\">*                     /  _||||| -:- |||||-  \\</span><br><span class=\"line\">*                     |   | \\\\\\  -  /// |   |</span><br><span class=\"line\">*                     | \\_|  <span class=\"string\">''</span>\\---/<span class=\"string\">''</span>  |   |</span><br><span class=\"line\">*                     \\  .-\\__  `-`  ___/-. /</span><br><span class=\"line\">*                   ___`. .<span class=\"string\">'  /--.--\\  `. . __</span></span><br><span class=\"line\"><span class=\"string\">*                .\"\" '</span>&lt;  `.___\\_&lt;|&gt;_/___.<span class=\"string\">'  &gt;'</span><span class=\"string\">\"\"</span>.</span><br><span class=\"line\">*               | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |</span><br><span class=\"line\">*               \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /</span><br><span class=\"line\">*          ======`-.____`-.___\\_____/___.-`____.-<span class=\"string\">'======</span></span><br><span class=\"line\"><span class=\"string\">*                             `=---='</span></span><br><span class=\"line\">*\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        </span><br><span class=\"line\">*              佛祖镇楼         永无BUG        永不修改</span><br><span class=\"line\">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"佛祖瘫痪\"><a href=\"#佛祖瘫痪\" class=\"headerlink\" title=\"佛祖瘫痪\"></a>佛祖瘫痪</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * _ooOoo_</span><br><span class=\"line\"> * o8888888o</span><br><span class=\"line\"> * 88&quot; . &quot;88</span><br><span class=\"line\"> * (| -_- |)</span><br><span class=\"line\"> *  O\\ &#x3D; &#x2F;O</span><br><span class=\"line\"> * ___&#x2F;&#96;---&#39;\\____</span><br><span class=\"line\"> * .   &#39; \\\\| |&#x2F;&#x2F; &#96;.</span><br><span class=\"line\"> * &#x2F; \\\\||| : |||&#x2F;&#x2F; \\</span><br><span class=\"line\"> * &#x2F; _||||| -:- |||||- \\</span><br><span class=\"line\"> * | | \\\\\\ - &#x2F;&#x2F;&#x2F; | |</span><br><span class=\"line\"> * | \\_| &#39;&#39;\\---&#x2F;&#39;&#39; | |</span><br><span class=\"line\"> * \\ .-\\__ &#96;-&#96; ___&#x2F;-. &#x2F;</span><br><span class=\"line\"> * ___&#96;. .&#39; &#x2F;--.--\\ &#96;. . __</span><br><span class=\"line\"> * .&quot;&quot; &#39;&lt; &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.</span><br><span class=\"line\"> * | | : &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |</span><br><span class=\"line\"> * \\ \\ &#96;-. \\_ __\\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;</span><br><span class=\"line\"> * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"> * &#96;&#x3D;---&#x3D;&#39;</span><br><span class=\"line\"> *          .............................................</span><br><span class=\"line\"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"神兽草泥马\"><a href=\"#神兽草泥马\" class=\"headerlink\" title=\"神兽草泥马\"></a>神兽草泥马</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     ┏┓　　　┏┓+ +</span><br><span class=\"line\">┏┛┻━━━┛┻┓ + +</span><br><span class=\"line\">┃　　　　　　　┃ 　</span><br><span class=\"line\">┃　　　━　　　┃ ++ + + +</span><br><span class=\"line\">████━████ ┃+</span><br><span class=\"line\">┃　　　　　　　┃ +</span><br><span class=\"line\">┃　　　┻　　　┃</span><br><span class=\"line\">┃　　　　　　　┃ + +</span><br><span class=\"line\">┗━┓　　　┏━┛</span><br><span class=\"line\">  ┃　　　┃　　　　　　　　　　　</span><br><span class=\"line\">  ┃　　　┃ + + + +</span><br><span class=\"line\">  ┃　　　┃　　　　Codes are far away from bugs with the animal protecting　　　</span><br><span class=\"line\">  ┃　　　┃ + 　　　　神兽保佑,代码无bug　　</span><br><span class=\"line\">  ┃　　　┃</span><br><span class=\"line\">  ┃　　　┃　　+　　　　　　　　　</span><br><span class=\"line\">  ┃　 　　┗━━━┓ + +</span><br><span class=\"line\">  ┃ 　　　　　　　┣┓</span><br><span class=\"line\">  ┃ 　　　　　　　┏┛</span><br><span class=\"line\">  ┗┓┓┏━┳┓┏┛ + + + +</span><br><span class=\"line\">   ┃┫┫　┃┫┫</span><br><span class=\"line\">   ┗┻┛　┗┻┛+ + + +</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"兔子\"><a href=\"#兔子\" class=\"headerlink\" title=\"兔子\"></a>兔子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**********&#x2F;**********&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;</span><br><span class=\"line\">  .--,       .--,</span><br><span class=\"line\"> ( (  \\.---.&#x2F;  ) )</span><br><span class=\"line\">  &#39;.__&#x2F;o   o\\__.&#39;</span><br><span class=\"line\">     &#123;&#x3D;  ^  &#x3D;&#125;</span><br><span class=\"line\">      &gt;  -  &lt;</span><br><span class=\"line\">     &#x2F;       \\</span><br><span class=\"line\">    &#x2F;&#x2F;       \\\\</span><br><span class=\"line\">   &#x2F;&#x2F;|   .   |\\\\</span><br><span class=\"line\">   &quot;&#39;\\       &#x2F;&#39;&quot;_.-~^&#96;&#39;-.</span><br><span class=\"line\">      \\  _  &#x2F;--&#39;         &#96;</span><br><span class=\"line\">    ___)( )(___</span><br><span class=\"line\">   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**********&#x2F;**********&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;&#x2F;**********&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"顶\"><a href=\"#顶\" class=\"headerlink\" title=\"顶\"></a>顶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class=\"line\"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class=\"line\"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class=\"line\"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class=\"line\"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class=\"line\"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"妹子\"><a href=\"#妹子\" class=\"headerlink\" title=\"妹子\"></a>妹子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;                       .::::.</span><br><span class=\"line\">&#x2F;&#x2F;                     .::::::::.</span><br><span class=\"line\">&#x2F;&#x2F;                    :::::::::::</span><br><span class=\"line\">&#x2F;&#x2F;                 ..:::::::::::&#39;</span><br><span class=\"line\">&#x2F;&#x2F;              &#39;::::::::::::&#39;</span><br><span class=\"line\">&#x2F;&#x2F;                .::::::::::</span><br><span class=\"line\">&#x2F;&#x2F;           &#39;::::::::::::::..</span><br><span class=\"line\">&#x2F;&#x2F;                ..::::::::::::.</span><br><span class=\"line\">&#x2F;&#x2F;              &#96;&#96;::::::::::::::::</span><br><span class=\"line\">&#x2F;&#x2F;               ::::&#96;&#96;:::::::::&#39;        .:::.</span><br><span class=\"line\">&#x2F;&#x2F;              ::::&#39;   &#39;:::::&#39;       .::::::::.</span><br><span class=\"line\">&#x2F;&#x2F;            .::::&#39;      ::::     .:::::::&#39;::::.</span><br><span class=\"line\">&#x2F;&#x2F;           .:::&#39;       :::::  .:::::::::&#39; &#39;:::::.</span><br><span class=\"line\">&#x2F;&#x2F;          .::&#39;        :::::.:::::::::&#39;      &#39;:::::.</span><br><span class=\"line\">&#x2F;&#x2F;         .::&#39;         ::::::::::::::&#39;         &#96;&#96;::::.</span><br><span class=\"line\">&#x2F;&#x2F;     ...:::           ::::::::::::&#39;              &#96;&#96;::.</span><br><span class=\"line\">&#x2F;&#x2F;    &#96;&#96;&#96;&#96;&#39;:.          &#39;:::::::::&#39;                  ::::..</span><br><span class=\"line\">&#x2F;&#x2F;                       &#39;.:::::&#39;                    &#39;:&#39;&#96;&#96;&#96;&#96;..</span><br><span class=\"line\">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"神兽小龙\"><a href=\"#神兽小龙\" class=\"headerlink\" title=\"神兽小龙\"></a>神兽小龙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                                  __----~~~~~~~~~~~------___</span><br><span class=\"line\">                                 .  .   ~~//====......          __--~ ~~</span><br><span class=\"line\">                  -.            \\_|//     |||\\\\  ~~~~~~::::... /~</span><br><span class=\"line\">               ___-==_       _-~o~  \\/    |||  \\\\            _/~~-</span><br><span class=\"line\">       __---~~~.==~||\\=_    -_--~/_-~|-   |\\\\   \\\\        _/~</span><br><span class=\"line\">   _-~~     .=~    |  \\\\-_    <span class=\"string\">'-~7  /-   /  ||    \\      /</span></span><br><span class=\"line\"><span class=\"string\"> .~       .~       |   \\\\ -_    /  /-   /   ||      \\   /</span></span><br><span class=\"line\"><span class=\"string\">/  ____  /         |     \\\\ ~-_/  /|- _/   .||       \\ /</span></span><br><span class=\"line\"><span class=\"string\">|~~    ~~|--~~~~--_ \\     ~==-/   | \\~--===~~        .\\</span></span><br><span class=\"line\"><span class=\"string\">          '</span>         ~-|      /|    |-~\\~~       __--~~</span><br><span class=\"line\">                      |-~~-_/ |    |   ~\\_   _-~            /\\</span><br><span class=\"line\">                           /  \\     \\__   \\/~                \\__</span><br><span class=\"line\">                       _--~ _/ | .-~~____--~-/                  ~~==.</span><br><span class=\"line\">                      ((-&gt;/~   <span class=\"string\">'.|||'</span> -_|    ~~-/ ,              . _||</span><br><span class=\"line\">                                 -_     ~\\      ~~---l__i__i__i--~~_/</span><br><span class=\"line\">                                 _-~-__   ~)  \\--______________--~~</span><br><span class=\"line\">                               //.-~~~-~_--~- |-------~~~~~~~~</span><br><span class=\"line\">                                      //.-~~~--\\</span><br><span class=\"line\"></span><br><span class=\"line\">                                神兽保佑   代码无BUG!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"电脑\"><a href=\"#电脑\" class=\"headerlink\" title=\"电脑\"></a>电脑</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     ,----------------,              ,---------,</span><br><span class=\"line\">        ,-----------------------,          ,&quot;        ,&quot;|</span><br><span class=\"line\">      ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |</span><br><span class=\"line\">     +-----------------------+  |      ,&quot;        ,&quot;    |</span><br><span class=\"line\">     |  .-----------------.  |  |     +---------+      |</span><br><span class=\"line\">     |  |                 |  |  |     | -&#x3D;&#x3D;----&#39;|      |</span><br><span class=\"line\">     |  |  I LOVE DOS!    |  |  |     |         |      |</span><br><span class=\"line\">     |  |  Bad command or |  |  |&#x2F;----|&#96;---&#x3D;    |      |</span><br><span class=\"line\">     |  |  C:\\&gt;_          |  |  |   ,&#x2F;|&#x3D;&#x3D;&#x3D;&#x3D; ooo |      ;</span><br><span class=\"line\">     |  |                 |  |  |  &#x2F;&#x2F; |(((( [33]|    ,&quot;</span><br><span class=\"line\">     |  &#96;-----------------&#39;  |,&quot; .;&#39;| |((((     |  ,&quot;</span><br><span class=\"line\">     +-----------------------+  ;;  | |         |,&quot;</span><br><span class=\"line\">        &#x2F;_)______________(_&#x2F;  &#x2F;&#x2F;&#39;   | +---------+</span><br><span class=\"line\">   ___________________________&#x2F;___  &#96;,</span><br><span class=\"line\">  &#x2F;  oooooooooooooooo  .o.  oooo &#x2F;,   \\,&quot;-----------</span><br><span class=\"line\"> &#x2F; &#x3D;&#x3D;ooooooooooooooo&#x3D;&#x3D;.o.  ooo&#x3D; &#x2F;&#x2F;   ,&#96;\\--&#123;)B     ,&quot;</span><br><span class=\"line\">&#x2F;_&#x3D;&#x3D;__&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;__&#x3D;&#x3D;_ooo__ooo&#x3D;_&#x2F;&#39;   &#x2F;___________,&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span><br><span class=\"line\">            __.&#39;              ~.   .~              &#96;.__</span><br><span class=\"line\">          .&#39;&#x2F;&#x2F;                  \\.&#x2F;                  \\\\&#96;.</span><br><span class=\"line\">        .&#39;&#x2F;&#x2F;                     |                     \\\\&#96;.</span><br><span class=\"line\">      .&#39;&#x2F;&#x2F; .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\\\&#96;.</span><br><span class=\"line\">    .&#39;&#x2F;&#x2F;.-&quot;                 &#96;-.  |  .-&#39;                 &quot;-.\\\\&#96;.</span><br><span class=\"line\">  .&#39;&#x2F;&#x2F;______.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-..   \\ | &#x2F;   ..-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;.______\\\\&#96;.</span><br><span class=\"line\">.&#39;______________________________\\|&#x2F;______________________________&#96;.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"键盘\"><a href=\"#键盘\" class=\"headerlink\" title=\"键盘\"></a>键盘</h4><p>宽度有点窄，变形了……</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class=\"line\"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P&#x2F;S│S L│P&#x2F;B│  ┌┐    ┌┐    ┌┐</span><br><span class=\"line\"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class=\"line\"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class=\"line\"> * │~ &#96;│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ &#x3D;│ BacSp │ │Ins│Hom│PUp│ │N L│ &#x2F; │ * │ - │</span><br><span class=\"line\"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class=\"line\"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class=\"line\"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class=\"line\"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class=\"line\"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class=\"line\"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? &#x2F;│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class=\"line\"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class=\"line\"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class=\"line\"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"剪刀手\"><a href=\"#剪刀手\" class=\"headerlink\" title=\"剪刀手\"></a>剪刀手</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                      d*<span class=\"comment\">##$.</span></span><br><span class=\"line\"> zP<span class=\"string\">\"\"</span><span class=\"string\">\"\"</span><span class=\"string\">\"<span class=\"variable\">$e</span>.           $\"</span>    <span class=\"variable\">$o</span></span><br><span class=\"line\">4$       <span class=\"string\">'$          $\"      $</span></span><br><span class=\"line\"><span class=\"string\">'</span>$        <span class=\"string\">'$        J$       $F</span></span><br><span class=\"line\"><span class=\"string\"> '</span>b        <span class=\"variable\">$k</span>       $&gt;       $</span><br><span class=\"line\">  <span class=\"variable\">$k</span>        <span class=\"variable\">$r</span>     J$       d$</span><br><span class=\"line\">  <span class=\"string\">'$         $     $\"       $~</span></span><br><span class=\"line\"><span class=\"string\">   '</span>$        <span class=\"string\">\"$   '<span class=\"variable\">$E</span>       $</span></span><br><span class=\"line\"><span class=\"string\">    $         <span class=\"variable\">$L</span>   $\"</span>      <span class=\"variable\">$F</span> ...</span><br><span class=\"line\">     $.       4B   $      $$$*<span class=\"string\">\"\"</span><span class=\"string\">\"*b</span></span><br><span class=\"line\"><span class=\"string\">    '$        $.  $$     $$      <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">      \"</span>$       R$  <span class=\"variable\">$F</span>     $<span class=\"string\">\"      $</span></span><br><span class=\"line\"><span class=\"string\">       <span class=\"variable\">$k</span>      ?$ u*     dF      .$</span></span><br><span class=\"line\"><span class=\"string\">       ^$.      $$\"</span>     z$      u$$$<span class=\"variable\">$e</span></span><br><span class=\"line\">       <span class=\"comment\">#$b             $E.dW@e$\"    ?$</span></span><br><span class=\"line\">         <span class=\"comment\">#$           .o$$# d$$$$c    ?F</span></span><br><span class=\"line\">         $      .d$<span class=\"variable\">$#</span><span class=\"string\">\" . zo$&gt;   #<span class=\"variable\">$r</span> .uF</span></span><br><span class=\"line\"><span class=\"string\">          <span class=\"variable\">$L</span> .u$*\"</span>      $&amp;$$<span class=\"variable\">$k</span>   .$<span class=\"variable\">$d</span>$<span class=\"variable\">$F</span></span><br><span class=\"line\">           $$<span class=\"string\">\"            \"</span><span class=\"string\">\"^\"</span>$$<span class=\"variable\">$P</span><span class=\"string\">\"<span class=\"variable\">$P9</span>$</span></span><br><span class=\"line\"><span class=\"string\">          JP              .o$$$<span class=\"variable\">$u</span>:<span class=\"variable\">$P</span> $$</span></span><br><span class=\"line\"><span class=\"string\">          $          ..ue$\"</span>      <span class=\"string\">\"\"</span>  $<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">         d$          <span class=\"variable\">$F</span>              $</span></span><br><span class=\"line\"><span class=\"string\">         $$     ....udE             4B</span></span><br><span class=\"line\"><span class=\"string\">          #$    \"</span><span class=\"string\">\"\"</span><span class=\"string\">\"` <span class=\"variable\">$r</span>            @$</span></span><br><span class=\"line\"><span class=\"string\">           ^<span class=\"variable\">$L</span>        '$            <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">             RN        4N           $</span></span><br><span class=\"line\"><span class=\"string\">              *<span class=\"variable\">$b</span>                  d$</span></span><br><span class=\"line\"><span class=\"string\">               $<span class=\"variable\">$k</span>                 <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">               $<span class=\"variable\">$b</span>                <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">                 $\"</span><span class=\"string\">\"               <span class=\"variable\">$F</span></span></span><br><span class=\"line\"><span class=\"string\">                 '$                $</span></span><br><span class=\"line\"><span class=\"string\">                  <span class=\"variable\">$L</span>               $</span></span><br><span class=\"line\"><span class=\"string\">                  '$               $</span></span><br><span class=\"line\"><span class=\"string\">                   $               $</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"龙图腾\"><a href=\"#龙图腾\" class=\"headerlink\" title=\"龙图腾\"></a>龙图腾</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......................................&amp;&amp;.........................</span><br><span class=\"line\">....................................&amp;&amp;&amp;..........................</span><br><span class=\"line\">.................................&amp;&amp;&amp;&amp;............................</span><br><span class=\"line\">...............................&amp;&amp;&amp;&amp;..............................</span><br><span class=\"line\">.............................&amp;&amp;&amp;&amp;&amp;&amp;..............................</span><br><span class=\"line\">...........................&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;........</span><br><span class=\"line\">..................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............</span><br><span class=\"line\">................&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................</span><br><span class=\"line\">.......................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........</span><br><span class=\"line\">...................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...............</span><br><span class=\"line\">..................&amp;&amp;&amp;   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">...............&amp;&amp;&amp;&amp;&amp;@  &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........</span><br><span class=\"line\">..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.&amp;&amp;....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;.........</span><br><span class=\"line\">..........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;........</span><br><span class=\"line\">........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;.......</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;......</span><br><span class=\"line\">........&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.............</span><br><span class=\"line\">..........&amp;...................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">..................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">...........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;......&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;&amp;&amp;&amp;............</span><br><span class=\"line\">......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;...............&amp;&amp;&amp;.............</span><br><span class=\"line\">.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............................&amp;&amp;..............</span><br><span class=\"line\">....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;...........................</span><br><span class=\"line\">...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;......................</span><br><span class=\"line\">...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.&amp;&amp;&amp;........................&amp;&amp;&amp;&amp;&amp;...................</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;..........................&amp;&amp;&amp;&amp;&amp;&amp;&amp;...............</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;............&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;.............</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........</span><br><span class=\"line\">..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........</span><br><span class=\"line\">..&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.......</span><br><span class=\"line\">...&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;......</span><br><span class=\"line\">....&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;....</span><br><span class=\"line\">.......&amp;&amp;&amp;&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;..........&amp;&amp;&amp;&amp;&amp;&amp;....</span><br><span class=\"line\">........&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;..&amp;&amp;&amp;&amp;...</span><br><span class=\"line\">.......&amp;&amp;&amp;........&amp;&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;&amp;&amp;...</span><br><span class=\"line\">.......&amp;&amp;&amp;...............&amp;&amp;&amp;&amp;&amp;&amp;&amp;.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............&amp;&amp;&amp;...</span><br><span class=\"line\">........&amp;&amp;...................&amp;&amp;&amp;&amp;&amp;&amp;.........................&amp;&amp;&amp;..</span><br><span class=\"line\">.........&amp;.....................&amp;&amp;&amp;&amp;........................&amp;&amp;....</span><br><span class=\"line\">...............................&amp;&amp;&amp;.......................&amp;&amp;......</span><br><span class=\"line\">................................&amp;&amp;......................&amp;&amp;.......</span><br><span class=\"line\">.................................&amp;&amp;..............................</span><br><span class=\"line\">..................................&amp;..............................</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七章：问题汇总\"><a href=\"#第七章：问题汇总\" class=\"headerlink\" title=\"第七章：问题汇总\"></a>第七章：问题汇总</h2><h3 id=\"1-禁止使用sudo-yum-update\"><a href=\"#1-禁止使用sudo-yum-update\" class=\"headerlink\" title=\"1. 禁止使用sudo yum update\"></a>1. 禁止使用sudo yum update</h3><p>起因是服务器更新了内核，CentOS从7.6升级到了7.7，输入<code>nvidia-smi</code>提示</p>\n<blockquote>\n<p>NVIDIA NVML Driver/library version mismatch</p>\n</blockquote>\n<p>在终端输入以下命令查看nvidia的kernel模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nvidia</span><br></pre></td></tr></table></figure>\n\n<p>什么都没有。</p>\n<p>接着查看显卡驱动所使用的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>Nothing！</p>\n<p>再查看nvcc编译器的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<p>提示：<strong>bash: nvcc: 未找到命令…</strong></p>\n<p>Nothing is everywhere！可能只能去现场启动<strong>重启大法</strong>了。</p>\n<ul>\n<li><p><strong>Notice：</strong></p>\n<p>如果运行<code>lsmod | grep nvidia</code>出现了类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia_uvm 634880 8</span><br><span class=\"line\">nvidia_drm 53248 0</span><br><span class=\"line\">nvidia_modeset 790528 1 nvidia_drm</span><br><span class=\"line\">nvidia 12312576 86 nvidia_modeset,nvidia_uvm</span><br></pre></td></tr></table></figure>\n\n<p>这样的输出，则先<strong>关闭相关的进程</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rmmod nvidia_uvm</span><br><span class=\"line\">sudo rmmod nvidia_modeset</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rmmod nvidia</span><br><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>此时可能会出现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NVIDIA-SMI has failed because it couldn<span class=\"string\">'t communicate with the NVIDIA driver</span></span><br></pre></td></tr></table></figure>\n\n<p>再看看<strong>NVIDIA显卡状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n\n<p>输出（查看集成显卡的命令是<code>lspci | grep -i VGA</code>）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)</span><br><span class=\"line\">04:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure>\n\n<p>正常。</p>\n<p><strong>查看系统依赖</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info dkms</span><br><span class=\"line\">yum info libvdpau </span><br><span class=\"line\">yum info kernel-devel</span><br></pre></td></tr></table></figure>\n\n<p>都已安装，若没有安装，执行<code>sudo yum install packages</code>，<code>packages</code>指的是缺省的包。</p>\n<p><strong>为内核安装NVIDIA模块</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dkms status</span><br></pre></td></tr></table></figure>\n\n<p>是否有输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/</span><br></pre></td></tr></table></figure>\n\n<p>看看NVIDIA有哪些版本，选择其中一个进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dkms install -m nvidia -v xxx.xx     // xxx.xx为/usr/src/下的NVIDIA的版本号</span><br></pre></td></tr></table></figure>\n\n<p>如果有多个版本，则挨个试试……</p>\n<p>非必要情况下，不要重启。</p>\n<p>继续尝试<code>nvidia-smi</code>命令，如果依旧不正常，继续探索。</p>\n</li>\n</ul>\n<h3 id=\"2-ImportError-libcublas-so-9-0\"><a href=\"#2-ImportError-libcublas-so-9-0\" class=\"headerlink\" title=\"2. ImportError: libcublas.so.9.0\"></a>2. ImportError: libcublas.so.9.0</h3><ul>\n<li><p><strong>错误</strong>——激活环境后，导入<code>import tensorflow as tf</code>包后，出现错误</p>\n<blockquote>\n<p>ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——cuda版本问题，cuda动态链接库没有与系统共享，可能是cuda安装过程中，环境变量<code>LD_LIBRARY_PATH</code>未能配置正确</p>\n</li>\n<li><p><strong>解决</strong>——<code>libcublas.so.9.0</code>文件在<code>/usr/local/cuda/lib64</code>路径下，将其动态链接库为系统共享即可，针对普通管理员用户，在终端运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ldconfig /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>\n\n<p>问题可能会被解决，如果出现了<strong>情况2</strong>，请看解答。</p>\n</li>\n</ul>\n<h3 id=\"3-libcublas-so-9-0-cannot-open-shared-object-file\"><a href=\"#3-libcublas-so-9-0-cannot-open-shared-object-file\" class=\"headerlink\" title=\"3. libcublas.so.9.0: cannot open shared object file\"></a>3. libcublas.so.9.0: cannot open shared object file</h3><ul>\n<li><p><strong>错误</strong>——运行<strong>情况1</strong>里的<code>sudo ldconfig /usr/local/cuda/lib64</code>后，出现错误</p>\n<blockquote>\n<p>libcublas.so.9.0: cannot open shared object file: No such file or directory</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——符号链接出错</p>\n</li>\n<li><p><strong>解决</strong>——创建软链接，将<code>libcudnn.so.7.0.5</code>软连接到<code>libcudnn.so.7</code>，如果<code>libcudnn.so.7.0.5</code>丢失，<code>libcudnn.so.7</code>将失效，<code>-s</code>表示建立软连接，<code>-f</code>表示强制执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sf /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7.0.5 /usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/libcudnn.so.7</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"4-安装PyTorch时中断安装\"><a href=\"#4-安装PyTorch时中断安装\" class=\"headerlink\" title=\"4. 安装PyTorch时中断安装\"></a>4. 安装PyTorch时中断安装</h3><ul>\n<li><p><strong>错误</strong>——在安装PyTorch过程中出现类似的错误</p>\n<blockquote>\n<p>CondaHTTPError: HTTP 000 CONNECTION FAILED for url <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.4.1-py36_py35_py27__9.0.176_7.1.2_2.tar.bz2</a><br>Elapsed: -</p>\n<p>An HTTP error occurred when trying to retrieve this URL.<br>HTTP errors are often intermittent, and a simple retry will get you on your way.</p>\n</blockquote>\n</li>\n<li><p><strong>原因</strong>——网络原因</p>\n</li>\n<li><p><strong>解决</strong>——<a href=\"#配置Anaconda国内开源镜像\">更换Anaconda源</a>或者继续尝试安装命令。</p>\n</li>\n</ul>\n<p>（未完待续，随时更新）</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://blog.csdn.net/ksws0292756/article/details/80120561?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\">stat cuda</a></li>\n<li><a href=\"https://blog.csdn.net/Hungryof/article/details/99233087?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2\">NVIDIA NVML Driver/library version mismatch</a></li>\n<li><a href=\"https://gist.github.com/fxrcode/0afa3c8db13f0ae0b427bb6ddc44adf4\">NVIDIA driver</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42451919/article/details/89400365\">NVIDIA驱动安装</a></li>\n<li><a href=\"https://qinqianshan.com/unix/linux/nvidia/\">https://qinqianshan.com/unix/linux/nvidia/</a></li>\n<li><a href=\"https://dinghow.site/2019/05/19/cuda-cuDNN-version/\">CUDA和cuDNN版本切换</a></li>\n<li><a href=\"https://oldpan.me/archives/cuda-cuDNN-multiple-edition\">切换GCC</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/35834028\">CUDA切换</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck99vmgjh0000mgvz5pfg6i0u","category_id":"ck99vmgjw0004mgvz9n9u7dos","_id":"ck99vmgkh000gmgvzaq6m6acs"},{"post_id":"ck99vmgjz0006mgvzewgpg8fi","category_id":"ck99vmgkh000fmgvzf5bga5rf","_id":"ck99vmgkn000qmgvzex6x9tiw"},{"post_id":"ck99vmgk00008mgvzfb360grf","category_id":"ck99vmgkl000nmgvz1ncvg6ju","_id":"ck99vmgko000umgvz13rze0w3"},{"post_id":"ck99vmgk2000amgvzcsa1eutj","category_id":"ck99vmgkl000nmgvz1ncvg6ju","_id":"ck99vmgkr000xmgvzcjw40m4v"},{"post_id":"ck99vmgjr0002mgvzc8nz3spe","category_id":"ck99vmgjw0004mgvz9n9u7dos","_id":"ck99vmgks0011mgvz7qxr87cn"},{"post_id":"ck99vmgjr0002mgvzc8nz3spe","category_id":"ck99vmgko000tmgvze8ixfr1y","_id":"ck99vmgks0013mgvzhodm9ozn"},{"post_id":"ck99vmguh001cmgvz6sre6c7t","category_id":"ck99vmgul001dmgvzcmpf74z8","_id":"ck99vmguo001gmgvzc83ybr8h"},{"post_id":"ck99vmgv1001nmgvz1p707u6n","category_id":"ck99vmgjw0004mgvz9n9u7dos","_id":"ck99vmgv2001pmgvz9pmz6h0w"},{"post_id":"ck99vmgv4001qmgvzdn3vcw1w","category_id":"ck99vmgjw0004mgvz9n9u7dos","_id":"ck99vmgv5001smgvzhpmhft1z"},{"post_id":"ck99vmgv7001umgvzewx5g0yj","category_id":"ck99vmgv9001wmgvz0jro1pve","_id":"ck99vmgvg001zmgvz8ve4dr4i"},{"post_id":"ck99vmgvn0026mgvzadgp6840","category_id":"ck99vmgjw0004mgvz9n9u7dos","_id":"ck99vmgvo0028mgvz4ova2q66"}],"PostTag":[{"post_id":"ck99vmgjh0000mgvz5pfg6i0u","tag_id":"ck99vmgjy0005mgvz74cdhu8e","_id":"ck99vmgkj000jmgvz7vt0b8e4"},{"post_id":"ck99vmgjh0000mgvz5pfg6i0u","tag_id":"ck99vmgk3000cmgvz0wfdcyew","_id":"ck99vmgkk000lmgvzec7ydojd"},{"post_id":"ck99vmgjr0002mgvzc8nz3spe","tag_id":"ck99vmgki000imgvzfabo7mx4","_id":"ck99vmgkr000wmgvz4r6tfbe0"},{"post_id":"ck99vmgjr0002mgvzc8nz3spe","tag_id":"ck99vmgkl000omgvzfrrt14h4","_id":"ck99vmgkr000ymgvzbh4196fd"},{"post_id":"ck99vmgjr0002mgvzc8nz3spe","tag_id":"ck99vmgkn000smgvz4aed6t82","_id":"ck99vmgks0010mgvzcsswhyzz"},{"post_id":"ck99vmgjz0006mgvzewgpg8fi","tag_id":"ck99vmgkq000vmgvz2f9th2ws","_id":"ck99vmgku0015mgvz8f4b3fts"},{"post_id":"ck99vmgjz0006mgvzewgpg8fi","tag_id":"ck99vmgkr000zmgvz7xq1fsq8","_id":"ck99vmgku0016mgvz3z2ce4qm"},{"post_id":"ck99vmgjz0006mgvzewgpg8fi","tag_id":"ck99vmgkl000omgvzfrrt14h4","_id":"ck99vmgku0018mgvz1bon5vj1"},{"post_id":"ck99vmgk00008mgvzfb360grf","tag_id":"ck99vmgkt0014mgvzf24w7y5g","_id":"ck99vmgku0019mgvz14ktbyf1"},{"post_id":"ck99vmgk2000amgvzcsa1eutj","tag_id":"ck99vmgku0017mgvzejh9c4ov","_id":"ck99vmgkv001amgvz13df5z9j"},{"post_id":"ck99vmguh001cmgvz6sre6c7t","tag_id":"ck99vmgum001emgvz8vwv5rek","_id":"ck99vmgup001jmgvze8vbb1r5"},{"post_id":"ck99vmguh001cmgvz6sre6c7t","tag_id":"ck99vmgun001fmgvz6tbcgtp1","_id":"ck99vmgup001kmgvz9sw68u7z"},{"post_id":"ck99vmguh001cmgvz6sre6c7t","tag_id":"ck99vmguo001hmgvzbomoflyr","_id":"ck99vmgup001lmgvz192709jm"},{"post_id":"ck99vmguh001cmgvz6sre6c7t","tag_id":"ck99vmgup001imgvz6o3tg27y","_id":"ck99vmgup001mmgvz5skzfvw5"},{"post_id":"ck99vmgv1001nmgvz1p707u6n","tag_id":"ck99vmgjy0005mgvz74cdhu8e","_id":"ck99vmgv2001omgvza52ve1t7"},{"post_id":"ck99vmgv4001qmgvzdn3vcw1w","tag_id":"ck99vmgv5001rmgvzcq20g5bq","_id":"ck99vmgv5001tmgvz3zti70u5"},{"post_id":"ck99vmgv7001umgvzewx5g0yj","tag_id":"ck99vmgvd001xmgvz7wmvafpx","_id":"ck99vmgvi0022mgvz7lf68iy9"},{"post_id":"ck99vmgv7001umgvzewx5g0yj","tag_id":"ck99vmgvf001ymgvzbk75g5ok","_id":"ck99vmgvi0023mgvzbr7h0cg2"},{"post_id":"ck99vmgv7001umgvzewx5g0yj","tag_id":"ck99vmgvg0020mgvz1t2e44is","_id":"ck99vmgvi0024mgvzfpga55re"},{"post_id":"ck99vmgv7001umgvzewx5g0yj","tag_id":"ck99vmgvh0021mgvz9l833hkg","_id":"ck99vmgvi0025mgvzhyaz4b64"},{"post_id":"ck99vmgvn0026mgvzadgp6840","tag_id":"ck99vmgv5001rmgvzcq20g5bq","_id":"ck99vmgvo0027mgvz4vdf72hz"}],"Tag":[{"name":"Lab","_id":"ck99vmgjy0005mgvz74cdhu8e"},{"name":"小技巧","_id":"ck99vmgk3000cmgvz0wfdcyew"},{"name":"TCP/IP","_id":"ck99vmgki000imgvzfabo7mx4"},{"name":"面试","_id":"ck99vmgkl000omgvzfrrt14h4"},{"name":"后端","_id":"ck99vmgkn000smgvz4aed6t82"},{"name":"线程","_id":"ck99vmgkq000vmgvz2f9th2ws"},{"name":"进程","_id":"ck99vmgkr000zmgvz7xq1fsq8"},{"name":"LeetCode - 动态规划 - Medium","_id":"ck99vmgkt0014mgvzf24w7y5g"},{"name":"字符串","_id":"ck99vmgku0017mgvzejh9c4ov"},{"name":"python","_id":"ck99vmgum001emgvz8vwv5rek"},{"name":"tensorflow","_id":"ck99vmgun001fmgvz6tbcgtp1"},{"name":"CNN","_id":"ck99vmguo001hmgvzbomoflyr"},{"name":"3D","_id":"ck99vmgup001imgvz6o3tg27y"},{"name":"Vim","_id":"ck99vmgv5001rmgvzcq20g5bq"},{"name":"CentOS","_id":"ck99vmgvd001xmgvz7wmvafpx"},{"name":"谷歌云","_id":"ck99vmgvf001ymgvzbk75g5ok"},{"name":"BBR加速","_id":"ck99vmgvg0020mgvz1t2e44is"},{"name":"SSR","_id":"ck99vmgvh0021mgvz9l833hkg"}]}}